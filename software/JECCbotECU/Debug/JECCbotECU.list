
JECCbotECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a780  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800a890  0800a890  0001a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac30  0800ac30  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac30  0800ac30  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac30  0800ac30  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac30  0800ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac34  0800ac34  0001ac34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800ac38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  2000034c  0800af84  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20001da4  0800af84  00021da4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba75  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003acc  00000000  00000000  0003bdea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001588  00000000  00000000  0003f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001420  00000000  00000000  00040e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a3d  00000000  00000000  00042260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012af6  00000000  00000000  0005ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079fd8  00000000  00000000  0006d793  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e776b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006618  00000000  00000000  000e77e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a878 	.word	0x0800a878

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800a878 	.word	0x0800a878

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <apiInit>:
bool apiWriteables[API_MEMORY_SIZE];

bool apiLocked;

void apiInit()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e00c      	b.n	8000b62 <apiInit+0x26>
	{
		apiMemory[i] = 0;
 8000b48:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <apiInit+0x40>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		apiWriteables[i] = true;
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <apiInit+0x44>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b68:	dbee      	blt.n	8000b48 <apiInit+0xc>
	}
	apiLocked = false;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <apiInit+0x48>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000820 	.word	0x20000820
 8000b80:	20000620 	.word	0x20000620
 8000b84:	2000061c 	.word	0x2000061c

08000b88 <apiDoInstruction>:

void apiDoInstruction(char *instruction, char *responseMessage)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	466b      	mov	r3, sp
 8000b94:	461d      	mov	r5, r3
	apiLocked = true;
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <apiDoInstruction+0x190>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
	int len = strlen(instruction)+1;
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fad7 	bl	8000150 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	char ins[len];
 8000ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000baa:	1e43      	subs	r3, r0, #1
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	f04f 0300 	mov.w	r3, #0
 8000bba:	f04f 0400 	mov.w	r4, #0
 8000bbe:	00d4      	lsls	r4, r2, #3
 8000bc0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000bc4:	00cb      	lsls	r3, r1, #3
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 0200 	mov.w	r2, #0
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	f04f 0400 	mov.w	r4, #0
 8000bd6:	00d4      	lsls	r4, r2, #3
 8000bd8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000bdc:	00cb      	lsls	r3, r1, #3
 8000bde:	4603      	mov	r3, r0
 8000be0:	3307      	adds	r3, #7
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	ebad 0d03 	sub.w	sp, sp, r3
 8000bea:	466b      	mov	r3, sp
 8000bec:	3300      	adds	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
	strcpy(ins, instruction);
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f007 fc07 	bl	8008408 <strcpy>

	if(':' == ins[0] && '\n' == ins[len - 2])
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b3a      	cmp	r3, #58	; 0x3a
 8000c00:	d17d      	bne.n	8000cfe <apiDoInstruction+0x176>
 8000c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c04:	3b02      	subs	r3, #2
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	5cd3      	ldrb	r3, [r2, r3]
 8000c0a:	2b0a      	cmp	r3, #10
 8000c0c:	d177      	bne.n	8000cfe <apiDoInstruction+0x176>
		uint8_t instructor;
		uint16_t address;



		strncpy(instructorStr, &ins[1], 2);
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	1c59      	adds	r1, r3, #1
 8000c12:	f107 0318 	add.w	r3, r7, #24
 8000c16:	2202      	movs	r2, #2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f007 fc0f 	bl	800843c <strncpy>
		instructorStr[2] = '\0';
 8000c1e:	2300      	movs	r3, #0
 8000c20:	76bb      	strb	r3, [r7, #26]
		strncpy(addressStr, &ins[3], 4);
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	1cd9      	adds	r1, r3, #3
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f007 fc05 	bl	800843c <strncpy>
		addressStr[4] = '\0';
 8000c32:	2300      	movs	r3, #0
 8000c34:	753b      	strb	r3, [r7, #20]


		instructor = strtol(instructorStr, NULL, 16);
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f008 fac0 	bl	80091c4 <strtol>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		address = strtol(addressStr, NULL, 16);
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2210      	movs	r2, #16
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 fab6 	bl	80091c4 <strtol>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	843b      	strh	r3, [r7, #32]


		if(address < API_MEMORY_SIZE)
 8000c5c:	8c3b      	ldrh	r3, [r7, #32]
 8000c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c62:	d246      	bcs.n	8000cf2 <apiDoInstruction+0x16a>
		{
			if(API_INSTRUCTION_READ == instructor)
 8000c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d10a      	bne.n	8000c82 <apiDoInstruction+0xfa>
			{
				sprintf(responseMessage, ":%04x%04x\n", address, apiMemory[address]);
 8000c6c:	8c39      	ldrh	r1, [r7, #32]
 8000c6e:	8c3b      	ldrh	r3, [r7, #32]
 8000c70:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <apiDoInstruction+0x194>)
 8000c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c76:	460a      	mov	r2, r1
 8000c78:	4929      	ldr	r1, [pc, #164]	; (8000d20 <apiDoInstruction+0x198>)
 8000c7a:	6838      	ldr	r0, [r7, #0]
 8000c7c:	f007 fba4 	bl	80083c8 <siprintf>
	{
 8000c80:	e042      	b.n	8000d08 <apiDoInstruction+0x180>
			}
			else if(API_INSTRUCTION_WRITE == instructor)
 8000c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	d12d      	bne.n	8000ce6 <apiDoInstruction+0x15e>
			{
				if(apiWriteables[address])
 8000c8a:	8c3b      	ldrh	r3, [r7, #32]
 8000c8c:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <apiDoInstruction+0x19c>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d022      	beq.n	8000cda <apiDoInstruction+0x152>
				{
					char valueStr[5];
					uint16_t value;

					strncpy(valueStr, &ins[7], 4);
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	1dd9      	adds	r1, r3, #7
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f007 fbcc 	bl	800843c <strncpy>
					valueStr[4] = '\0';
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	733b      	strb	r3, [r7, #12]

					value = strtol(valueStr, NULL, 16);
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	2210      	movs	r2, #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f008 fa87 	bl	80091c4 <strtol>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	83fb      	strh	r3, [r7, #30]

					apiMemory[address] = value;
 8000cba:	8c3b      	ldrh	r3, [r7, #32]
 8000cbc:	4917      	ldr	r1, [pc, #92]	; (8000d1c <apiDoInstruction+0x194>)
 8000cbe:	8bfa      	ldrh	r2, [r7, #30]
 8000cc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

					sprintf(responseMessage, ":%04x%04x\n", address, apiMemory[address]);
 8000cc4:	8c39      	ldrh	r1, [r7, #32]
 8000cc6:	8c3b      	ldrh	r3, [r7, #32]
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <apiDoInstruction+0x194>)
 8000cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cce:	460a      	mov	r2, r1
 8000cd0:	4913      	ldr	r1, [pc, #76]	; (8000d20 <apiDoInstruction+0x198>)
 8000cd2:	6838      	ldr	r0, [r7, #0]
 8000cd4:	f007 fb78 	bl	80083c8 <siprintf>
	{
 8000cd8:	e016      	b.n	8000d08 <apiDoInstruction+0x180>
				}
				else
				{
					sprintf(responseMessage, ":e%04x\n", API_ERROR_ACCESS_DENIED);
 8000cda:	2203      	movs	r2, #3
 8000cdc:	4912      	ldr	r1, [pc, #72]	; (8000d28 <apiDoInstruction+0x1a0>)
 8000cde:	6838      	ldr	r0, [r7, #0]
 8000ce0:	f007 fb72 	bl	80083c8 <siprintf>
	{
 8000ce4:	e010      	b.n	8000d08 <apiDoInstruction+0x180>
				}
			}
			else
			{
				sprintf(responseMessage, ":e%04x\n", API_ERROR_WRONG_INSTRUCTOR);
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	490f      	ldr	r1, [pc, #60]	; (8000d28 <apiDoInstruction+0x1a0>)
 8000cea:	6838      	ldr	r0, [r7, #0]
 8000cec:	f007 fb6c 	bl	80083c8 <siprintf>
	{
 8000cf0:	e00a      	b.n	8000d08 <apiDoInstruction+0x180>
			}
		}
		else
		{
			sprintf(responseMessage, ":e%04x\n", API_ERROR_INVALID_ADDRESS);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <apiDoInstruction+0x1a0>)
 8000cf6:	6838      	ldr	r0, [r7, #0]
 8000cf8:	f007 fb66 	bl	80083c8 <siprintf>
	{
 8000cfc:	e004      	b.n	8000d08 <apiDoInstruction+0x180>
		}

	}
	else
	{
		sprintf(responseMessage, ":e%04x\n", API_ERROR_WRONG_FORMAT);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4909      	ldr	r1, [pc, #36]	; (8000d28 <apiDoInstruction+0x1a0>)
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f007 fb60 	bl	80083c8 <siprintf>
	}
	apiLocked = false;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <apiDoInstruction+0x190>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	46ad      	mov	sp, r5
}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bdb0      	pop	{r4, r5, r7, pc}
 8000d18:	2000061c 	.word	0x2000061c
 8000d1c:	20000820 	.word	0x20000820
 8000d20:	0800a890 	.word	0x0800a890
 8000d24:	20000620 	.word	0x20000620
 8000d28:	0800a89c 	.word	0x0800a89c

08000d2c <isApiAddressValid>:

bool isApiAddressValid(int address)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	if(address > 0 && address < API_MEMORY_SIZE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	dd05      	ble.n	8000d46 <isApiAddressValid+0x1a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d40:	da01      	bge.n	8000d46 <isApiAddressValid+0x1a>
	{
		return true;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <isApiAddressValid+0x1c>
	}
	else
	{
		return false;
 8000d46:	2300      	movs	r3, #0
	}
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <apiWrite32>:

	return val;
}

bool apiWrite32(int address, int32_t value)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	if(isApiAddressValid(address))
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffe4 	bl	8000d2c <isApiAddressValid>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <apiWrite32+0x26>
	{
		memcpy(&apiMemory[address], &value, 4);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <apiWrite32+0x30>)
 8000d70:	4413      	add	r3, r2
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	601a      	str	r2, [r3, #0]
		return true;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <apiWrite32+0x28>
	}
	else
	{
		return false;
 8000d7a:	2300      	movs	r3, #0
	}
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000820 	.word	0x20000820

08000d88 <apiRead32>:

int32_t apiRead32(int address)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	int32_t val = -1;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d94:	60fb      	str	r3, [r7, #12]

	if(isApiAddressValid(address))
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffc8 	bl	8000d2c <isApiAddressValid>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <apiRead32+0x26>
	{
		memcpy(&val, &apiMemory[address], 4);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <apiRead32+0x30>)
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
	}

	return val;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000820 	.word	0x20000820

08000dbc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_UART_RxCpltCallback+0x44>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d102      	bne.n	8000dd6 <HAL_UART_RxCpltCallback+0x1a>
	{
		kvhDecode();
 8000dd0:	f000 fc7e 	bl	80016d0 <kvhDecode>
	}
	else if(huart->Instance == huart3.Instance)
	{
		gpsDecode();
	}
}
 8000dd4:	e010      	b.n	8000df8 <HAL_UART_RxCpltCallback+0x3c>
	else if(huart->Instance == huart2.Instance)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_UART_RxCpltCallback+0x48>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d102      	bne.n	8000de8 <HAL_UART_RxCpltCallback+0x2c>
		lidarDecode();
 8000de2:	f000 fb43 	bl	800146c <lidarDecode>
}
 8000de6:	e007      	b.n	8000df8 <HAL_UART_RxCpltCallback+0x3c>
	else if(huart->Instance == huart3.Instance)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_UART_RxCpltCallback+0x4c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d101      	bne.n	8000df8 <HAL_UART_RxCpltCallback+0x3c>
		gpsDecode();
 8000df4:	f000 fce2 	bl	80017bc <gpsDecode>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000e00 	.word	0x20000e00
 8000e04:	20000e58 	.word	0x20000e58
 8000e08:	20000c64 	.word	0x20000c64

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f001 f8e8 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f846 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fa1e 	bl	8001258 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000e1c:	f006 fdf0 	bl	8007a00 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000e20:	f000 f9c6 	bl	80011b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e24:	f000 f898 	bl	8000f58 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e28:	f000 f8c4 	bl	8000fb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e2c:	f000 f93c 	bl	80010a8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e30:	f000 f994 	bl	800115c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e34:	f000 f9e6 	bl	8001204 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  apiInit();
 8000e38:	f7ff fe80 	bl	8000b3c <apiInit>

  powertrainInit();
 8000e3c:	f000 fa78 	bl	8001330 <powertrainInit>

  lidarInit();
 8000e40:	f000 faf2 	bl	8001428 <lidarInit>

  kvhInit();
 8000e44:	f000 fbe0 	bl	8001608 <kvhInit>

  gpsInit();
 8000e48:	f000 fcaa 	bl	80017a0 <gpsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(API_STATE_JOYDRIVE == apiMemory[API_REG_STATE])
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <main+0x88>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d109      	bne.n	8000e68 <main+0x5c>
	  {
		  powertrainSetSpeeds(apiMemory[API_REG_PWMLEFT], apiMemory[API_REG_PWMRIGHT]);
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <main+0x88>)
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <main+0x88>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	4610      	mov	r0, r2
 8000e64:	f000 fa9a 	bl	800139c <powertrainSetSpeeds>
	  }

	  dummy = apiRead32(API_BENCH_GPS_START);//(apiMemory[API_BENCH_GPS_START] << 16 ) | apiMemory[API_BENCH_GPS_START + 1];
 8000e68:	f240 1079 	movw	r0, #377	; 0x179
 8000e6c:	f7ff ff8c 	bl	8000d88 <apiRead32>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <main+0x8c>)
 8000e76:	601a      	str	r2, [r3, #0]

	  memcpy(&d1, &apiMemory[API_BENCH_GPS_START + 2], 4);
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <main+0x88>)
 8000e7a:	f8d3 32f6 	ldr.w	r3, [r3, #758]	; 0x2f6
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <main+0x90>)
 8000e82:	601a      	str	r2, [r3, #0]
	  memcpy(&d2, &apiMemory[API_BENCH_GPS_START + 4], 4);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <main+0x88>)
 8000e86:	f8d3 32fa 	ldr.w	r3, [r3, #762]	; 0x2fa
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <main+0x94>)
 8000e8e:	601a      	str	r2, [r3, #0]
	  if(API_STATE_JOYDRIVE == apiMemory[API_REG_STATE])
 8000e90:	e7dc      	b.n	8000e4c <main+0x40>
 8000e92:	bf00      	nop
 8000e94:	20000820 	.word	0x20000820
 8000e98:	20000e54 	.word	0x20000e54
 8000e9c:	20000cf8 	.word	0x20000cf8
 8000ea0:	20000e48 	.word	0x20000e48

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f007 fa7f 	bl	80083b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fbf6 	bl	80036ec <HAL_RCC_OscConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f06:	f000 fda7 	bl	8001a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2102      	movs	r1, #2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fe60 	bl	8003bec <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f32:	f000 fd91 	bl	8001a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f36:	2310      	movs	r3, #16
 8000f38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 ffef 	bl	8003f24 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f4c:	f000 fd84 	bl	8001a58 <Error_Handler>
  }
}
 8000f50:	bf00      	nop
 8000f52:	3750      	adds	r7, #80	; 0x50
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <MX_I2C1_Init+0x54>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x58>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f96:	f001 fb9f 	bl	80026d8 <HAL_I2C_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f000 fd5a 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000ca4 	.word	0x20000ca4
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	000186a0 	.word	0x000186a0

08000fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000fd8:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <MX_TIM3_Init+0xf0>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x7fff;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000fea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <MX_TIM3_Init+0xec>)
 8000ffe:	f003 f847 	bl	8004090 <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 fd26 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4619      	mov	r1, r3
 800101a:	4821      	ldr	r0, [pc, #132]	; (80010a0 <MX_TIM3_Init+0xec>)
 800101c:	f003 fb6a 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001026:	f000 fd17 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_TIM3_Init+0xec>)
 8001042:	f003 f883 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800104c:	f000 fd04 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2204      	movs	r2, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_TIM3_Init+0xec>)
 8001058:	f003 f878 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001062:	f000 fcf9 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2208      	movs	r2, #8
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_TIM3_Init+0xec>)
 800106e:	f003 f86d 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001078:	f000 fcee 	bl	8001a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	220c      	movs	r2, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_TIM3_Init+0xec>)
 8001084:	f003 f862 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800108e:	f000 fce3 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MX_TIM3_Init+0xec>)
 8001094:	f000 fd88 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000dc0 	.word	0x20000dc0
 80010a4:	40000400 	.word	0x40000400

080010a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_TIM4_Init+0xac>)
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <MX_TIM4_Init+0xb0>)
 80010ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010d0:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_TIM4_Init+0xac>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_TIM4_Init+0xac>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_TIM4_Init+0xac>)
 80010de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <MX_TIM4_Init+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM4_Init+0xac>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM4_Init+0xac>)
 80010f2:	f002 ffcd 	bl	8004090 <HAL_TIM_PWM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80010fc:	f000 fcac 	bl	8001a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_TIM4_Init+0xac>)
 8001110:	f003 faf0 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800111a:	f000 fc9d 	bl	8001a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 8001122:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2208      	movs	r2, #8
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM4_Init+0xac>)
 8001138:	f003 f808 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001142:	f000 fc89 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM4_Init+0xac>)
 8001148:	f000 fd2e 	bl	8001ba8 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000c24 	.word	0x20000c24
 8001158:	40000800 	.word	0x40000800

0800115c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_USART1_UART_Init+0x50>)
 8001164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001168:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800116c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001182:	220c      	movs	r2, #12
 8001184:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_USART1_UART_Init+0x4c>)
 8001194:	f003 faf2 	bl	800477c <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800119e:	f000 fc5b 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000e00 	.word	0x20000e00
 80011ac:	40013800 	.word	0x40013800

080011b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_USART2_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART2_UART_Init+0x4c>)
 80011e8:	f003 fac8 	bl	800477c <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f000 fc31 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000e58 	.word	0x20000e58
 8001200:	40004400 	.word	0x40004400

08001204 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_USART3_UART_Init+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 8001210:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001214:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART3_UART_Init+0x4c>)
 800123c:	f003 fa9e 	bl	800477c <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001246:	f000 fc07 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000c64 	.word	0x20000c64
 8001254:	40004800 	.word	0x40004800

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_GPIO_Init+0xcc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a2c      	ldr	r2, [pc, #176]	; (8001324 <MX_GPIO_Init+0xcc>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_GPIO_Init+0xcc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_GPIO_Init+0xcc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <MX_GPIO_Init+0xcc>)
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_GPIO_Init+0xcc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_GPIO_Init+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a20      	ldr	r2, [pc, #128]	; (8001324 <MX_GPIO_Init+0xcc>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_GPIO_Init+0xcc>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_GPIO_Init+0xcc>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <MX_GPIO_Init+0xcc>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_GPIO_Init+0xcc>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	4815      	ldr	r0, [pc, #84]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012d4:	f001 f9e8 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INH34_Pin|INH12_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2130      	movs	r1, #48	; 0x30
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <MX_GPIO_Init+0xd4>)
 80012de:	f001 f9e3 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ONBOARD_Pin */
  GPIO_InitStruct.Pin = LED_ONBOARD_Pin;
 80012e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_ONBOARD_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_GPIO_Init+0xd0>)
 80012fc:	f001 f87a 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INH34_Pin INH12_Pin */
  GPIO_InitStruct.Pin = INH34_Pin|INH12_Pin;
 8001300:	2330      	movs	r3, #48	; 0x30
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0xd4>)
 8001318:	f001 f86c 	bl	80023f4 <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	40011000 	.word	0x40011000
 800132c:	40010800 	.word	0x40010800

08001330 <powertrainInit>:

/* USER CODE BEGIN 4 */
void powertrainInit()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001334:	2100      	movs	r1, #0
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <powertrainInit+0x38>)
 8001338:	f002 fed6 	bl	80040e8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800133c:	2104      	movs	r1, #4
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <powertrainInit+0x38>)
 8001340:	f002 fed2 	bl	80040e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001344:	2108      	movs	r1, #8
 8001346:	4808      	ldr	r0, [pc, #32]	; (8001368 <powertrainInit+0x38>)
 8001348:	f002 fece 	bl	80040e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800134c:	210c      	movs	r1, #12
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <powertrainInit+0x38>)
 8001350:	f002 feca 	bl	80040e8 <HAL_TIM_PWM_Start>

	powertrainEnableMotors(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 f809 	bl	800136c <powertrainEnableMotors>

	powertrainSetSpeeds(0, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f000 f81d 	bl	800139c <powertrainSetSpeeds>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000dc0 	.word	0x20000dc0

0800136c <powertrainEnableMotors>:


void powertrainEnableMotors(int enableState)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(INH12_GPIO_Port, INH12_Pin, enableState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	2120      	movs	r1, #32
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <powertrainEnableMotors+0x2c>)
 800137e:	f001 f993 	bl	80026a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH34_GPIO_Port, INH34_Pin, enableState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	2110      	movs	r1, #16
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <powertrainEnableMotors+0x2c>)
 800138c:	f001 f98c 	bl	80026a8 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010800 	.word	0x40010800

0800139c <powertrainSetSpeeds>:

void powertrainSetSpeeds(int16_t left, int16_t right)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	80bb      	strh	r3, [r7, #4]
	if(left < 0)
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da0d      	bge.n	80013d0 <powertrainSetSpeeds+0x34>
	{
		left = -left;
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	425b      	negs	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	80fb      	strh	r3, [r7, #6]
		htim3.Instance->CCR3 = 0;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <powertrainSetSpeeds+0x88>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = left;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <powertrainSetSpeeds+0x88>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
 80013ce:	e008      	b.n	80013e2 <powertrainSetSpeeds+0x46>
	}
	else
	{
		htim3.Instance->CCR3 = left;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <powertrainSetSpeeds+0x88>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <powertrainSetSpeeds+0x88>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(right < 0)
 80013e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da0d      	bge.n	8001406 <powertrainSetSpeeds+0x6a>
	{
		right = -right;
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	425b      	negs	r3, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	80bb      	strh	r3, [r7, #4]
		htim3.Instance->CCR1 = 0;
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <powertrainSetSpeeds+0x88>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = right;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <powertrainSetSpeeds+0x88>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001402:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		htim3.Instance->CCR1 = right;
		htim3.Instance->CCR2 = 0;
	}
}
 8001404:	e008      	b.n	8001418 <powertrainSetSpeeds+0x7c>
		htim3.Instance->CCR1 = right;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <powertrainSetSpeeds+0x88>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <powertrainSetSpeeds+0x88>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000dc0 	.word	0x20000dc0

08001428 <lidarInit>:

void lidarInit()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	char lidarInitStr[2] = { 0xa5, 0x20 };
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <lidarInit+0x34>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	80bb      	strh	r3, [r7, #4]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001434:	2108      	movs	r1, #8
 8001436:	480a      	ldr	r0, [pc, #40]	; (8001460 <lidarInit+0x38>)
 8001438:	f002 fe56 	bl	80040e8 <HAL_TIM_PWM_Start>
	HAL_UART_Transmit(&huart2, lidarInitStr, 2, 1000);
 800143c:	1d39      	adds	r1, r7, #4
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	2202      	movs	r2, #2
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <lidarInit+0x3c>)
 8001446:	f003 f9e6 	bl	8004816 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, lidarReceiveBuffer, 7);
 800144a:	2207      	movs	r2, #7
 800144c:	4906      	ldr	r1, [pc, #24]	; (8001468 <lidarInit+0x40>)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <lidarInit+0x3c>)
 8001450:	f003 fa7a 	bl	8004948 <HAL_UART_Receive_IT>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	0800a8a4 	.word	0x0800a8a4
 8001460:	20000c24 	.word	0x20000c24
 8001464:	20000e58 	.word	0x20000e58
 8001468:	20000e40 	.word	0x20000e40

0800146c <lidarDecode>:

void lidarDecode()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
	static int lidarState = LIDAR_STATE_INIT;

	int quality, s, sinv, c, angle, distance;

	if(lidarState == LIDAR_STATE_INIT)
 8001472:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <lidarDecode+0x188>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d12a      	bne.n	80014d0 <lidarDecode+0x64>
	{
		if(0xa5 == lidarReceiveBuffer[0] && 0x5a == lidarReceiveBuffer[1] && 0x05 == lidarReceiveBuffer[2] && 0x00 == lidarReceiveBuffer[3] && 0x00 == lidarReceiveBuffer[4] && 0x40 == lidarReceiveBuffer[5] && 0x81 == lidarReceiveBuffer[6])
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <lidarDecode+0x18c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2ba5      	cmp	r3, #165	; 0xa5
 8001480:	d120      	bne.n	80014c4 <lidarDecode+0x58>
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <lidarDecode+0x18c>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	2b5a      	cmp	r3, #90	; 0x5a
 8001488:	d11c      	bne.n	80014c4 <lidarDecode+0x58>
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <lidarDecode+0x18c>)
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d118      	bne.n	80014c4 <lidarDecode+0x58>
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <lidarDecode+0x18c>)
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d114      	bne.n	80014c4 <lidarDecode+0x58>
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <lidarDecode+0x18c>)
 800149c:	791b      	ldrb	r3, [r3, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d110      	bne.n	80014c4 <lidarDecode+0x58>
 80014a2:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <lidarDecode+0x18c>)
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	2b40      	cmp	r3, #64	; 0x40
 80014a8:	d10c      	bne.n	80014c4 <lidarDecode+0x58>
 80014aa:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <lidarDecode+0x18c>)
 80014ac:	799b      	ldrb	r3, [r3, #6]
 80014ae:	2b81      	cmp	r3, #129	; 0x81
 80014b0:	d108      	bne.n	80014c4 <lidarDecode+0x58>
		{
			lidarState = LIDAR_STATE_SCAN;
 80014b2:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <lidarDecode+0x188>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, lidarReceiveBuffer, 5);
 80014b8:	2205      	movs	r2, #5
 80014ba:	494f      	ldr	r1, [pc, #316]	; (80015f8 <lidarDecode+0x18c>)
 80014bc:	484f      	ldr	r0, [pc, #316]	; (80015fc <lidarDecode+0x190>)
 80014be:	f003 fa43 	bl	8004948 <HAL_UART_Receive_IT>
 80014c2:	e092      	b.n	80015ea <lidarDecode+0x17e>
		}
		else
		{
			lidarState = LIDAR_STATE_INIT;
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <lidarDecode+0x188>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
			lidarInit();
 80014ca:	f7ff ffad 	bl	8001428 <lidarInit>
		{
			lidarState = LIDAR_STATE_INIT;
			lidarInit();
		}
	}
}
 80014ce:	e08c      	b.n	80015ea <lidarDecode+0x17e>
	else if(lidarState == LIDAR_STATE_SCAN)
 80014d0:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <lidarDecode+0x188>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	f040 8088 	bne.w	80015ea <lidarDecode+0x17e>
		s = lidarReceiveBuffer[0] & 0b00000001;
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <lidarDecode+0x18c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
		sinv = (lidarReceiveBuffer[0] & 0b00000010) >> 1;
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <lidarDecode+0x18c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	105b      	asrs	r3, r3, #1
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
		quality = (lidarReceiveBuffer[0] & 0b11111100) >> 2;
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <lidarDecode+0x18c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	60fb      	str	r3, [r7, #12]
		c = lidarReceiveBuffer[1] & 0b00000001;
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <lidarDecode+0x18c>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
		if(s == !sinv && c ==1)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf0c      	ite	eq
 800150a:	2301      	moveq	r3, #1
 800150c:	2300      	movne	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4293      	cmp	r3, r2
 8001516:	d162      	bne.n	80015de <lidarDecode+0x172>
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d15f      	bne.n	80015de <lidarDecode+0x172>
			if(s == 1)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d114      	bne.n	800154e <lidarDecode+0xe2>
				for(int i = 0; i < 360; i++)
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	e00d      	b.n	8001546 <lidarDecode+0xda>
					while(apiLocked){}
 800152a:	bf00      	nop
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <lidarDecode+0x194>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1fb      	bne.n	800152c <lidarDecode+0xc0>
					apiMemory[API_BENCH_LIDAR_START + i]= 0;
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	330f      	adds	r3, #15
 8001538:	4a32      	ldr	r2, [pc, #200]	; (8001604 <lidarDecode+0x198>)
 800153a:	2100      	movs	r1, #0
 800153c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0; i < 360; i++)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	3301      	adds	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800154c:	dbed      	blt.n	800152a <lidarDecode+0xbe>
			if(quality > 0)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd3e      	ble.n	80015d2 <lidarDecode+0x166>
				angle = lidarReceiveBuffer[2];
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <lidarDecode+0x18c>)
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	61fb      	str	r3, [r7, #28]
				angle = angle << 8;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	61fb      	str	r3, [r7, #28]
				int tmp = lidarReceiveBuffer[1] & 0b11111110;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <lidarDecode+0x18c>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001568:	607b      	str	r3, [r7, #4]
				tmp = tmp >> 1;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	105b      	asrs	r3, r3, #1
 800156e:	607b      	str	r3, [r7, #4]
				angle += tmp;
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	61fb      	str	r3, [r7, #28]
				angle = angle / 64;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <lidarDecode+0x114>
 800157e:	333f      	adds	r3, #63	; 0x3f
 8001580:	119b      	asrs	r3, r3, #6
 8001582:	61fb      	str	r3, [r7, #28]
				while(angle > 360)
 8001584:	e003      	b.n	800158e <lidarDecode+0x122>
					angle -= 360;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800158c:	61fb      	str	r3, [r7, #28]
				while(angle > 360)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001594:	dcf7      	bgt.n	8001586 <lidarDecode+0x11a>
				distance = lidarReceiveBuffer[4];
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <lidarDecode+0x18c>)
 8001598:	791b      	ldrb	r3, [r3, #4]
 800159a:	603b      	str	r3, [r7, #0]
				distance = distance << 8;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	603b      	str	r3, [r7, #0]
				distance += lidarReceiveBuffer[3];
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <lidarDecode+0x18c>)
 80015a4:	78db      	ldrb	r3, [r3, #3]
 80015a6:	461a      	mov	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	603b      	str	r3, [r7, #0]
				distance = distance / 4;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	da00      	bge.n	80015b6 <lidarDecode+0x14a>
 80015b4:	3303      	adds	r3, #3
 80015b6:	109b      	asrs	r3, r3, #2
 80015b8:	603b      	str	r3, [r7, #0]
				while(apiLocked){}
 80015ba:	bf00      	nop
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <lidarDecode+0x194>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1fb      	bne.n	80015bc <lidarDecode+0x150>
				apiMemory[API_BENCH_LIDAR_START + angle] = distance;
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	330f      	adds	r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b291      	uxth	r1, r2
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <lidarDecode+0x198>)
 80015ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HAL_UART_Receive_IT(&huart2, lidarReceiveBuffer, 5);
 80015d2:	2205      	movs	r2, #5
 80015d4:	4908      	ldr	r1, [pc, #32]	; (80015f8 <lidarDecode+0x18c>)
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <lidarDecode+0x190>)
 80015d8:	f003 f9b6 	bl	8004948 <HAL_UART_Receive_IT>
 80015dc:	e005      	b.n	80015ea <lidarDecode+0x17e>
			lidarState = LIDAR_STATE_INIT;
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <lidarDecode+0x188>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
			lidarInit();
 80015e4:	f7ff ff20 	bl	8001428 <lidarInit>
}
 80015e8:	e7ff      	b.n	80015ea <lidarDecode+0x17e>
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000368 	.word	0x20000368
 80015f8:	20000e40 	.word	0x20000e40
 80015fc:	20000e58 	.word	0x20000e58
 8001600:	2000061c 	.word	0x2000061c
 8001604:	20000820 	.word	0x20000820

08001608 <kvhInit>:

void kvhInit()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
	  char kvhInitStr[3] = { 's', '\r' };
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	2100      	movs	r1, #0
 8001614:	460a      	mov	r2, r1
 8001616:	801a      	strh	r2, [r3, #0]
 8001618:	460a      	mov	r2, r1
 800161a:	709a      	strb	r2, [r3, #2]
 800161c:	2373      	movs	r3, #115	; 0x73
 800161e:	773b      	strb	r3, [r7, #28]
 8001620:	230d      	movs	r3, #13
 8001622:	777b      	strb	r3, [r7, #29]
	  char kvhConfigNmeaStr[5] = { '=', 't' , ',', '0', '\r' };
 8001624:	4a25      	ldr	r2, [pc, #148]	; (80016bc <kvhInit+0xb4>)
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162e:	6018      	str	r0, [r3, #0]
 8001630:	3304      	adds	r3, #4
 8001632:	7019      	strb	r1, [r3, #0]
	  char kvhConfigSpeedStr[7] = { '=', 'r', ',' , '6', '0', '0', '\r' };
 8001634:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <kvhInit+0xb8>)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163e:	6018      	str	r0, [r3, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	8019      	strh	r1, [r3, #0]
 8001644:	3302      	adds	r3, #2
 8001646:	0c0a      	lsrs	r2, r1, #16
 8001648:	701a      	strb	r2, [r3, #0]
	  char kvhConfigUnitStr[5] = { '=', 'i' , ',', 'd', '\r' };
 800164a:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <kvhInit+0xbc>)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001652:	6018      	str	r0, [r3, #0]
 8001654:	3304      	adds	r3, #4
 8001656:	7019      	strb	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1, kvhInitStr, 2, 1000);
 8001658:	f107 011c 	add.w	r1, r7, #28
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	2202      	movs	r2, #2
 8001662:	4819      	ldr	r0, [pc, #100]	; (80016c8 <kvhInit+0xc0>)
 8001664:	f003 f8d7 	bl	8004816 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f000 fd1d 	bl	80020a8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigNmeaStr, 5, 1000);
 800166e:	f107 0114 	add.w	r1, r7, #20
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	2205      	movs	r2, #5
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <kvhInit+0xc0>)
 800167a:	f003 f8cc 	bl	8004816 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800167e:	2064      	movs	r0, #100	; 0x64
 8001680:	f000 fd12 	bl	80020a8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigUnitStr, 5, 1000);
 8001684:	1d39      	adds	r1, r7, #4
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	2205      	movs	r2, #5
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <kvhInit+0xc0>)
 800168e:	f003 f8c2 	bl	8004816 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001692:	2064      	movs	r0, #100	; 0x64
 8001694:	f000 fd08 	bl	80020a8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigSpeedStr, 7, 1000);
 8001698:	f107 010c 	add.w	r1, r7, #12
 800169c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a0:	2207      	movs	r2, #7
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <kvhInit+0xc0>)
 80016a4:	f003 f8b7 	bl	8004816 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, &kvhReceiveChar, 1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <kvhInit+0xc4>)
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <kvhInit+0xc0>)
 80016ae:	f003 f94b 	bl	8004948 <HAL_UART_Receive_IT>
}
 80016b2:	bf00      	nop
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0800a8a8 	.word	0x0800a8a8
 80016c0:	0800a8b0 	.word	0x0800a8b0
 80016c4:	0800a8b8 	.word	0x0800a8b8
 80016c8:	20000e00 	.word	0x20000e00
 80016cc:	20000c20 	.word	0x20000c20

080016d0 <kvhDecode>:

void kvhDecode()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
	static int cursor = 0;
	static char nmeaString[20];

	if(kvhReceiveChar == '$')
 80016d6:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <kvhDecode+0xb0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b24      	cmp	r3, #36	; 0x24
 80016dc:	d103      	bne.n	80016e6 <kvhDecode+0x16>
	{
		cursor = 0;
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <kvhDecode+0xb4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e03c      	b.n	8001760 <kvhDecode+0x90>
	}
	else if(kvhReceiveChar == '\r')
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <kvhDecode+0xb0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b0d      	cmp	r3, #13
 80016ec:	d133      	bne.n	8001756 <kvhDecode+0x86>
	{
		nmeaString[cursor] = '\0';
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <kvhDecode+0xb4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <kvhDecode+0xb8>)
 80016f4:	2100      	movs	r1, #0
 80016f6:	54d1      	strb	r1, [r2, r3]
		if(strncmp("$HCHDT", nmeaString, 6) == 0)
 80016f8:	2206      	movs	r2, #6
 80016fa:	4923      	ldr	r1, [pc, #140]	; (8001788 <kvhDecode+0xb8>)
 80016fc:	4823      	ldr	r0, [pc, #140]	; (800178c <kvhDecode+0xbc>)
 80016fe:	f006 fe8b 	bl	8008418 <strncmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12b      	bne.n	8001760 <kvhDecode+0x90>
		{
			char headingStr[4];
			strncpy(headingStr, &nmeaString[7], 3);
 8001708:	463b      	mov	r3, r7
 800170a:	2203      	movs	r2, #3
 800170c:	4920      	ldr	r1, [pc, #128]	; (8001790 <kvhDecode+0xc0>)
 800170e:	4618      	mov	r0, r3
 8001710:	f006 fe94 	bl	800843c <strncpy>
			headingStr[3] = '\0';
 8001714:	2300      	movs	r3, #0
 8001716:	70fb      	strb	r3, [r7, #3]
			//CDC_Transmit_FS(headingStr, 3);
			//CDC_Transmit_FS(nmeaString, ( cursor + 1 ));
			int heading = strtol(headingStr, NULL, 10);
 8001718:	463b      	mov	r3, r7
 800171a:	220a      	movs	r2, #10
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f007 fd50 	bl	80091c4 <strtol>
 8001724:	6078      	str	r0, [r7, #4]
			if(heading > 180)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2bb4      	cmp	r3, #180	; 0xb4
 800172a:	dd03      	ble.n	8001734 <kvhDecode+0x64>
			{
				heading -= 360;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001732:	607b      	str	r3, [r7, #4]
			}
			while(apiLocked){}
 8001734:	bf00      	nop
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <kvhDecode+0xc4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1fb      	bne.n	8001736 <kvhDecode+0x66>
			apiMemory[API_REG_HEADING_KVH] = strtol(headingStr, NULL, 10);
 800173e:	463b      	mov	r3, r7
 8001740:	220a      	movs	r2, #10
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f007 fd3d 	bl	80091c4 <strtol>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <kvhDecode+0xc8>)
 8001750:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 8001754:	e004      	b.n	8001760 <kvhDecode+0x90>
		}
	}
	else
	{
		cursor ++;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <kvhDecode+0xb4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <kvhDecode+0xb4>)
 800175e:	6013      	str	r3, [r2, #0]
	}

	nmeaString[cursor] = kvhReceiveChar;
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <kvhDecode+0xb4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <kvhDecode+0xb0>)
 8001766:	7811      	ldrb	r1, [r2, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <kvhDecode+0xb8>)
 800176a:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Receive_IT(&huart1, &kvhReceiveChar, 1);
 800176c:	2201      	movs	r2, #1
 800176e:	4904      	ldr	r1, [pc, #16]	; (8001780 <kvhDecode+0xb0>)
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <kvhDecode+0xcc>)
 8001772:	f003 f8e9 	bl	8004948 <HAL_UART_Receive_IT>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000c20 	.word	0x20000c20
 8001784:	2000036c 	.word	0x2000036c
 8001788:	20000370 	.word	0x20000370
 800178c:	0800a8c0 	.word	0x0800a8c0
 8001790:	20000377 	.word	0x20000377
 8001794:	2000061c 	.word	0x2000061c
 8001798:	20000820 	.word	0x20000820
 800179c:	20000e00 	.word	0x20000e00

080017a0 <gpsInit>:

void gpsInit()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &gpsReceiveChar, 1);
 80017a4:	2201      	movs	r2, #1
 80017a6:	4903      	ldr	r1, [pc, #12]	; (80017b4 <gpsInit+0x14>)
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <gpsInit+0x18>)
 80017aa:	f003 f8cd 	bl	8004948 <HAL_UART_Receive_IT>
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000e50 	.word	0x20000e50
 80017b8:	20000c64 	.word	0x20000c64

080017bc <gpsDecode>:

void gpsDecode()
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b090      	sub	sp, #64	; 0x40
 80017c0:	af00      	add	r7, sp, #0
	static int cursor = 0;
	static char nmeaString[100];

	if(kvhReceiveChar == '$')
 80017c2:	4b93      	ldr	r3, [pc, #588]	; (8001a10 <gpsDecode+0x254>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b24      	cmp	r3, #36	; 0x24
 80017c8:	d103      	bne.n	80017d2 <gpsDecode+0x16>
	{
		cursor = 0;
 80017ca:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <gpsDecode+0x258>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e10e      	b.n	80019f0 <gpsDecode+0x234>
	}
	else if(kvhReceiveChar == '\n')
 80017d2:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <gpsDecode+0x254>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b0a      	cmp	r3, #10
 80017d8:	f040 8105 	bne.w	80019e6 <gpsDecode+0x22a>
	{
		nmeaString[cursor] = '\0';
 80017dc:	4b8d      	ldr	r3, [pc, #564]	; (8001a14 <gpsDecode+0x258>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a8d      	ldr	r2, [pc, #564]	; (8001a18 <gpsDecode+0x25c>)
 80017e2:	2100      	movs	r1, #0
 80017e4:	54d1      	strb	r1, [r2, r3]
		strcpy(nmeaString, "$GNRMC,174752.00,A,4900.06642,N,01249.68048,E,0.102,,110420,,,A*6E\n\0");
 80017e6:	4a8c      	ldr	r2, [pc, #560]	; (8001a18 <gpsDecode+0x25c>)
 80017e8:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <gpsDecode+0x260>)
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	2344      	movs	r3, #68	; 0x44
 80017f0:	461a      	mov	r2, r3
 80017f2:	f006 fdd5 	bl	80083a0 <memcpy>
		if(strncmp("$GPRMC", nmeaString, 6) == 0 || strncmp("$GNRMC", nmeaString, 6) == 0)
 80017f6:	2206      	movs	r2, #6
 80017f8:	4987      	ldr	r1, [pc, #540]	; (8001a18 <gpsDecode+0x25c>)
 80017fa:	4889      	ldr	r0, [pc, #548]	; (8001a20 <gpsDecode+0x264>)
 80017fc:	f006 fe0c 	bl	8008418 <strncmp>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <gpsDecode+0x5c>
 8001806:	2206      	movs	r2, #6
 8001808:	4983      	ldr	r1, [pc, #524]	; (8001a18 <gpsDecode+0x25c>)
 800180a:	4886      	ldr	r0, [pc, #536]	; (8001a24 <gpsDecode+0x268>)
 800180c:	f006 fe04 	bl	8008418 <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80ec 	bne.w	80019f0 <gpsDecode+0x234>
		{
			int fieldIndex=0;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
			int charIndex=0;
 800181c:	2300      	movs	r3, #0
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38

//			char fields[13][15];
			char currentField[15];

			for(int i=7; i<strlen(nmeaString); i++)
 8001820:	2307      	movs	r3, #7
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
 8001824:	e02e      	b.n	8001884 <gpsDecode+0xc8>
			{
			  char currentChar=nmeaString[i];
 8001826:	4a7c      	ldr	r2, [pc, #496]	; (8001a18 <gpsDecode+0x25c>)
 8001828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  if(currentChar!=',')
 8001832:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001836:	2b2c      	cmp	r3, #44	; 0x2c
 8001838:	d00a      	beq.n	8001850 <gpsDecode+0x94>
			  {
			    currentField[charIndex]=currentChar;
 800183a:	f107 0220 	add.w	r2, r7, #32
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001840:	4413      	add	r3, r2
 8001842:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001846:	701a      	strb	r2, [r3, #0]
			    charIndex++;
 8001848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184a:	3301      	adds	r3, #1
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
 800184e:	e016      	b.n	800187e <gpsDecode+0xc2>
			  }
			  else
			  {
				currentField[charIndex] = '\0';
 8001850:	f107 0220 	add.w	r2, r7, #32
 8001854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001856:	4413      	add	r3, r2
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
			    strcpy(fields[fieldIndex], currentField);
 800185c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800185e:	4613      	mov	r3, r2
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	4a70      	ldr	r2, [pc, #448]	; (8001a28 <gpsDecode+0x26c>)
 8001866:	4413      	add	r3, r2
 8001868:	f107 0220 	add.w	r2, r7, #32
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f006 fdca 	bl	8008408 <strcpy>
			    charIndex = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
			    fieldIndex++;
 8001878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800187a:	3301      	adds	r3, #1
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(int i=7; i<strlen(nmeaString); i++)
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	3301      	adds	r3, #1
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
 8001884:	4864      	ldr	r0, [pc, #400]	; (8001a18 <gpsDecode+0x25c>)
 8001886:	f7fe fc63 	bl	8000150 <strlen>
 800188a:	4602      	mov	r2, r0
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	429a      	cmp	r2, r3
 8001890:	d8c9      	bhi.n	8001826 <gpsDecode+0x6a>
			}

			//decode time -> fieldIndex 0
			char timeStr[7];
			uint32_t time;
			strncpy(timeStr, fields[0], 6);
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	2206      	movs	r2, #6
 8001898:	4963      	ldr	r1, [pc, #396]	; (8001a28 <gpsDecode+0x26c>)
 800189a:	4618      	mov	r0, r3
 800189c:	f006 fdce 	bl	800843c <strncpy>
			timeStr[6] = '\0';
 80018a0:	2300      	movs	r3, #0
 80018a2:	77bb      	strb	r3, [r7, #30]
			time = strtol(timeStr, NULL, 10);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	220a      	movs	r2, #10
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f007 fc89 	bl	80091c4 <strtol>
 80018b2:	4603      	mov	r3, r0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
			while(apiLocked){}
 80018b6:	bf00      	nop
 80018b8:	4b5c      	ldr	r3, [pc, #368]	; (8001a2c <gpsDecode+0x270>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1fb      	bne.n	80018b8 <gpsDecode+0xfc>
//			apiMemory[API_BENCH_GPS_START] = (time & 0xffff0000 ) >> 16;
//			while(apiLocked){}
//			apiMemory[API_BENCH_GPS_START + 1] = time & 0x00ffff;
			apiWrite32(API_BENCH_GPS_START, time);
 80018c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c2:	4619      	mov	r1, r3
 80018c4:	f240 1079 	movw	r0, #377	; 0x179
 80018c8:	f7ff fa44 	bl	8000d54 <apiWrite32>

			//decode latitude -> fieldIndex 2/3
			char ddLat[3];
			char mmLat[8];
			strncpy(ddLat, fields[2], 2);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2202      	movs	r2, #2
 80018d2:	4957      	ldr	r1, [pc, #348]	; (8001a30 <gpsDecode+0x274>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f006 fdb1 	bl	800843c <strncpy>
			ddLat[2] = '\0';
 80018da:	2300      	movs	r3, #0
 80018dc:	75bb      	strb	r3, [r7, #22]
			strncpy(mmLat, &fields[2][2], 7);
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2207      	movs	r2, #7
 80018e4:	4953      	ldr	r1, [pc, #332]	; (8001a34 <gpsDecode+0x278>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f006 fda8 	bl	800843c <strncpy>
			mmLat[7] = '\0';
 80018ec:	2300      	movs	r3, #0
 80018ee:	74fb      	strb	r3, [r7, #19]

			lat=atof(ddLat) + atof(mmLat)/60;
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4618      	mov	r0, r3
 80018f6:	f006 fd25 	bl	8008344 <atof>
 80018fa:	4604      	mov	r4, r0
 80018fc:	460d      	mov	r5, r1
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fd1e 	bl	8008344 <atof>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <gpsDecode+0x27c>)
 800190e:	f7fe ff0d 	bl	800072c <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe fc27 	bl	800016c <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	4618      	mov	r0, r3
 8001924:	4621      	mov	r1, r4
 8001926:	f7ff f8b9 	bl	8000a9c <__aeabi_d2f>
 800192a:	4602      	mov	r2, r0
 800192c:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <gpsDecode+0x280>)
 800192e:	601a      	str	r2, [r3, #0]
			if(fields[3][0]=='S')
 8001930:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <gpsDecode+0x26c>)
 8001932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001936:	2b53      	cmp	r3, #83	; 0x53
 8001938:	d105      	bne.n	8001946 <gpsDecode+0x18a>
			  lat=-lat;
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <gpsDecode+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001942:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <gpsDecode+0x280>)
 8001944:	6013      	str	r3, [r2, #0]

			while(apiLocked){}
 8001946:	bf00      	nop
 8001948:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <gpsDecode+0x270>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1fb      	bne.n	8001948 <gpsDecode+0x18c>
			memcpy(&apiMemory[API_BENCH_GPS_START + 2], &lat, 4);
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <gpsDecode+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <gpsDecode+0x284>)
 8001956:	f8c2 32f6 	str.w	r3, [r2, #758]	; 0x2f6


//			//decode longitude -> fieldIndex 4/5
			char ddLon[4];
			char mmLon[8];
			strncpy(ddLon, fields[4], 3);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	2203      	movs	r2, #3
 8001960:	4938      	ldr	r1, [pc, #224]	; (8001a44 <gpsDecode+0x288>)
 8001962:	4618      	mov	r0, r3
 8001964:	f006 fd6a 	bl	800843c <strncpy>
			ddLon[3] = '\0';
 8001968:	2300      	movs	r3, #0
 800196a:	72fb      	strb	r3, [r7, #11]
			strncpy(mmLon, &fields[4][3], 7);
 800196c:	463b      	mov	r3, r7
 800196e:	2207      	movs	r2, #7
 8001970:	4935      	ldr	r1, [pc, #212]	; (8001a48 <gpsDecode+0x28c>)
 8001972:	4618      	mov	r0, r3
 8001974:	f006 fd62 	bl	800843c <strncpy>
			mmLon[7] = '\0';
 8001978:	2300      	movs	r3, #0
 800197a:	71fb      	strb	r3, [r7, #7]

			lon=atof(ddLon) + atof(mmLon)/60;
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	4618      	mov	r0, r3
 8001982:	f006 fcdf 	bl	8008344 <atof>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	463b      	mov	r3, r7
 800198c:	4618      	mov	r0, r3
 800198e:	f006 fcd9 	bl	8008344 <atof>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <gpsDecode+0x27c>)
 8001998:	f7fe fec8 	bl	800072c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fbe2 	bl	800016c <__adddf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	460c      	mov	r4, r1
 80019ac:	4618      	mov	r0, r3
 80019ae:	4621      	mov	r1, r4
 80019b0:	f7ff f874 	bl	8000a9c <__aeabi_d2f>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <gpsDecode+0x290>)
 80019b8:	601a      	str	r2, [r3, #0]
			if(fields[6][0]=='W')
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <gpsDecode+0x26c>)
 80019bc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80019c0:	2b57      	cmp	r3, #87	; 0x57
 80019c2:	d105      	bne.n	80019d0 <gpsDecode+0x214>
			  lon=-lon;
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <gpsDecode+0x290>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019cc:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <gpsDecode+0x290>)
 80019ce:	6013      	str	r3, [r2, #0]

			while(apiLocked){}
 80019d0:	bf00      	nop
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <gpsDecode+0x270>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1fb      	bne.n	80019d2 <gpsDecode+0x216>
			memcpy(&apiMemory[API_BENCH_GPS_START + 4], &lon, 4);
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <gpsDecode+0x290>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <gpsDecode+0x284>)
 80019e0:	f8c2 32fa 	str.w	r3, [r2, #762]	; 0x2fa
 80019e4:	e004      	b.n	80019f0 <gpsDecode+0x234>
		}
	}
	else
	{
		cursor ++;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <gpsDecode+0x258>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <gpsDecode+0x258>)
 80019ee:	6013      	str	r3, [r2, #0]
	}

	nmeaString[cursor] = gpsReceiveChar;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <gpsDecode+0x258>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <gpsDecode+0x294>)
 80019f6:	7811      	ldrb	r1, [r2, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <gpsDecode+0x25c>)
 80019fa:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Receive_IT(&huart3, &gpsReceiveChar, 1);
 80019fc:	2201      	movs	r2, #1
 80019fe:	4914      	ldr	r1, [pc, #80]	; (8001a50 <gpsDecode+0x294>)
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <gpsDecode+0x298>)
 8001a02:	f002 ffa1 	bl	8004948 <HAL_UART_Receive_IT>
}
 8001a06:	bf00      	nop
 8001a08:	3740      	adds	r7, #64	; 0x40
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000c20 	.word	0x20000c20
 8001a14:	20000384 	.word	0x20000384
 8001a18:	20000388 	.word	0x20000388
 8001a1c:	0800a8c8 	.word	0x0800a8c8
 8001a20:	0800a910 	.word	0x0800a910
 8001a24:	0800a918 	.word	0x0800a918
 8001a28:	20000cfc 	.word	0x20000cfc
 8001a2c:	2000061c 	.word	0x2000061c
 8001a30:	20000d1a 	.word	0x20000d1a
 8001a34:	20000d1c 	.word	0x20000d1c
 8001a38:	404e0000 	.word	0x404e0000
 8001a3c:	20000e98 	.word	0x20000e98
 8001a40:	20000820 	.word	0x20000820
 8001a44:	20000d38 	.word	0x20000d38
 8001a48:	20000d3b 	.word	0x20000d3b
 8001a4c:	20000e4c 	.word	0x20000e4c
 8001a50:	20000e50 	.word	0x20000e50
 8001a54:	20000c64 	.word	0x20000c64

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6193      	str	r3, [r2, #24]
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_MspInit+0x5c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_MspInit+0x60>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_MspInit+0x60>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000

08001ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <HAL_I2C_MspInit+0x70>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d123      	bne.n	8001b30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b00:	23c0      	movs	r3, #192	; 0xc0
 8001b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <HAL_I2C_MspInit+0x78>)
 8001b14:	f000 fc6e 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b22:	61d3      	str	r3, [r2, #28]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_TIM_PWM_MspInit+0x58>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10c      	bne.n	8001b70 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b6e:	e010      	b.n	8001b92 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <HAL_TIM_PWM_MspInit+0x60>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10b      	bne.n	8001b92 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0318 	add.w	r3, r7, #24
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <HAL_TIM_MspPostInit+0xc8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d130      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a29      	ldr	r2, [pc, #164]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin;
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2302      	movs	r3, #2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481b      	ldr	r0, [pc, #108]	; (8001c78 <HAL_TIM_MspPostInit+0xd0>)
 8001c0c:	f000 fbf2 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8001c10:	2303      	movs	r3, #3
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4816      	ldr	r0, [pc, #88]	; (8001c7c <HAL_TIM_MspPostInit+0xd4>)
 8001c24:	f000 fbe6 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c28:	e01d      	b.n	8001c66 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_TIM_MspPostInit+0xd8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d118      	bne.n	8001c66 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_TIM_MspPostInit+0xcc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8001c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2302      	movs	r3, #2
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 0318 	add.w	r3, r7, #24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <HAL_TIM_MspPostInit+0xd4>)
 8001c62:	f000 fbc7 	bl	80023f4 <HAL_GPIO_Init>
}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	40010c00 	.word	0x40010c00
 8001c80:	40000800 	.word	0x40000800

08001c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5f      	ldr	r2, [pc, #380]	; (8001e1c <HAL_UART_MspInit+0x198>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d13a      	bne.n	8001d1a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a5d      	ldr	r2, [pc, #372]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a57      	ldr	r2, [pc, #348]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = KVH_TX_Pin;
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(KVH_TX_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0320 	add.w	r3, r7, #32
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	484e      	ldr	r0, [pc, #312]	; (8001e24 <HAL_UART_MspInit+0x1a0>)
 8001cea:	f000 fb83 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KVH_RX_Pin;
 8001cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(KVH_RX_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4619      	mov	r1, r3
 8001d02:	4848      	ldr	r0, [pc, #288]	; (8001e24 <HAL_UART_MspInit+0x1a0>)
 8001d04:	f000 fb76 	bl	80023f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2025      	movs	r0, #37	; 0x25
 8001d0e:	f000 fac4 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d12:	2025      	movs	r0, #37	; 0x25
 8001d14:	f000 fadd 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d18:	e07c      	b.n	8001e14 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a42      	ldr	r2, [pc, #264]	; (8001e28 <HAL_UART_MspInit+0x1a4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d138      	bne.n	8001d96 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d24:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2e:	61d3      	str	r3, [r2, #28]
 8001d30:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a37      	ldr	r2, [pc, #220]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8001d54:	2304      	movs	r3, #4
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	4619      	mov	r1, r3
 8001d66:	482f      	ldr	r0, [pc, #188]	; (8001e24 <HAL_UART_MspInit+0x1a0>)
 8001d68:	f000 fb44 	bl	80023f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4829      	ldr	r0, [pc, #164]	; (8001e24 <HAL_UART_MspInit+0x1a0>)
 8001d80:	f000 fb38 	bl	80023f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2026      	movs	r0, #38	; 0x26
 8001d8a:	f000 fa86 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d8e:	2026      	movs	r0, #38	; 0x26
 8001d90:	f000 fa9f 	bl	80022d2 <HAL_NVIC_EnableIRQ>
}
 8001d94:	e03e      	b.n	8001e14 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_UART_MspInit+0x1a8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d139      	bne.n	8001e14 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001daa:	61d3      	str	r3, [r2, #28]
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_UART_MspInit+0x19c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0320 	add.w	r3, r7, #32
 8001de2:	4619      	mov	r1, r3
 8001de4:	4812      	ldr	r0, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0x1ac>)
 8001de6:	f000 fb05 	bl	80023f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001dea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480c      	ldr	r0, [pc, #48]	; (8001e30 <HAL_UART_MspInit+0x1ac>)
 8001e00:	f000 faf8 	bl	80023f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2102      	movs	r1, #2
 8001e08:	2027      	movs	r0, #39	; 0x27
 8001e0a:	f000 fa46 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e0e:	2027      	movs	r0, #39	; 0x27
 8001e10:	f000 fa5f 	bl	80022d2 <HAL_NVIC_EnableIRQ>
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	40004800 	.word	0x40004800
 8001e30:	40010c00 	.word	0x40010c00

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <HardFault_Handler+0x4>

08001e46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <MemManage_Handler+0x4>

08001e4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <BusFault_Handler+0x4>

08001e52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <UsageFault_Handler+0x4>

08001e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f8f6 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e8e:	f000 fe52 	bl	8002b36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20001b34 	.word	0x20001b34

08001e9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USART1_IRQHandler+0x10>)
 8001ea2:	f002 fda5 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000e00 	.word	0x20000e00

08001eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
//	static int counter = 0;
//	dataFromLidar.len = 500;
//	uint8_t byte;
//	HAL_UART_Receive(&huart2, &byte, 1, 1000);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USART2_IRQHandler+0x10>)
 8001eb6:	f002 fd9b 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000e58 	.word	0x20000e58

08001ec4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <USART3_IRQHandler+0x10>)
 8001eca:	f002 fd91 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000c64 	.word	0x20000c64

08001ed8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x50>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <_sbrk+0x16>
		heap_end = &end;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <_sbrk+0x50>)
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <_sbrk+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <_sbrk+0x50>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <_sbrk+0x50>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	466a      	mov	r2, sp
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d907      	bls.n	8001f12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f02:	f006 fa23 	bl	800834c <__errno>
 8001f06:	4602      	mov	r2, r0
 8001f08:	230c      	movs	r3, #12
 8001f0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f10:	e006      	b.n	8001f20 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <_sbrk+0x50>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <_sbrk+0x50>)
 8001f1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200003ec 	.word	0x200003ec
 8001f2c:	20001da8 	.word	0x20001da8

08001f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <SystemInit+0x5c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <SystemInit+0x5c>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <SystemInit+0x5c>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4911      	ldr	r1, [pc, #68]	; (8001f8c <SystemInit+0x5c>)
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <SystemInit+0x60>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <SystemInit+0x5c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <SystemInit+0x5c>)
 8001f52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <SystemInit+0x5c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SystemInit+0x5c>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SystemInit+0x5c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <SystemInit+0x5c>)
 8001f6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SystemInit+0x5c>)
 8001f76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f7a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SystemInit+0x64>)
 8001f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f82:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	f8ff0000 	.word	0xf8ff0000
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f9a:	e003      	b.n	8001fa4 <LoopCopyDataInit>

08001f9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fa0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fa2:	3104      	adds	r1, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fa4:	480a      	ldr	r0, [pc, #40]	; (8001fd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fa8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001faa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fac:	d3f6      	bcc.n	8001f9c <CopyDataInit>
  ldr r2, =_sbss
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fb0:	e002      	b.n	8001fb8 <LoopFillZerobss>

08001fb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fb4:	f842 3b04 	str.w	r3, [r2], #4

08001fb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fbc:	d3f9      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fbe:	f7ff ffb7 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f006 f9c9 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7fe ff21 	bl	8000e0c <main>
  bx lr
 8001fca:	4770      	bx	lr
  ldr r3, =_sidata
 8001fcc:	0800ac38 	.word	0x0800ac38
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fd4:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8001fd8:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8001fdc:	20001da4 	.word	0x20001da4

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x28>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 f945 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fd30 	bl	8001a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f95d 	bl	80022ee <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204c:	f000 f925 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000000 	.word	0x20000000
 8002068:	20000008 	.word	0x20000008
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x1c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x20>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x20>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000008 	.word	0x20000008
 8002090:	20000e9c 	.word	0x20000e9c

08002094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_GetTick+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000e9c 	.word	0x20000e9c

080020a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff fff0 	bl	8002094 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c0:	d005      	beq.n	80020ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_Delay+0x40>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ce:	bf00      	nop
 80020d0:	f7ff ffe0 	bl	8002094 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d8f7      	bhi.n	80020d0 <HAL_Delay+0x28>
  {
  }
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000008 	.word	0x20000008

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4906      	ldr	r1, [pc, #24]	; (8002184 <__NVIC_EnableIRQ+0x34>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002264:	f7ff ff90 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff2d 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff42 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff90 	bl	80021dc <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5f 	bl	8002188 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff35 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800231a:	2b02      	cmp	r3, #2
 800231c:	d005      	beq.n	800232a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e051      	b.n	80023ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 020e 	bic.w	r2, r2, #14
 8002338:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <HAL_DMA_Abort_IT+0xd0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d029      	beq.n	80023a8 <HAL_DMA_Abort_IT+0xa0>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_DMA_Abort_IT+0xd4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d022      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x9c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_DMA_Abort_IT+0xd8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d01a      	beq.n	800239e <HAL_DMA_Abort_IT+0x96>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <HAL_DMA_Abort_IT+0xdc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d012      	beq.n	8002398 <HAL_DMA_Abort_IT+0x90>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_DMA_Abort_IT+0xe0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00a      	beq.n	8002392 <HAL_DMA_Abort_IT+0x8a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_DMA_Abort_IT+0xe4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d102      	bne.n	800238c <HAL_DMA_Abort_IT+0x84>
 8002386:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800238a:	e00e      	b.n	80023aa <HAL_DMA_Abort_IT+0xa2>
 800238c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002390:	e00b      	b.n	80023aa <HAL_DMA_Abort_IT+0xa2>
 8002392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002396:	e008      	b.n	80023aa <HAL_DMA_Abort_IT+0xa2>
 8002398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239c:	e005      	b.n	80023aa <HAL_DMA_Abort_IT+0xa2>
 800239e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a2:	e002      	b.n	80023aa <HAL_DMA_Abort_IT+0xa2>
 80023a4:	2310      	movs	r3, #16
 80023a6:	e000      	b.n	80023aa <HAL_DMA_Abort_IT+0xa2>
 80023a8:	2301      	movs	r3, #1
 80023aa:	4a11      	ldr	r2, [pc, #68]	; (80023f0 <HAL_DMA_Abort_IT+0xe8>)
 80023ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
    } 
  }
  return status;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40020008 	.word	0x40020008
 80023dc:	4002001c 	.word	0x4002001c
 80023e0:	40020030 	.word	0x40020030
 80023e4:	40020044 	.word	0x40020044
 80023e8:	40020058 	.word	0x40020058
 80023ec:	4002006c 	.word	0x4002006c
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e127      	b.n	8002658 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002408:	2201      	movs	r2, #1
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8116 	bne.w	8002652 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b12      	cmp	r3, #18
 800242c:	d034      	beq.n	8002498 <HAL_GPIO_Init+0xa4>
 800242e:	2b12      	cmp	r3, #18
 8002430:	d80d      	bhi.n	800244e <HAL_GPIO_Init+0x5a>
 8002432:	2b02      	cmp	r3, #2
 8002434:	d02b      	beq.n	800248e <HAL_GPIO_Init+0x9a>
 8002436:	2b02      	cmp	r3, #2
 8002438:	d804      	bhi.n	8002444 <HAL_GPIO_Init+0x50>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d031      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 800243e:	2b01      	cmp	r3, #1
 8002440:	d01c      	beq.n	800247c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002442:	e048      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002444:	2b03      	cmp	r3, #3
 8002446:	d043      	beq.n	80024d0 <HAL_GPIO_Init+0xdc>
 8002448:	2b11      	cmp	r3, #17
 800244a:	d01b      	beq.n	8002484 <HAL_GPIO_Init+0x90>
          break;
 800244c:	e043      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800244e:	4a89      	ldr	r2, [pc, #548]	; (8002674 <HAL_GPIO_Init+0x280>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d026      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002454:	4a87      	ldr	r2, [pc, #540]	; (8002674 <HAL_GPIO_Init+0x280>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d806      	bhi.n	8002468 <HAL_GPIO_Init+0x74>
 800245a:	4a87      	ldr	r2, [pc, #540]	; (8002678 <HAL_GPIO_Init+0x284>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d020      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002460:	4a86      	ldr	r2, [pc, #536]	; (800267c <HAL_GPIO_Init+0x288>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
          break;
 8002466:	e036      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002468:	4a85      	ldr	r2, [pc, #532]	; (8002680 <HAL_GPIO_Init+0x28c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 800246e:	4a85      	ldr	r2, [pc, #532]	; (8002684 <HAL_GPIO_Init+0x290>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d016      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
 8002474:	4a84      	ldr	r2, [pc, #528]	; (8002688 <HAL_GPIO_Init+0x294>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0xae>
          break;
 800247a:	e02c      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	623b      	str	r3, [r7, #32]
          break;
 8002482:	e028      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	3304      	adds	r3, #4
 800248a:	623b      	str	r3, [r7, #32]
          break;
 800248c:	e023      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	3308      	adds	r3, #8
 8002494:	623b      	str	r3, [r7, #32]
          break;
 8002496:	e01e      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	330c      	adds	r3, #12
 800249e:	623b      	str	r3, [r7, #32]
          break;
 80024a0:	e019      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024aa:	2304      	movs	r3, #4
 80024ac:	623b      	str	r3, [r7, #32]
          break;
 80024ae:	e012      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b8:	2308      	movs	r3, #8
 80024ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	611a      	str	r2, [r3, #16]
          break;
 80024c2:	e008      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024c4:	2308      	movs	r3, #8
 80024c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	615a      	str	r2, [r3, #20]
          break;
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2bff      	cmp	r3, #255	; 0xff
 80024da:	d801      	bhi.n	80024e0 <HAL_GPIO_Init+0xec>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	e001      	b.n	80024e4 <HAL_GPIO_Init+0xf0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2bff      	cmp	r3, #255	; 0xff
 80024ea:	d802      	bhi.n	80024f2 <HAL_GPIO_Init+0xfe>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x104>
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	3b08      	subs	r3, #8
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	210f      	movs	r1, #15
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	6a39      	ldr	r1, [r7, #32]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8096 	beq.w	8002652 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002526:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_GPIO_Init+0x298>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_GPIO_Init+0x298>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6193      	str	r3, [r2, #24]
 8002532:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_GPIO_Init+0x298>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800253e:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_GPIO_Init+0x29c>)
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_GPIO_Init+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x19e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4a      	ldr	r2, [pc, #296]	; (8002698 <HAL_GPIO_Init+0x2a4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x19a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_GPIO_Init+0x2a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x196>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a48      	ldr	r2, [pc, #288]	; (80026a0 <HAL_GPIO_Init+0x2ac>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x192>
 8002582:	2303      	movs	r3, #3
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 8002586:	2304      	movs	r3, #4
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x1a0>
 8002592:	2300      	movs	r3, #0
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025a4:	493a      	ldr	r1, [pc, #232]	; (8002690 <HAL_GPIO_Init+0x29c>)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025be:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4938      	ldr	r1, [pc, #224]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
 80025ca:	e006      	b.n	80025da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	4933      	ldr	r1, [pc, #204]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	492e      	ldr	r1, [pc, #184]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025f4:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4929      	ldr	r1, [pc, #164]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4924      	ldr	r1, [pc, #144]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	491f      	ldr	r1, [pc, #124]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002626:	4013      	ands	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	491a      	ldr	r1, [pc, #104]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	4915      	ldr	r1, [pc, #84]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800264e:	4013      	ands	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3301      	adds	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	f47f aed0 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 8002668:	bf00      	nop
 800266a:	372c      	adds	r7, #44	; 0x2c
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	10210000 	.word	0x10210000
 8002678:	10110000 	.word	0x10110000
 800267c:	10120000 	.word	0x10120000
 8002680:	10310000 	.word	0x10310000
 8002684:	10320000 	.word	0x10320000
 8002688:	10220000 	.word	0x10220000
 800268c:	40021000 	.word	0x40021000
 8002690:	40010000 	.word	0x40010000
 8002694:	40010800 	.word	0x40010800
 8002698:	40010c00 	.word	0x40010c00
 800269c:	40011000 	.word	0x40011000
 80026a0:	40011400 	.word	0x40011400
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	611a      	str	r2, [r3, #16]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e10f      	b.n	800290a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff f9e2 	bl	8001ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800271c:	f001 fbbc 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8002720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4a7b      	ldr	r2, [pc, #492]	; (8002914 <HAL_I2C_Init+0x23c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d807      	bhi.n	800273c <HAL_I2C_Init+0x64>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_I2C_Init+0x240>)
 8002730:	4293      	cmp	r3, r2
 8002732:	bf94      	ite	ls
 8002734:	2301      	movls	r3, #1
 8002736:	2300      	movhi	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e006      	b.n	800274a <HAL_I2C_Init+0x72>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a77      	ldr	r2, [pc, #476]	; (800291c <HAL_I2C_Init+0x244>)
 8002740:	4293      	cmp	r3, r2
 8002742:	bf94      	ite	ls
 8002744:	2301      	movls	r3, #1
 8002746:	2300      	movhi	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0db      	b.n	800290a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a72      	ldr	r2, [pc, #456]	; (8002920 <HAL_I2C_Init+0x248>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9b      	lsrs	r3, r3, #18
 800275c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a64      	ldr	r2, [pc, #400]	; (8002914 <HAL_I2C_Init+0x23c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d802      	bhi.n	800278c <HAL_I2C_Init+0xb4>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	3301      	adds	r3, #1
 800278a:	e009      	b.n	80027a0 <HAL_I2C_Init+0xc8>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_I2C_Init+0x24c>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4956      	ldr	r1, [pc, #344]	; (8002914 <HAL_I2C_Init+0x23c>)
 80027bc:	428b      	cmp	r3, r1
 80027be:	d80d      	bhi.n	80027dc <HAL_I2C_Init+0x104>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e59      	subs	r1, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	bf38      	it	cc
 80027d8:	2304      	movcc	r3, #4
 80027da:	e04f      	b.n	800287c <HAL_I2C_Init+0x1a4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <HAL_I2C_Init+0x130>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e012      	b.n	800282e <HAL_I2C_Init+0x156>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x15e>
 8002832:	2301      	movs	r3, #1
 8002834:	e022      	b.n	800287c <HAL_I2C_Init+0x1a4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10e      	bne.n	800285c <HAL_I2C_Init+0x184>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e58      	subs	r0, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	440b      	add	r3, r1
 800284c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	e00f      	b.n	800287c <HAL_I2C_Init+0x1a4>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	0099      	lsls	r1, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6809      	ldr	r1, [r1, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6911      	ldr	r1, [r2, #16]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	000186a0 	.word	0x000186a0
 8002918:	001e847f 	.word	0x001e847f
 800291c:	003d08ff 	.word	0x003d08ff
 8002920:	431bde83 	.word	0x431bde83
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	b08b      	sub	sp, #44	; 0x2c
 800292c:	af06      	add	r7, sp, #24
 800292e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0d3      	b.n	8002ae2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f005 fa5a 	bl	8007e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fbbe 	bl	80050e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	687e      	ldr	r6, [r7, #4]
 800296e:	466d      	mov	r5, sp
 8002970:	f106 0410 	add.w	r4, r6, #16
 8002974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	1d33      	adds	r3, r6, #4
 800297e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	f002 fb87 	bl	8005094 <USB_CoreInit>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0a4      	b.n	8002ae2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fbbb 	bl	800511a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e035      	b.n	8002a16 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	015b      	lsls	r3, r3, #5
 80029b0:	4413      	add	r3, r2
 80029b2:	3329      	adds	r3, #41	; 0x29
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	015b      	lsls	r3, r3, #5
 80029be:	4413      	add	r3, r2
 80029c0:	3328      	adds	r3, #40	; 0x28
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	b291      	uxth	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	015b      	lsls	r3, r3, #5
 80029d0:	4413      	add	r3, r2
 80029d2:	3336      	adds	r3, #54	; 0x36
 80029d4:	460a      	mov	r2, r1
 80029d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	015b      	lsls	r3, r3, #5
 80029de:	4413      	add	r3, r2
 80029e0:	332b      	adds	r3, #43	; 0x2b
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	015b      	lsls	r3, r3, #5
 80029ec:	4413      	add	r3, r2
 80029ee:	3338      	adds	r3, #56	; 0x38
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	015b      	lsls	r3, r3, #5
 80029fa:	4413      	add	r3, r2
 80029fc:	333c      	adds	r3, #60	; 0x3c
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	3302      	adds	r3, #2
 8002a08:	015b      	lsls	r3, r3, #5
 8002a0a:	4413      	add	r3, r2
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3301      	adds	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3c4      	bcc.n	80029aa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e031      	b.n	8002a8a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	015b      	lsls	r3, r3, #5
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	015b      	lsls	r3, r3, #5
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	015b      	lsls	r3, r3, #5
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	015b      	lsls	r3, r3, #5
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	330a      	adds	r3, #10
 8002a7c:	015b      	lsls	r3, r3, #5
 8002a7e:	4413      	add	r3, r2
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	3301      	adds	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3c8      	bcc.n	8002a26 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	687e      	ldr	r6, [r7, #4]
 8002a9c:	466d      	mov	r5, sp
 8002a9e:	f106 0410 	add.w	r4, r6, #16
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	602b      	str	r3, [r5, #0]
 8002aaa:	1d33      	adds	r3, r6, #4
 8002aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aae:	6838      	ldr	r0, [r7, #0]
 8002ab0:	f002 fb3f 	bl	8005132 <USB_DevInit>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2202      	movs	r2, #2
 8002abe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00d      	b.n	8002ae2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 fb7d 	bl	80061da <USB_DevDisconnect>

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_PCD_Start+0x16>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e016      	b.n	8002b2e <HAL_PCD_Start+0x44>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b08:	2101      	movs	r1, #1
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f005 fbe3 	bl	80082d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fb56 	bl	80061c6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fac8 	bl	80050b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fb53 	bl	80061ee <USB_ReadInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b52:	d102      	bne.n	8002b5a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 faf3 	bl	8003140 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 fb45 	bl	80061ee <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6e:	d112      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b82:	b292      	uxth	r2, r2
 8002b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f005 f9b2 	bl	8007ef2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b8e:	2100      	movs	r1, #0
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8de 	bl	8002d52 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fb27 	bl	80061ee <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fb10 	bl	80061ee <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bec:	b292      	uxth	r2, r2
 8002bee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 faf9 	bl	80061ee <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c06:	d126      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0204 	bic.w	r2, r2, #4
 8002c1a:	b292      	uxth	r2, r2
 8002c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0208 	bic.w	r2, r2, #8
 8002c32:	b292      	uxth	r2, r2
 8002c34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f005 f993 	bl	8007f64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c50:	b292      	uxth	r2, r2
 8002c52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fac7 	bl	80061ee <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c6a:	d13d      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	b292      	uxth	r2, r2
 8002c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c96:	b292      	uxth	r2, r2
 8002c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0204 	orr.w	r2, r2, #4
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fa98 	bl	80061ee <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f005 f924 	bl	8007f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fa7e 	bl	80061ee <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d10e      	bne.n	8002d1c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d10:	b292      	uxth	r2, r2
 8002d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f005 f8dd 	bl	8007ed6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fa64 	bl	80061ee <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d30:	d10b      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d44:	b292      	uxth	r2, r2
 8002d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_PCD_SetAddress+0x1a>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e013      	b.n	8002d94 <HAL_PCD_SetAddress+0x42>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fa0b 	bl	80061a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	460b      	mov	r3, r1
 8002db0:	803b      	strh	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da0b      	bge.n	8002dda <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	015b      	lsls	r3, r3, #5
 8002dca:	3328      	adds	r3, #40	; 0x28
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
 8002dd8:	e00b      	b.n	8002df2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	015b      	lsls	r3, r3, #5
 8002de2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dfe:	883a      	ldrh	r2, [r7, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	78ba      	ldrb	r2, [r7, #2]
 8002e08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e1c:	78bb      	ldrb	r3, [r7, #2]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_PCD_EP_Open+0x9a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00e      	b.n	8002e54 <HAL_PCD_EP_Open+0xb8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 f999 	bl	800517c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	da0b      	bge.n	8002e88 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	015b      	lsls	r3, r3, #5
 8002e78:	3328      	adds	r3, #40	; 0x28
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	705a      	strb	r2, [r3, #1]
 8002e86:	e00b      	b.n	8002ea0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	015b      	lsls	r3, r3, #5
 8002e90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_EP_Close+0x5e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e00e      	b.n	8002ed8 <HAL_PCD_EP_Close+0x7c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fc45 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	460b      	mov	r3, r1
 8002eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef0:	7afb      	ldrb	r3, [r7, #11]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	015b      	lsls	r3, r3, #5
 8002ef8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2200      	movs	r2, #0
 8002f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f26:	7afb      	ldrb	r3, [r7, #11]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6979      	ldr	r1, [r7, #20]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fda4 	bl	8005a84 <USB_EPStartXfer>
 8002f3c:	e005      	b.n	8002f4a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f002 fd9d 	bl	8005a84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	330a      	adds	r3, #10
 8002f6a:	015b      	lsls	r3, r3, #5
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	015b      	lsls	r3, r3, #5
 8002f94:	3328      	adds	r3, #40	; 0x28
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fb4:	7afb      	ldrb	r3, [r7, #11]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6979      	ldr	r1, [r7, #20]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 fd57 	bl	8005a84 <USB_EPStartXfer>
 8002fd6:	e005      	b.n	8002fe4 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6979      	ldr	r1, [r7, #20]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f002 fd50 	bl	8005a84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	f003 0207 	and.w	r2, r3, #7
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d901      	bls.n	800300c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e046      	b.n	800309a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800300c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003010:	2b00      	cmp	r3, #0
 8003012:	da0b      	bge.n	800302c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	3328      	adds	r3, #40	; 0x28
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	705a      	strb	r2, [r3, #1]
 800302a:	e009      	b.n	8003040 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	015b      	lsls	r3, r3, #5
 8003030:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_PCD_EP_SetStall+0x72>
 800305c:	2302      	movs	r3, #2
 800305e:	e01c      	b.n	800309a <HAL_PCD_EP_SetStall+0xac>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	4618      	mov	r0, r3
 8003070:	f002 ffc0 	bl	8005ff4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f003 f8be 	bl	800620c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d901      	bls.n	80030c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e03a      	b.n	8003136 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	da0b      	bge.n	80030e0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	3328      	adds	r3, #40	; 0x28
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	705a      	strb	r2, [r3, #1]
 80030de:	e00b      	b.n	80030f8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	015b      	lsls	r3, r3, #5
 80030e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_PCD_EP_ClrStall+0x76>
 8003114:	2302      	movs	r3, #2
 8003116:	e00e      	b.n	8003136 <HAL_PCD_EP_ClrStall+0x94>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68f9      	ldr	r1, [r7, #12]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 ffa6 	bl	8006078 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003148:	e282      	b.n	8003650 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003152:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003154:	8afb      	ldrh	r3, [r7, #22]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800315e:	7d7b      	ldrb	r3, [r7, #21]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f040 8142 	bne.w	80033ea <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003166:	8afb      	ldrh	r3, [r7, #22]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d151      	bne.n	8003214 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800317c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003180:	b29c      	uxth	r4, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800318a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318e:	b29b      	uxth	r3, r3
 8003190:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	3302      	adds	r3, #2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031d2:	2100      	movs	r1, #0
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f004 fe67 	bl	8007ea8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8234 	beq.w	8003650 <PCD_EP_ISR_Handler+0x510>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 822f 	bne.w	8003650 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b292      	uxth	r2, r2
 8003206:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003212:	e21d      	b.n	8003650 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800321a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003224:	8a7b      	ldrh	r3, [r7, #18]
 8003226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322a:	2b00      	cmp	r3, #0
 800322c:	d033      	beq.n	8003296 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003236:	b29b      	uxth	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	3306      	adds	r3, #6
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800326c:	b29b      	uxth	r3, r3
 800326e:	f003 f81c 	bl	80062aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29a      	uxth	r2, r3
 800327a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800327e:	4013      	ands	r3, r2
 8003280:	b29c      	uxth	r4, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800328a:	b292      	uxth	r2, r2
 800328c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f004 fde0 	bl	8007e54 <HAL_PCD_SetupStageCallback>
 8003294:	e1dc      	b.n	8003650 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003296:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f280 81d8 	bge.w	8003650 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29c      	uxth	r4, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80032b8:	b292      	uxth	r2, r2
 80032ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	3306      	adds	r3, #6
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d019      	beq.n	8003324 <PCD_EP_ISR_Handler+0x1e4>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6959      	ldr	r1, [r3, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003308:	b29b      	uxth	r3, r3
 800330a:	f002 ffce 	bl	80062aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	441a      	add	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800331c:	2100      	movs	r1, #0
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f004 fdaa 	bl	8007e78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461c      	mov	r4, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	441c      	add	r4, r3
 8003336:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800333a:	461c      	mov	r4, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10e      	bne.n	8003362 <PCD_EP_ISR_Handler+0x222>
 8003344:	8823      	ldrh	r3, [r4, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800334c:	b29b      	uxth	r3, r3
 800334e:	8023      	strh	r3, [r4, #0]
 8003350:	8823      	ldrh	r3, [r4, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800335c:	b29b      	uxth	r3, r3
 800335e:	8023      	strh	r3, [r4, #0]
 8003360:	e02d      	b.n	80033be <PCD_EP_ISR_Handler+0x27e>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b3e      	cmp	r3, #62	; 0x3e
 8003368:	d812      	bhi.n	8003390 <PCD_EP_ISR_Handler+0x250>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <PCD_EP_ISR_Handler+0x244>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	3301      	adds	r3, #1
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	b29b      	uxth	r3, r3
 8003388:	029b      	lsls	r3, r3, #10
 800338a:	b29b      	uxth	r3, r3
 800338c:	8023      	strh	r3, [r4, #0]
 800338e:	e016      	b.n	80033be <PCD_EP_ISR_Handler+0x27e>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	61bb      	str	r3, [r7, #24]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <PCD_EP_ISR_Handler+0x26a>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	b29c      	uxth	r4, r3
 80033d0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80033d4:	b29c      	uxth	r4, r3
 80033d6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033da:	b29c      	uxth	r4, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4ba2      	ldr	r3, [pc, #648]	; (800366c <PCD_EP_ISR_Handler+0x52c>)
 80033e2:	4323      	orrs	r3, r4
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	8013      	strh	r3, [r2, #0]
 80033e8:	e132      	b.n	8003650 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	7d7b      	ldrb	r3, [r7, #21]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f280 80d1 	bge.w	80035a6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	7d7b      	ldrb	r3, [r7, #21]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29a      	uxth	r2, r3
 8003414:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003418:	4013      	ands	r3, r2
 800341a:	b29c      	uxth	r4, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	7d7b      	ldrb	r3, [r7, #21]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800342c:	b292      	uxth	r2, r2
 800342e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003430:	7d7b      	ldrb	r3, [r7, #21]
 8003432:	015b      	lsls	r3, r3, #5
 8003434:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	7b1b      	ldrb	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d121      	bne.n	800348a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	3306      	adds	r3, #6
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003470:	8bfb      	ldrh	r3, [r7, #30]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d072      	beq.n	800355c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6959      	ldr	r1, [r3, #20]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88da      	ldrh	r2, [r3, #6]
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	f002 ff11 	bl	80062aa <USB_ReadPMA>
 8003488:	e068      	b.n	800355c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d021      	beq.n	80034e8 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	3302      	adds	r3, #2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034cc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02a      	beq.n	800352a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6959      	ldr	r1, [r3, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	891a      	ldrh	r2, [r3, #8]
 80034e0:	8bfb      	ldrh	r3, [r7, #30]
 80034e2:	f002 fee2 	bl	80062aa <USB_ReadPMA>
 80034e6:	e020      	b.n	800352a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	3306      	adds	r3, #6
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003510:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003512:	8bfb      	ldrh	r3, [r7, #30]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6959      	ldr	r1, [r3, #20]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	895a      	ldrh	r2, [r3, #10]
 8003524:	8bfb      	ldrh	r3, [r7, #30]
 8003526:	f002 fec0 	bl	80062aa <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003544:	b29c      	uxth	r4, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	441a      	add	r2, r3
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <PCD_EP_ISR_Handler+0x530>)
 8003556:	4323      	orrs	r3, r4
 8003558:	b29b      	uxth	r3, r3
 800355a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	8bfb      	ldrh	r3, [r7, #30]
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	8bfb      	ldrh	r3, [r7, #30]
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <PCD_EP_ISR_Handler+0x446>
 800357c:	8bfa      	ldrh	r2, [r7, #30]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	429a      	cmp	r2, r3
 8003584:	d206      	bcs.n	8003594 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f004 fc73 	bl	8007e78 <HAL_PCD_DataOutStageCallback>
 8003592:	e008      	b.n	80035a6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	7819      	ldrb	r1, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fc9d 	bl	8002ee0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035a6:	8a7b      	ldrh	r3, [r7, #18]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d04f      	beq.n	8003650 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80035b0:	7d7b      	ldrb	r3, [r7, #21]
 80035b2:	015b      	lsls	r3, r3, #5
 80035b4:	3328      	adds	r3, #40	; 0x28
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	7d7b      	ldrb	r3, [r7, #21]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	b29c      	uxth	r4, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	7d7b      	ldrb	r3, [r7, #21]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80035e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	461a      	mov	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	3302      	adds	r3, #2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f004 fc36 	bl	8007ea8 <HAL_PCD_DataInStageCallback>
 800363c:	e008      	b.n	8003650 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	7819      	ldrb	r1, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fc96 	bl	8002f7c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003658:	b29b      	uxth	r3, r3
 800365a:	b21b      	sxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f6ff ad74 	blt.w	800314a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3724      	adds	r7, #36	; 0x24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}
 800366c:	ffff8080 	.word	0xffff8080
 8003670:	ffff80c0 	.word	0xffff80c0

08003674 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	817b      	strh	r3, [r7, #10]
 8003682:	4613      	mov	r3, r2
 8003684:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	015b      	lsls	r3, r3, #5
 800369a:	3328      	adds	r3, #40	; 0x28
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e006      	b.n	80036b2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036a4:	897b      	ldrh	r3, [r7, #10]
 80036a6:	015b      	lsls	r3, r3, #5
 80036a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036b2:	893b      	ldrh	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2200      	movs	r2, #0
 80036bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	80da      	strh	r2, [r3, #6]
 80036c6:	e00b      	b.n	80036e0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2201      	movs	r2, #1
 80036cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	b29a      	uxth	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e26c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8087 	beq.w	800381a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 030c 	and.w	r3, r3, #12
 8003714:	2b04      	cmp	r3, #4
 8003716:	d00c      	beq.n	8003732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003718:	4b8f      	ldr	r3, [pc, #572]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d112      	bne.n	800374a <HAL_RCC_OscConfig+0x5e>
 8003724:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003732:	4b89      	ldr	r3, [pc, #548]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d06c      	beq.n	8003818 <HAL_RCC_OscConfig+0x12c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d168      	bne.n	8003818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e246      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x76>
 8003754:	4b80      	ldr	r3, [pc, #512]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	e02e      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x98>
 800376a:	4b7b      	ldr	r3, [pc, #492]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a7a      	ldr	r2, [pc, #488]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b78      	ldr	r3, [pc, #480]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a77      	ldr	r2, [pc, #476]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800377c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0xbc>
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a71      	ldr	r2, [pc, #452]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xd4>
 80037a8:	4b6b      	ldr	r3, [pc, #428]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a6a      	ldr	r2, [pc, #424]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b68      	ldr	r3, [pc, #416]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a67      	ldr	r2, [pc, #412]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fc64 	bl	8002094 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe fc60 	bl	8002094 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1fa      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b5d      	ldr	r3, [pc, #372]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xe4>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fc50 	bl	8002094 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe fc4c 	bl	8002094 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e1e6      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b53      	ldr	r3, [pc, #332]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x10c>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d063      	beq.n	80038ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003826:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003832:	4b49      	ldr	r3, [pc, #292]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d11c      	bne.n	8003878 <HAL_RCC_OscConfig+0x18c>
 800383e:	4b46      	ldr	r3, [pc, #280]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d116      	bne.n	8003878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e1ba      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003862:	4b3d      	ldr	r3, [pc, #244]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4939      	ldr	r1, [pc, #228]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	e03a      	b.n	80038ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <HAL_RCC_OscConfig+0x270>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe fc05 	bl	8002094 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fe fc01 	bl	8002094 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e19b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4927      	ldr	r1, [pc, #156]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	600b      	str	r3, [r1, #0]
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <HAL_RCC_OscConfig+0x270>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fe fbe4 	bl	8002094 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d0:	f7fe fbe0 	bl	8002094 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e17a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d03a      	beq.n	8003970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d019      	beq.n	8003936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003902:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fe fbc4 	bl	8002094 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fbc0 	bl	8002094 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e15a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <HAL_RCC_OscConfig+0x26c>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f000 fada 	bl	8003ee8 <RCC_Delay>
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <HAL_RCC_OscConfig+0x274>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393c:	f7fe fbaa 	bl	8002094 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003942:	e00f      	b.n	8003964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003944:	f7fe fba6 	bl	8002094 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d908      	bls.n	8003964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e140      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
 8003956:	bf00      	nop
 8003958:	40021000 	.word	0x40021000
 800395c:	42420000 	.word	0x42420000
 8003960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	4b9e      	ldr	r3, [pc, #632]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e9      	bne.n	8003944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a6 	beq.w	8003aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003982:	4b97      	ldr	r3, [pc, #604]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10d      	bne.n	80039aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398e:	4b94      	ldr	r3, [pc, #592]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4a93      	ldr	r2, [pc, #588]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	61d3      	str	r3, [r2, #28]
 800399a:	4b91      	ldr	r3, [pc, #580]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b8b      	ldr	r3, [pc, #556]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a8a      	ldr	r2, [pc, #552]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7fe fb67 	bl	8002094 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fe fb63 	bl	8002094 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e0fd      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCC_OscConfig+0x4f8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x312>
 80039f0:	4b7b      	ldr	r3, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e02d      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x334>
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	6213      	str	r3, [r2, #32]
 8003a12:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4a72      	ldr	r2, [pc, #456]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	6213      	str	r3, [r2, #32]
 8003a1e:	e01c      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x356>
 8003a28:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4a69      	ldr	r2, [pc, #420]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6213      	str	r3, [r2, #32]
 8003a40:	e00b      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
 8003a42:	4b67      	ldr	r3, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4a63      	ldr	r2, [pc, #396]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a62:	f7fe fb17 	bl	8002094 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe fb13 	bl	8002094 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0ab      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a80:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0ee      	beq.n	8003a6a <HAL_RCC_OscConfig+0x37e>
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fb01 	bl	8002094 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fe fafd 	bl	8002094 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e095      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aac:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ee      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d105      	bne.n	8003aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abe:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a47      	ldr	r2, [pc, #284]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8081 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d061      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d146      	bne.n	8003b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae8:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <HAL_RCC_OscConfig+0x4fc>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fad1 	bl	8002094 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe facd 	bl	8002094 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e067      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f0      	bne.n	8003af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d108      	bne.n	8003b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b1e:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	492d      	ldr	r1, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a19      	ldr	r1, [r3, #32]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	430b      	orrs	r3, r1
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x4fc>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fe faa1 	bl	8002094 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fe fa9d 	bl	8002094 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e037      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x46a>
 8003b74:	e02f      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <HAL_RCC_OscConfig+0x4fc>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fa8a 	bl	8002094 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe fa86 	bl	8002094 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e020      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x498>
 8003ba2:	e018      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e013      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	42420060 	.word	0x42420060

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0d0      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d910      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 0207 	bic.w	r2, r3, #7
 8003c16:	4965      	ldr	r1, [pc, #404]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d040      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d115      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e073      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06b      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4936      	ldr	r1, [pc, #216]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe f9da 	bl	8002094 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fe f9d6 	bl	8002094 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e053      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2d      	ldr	r3, [pc, #180]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d210      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1cc>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1d0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe f938 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40022000 	.word	0x40022000
 8003db0:	40021000 	.word	0x40021000
 8003db4:	0800a97c 	.word	0x0800a97c
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	b490      	push	{r4, r7}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dc8:	1d3c      	adds	r4, r7, #4
 8003dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d002      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d003      	beq.n	8003e06 <HAL_RCC_GetSysClockFreq+0x46>
 8003dfe:	e02d      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e02:	623b      	str	r3, [r7, #32]
      break;
 8003e04:	e02d      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e12:	4413      	add	r3, r2
 8003e14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c5b      	lsrs	r3, r3, #17
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e32:	4413      	add	r3, r2
 8003e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e3e:	fb02 f203 	mul.w	r2, r2, r3
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4a:	e004      	b.n	8003e56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	623b      	str	r3, [r7, #32]
      break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e5e:	623b      	str	r3, [r7, #32]
      break;
 8003e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e62:	6a3b      	ldr	r3, [r7, #32]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc90      	pop	{r4, r7}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	0800a920 	.word	0x0800a920
 8003e74:	0800a930 	.word	0x0800a930
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	007a1200 	.word	0x007a1200
 8003e80:	003d0900 	.word	0x003d0900

08003e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b02      	ldr	r3, [pc, #8]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	20000000 	.word	0x20000000

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff2 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	0800a98c 	.word	0x0800a98c

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffde 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4601      	mov	r1, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	0adb      	lsrs	r3, r3, #11
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4a03      	ldr	r2, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	0800a98c 	.word	0x0800a98c

08003ee8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <RCC_Delay+0x34>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <RCC_Delay+0x38>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0a5b      	lsrs	r3, r3, #9
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	fb02 f303 	mul.w	r3, r2, r3
 8003f02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f04:	bf00      	nop
  }
  while (Delay --);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1e5a      	subs	r2, r3, #1
 8003f0a:	60fa      	str	r2, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f9      	bne.n	8003f04 <RCC_Delay+0x1c>
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	10624dd3 	.word	0x10624dd3

08003f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d07d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f40:	2300      	movs	r3, #0
 8003f42:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f44:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10d      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	61d3      	str	r3, [r2, #28]
 8003f5c:	4b49      	ldr	r3, [pc, #292]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b46      	ldr	r3, [pc, #280]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d118      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a42      	ldr	r2, [pc, #264]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f84:	f7fe f886 	bl	8002094 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	e008      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8c:	f7fe f882 	bl	8002094 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e06d      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d02e      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d027      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fc8:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fde:	4a29      	ldr	r2, [pc, #164]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fe f851 	bl	8002094 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	e00a      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fe f84d 	bl	8002094 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	f241 3288 	movw	r2, #5000	; 0x1388
 8004004:	4293      	cmp	r3, r2
 8004006:	d901      	bls.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e036      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ee      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4917      	ldr	r1, [pc, #92]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	4313      	orrs	r3, r2
 8004028:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	4a13      	ldr	r2, [pc, #76]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004048:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	490b      	ldr	r1, [pc, #44]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	4313      	orrs	r3, r2
 8004058:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004066:	4b07      	ldr	r3, [pc, #28]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4904      	ldr	r1, [pc, #16]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	40007000 	.word	0x40007000
 800408c:	42420440 	.word	0x42420440

08004090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e01d      	b.n	80040de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd fd44 	bl	8001b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f000 f902 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fad6 	bl	80046ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_TIM_PWM_Start+0x60>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d107      	bne.n	800411a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d007      	beq.n	800413c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00

0800414c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004162:	2302      	movs	r3, #2
 8004164:	e0b4      	b.n	80042d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	f200 809f 	bhi.w	80042bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	080041b9 	.word	0x080041b9
 8004188:	080042bd 	.word	0x080042bd
 800418c:	080042bd 	.word	0x080042bd
 8004190:	080042bd 	.word	0x080042bd
 8004194:	080041f9 	.word	0x080041f9
 8004198:	080042bd 	.word	0x080042bd
 800419c:	080042bd 	.word	0x080042bd
 80041a0:	080042bd 	.word	0x080042bd
 80041a4:	0800423b 	.word	0x0800423b
 80041a8:	080042bd 	.word	0x080042bd
 80041ac:	080042bd 	.word	0x080042bd
 80041b0:	080042bd 	.word	0x080042bd
 80041b4:	0800427b 	.word	0x0800427b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f8ec 	bl	800439c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	619a      	str	r2, [r3, #24]
      break;
 80041f6:	e062      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f932 	bl	8004468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6999      	ldr	r1, [r3, #24]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	021a      	lsls	r2, r3, #8
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	619a      	str	r2, [r3, #24]
      break;
 8004238:	e041      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 f97b 	bl	800453c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0208 	orr.w	r2, r2, #8
 8004254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0204 	bic.w	r2, r2, #4
 8004264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69d9      	ldr	r1, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	61da      	str	r2, [r3, #28]
      break;
 8004278:	e021      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f9c5 	bl	8004610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69d9      	ldr	r1, [r3, #28]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	021a      	lsls	r2, r3, #8
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	61da      	str	r2, [r3, #28]
      break;
 80042ba:	e000      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a29      	ldr	r2, [pc, #164]	; (8004390 <TIM_Base_SetConfig+0xb8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00b      	beq.n	8004308 <TIM_Base_SetConfig+0x30>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d007      	beq.n	8004308 <TIM_Base_SetConfig+0x30>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a26      	ldr	r2, [pc, #152]	; (8004394 <TIM_Base_SetConfig+0xbc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_Base_SetConfig+0x30>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a25      	ldr	r2, [pc, #148]	; (8004398 <TIM_Base_SetConfig+0xc0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d108      	bne.n	800431a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <TIM_Base_SetConfig+0xb8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00b      	beq.n	800433a <TIM_Base_SetConfig+0x62>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d007      	beq.n	800433a <TIM_Base_SetConfig+0x62>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <TIM_Base_SetConfig+0xbc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d003      	beq.n	800433a <TIM_Base_SetConfig+0x62>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a18      	ldr	r2, [pc, #96]	; (8004398 <TIM_Base_SetConfig+0xc0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d108      	bne.n	800434c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a07      	ldr	r2, [pc, #28]	; (8004390 <TIM_Base_SetConfig+0xb8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800

0800439c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f023 0201 	bic.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0303 	bic.w	r3, r3, #3
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 0302 	bic.w	r3, r3, #2
 80043e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <TIM_OC1_SetConfig+0xc8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10c      	bne.n	8004412 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f023 0308 	bic.w	r3, r3, #8
 80043fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <TIM_OC1_SetConfig+0xc8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00

08004468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0210 	bic.w	r2, r3, #16
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0320 	bic.w	r3, r3, #32
 80044b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <TIM_OC2_SetConfig+0xd0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10d      	bne.n	80044e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a14      	ldr	r2, [pc, #80]	; (8004538 <TIM_OC2_SetConfig+0xd0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d113      	bne.n	8004514 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	40012c00 	.word	0x40012c00

0800453c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0303 	bic.w	r3, r3, #3
 8004572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a1d      	ldr	r2, [pc, #116]	; (800460c <TIM_OC3_SetConfig+0xd0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10d      	bne.n	80045b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a14      	ldr	r2, [pc, #80]	; (800460c <TIM_OC3_SetConfig+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d113      	bne.n	80045e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	621a      	str	r2, [r3, #32]
}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40012c00 	.word	0x40012c00

08004610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	031b      	lsls	r3, r3, #12
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <TIM_OC4_SetConfig+0x98>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d109      	bne.n	8004684 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	40012c00 	.word	0x40012c00

080046ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2201      	movs	r2, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	fa01 f303 	lsl.w	r3, r1, r3
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e032      	b.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004744:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e03f      	b.n	800480e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fa6e 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	; 0x24
 80047ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb8d 	bl	8004ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b088      	sub	sp, #32
 800481a:	af02      	add	r7, sp, #8
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	f040 8083 	bne.w	800493e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <HAL_UART_Transmit+0x2e>
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e07b      	b.n	8004940 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800484e:	2b01      	cmp	r3, #1
 8004850:	d101      	bne.n	8004856 <HAL_UART_Transmit+0x40>
 8004852:	2302      	movs	r3, #2
 8004854:	e074      	b.n	8004940 <HAL_UART_Transmit+0x12a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2221      	movs	r2, #33	; 0x21
 8004868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800486c:	f7fd fc12 	bl	8002094 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800487e:	e042      	b.n	8004906 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d122      	bne.n	80048de <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2200      	movs	r2, #0
 80048a0:	2180      	movs	r1, #128	; 0x80
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f9b2 	bl	8004c0c <UART_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e046      	b.n	8004940 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3302      	adds	r3, #2
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	e017      	b.n	8004906 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	3301      	adds	r3, #1
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	e013      	b.n	8004906 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2180      	movs	r1, #128	; 0x80
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f98f 	bl	8004c0c <UART_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e023      	b.n	8004940 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	60ba      	str	r2, [r7, #8]
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1b7      	bne.n	8004880 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2200      	movs	r2, #0
 8004918:	2140      	movs	r1, #64	; 0x40
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f976 	bl	8004c0c <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e00a      	b.n	8004940 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b20      	cmp	r3, #32
 8004960:	d140      	bne.n	80049e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_Receive_IT+0x26>
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e039      	b.n	80049e6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_UART_Receive_IT+0x38>
 800497c:	2302      	movs	r3, #2
 800497e:	e032      	b.n	80049e6 <HAL_UART_Receive_IT+0x9e>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2222      	movs	r2, #34	; 0x22
 80049a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049be:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0220 	orr.w	r2, r2, #32
 80049de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e000      	b.n	80049e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
  }
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10d      	bne.n	8004a42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d008      	beq.n	8004a42 <HAL_UART_IRQHandler+0x52>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9ce 	bl	8004ddc <UART_Receive_IT>
      return;
 8004a40:	e0cc      	b.n	8004bdc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 80ab 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x1b0>
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_UART_IRQHandler+0x70>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80a0 	beq.w	8004ba0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_UART_IRQHandler+0x90>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	f043 0201 	orr.w	r2, r3, #1
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0304 	and.w	r3, r3, #4
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xb0>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	f043 0202 	orr.w	r2, r3, #2
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xd0>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	f043 0204 	orr.w	r2, r3, #4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_UART_IRQHandler+0xf0>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	f043 0208 	orr.w	r2, r3, #8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d078      	beq.n	8004bda <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_UART_IRQHandler+0x112>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f96d 	bl	8004ddc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf14      	ite	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	2300      	moveq	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <HAL_UART_IRQHandler+0x13a>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d031      	beq.n	8004b8e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8b8 	bl	8004ca0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d023      	beq.n	8004b86 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d013      	beq.n	8004b7e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <HAL_UART_IRQHandler+0x1f4>)
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fd fbd0 	bl	8002308 <HAL_DMA_Abort_IT>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e00e      	b.n	8004b9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f83b 	bl	8004bfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	e00a      	b.n	8004b9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f837 	bl	8004bfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	e006      	b.n	8004b9c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f833 	bl	8004bfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b9a:	e01e      	b.n	8004bda <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	bf00      	nop
    return;
 8004b9e:	e01c      	b.n	8004bda <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <HAL_UART_IRQHandler+0x1cc>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8a4 	bl	8004d02 <UART_Transmit_IT>
    return;
 8004bba:	e00f      	b.n	8004bdc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <HAL_UART_IRQHandler+0x1ec>
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f8eb 	bl	8004dac <UART_EndTransmit_IT>
    return;
 8004bd6:	bf00      	nop
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_IRQHandler+0x1ec>
    return;
 8004bda:	bf00      	nop
  }
}
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08004cdb 	.word	0x08004cdb

08004be8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	e02c      	b.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c24:	d028      	beq.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2c:	f7fd fa32 	bl	8002094 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d21d      	bcs.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e00f      	b.n	8004c98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4013      	ands	r3, r2
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	79fb      	ldrb	r3, [r7, #7]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d0c3      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cb6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff ff80 	bl	8004bfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b21      	cmp	r3, #33	; 0x21
 8004d14:	d144      	bne.n	8004da0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d11a      	bne.n	8004d56 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d34:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d105      	bne.n	8004d4a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	621a      	str	r2, [r3, #32]
 8004d48:	e00e      	b.n	8004d68 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	621a      	str	r2, [r3, #32]
 8004d54:	e008      	b.n	8004d68 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6211      	str	r1, [r2, #32]
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4619      	mov	r1, r3
 8004d76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10f      	bne.n	8004d9c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff0b 	bl	8004be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b22      	cmp	r3, #34	; 0x22
 8004dee:	d171      	bne.n	8004ed4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d123      	bne.n	8004e42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10e      	bne.n	8004e26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	1c9a      	adds	r2, r3, #2
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28
 8004e24:	e029      	b.n	8004e7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e40:	e01b      	b.n	8004e7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6858      	ldr	r0, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	1c59      	adds	r1, r3, #1
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6291      	str	r1, [r2, #40]	; 0x28
 8004e5a:	b2c2      	uxtb	r2, r0
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e00c      	b.n	8004e7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	1c58      	adds	r0, r3, #1
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	6288      	str	r0, [r1, #40]	; 0x28
 8004e72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4619      	mov	r1, r3
 8004e88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d120      	bne.n	8004ed0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0220 	bic.w	r2, r2, #32
 8004e9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb ff78 	bl	8000dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e002      	b.n	8004ed6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f1a:	f023 030c 	bic.w	r3, r3, #12
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a52      	ldr	r2, [pc, #328]	; (800508c <UART_SetConfig+0x1ac>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d14e      	bne.n	8004fe6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7fe ffba 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009a      	lsls	r2, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	4a4a      	ldr	r2, [pc, #296]	; (8005090 <UART_SetConfig+0x1b0>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	0119      	lsls	r1, r3, #4
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009a      	lsls	r2, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f84:	4b42      	ldr	r3, [pc, #264]	; (8005090 <UART_SetConfig+0x1b0>)
 8004f86:	fba3 0302 	umull	r0, r3, r3, r2
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2064      	movs	r0, #100	; 0x64
 8004f8e:	fb00 f303 	mul.w	r3, r0, r3
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	3332      	adds	r3, #50	; 0x32
 8004f98:	4a3d      	ldr	r2, [pc, #244]	; (8005090 <UART_SetConfig+0x1b0>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa4:	4419      	add	r1, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009a      	lsls	r2, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <UART_SetConfig+0x1b0>)
 8004fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	2064      	movs	r0, #100	; 0x64
 8004fc6:	fb00 f303 	mul.w	r3, r0, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	3332      	adds	r3, #50	; 0x32
 8004fd0:	4a2f      	ldr	r2, [pc, #188]	; (8005090 <UART_SetConfig+0x1b0>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	f003 020f 	and.w	r2, r3, #15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004fe4:	e04d      	b.n	8005082 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe ff57 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8004fea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009a      	lsls	r2, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	4a23      	ldr	r2, [pc, #140]	; (8005090 <UART_SetConfig+0x1b0>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	0119      	lsls	r1, r3, #4
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009a      	lsls	r2, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <UART_SetConfig+0x1b0>)
 8005024:	fba3 0302 	umull	r0, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2064      	movs	r0, #100	; 0x64
 800502c:	fb00 f303 	mul.w	r3, r0, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	3332      	adds	r3, #50	; 0x32
 8005036:	4a16      	ldr	r2, [pc, #88]	; (8005090 <UART_SetConfig+0x1b0>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005042:	4419      	add	r1, r3
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009a      	lsls	r2, r3, #2
 800504e:	441a      	add	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	fbb2 f2f3 	udiv	r2, r2, r3
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <UART_SetConfig+0x1b0>)
 800505c:	fba3 0302 	umull	r0, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2064      	movs	r0, #100	; 0x64
 8005064:	fb00 f303 	mul.w	r3, r0, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	; (8005090 <UART_SetConfig+0x1b0>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	440a      	add	r2, r1
 8005080:	609a      	str	r2, [r3, #8]
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40013800 	.word	0x40013800
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005094:	b084      	sub	sp, #16
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	f107 0014 	add.w	r0, r7, #20
 80050a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	b004      	add	sp, #16
 80050b2:	4770      	bx	lr

080050b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050c0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	89fb      	ldrh	r3, [r7, #14]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050ea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050ee:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	b21a      	sxth	r2, r3
 80050fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050fe:	43db      	mvns	r3, r3
 8005100:	b21b      	sxth	r3, r3
 8005102:	4013      	ands	r3, r2
 8005104:	b21b      	sxth	r3, r3
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005132:	b084      	sub	sp, #16
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	f107 0014 	add.w	r0, r7, #20
 8005140:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ffa5 	bl	80050b4 <USB_EnableGlobalInt>

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005176:	b004      	add	sp, #16
 8005178:	4770      	bx	lr
	...

0800517c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800517c:	b490      	push	{r4, r7}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	78db      	ldrb	r3, [r3, #3]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d819      	bhi.n	80051de <USB_ActivateEndpoint+0x62>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <USB_ActivateEndpoint+0x34>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051d5 	.word	0x080051d5
 80051b8:	080051e5 	.word	0x080051e5
 80051bc:	080051cb 	.word	0x080051cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051c0:	89bb      	ldrh	r3, [r7, #12]
 80051c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c6:	81bb      	strh	r3, [r7, #12]
      break;
 80051c8:	e00d      	b.n	80051e6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051ca:	89bb      	ldrh	r3, [r7, #12]
 80051cc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051d0:	81bb      	strh	r3, [r7, #12]
      break;
 80051d2:	e008      	b.n	80051e6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051d4:	89bb      	ldrh	r3, [r7, #12]
 80051d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051da:	81bb      	strh	r3, [r7, #12]
      break;
 80051dc:	e003      	b.n	80051e6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
      break;
 80051e2:	e000      	b.n	80051e6 <USB_ActivateEndpoint+0x6a>
      break;
 80051e4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	441a      	add	r2, r3
 80051f0:	89bb      	ldrh	r3, [r7, #12]
 80051f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521c:	b29a      	uxth	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	b29c      	uxth	r4, r3
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	4b8a      	ldr	r3, [pc, #552]	; (800545c <USB_ActivateEndpoint+0x2e0>)
 8005234:	4323      	orrs	r3, r4
 8005236:	b29b      	uxth	r3, r3
 8005238:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	7b1b      	ldrb	r3, [r3, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8112 	bne.w	8005468 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	785b      	ldrb	r3, [r3, #1]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d067      	beq.n	800531c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800524c:	687c      	ldr	r4, [r7, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005254:	b29b      	uxth	r3, r3
 8005256:	441c      	add	r4, r3
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4423      	add	r3, r4
 8005260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005264:	461c      	mov	r4, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	88db      	ldrh	r3, [r3, #6]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	b29b      	uxth	r3, r3
 8005272:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29c      	uxth	r4, r3
 8005282:	4623      	mov	r3, r4
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d014      	beq.n	80052b6 <USB_ActivateEndpoint+0x13a>
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a2:	b29c      	uxth	r4, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <USB_ActivateEndpoint+0x2e4>)
 80052b0:	4323      	orrs	r3, r4
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d018      	beq.n	80052f0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d4:	b29c      	uxth	r4, r3
 80052d6:	f084 0320 	eor.w	r3, r4, #32
 80052da:	b29c      	uxth	r4, r3
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	4b5d      	ldr	r3, [pc, #372]	; (800545c <USB_ActivateEndpoint+0x2e0>)
 80052e8:	4323      	orrs	r3, r4
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]
 80052ee:	e22b      	b.n	8005748 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005306:	b29c      	uxth	r4, r3
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	441a      	add	r2, r3
 8005312:	4b52      	ldr	r3, [pc, #328]	; (800545c <USB_ActivateEndpoint+0x2e0>)
 8005314:	4323      	orrs	r3, r4
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]
 800531a:	e215      	b.n	8005748 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800531c:	687c      	ldr	r4, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005324:	b29b      	uxth	r3, r3
 8005326:	441c      	add	r4, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	4423      	add	r3, r4
 8005330:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005334:	461c      	mov	r4, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	88db      	ldrh	r3, [r3, #6]
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	b29b      	uxth	r3, r3
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	b29b      	uxth	r3, r3
 8005342:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005344:	687c      	ldr	r4, [r7, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534c:	b29b      	uxth	r3, r3
 800534e:	441c      	add	r4, r3
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	4423      	add	r3, r4
 8005358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800535c:	461c      	mov	r4, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10e      	bne.n	8005384 <USB_ActivateEndpoint+0x208>
 8005366:	8823      	ldrh	r3, [r4, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800536e:	b29b      	uxth	r3, r3
 8005370:	8023      	strh	r3, [r4, #0]
 8005372:	8823      	ldrh	r3, [r4, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537e:	b29b      	uxth	r3, r3
 8005380:	8023      	strh	r3, [r4, #0]
 8005382:	e02d      	b.n	80053e0 <USB_ActivateEndpoint+0x264>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b3e      	cmp	r3, #62	; 0x3e
 800538a:	d812      	bhi.n	80053b2 <USB_ActivateEndpoint+0x236>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <USB_ActivateEndpoint+0x22a>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	029b      	lsls	r3, r3, #10
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8023      	strh	r3, [r4, #0]
 80053b0:	e016      	b.n	80053e0 <USB_ActivateEndpoint+0x264>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 031f 	and.w	r3, r3, #31
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <USB_ActivateEndpoint+0x250>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29c      	uxth	r4, r3
 80053ee:	4623      	mov	r3, r4
 80053f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d014      	beq.n	8005422 <USB_ActivateEndpoint+0x2a6>
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	b29c      	uxth	r4, r3
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	441a      	add	r2, r3
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <USB_ActivateEndpoint+0x2e8>)
 800541c:	4323      	orrs	r3, r4
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005438:	b29c      	uxth	r4, r3
 800543a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800543e:	b29c      	uxth	r4, r3
 8005440:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005444:	b29c      	uxth	r4, r3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	4b02      	ldr	r3, [pc, #8]	; (800545c <USB_ActivateEndpoint+0x2e0>)
 8005452:	4323      	orrs	r3, r4
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
 8005458:	e176      	b.n	8005748 <USB_ActivateEndpoint+0x5cc>
 800545a:	bf00      	nop
 800545c:	ffff8080 	.word	0xffff8080
 8005460:	ffff80c0 	.word	0xffff80c0
 8005464:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	b29c      	uxth	r4, r3
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	441a      	add	r2, r3
 800548a:	4b96      	ldr	r3, [pc, #600]	; (80056e4 <USB_ActivateEndpoint+0x568>)
 800548c:	4323      	orrs	r3, r4
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005492:	687c      	ldr	r4, [r7, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549a:	b29b      	uxth	r3, r3
 800549c:	441c      	add	r4, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4423      	add	r3, r4
 80054a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054aa:	461c      	mov	r4, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	891b      	ldrh	r3, [r3, #8]
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	8023      	strh	r3, [r4, #0]
 80054ba:	687c      	ldr	r4, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	441c      	add	r4, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	4423      	add	r3, r4
 80054ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80054d2:	461c      	mov	r4, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	895b      	ldrh	r3, [r3, #10]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 8088 	bne.w	80055fc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29c      	uxth	r4, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d014      	beq.n	800552e <USB_ActivateEndpoint+0x3b2>
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	b29c      	uxth	r4, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	4b70      	ldr	r3, [pc, #448]	; (80056e8 <USB_ActivateEndpoint+0x56c>)
 8005528:	4323      	orrs	r3, r4
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29c      	uxth	r4, r3
 800553c:	4623      	mov	r3, r4
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d014      	beq.n	8005570 <USB_ActivateEndpoint+0x3f4>
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	b29c      	uxth	r4, r3
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	4b60      	ldr	r3, [pc, #384]	; (80056ec <USB_ActivateEndpoint+0x570>)
 800556a:	4323      	orrs	r3, r4
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	b29c      	uxth	r4, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	4b56      	ldr	r3, [pc, #344]	; (80056ec <USB_ActivateEndpoint+0x570>)
 8005594:	4323      	orrs	r3, r4
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	b29c      	uxth	r4, r3
 80055b2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80055b6:	b29c      	uxth	r4, r3
 80055b8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80055bc:	b29c      	uxth	r4, r3
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	4b49      	ldr	r3, [pc, #292]	; (80056f0 <USB_ActivateEndpoint+0x574>)
 80055ca:	4323      	orrs	r3, r4
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e6:	b29c      	uxth	r4, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <USB_ActivateEndpoint+0x574>)
 80055f4:	4323      	orrs	r3, r4
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
 80055fa:	e0a5      	b.n	8005748 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29c      	uxth	r4, r3
 800560a:	4623      	mov	r3, r4
 800560c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <USB_ActivateEndpoint+0x4c2>
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	b29c      	uxth	r4, r3
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <USB_ActivateEndpoint+0x56c>)
 8005638:	4323      	orrs	r3, r4
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29c      	uxth	r4, r3
 800564c:	4623      	mov	r3, r4
 800564e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d014      	beq.n	8005680 <USB_ActivateEndpoint+0x504>
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566c:	b29c      	uxth	r4, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	441a      	add	r2, r3
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <USB_ActivateEndpoint+0x570>)
 800567a:	4323      	orrs	r3, r4
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	b29c      	uxth	r4, r3
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	441a      	add	r2, r3
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <USB_ActivateEndpoint+0x56c>)
 80056a4:	4323      	orrs	r3, r4
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d020      	beq.n	80056f4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c8:	b29c      	uxth	r4, r3
 80056ca:	f084 0320 	eor.w	r3, r4, #32
 80056ce:	b29c      	uxth	r4, r3
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	441a      	add	r2, r3
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <USB_ActivateEndpoint+0x574>)
 80056dc:	4323      	orrs	r3, r4
 80056de:	b29b      	uxth	r3, r3
 80056e0:	8013      	strh	r3, [r2, #0]
 80056e2:	e01c      	b.n	800571e <USB_ActivateEndpoint+0x5a2>
 80056e4:	ffff8180 	.word	0xffff8180
 80056e8:	ffffc080 	.word	0xffffc080
 80056ec:	ffff80c0 	.word	0xffff80c0
 80056f0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570a:	b29c      	uxth	r4, r3
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <USB_ActivateEndpoint+0x5d8>)
 8005718:	4323      	orrs	r3, r4
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005734:	b29c      	uxth	r4, r3
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	441a      	add	r2, r3
 8005740:	4b04      	ldr	r3, [pc, #16]	; (8005754 <USB_ActivateEndpoint+0x5d8>)
 8005742:	4323      	orrs	r3, r4
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bc90      	pop	{r4, r7}
 8005752:	4770      	bx	lr
 8005754:	ffff8080 	.word	0xffff8080

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005758:	b490      	push	{r4, r7}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	7b1b      	ldrb	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d171      	bne.n	800584e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d036      	beq.n	80057e0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29c      	uxth	r4, r3
 8005780:	4623      	mov	r3, r4
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <USB_DeactivateEndpoint+0x5c>
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	b29c      	uxth	r4, r3
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	4b6b      	ldr	r3, [pc, #428]	; (800595c <USB_DeactivateEndpoint+0x204>)
 80057ae:	4323      	orrs	r3, r4
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ca:	b29c      	uxth	r4, r3
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	4b62      	ldr	r3, [pc, #392]	; (8005960 <USB_DeactivateEndpoint+0x208>)
 80057d8:	4323      	orrs	r3, r4
 80057da:	b29b      	uxth	r3, r3
 80057dc:	8013      	strh	r3, [r2, #0]
 80057de:	e144      	b.n	8005a6a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29c      	uxth	r4, r3
 80057ee:	4623      	mov	r3, r4
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d014      	beq.n	8005822 <USB_DeactivateEndpoint+0xca>
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580e:	b29c      	uxth	r4, r3
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	4b52      	ldr	r3, [pc, #328]	; (8005964 <USB_DeactivateEndpoint+0x20c>)
 800581c:	4323      	orrs	r3, r4
 800581e:	b29b      	uxth	r3, r3
 8005820:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	b29c      	uxth	r4, r3
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	441a      	add	r2, r3
 8005844:	4b46      	ldr	r3, [pc, #280]	; (8005960 <USB_DeactivateEndpoint+0x208>)
 8005846:	4323      	orrs	r3, r4
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]
 800584c:	e10d      	b.n	8005a6a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 8088 	bne.w	8005968 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29c      	uxth	r4, r3
 8005866:	4623      	mov	r3, r4
 8005868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d014      	beq.n	800589a <USB_DeactivateEndpoint+0x142>
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	b29c      	uxth	r4, r3
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	4b34      	ldr	r3, [pc, #208]	; (8005964 <USB_DeactivateEndpoint+0x20c>)
 8005894:	4323      	orrs	r3, r4
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29c      	uxth	r4, r3
 80058a8:	4623      	mov	r3, r4
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d014      	beq.n	80058dc <USB_DeactivateEndpoint+0x184>
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	b29c      	uxth	r4, r3
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <USB_DeactivateEndpoint+0x204>)
 80058d6:	4323      	orrs	r3, r4
 80058d8:	b29b      	uxth	r3, r3
 80058da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f2:	b29c      	uxth	r4, r3
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <USB_DeactivateEndpoint+0x204>)
 8005900:	4323      	orrs	r3, r4
 8005902:	b29b      	uxth	r3, r3
 8005904:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591c:	b29c      	uxth	r4, r3
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <USB_DeactivateEndpoint+0x208>)
 800592a:	4323      	orrs	r3, r4
 800592c:	b29b      	uxth	r3, r3
 800592e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005946:	b29c      	uxth	r4, r3
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	441a      	add	r2, r3
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <USB_DeactivateEndpoint+0x208>)
 8005954:	4323      	orrs	r3, r4
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]
 800595a:	e086      	b.n	8005a6a <USB_DeactivateEndpoint+0x312>
 800595c:	ffff80c0 	.word	0xffff80c0
 8005960:	ffff8080 	.word	0xffff8080
 8005964:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29c      	uxth	r4, r3
 8005976:	4623      	mov	r3, r4
 8005978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d014      	beq.n	80059aa <USB_DeactivateEndpoint+0x252>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	b29c      	uxth	r4, r3
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	4b35      	ldr	r3, [pc, #212]	; (8005a78 <USB_DeactivateEndpoint+0x320>)
 80059a4:	4323      	orrs	r3, r4
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29c      	uxth	r4, r3
 80059b8:	4623      	mov	r3, r4
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d014      	beq.n	80059ec <USB_DeactivateEndpoint+0x294>
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d8:	b29c      	uxth	r4, r3
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	441a      	add	r2, r3
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <USB_DeactivateEndpoint+0x324>)
 80059e6:	4323      	orrs	r3, r4
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	b29c      	uxth	r4, r3
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	4b1a      	ldr	r3, [pc, #104]	; (8005a78 <USB_DeactivateEndpoint+0x320>)
 8005a10:	4323      	orrs	r3, r4
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a2c:	b29c      	uxth	r4, r3
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <USB_DeactivateEndpoint+0x328>)
 8005a3a:	4323      	orrs	r3, r4
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	b29c      	uxth	r4, r3
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	441a      	add	r2, r3
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <USB_DeactivateEndpoint+0x328>)
 8005a64:	4323      	orrs	r3, r4
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc90      	pop	{r4, r7}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	ffffc080 	.word	0xffffc080
 8005a7c:	ffff80c0 	.word	0xffff80c0
 8005a80:	ffff8080 	.word	0xffff8080

08005a84 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b08d      	sub	sp, #52	; 0x34
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	f040 8160 	bne.w	8005d58 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d909      	bls.n	8005ab8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	619a      	str	r2, [r3, #24]
 8005ab6:	e005      	b.n	8005ac4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	7b1b      	ldrb	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d119      	bne.n	8005b00 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	6959      	ldr	r1, [r3, #20]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	88da      	ldrh	r2, [r3, #6]
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fba2 	bl	8006222 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ade:	687c      	ldr	r4, [r7, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	441c      	add	r4, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	4423      	add	r3, r4
 8005af2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005af6:	461c      	mov	r4, r3
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	8023      	strh	r3, [r4, #0]
 8005afe:	e10f      	b.n	8005d20 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d065      	beq.n	8005be2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b16:	687c      	ldr	r4, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d148      	bne.n	8005bb2 <USB_EPStartXfer+0x12e>
 8005b20:	687c      	ldr	r4, [r7, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	441c      	add	r4, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	4423      	add	r3, r4
 8005b34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b38:	461c      	mov	r4, r3
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10e      	bne.n	8005b5e <USB_EPStartXfer+0xda>
 8005b40:	8823      	ldrh	r3, [r4, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8023      	strh	r3, [r4, #0]
 8005b4c:	8823      	ldrh	r3, [r4, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	8023      	strh	r3, [r4, #0]
 8005b5c:	e03d      	b.n	8005bda <USB_EPStartXfer+0x156>
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	2b3e      	cmp	r3, #62	; 0x3e
 8005b62:	d810      	bhi.n	8005b86 <USB_EPStartXfer+0x102>
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <USB_EPStartXfer+0xf6>
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	3301      	adds	r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	029b      	lsls	r3, r3, #10
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8023      	strh	r3, [r4, #0]
 8005b84:	e029      	b.n	8005bda <USB_EPStartXfer+0x156>
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <USB_EPStartXfer+0x118>
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8023      	strh	r3, [r4, #0]
 8005bb0:	e013      	b.n	8005bda <USB_EPStartXfer+0x156>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d10f      	bne.n	8005bda <USB_EPStartXfer+0x156>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	441c      	add	r4, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	4423      	add	r3, r4
 8005bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	895b      	ldrh	r3, [r3, #10]
 8005bde:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005be0:	e063      	b.n	8005caa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d148      	bne.n	8005c7c <USB_EPStartXfer+0x1f8>
 8005bea:	687c      	ldr	r4, [r7, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	441c      	add	r4, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4423      	add	r3, r4
 8005bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c02:	461c      	mov	r4, r3
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10e      	bne.n	8005c28 <USB_EPStartXfer+0x1a4>
 8005c0a:	8823      	ldrh	r3, [r4, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8023      	strh	r3, [r4, #0]
 8005c16:	8823      	ldrh	r3, [r4, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	8023      	strh	r3, [r4, #0]
 8005c26:	e03d      	b.n	8005ca4 <USB_EPStartXfer+0x220>
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2c:	d810      	bhi.n	8005c50 <USB_EPStartXfer+0x1cc>
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	623b      	str	r3, [r7, #32]
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <USB_EPStartXfer+0x1c0>
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	3301      	adds	r3, #1
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	8023      	strh	r3, [r4, #0]
 8005c4e:	e029      	b.n	8005ca4 <USB_EPStartXfer+0x220>
 8005c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <USB_EPStartXfer+0x1e2>
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	623b      	str	r3, [r7, #32]
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	029b      	lsls	r3, r3, #10
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	8023      	strh	r3, [r4, #0]
 8005c7a:	e013      	b.n	8005ca4 <USB_EPStartXfer+0x220>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	785b      	ldrb	r3, [r3, #1]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10f      	bne.n	8005ca4 <USB_EPStartXfer+0x220>
 8005c84:	687c      	ldr	r4, [r7, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	441c      	add	r4, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4423      	add	r3, r4
 8005c98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c9c:	461c      	mov	r4, r3
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	891b      	ldrh	r3, [r3, #8]
 8005ca8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6959      	ldr	r1, [r3, #20]
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fab4 	bl	8006222 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d115      	bne.n	8005cee <USB_EPStartXfer+0x26a>
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd8:	b29c      	uxth	r4, r3
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	441a      	add	r2, r3
 8005ce4:	4b9a      	ldr	r3, [pc, #616]	; (8005f50 <USB_EPStartXfer+0x4cc>)
 8005ce6:	4323      	orrs	r3, r4
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]
 8005cec:	e018      	b.n	8005d20 <USB_EPStartXfer+0x29c>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d114      	bne.n	8005d20 <USB_EPStartXfer+0x29c>
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	b29c      	uxth	r4, r3
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	4b8e      	ldr	r3, [pc, #568]	; (8005f54 <USB_EPStartXfer+0x4d0>)
 8005d1a:	4323      	orrs	r3, r4
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d36:	b29c      	uxth	r4, r3
 8005d38:	f084 0310 	eor.w	r3, r4, #16
 8005d3c:	b29c      	uxth	r4, r3
 8005d3e:	f084 0320 	eor.w	r3, r4, #32
 8005d42:	b29c      	uxth	r4, r3
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	441a      	add	r2, r3
 8005d4e:	4b82      	ldr	r3, [pc, #520]	; (8005f58 <USB_EPStartXfer+0x4d4>)
 8005d50:	4323      	orrs	r3, r4
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
 8005d56:	e146      	b.n	8005fe6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	699a      	ldr	r2, [r3, #24]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d909      	bls.n	8005d78 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	619a      	str	r2, [r3, #24]
 8005d76:	e005      	b.n	8005d84 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	7b1b      	ldrb	r3, [r3, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d148      	bne.n	8005e1e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d8c:	687c      	ldr	r4, [r7, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	441c      	add	r4, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	4423      	add	r3, r4
 8005da0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da4:	461c      	mov	r4, r3
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <USB_EPStartXfer+0x346>
 8005dac:	8823      	ldrh	r3, [r4, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	8023      	strh	r3, [r4, #0]
 8005db8:	8823      	ldrh	r3, [r4, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8023      	strh	r3, [r4, #0]
 8005dc8:	e0f2      	b.n	8005fb0 <USB_EPStartXfer+0x52c>
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005dce:	d810      	bhi.n	8005df2 <USB_EPStartXfer+0x36e>
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <USB_EPStartXfer+0x362>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	3301      	adds	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	029b      	lsls	r3, r3, #10
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8023      	strh	r3, [r4, #0]
 8005df0:	e0de      	b.n	8005fb0 <USB_EPStartXfer+0x52c>
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <USB_EPStartXfer+0x384>
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8023      	strh	r3, [r4, #0]
 8005e1c:	e0c8      	b.n	8005fb0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d148      	bne.n	8005eb8 <USB_EPStartXfer+0x434>
 8005e26:	687c      	ldr	r4, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	441c      	add	r4, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	4423      	add	r3, r4
 8005e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e3e:	461c      	mov	r4, r3
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10e      	bne.n	8005e64 <USB_EPStartXfer+0x3e0>
 8005e46:	8823      	ldrh	r3, [r4, #0]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8023      	strh	r3, [r4, #0]
 8005e52:	8823      	ldrh	r3, [r4, #0]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	8023      	strh	r3, [r4, #0]
 8005e62:	e03d      	b.n	8005ee0 <USB_EPStartXfer+0x45c>
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	2b3e      	cmp	r3, #62	; 0x3e
 8005e68:	d810      	bhi.n	8005e8c <USB_EPStartXfer+0x408>
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <USB_EPStartXfer+0x3fc>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	8023      	strh	r3, [r4, #0]
 8005e8a:	e029      	b.n	8005ee0 <USB_EPStartXfer+0x45c>
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d102      	bne.n	8005ea2 <USB_EPStartXfer+0x41e>
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	029b      	lsls	r3, r3, #10
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8023      	strh	r3, [r4, #0]
 8005eb6:	e013      	b.n	8005ee0 <USB_EPStartXfer+0x45c>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10f      	bne.n	8005ee0 <USB_EPStartXfer+0x45c>
 8005ec0:	687c      	ldr	r4, [r7, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	441c      	add	r4, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	4423      	add	r3, r4
 8005ed4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ed8:	461c      	mov	r4, r3
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8023      	strh	r3, [r4, #0]
 8005ee0:	687c      	ldr	r4, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d14e      	bne.n	8005f88 <USB_EPStartXfer+0x504>
 8005eea:	687c      	ldr	r4, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	441c      	add	r4, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	4423      	add	r3, r4
 8005efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f02:	461c      	mov	r4, r3
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10e      	bne.n	8005f28 <USB_EPStartXfer+0x4a4>
 8005f0a:	8823      	ldrh	r3, [r4, #0]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8023      	strh	r3, [r4, #0]
 8005f16:	8823      	ldrh	r3, [r4, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8023      	strh	r3, [r4, #0]
 8005f26:	e043      	b.n	8005fb0 <USB_EPStartXfer+0x52c>
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f2c:	d816      	bhi.n	8005f5c <USB_EPStartXfer+0x4d8>
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <USB_EPStartXfer+0x4c0>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	3301      	adds	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8023      	strh	r3, [r4, #0]
 8005f4e:	e02f      	b.n	8005fb0 <USB_EPStartXfer+0x52c>
 8005f50:	ffff80c0 	.word	0xffff80c0
 8005f54:	ffffc080 	.word	0xffffc080
 8005f58:	ffff8080 	.word	0xffff8080
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <USB_EPStartXfer+0x4ee>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	029b      	lsls	r3, r3, #10
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8023      	strh	r3, [r4, #0]
 8005f86:	e013      	b.n	8005fb0 <USB_EPStartXfer+0x52c>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10f      	bne.n	8005fb0 <USB_EPStartXfer+0x52c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	441c      	add	r4, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	4423      	add	r3, r4
 8005fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	b29c      	uxth	r4, r3
 8005fc8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005fcc:	b29c      	uxth	r4, r3
 8005fce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005fd2:	b29c      	uxth	r4, r3
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <USB_EPStartXfer+0x56c>)
 8005fe0:	4323      	orrs	r3, r4
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3734      	adds	r7, #52	; 0x34
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	ffff8080 	.word	0xffff8080

08005ff4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ff4:	b490      	push	{r4, r7}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d018      	beq.n	8006038 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601c:	b29c      	uxth	r4, r3
 800601e:	f084 0310 	eor.w	r3, r4, #16
 8006022:	b29c      	uxth	r4, r3
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <USB_EPSetStall+0x80>)
 8006030:	4323      	orrs	r3, r4
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]
 8006036:	e017      	b.n	8006068 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	b29c      	uxth	r4, r3
 8006050:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006054:	b29c      	uxth	r4, r3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	4b04      	ldr	r3, [pc, #16]	; (8006074 <USB_EPSetStall+0x80>)
 8006062:	4323      	orrs	r3, r4
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bc90      	pop	{r4, r7}
 8006072:	4770      	bx	lr
 8006074:	ffff8080 	.word	0xffff8080

08006078 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006078:	b490      	push	{r4, r7}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	7b1b      	ldrb	r3, [r3, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d17d      	bne.n	8006186 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d03d      	beq.n	800610e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29c      	uxth	r4, r3
 80060a0:	4623      	mov	r3, r4
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <USB_EPClearStall+0x5c>
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c0:	b29c      	uxth	r4, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	4b31      	ldr	r3, [pc, #196]	; (8006194 <USB_EPClearStall+0x11c>)
 80060ce:	4323      	orrs	r3, r4
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	78db      	ldrb	r3, [r3, #3]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d054      	beq.n	8006186 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	b29c      	uxth	r4, r3
 80060f4:	f084 0320 	eor.w	r3, r4, #32
 80060f8:	b29c      	uxth	r4, r3
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	4b24      	ldr	r3, [pc, #144]	; (8006198 <USB_EPClearStall+0x120>)
 8006106:	4323      	orrs	r3, r4
 8006108:	b29b      	uxth	r3, r3
 800610a:	8013      	strh	r3, [r2, #0]
 800610c:	e03b      	b.n	8006186 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29c      	uxth	r4, r3
 800611c:	4623      	mov	r3, r4
 800611e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <USB_EPClearStall+0xd8>
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	b29c      	uxth	r4, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	4b14      	ldr	r3, [pc, #80]	; (800619c <USB_EPClearStall+0x124>)
 800614a:	4323      	orrs	r3, r4
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006166:	b29c      	uxth	r4, r3
 8006168:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800616c:	b29c      	uxth	r4, r3
 800616e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006172:	b29c      	uxth	r4, r3
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	441a      	add	r2, r3
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <USB_EPClearStall+0x120>)
 8006180:	4323      	orrs	r3, r4
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bc90      	pop	{r4, r7}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	ffff80c0 	.word	0xffff80c0
 8006198:	ffff8080 	.word	0xffff8080
 800619c:	ffffc080 	.word	0xffffc080

080061a0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2280      	movs	r2, #128	; 0x80
 80061b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bc80      	pop	{r7}
 80061d8:	4770      	bx	lr

080061da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006200:	68fb      	ldr	r3, [r7, #12]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006222:	b480      	push	{r7}
 8006224:	b08d      	sub	sp, #52	; 0x34
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	4611      	mov	r1, r2
 800622e:	461a      	mov	r2, r3
 8006230:	460b      	mov	r3, r1
 8006232:	80fb      	strh	r3, [r7, #6]
 8006234:	4613      	mov	r3, r2
 8006236:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006238:	88bb      	ldrh	r3, [r7, #4]
 800623a:	3301      	adds	r3, #1
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	005a      	lsls	r2, r3, #1
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625a:	e01e      	b.n	800629a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	3301      	adds	r3, #1
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	b29a      	uxth	r2, r3
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	3302      	adds	r3, #2
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	3302      	adds	r3, #2
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	3301      	adds	r3, #1
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	3b01      	subs	r3, #1
 8006298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1dd      	bne.n	800625c <USB_WritePMA+0x3a>
  }
}
 80062a0:	bf00      	nop
 80062a2:	3734      	adds	r7, #52	; 0x34
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b08b      	sub	sp, #44	; 0x2c
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	4611      	mov	r1, r2
 80062b6:	461a      	mov	r2, r3
 80062b8:	460b      	mov	r3, r1
 80062ba:	80fb      	strh	r3, [r7, #6]
 80062bc:	4613      	mov	r3, r2
 80062be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062c0:	88bb      	ldrh	r3, [r7, #4]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	005a      	lsls	r2, r3, #1
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062dc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
 80062e2:	e01b      	b.n	800631c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	3302      	adds	r3, #2
 80062f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3301      	adds	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	3302      	adds	r3, #2
 8006314:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	3b01      	subs	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e0      	bne.n	80062e4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006322:	88bb      	ldrh	r3, [r7, #4]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	b2da      	uxtb	r2, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	701a      	strb	r2, [r3, #0]
  }
}
 800633e:	bf00      	nop
 8006340:	372c      	adds	r7, #44	; 0x2c
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7c1b      	ldrb	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d115      	bne.n	800638c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006364:	2202      	movs	r2, #2
 8006366:	2181      	movs	r1, #129	; 0x81
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fe7e 	bl	800806a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	2202      	movs	r2, #2
 800637a:	2101      	movs	r1, #1
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fe74 	bl	800806a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800638a:	e012      	b.n	80063b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	2202      	movs	r2, #2
 8006390:	2181      	movs	r1, #129	; 0x81
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fe69 	bl	800806a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800639e:	2340      	movs	r3, #64	; 0x40
 80063a0:	2202      	movs	r2, #2
 80063a2:	2101      	movs	r1, #1
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fe60 	bl	800806a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063b2:	2308      	movs	r3, #8
 80063b4:	2203      	movs	r2, #3
 80063b6:	2182      	movs	r1, #130	; 0x82
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 fe56 	bl	800806a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063c8:	f001 ff70 	bl	80082ac <USBD_static_malloc>
 80063cc:	4602      	mov	r2, r0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063de:	2301      	movs	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]
 80063e2:	e026      	b.n	8006432 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7c1b      	ldrb	r3, [r3, #16]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006418:	2101      	movs	r1, #1
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 ff0f 	bl	800823e <USBD_LL_PrepareReceive>
 8006420:	e007      	b.n	8006432 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	2101      	movs	r1, #1
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 ff06 	bl	800823e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800644c:	2181      	movs	r1, #129	; 0x81
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fe31 	bl	80080b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800645a:	2101      	movs	r1, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fe2a 	bl	80080b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800646a:	2182      	movs	r1, #130	; 0x82
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fe22 	bl	80080b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006492:	4618      	mov	r0, r3
 8006494:	f001 ff16 	bl	80082c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d039      	beq.n	8006548 <USBD_CDC_Setup+0x9e>
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d17c      	bne.n	80065d2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	88db      	ldrh	r3, [r3, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d029      	beq.n	8006534 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da11      	bge.n	800650e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80064f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	88d2      	ldrh	r2, [r2, #6]
 80064fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064fe:	6939      	ldr	r1, [r7, #16]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	88db      	ldrh	r3, [r3, #6]
 8006504:	461a      	mov	r2, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 f9f6 	bl	80078f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800650c:	e068      	b.n	80065e0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	785a      	ldrb	r2, [r3, #1]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	88db      	ldrh	r3, [r3, #6]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006524:	6939      	ldr	r1, [r7, #16]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	88db      	ldrh	r3, [r3, #6]
 800652a:	461a      	mov	r2, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fa11 	bl	8007954 <USBD_CtlPrepareRx>
      break;
 8006532:	e055      	b.n	80065e0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	7850      	ldrb	r0, [r2, #1]
 8006540:	2200      	movs	r2, #0
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	4798      	blx	r3
      break;
 8006546:	e04b      	b.n	80065e0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b0a      	cmp	r3, #10
 800654e:	d017      	beq.n	8006580 <USBD_CDC_Setup+0xd6>
 8006550:	2b0b      	cmp	r3, #11
 8006552:	d029      	beq.n	80065a8 <USBD_CDC_Setup+0xfe>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d133      	bne.n	80065c0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655e:	2b03      	cmp	r3, #3
 8006560:	d107      	bne.n	8006572 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	2202      	movs	r2, #2
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 f9c4 	bl	80078f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006570:	e02e      	b.n	80065d0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f955 	bl	8007824 <USBD_CtlError>
            ret = USBD_FAIL;
 800657a:	2302      	movs	r3, #2
 800657c:	75fb      	strb	r3, [r7, #23]
          break;
 800657e:	e027      	b.n	80065d0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006586:	2b03      	cmp	r3, #3
 8006588:	d107      	bne.n	800659a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800658a:	f107 030f 	add.w	r3, r7, #15
 800658e:	2201      	movs	r2, #1
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 f9b0 	bl	80078f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006598:	e01a      	b.n	80065d0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f941 	bl	8007824 <USBD_CtlError>
            ret = USBD_FAIL;
 80065a2:	2302      	movs	r3, #2
 80065a4:	75fb      	strb	r3, [r7, #23]
          break;
 80065a6:	e013      	b.n	80065d0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d00d      	beq.n	80065ce <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f935 	bl	8007824 <USBD_CtlError>
            ret = USBD_FAIL;
 80065ba:	2302      	movs	r3, #2
 80065bc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065be:	e006      	b.n	80065ce <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 f92e 	bl	8007824 <USBD_CtlError>
          ret = USBD_FAIL;
 80065c8:	2302      	movs	r3, #2
 80065ca:	75fb      	strb	r3, [r7, #23]
          break;
 80065cc:	e000      	b.n	80065d0 <USBD_CDC_Setup+0x126>
          break;
 80065ce:	bf00      	nop
      }
      break;
 80065d0:	e006      	b.n	80065e0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 f925 	bl	8007824 <USBD_CtlError>
      ret = USBD_FAIL;
 80065da:	2302      	movs	r3, #2
 80065dc:	75fb      	strb	r3, [r7, #23]
      break;
 80065de:	bf00      	nop
  }

  return ret;
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006604:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d037      	beq.n	8006680 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006610:	78fa      	ldrb	r2, [r7, #3]
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	331c      	adds	r3, #28
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d026      	beq.n	8006674 <USBD_CDC_DataIn+0x8a>
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	331c      	adds	r3, #28
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	0152      	lsls	r2, r2, #5
 800663e:	440a      	add	r2, r1
 8006640:	3238      	adds	r2, #56	; 0x38
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	fbb3 f1f2 	udiv	r1, r3, r2
 8006648:	fb02 f201 	mul.w	r2, r2, r1
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d110      	bne.n	8006674 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	331c      	adds	r3, #28
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006666:	78f9      	ldrb	r1, [r7, #3]
 8006668:	2300      	movs	r3, #0
 800666a:	2200      	movs	r2, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fdc3 	bl	80081f8 <USBD_LL_Transmit>
 8006672:	e003      	b.n	800667c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e000      	b.n	8006682 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006680:	2302      	movs	r3, #2
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 fdee 	bl	8008284 <USBD_LL_GetRxDataSize>
 80066a8:	4602      	mov	r2, r0
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066ce:	4611      	mov	r1, r2
 80066d0:	4798      	blx	r3

    return USBD_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d015      	beq.n	8006726 <USBD_CDC_EP0_RxReady+0x46>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006700:	2bff      	cmp	r3, #255	; 0xff
 8006702:	d010      	beq.n	8006726 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006712:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800671a:	b292      	uxth	r2, r2
 800671c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	22ff      	movs	r2, #255	; 0xff
 8006722:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2243      	movs	r2, #67	; 0x43
 800673c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	20000094 	.word	0x20000094

08006750 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2243      	movs	r2, #67	; 0x43
 800675c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800675e:	4b03      	ldr	r3, [pc, #12]	; (800676c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000050 	.word	0x20000050

08006770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2243      	movs	r2, #67	; 0x43
 800677c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800677e:	4b03      	ldr	r3, [pc, #12]	; (800678c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	200000d8 	.word	0x200000d8

08006790 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	220a      	movs	r2, #10
 800679c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800679e:	4b03      	ldr	r3, [pc, #12]	; (80067ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	2000000c 	.word	0x2000000c

080067b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067ba:	2302      	movs	r3, #2
 80067bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr

0800680e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d01c      	beq.n	8006888 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006854:	2b00      	cmp	r3, #0
 8006856:	d115      	bne.n	8006884 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006876:	b29b      	uxth	r3, r3
 8006878:	2181      	movs	r1, #129	; 0x81
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fcbc 	bl	80081f8 <USBD_LL_Transmit>

      return USBD_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	e002      	b.n	800688a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006888:	2302      	movs	r3, #2
  }
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d017      	beq.n	80068dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7c1b      	ldrb	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068be:	2101      	movs	r1, #1
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fcbc 	bl	800823e <USBD_LL_PrepareReceive>
 80068c6:	e007      	b.n	80068d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068ce:	2340      	movs	r3, #64	; 0x40
 80068d0:	2101      	movs	r1, #1
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fcb3 	bl	800823e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068d8:	2300      	movs	r3, #0
 80068da:	e000      	b.n	80068de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80068dc:	2302      	movs	r3, #2
  }
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	4613      	mov	r3, r2
 80068f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068fa:	2302      	movs	r3, #2
 80068fc:	e01a      	b.n	8006934 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	79fa      	ldrb	r2, [r7, #7]
 800692a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 fb27 	bl	8007f80 <USBD_LL_Init>

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	e001      	b.n	8006962 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800695e:	2302      	movs	r3, #2
 8006960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr

0800696e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 fb5c 	bl	8008034 <USBD_LL_Start>

  return USBD_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069a6:	2302      	movs	r3, #2
 80069a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	4611      	mov	r1, r2
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	78fa      	ldrb	r2, [r7, #3]
 80069ee:	4611      	mov	r1, r2
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fecb 	bl	80077ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d00c      	beq.n	8006a54 <USBD_LL_SetupStage+0x56>
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d302      	bcc.n	8006a44 <USBD_LL_SetupStage+0x46>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d010      	beq.n	8006a64 <USBD_LL_SetupStage+0x66>
 8006a42:	e017      	b.n	8006a74 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f9cb 	bl	8006de8 <USBD_StdDevReq>
      break;
 8006a52:	e01a      	b.n	8006a8a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fa2d 	bl	8006ebc <USBD_StdItfReq>
      break;
 8006a62:	e012      	b.n	8006a8a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa6b 	bl	8006f48 <USBD_StdEPReq>
      break;
 8006a72:	e00a      	b.n	8006a8a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fb36 	bl	80080f4 <USBD_LL_StallEP>
      break;
 8006a88:	bf00      	nop
  }

  return USBD_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d14b      	bne.n	8006b40 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006aae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d134      	bne.n	8006b24 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d919      	bls.n	8006afa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d203      	bcs.n	8006ae8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	e002      	b.n	8006aee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 ff4c 	bl	8007990 <USBD_CtlContinueRx>
 8006af8:	e038      	b.n	8006b6c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d105      	bne.n	8006b1c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 ff49 	bl	80079b4 <USBD_CtlSendStatus>
 8006b22:	e023      	b.n	8006b6c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	d11e      	bne.n	8006b6c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006b36:	2100      	movs	r1, #0
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f001 fadb 	bl	80080f4 <USBD_LL_StallEP>
 8006b3e:	e015      	b.n	8006b6c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00d      	beq.n	8006b68 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d108      	bne.n	8006b68 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	7afa      	ldrb	r2, [r7, #11]
 8006b60:	4611      	mov	r1, r2
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	4798      	blx	r3
 8006b66:	e001      	b.n	8006b6c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b68:	2302      	movs	r3, #2
 8006b6a:	e000      	b.n	8006b6e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b84:	7afb      	ldrb	r3, [r7, #11]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d17f      	bne.n	8006c8a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3314      	adds	r3, #20
 8006b8e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d15c      	bne.n	8006c54 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d915      	bls.n	8006bd2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 feb6 	bl	8007930 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2100      	movs	r1, #0
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f001 fb37 	bl	800823e <USBD_LL_PrepareReceive>
 8006bd0:	e04e      	b.n	8006c70 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	6912      	ldr	r2, [r2, #16]
 8006bda:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bde:	fb02 f201 	mul.w	r2, r2, r1
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d11c      	bne.n	8006c22 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d316      	bcc.n	8006c22 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d20f      	bcs.n	8006c22 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c02:	2200      	movs	r2, #0
 8006c04:	2100      	movs	r1, #0
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fe92 	bl	8007930 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c14:	2300      	movs	r3, #0
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f001 fb0f 	bl	800823e <USBD_LL_PrepareReceive>
 8006c20:	e026      	b.n	8006c70 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d105      	bne.n	8006c44 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f001 fa54 	bl	80080f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fec4 	bl	80079da <USBD_CtlReceiveStatus>
 8006c52:	e00d      	b.n	8006c70 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d004      	beq.n	8006c68 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 fa42 	bl	80080f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d11d      	bne.n	8006cb6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7ff fe83 	bl	8006986 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c88:	e015      	b.n	8006cb6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d108      	bne.n	8006cb2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	7afa      	ldrb	r2, [r7, #11]
 8006caa:	4611      	mov	r1, r2
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	4798      	blx	r3
 8006cb0:	e001      	b.n	8006cb6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e000      	b.n	8006cb8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cc8:	2340      	movs	r3, #64	; 0x40
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 f9cb 	bl	800806a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2240      	movs	r2, #64	; 0x40
 8006ce0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ce4:	2340      	movs	r3, #64	; 0x40
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2180      	movs	r1, #128	; 0x80
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f9bd 	bl	800806a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2240      	movs	r2, #64	; 0x40
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6852      	ldr	r2, [r2, #4]
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	4611      	mov	r1, r2
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2204      	movs	r2, #4
 8006d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr

08006d88 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d105      	bne.n	8006da6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d10b      	bne.n	8006ddc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dfe:	2b20      	cmp	r3, #32
 8006e00:	d004      	beq.n	8006e0c <USBD_StdDevReq+0x24>
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d002      	beq.n	8006e0c <USBD_StdDevReq+0x24>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <USBD_StdDevReq+0x34>
 8006e0a:	e04c      	b.n	8006ea6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
      break;
 8006e1a:	e049      	b.n	8006eb0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	2b09      	cmp	r3, #9
 8006e22:	d83a      	bhi.n	8006e9a <USBD_StdDevReq+0xb2>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <USBD_StdDevReq+0x44>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e91 	.word	0x08006e91
 8006e34:	08006e9b 	.word	0x08006e9b
 8006e38:	08006e87 	.word	0x08006e87
 8006e3c:	08006e9b 	.word	0x08006e9b
 8006e40:	08006e5f 	.word	0x08006e5f
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e9b 	.word	0x08006e9b
 8006e4c:	08006e73 	.word	0x08006e73
 8006e50:	08006e69 	.word	0x08006e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9d4 	bl	8007204 <USBD_GetDescriptor>
          break;
 8006e5c:	e022      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb37 	bl	80074d4 <USBD_SetAddress>
          break;
 8006e66:	e01d      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb74 	bl	8007558 <USBD_SetConfig>
          break;
 8006e70:	e018      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbfd 	bl	8007674 <USBD_GetConfig>
          break;
 8006e7a:	e013      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fc2c 	bl	80076dc <USBD_GetStatus>
          break;
 8006e84:	e00e      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc5a 	bl	8007742 <USBD_SetFeature>
          break;
 8006e8e:	e009      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fc69 	bl	800776a <USBD_ClrFeature>
          break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fcc1 	bl	8007824 <USBD_CtlError>
          break;
 8006ea2:	bf00      	nop
      }
      break;
 8006ea4:	e004      	b.n	8006eb0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fcbb 	bl	8007824 <USBD_CtlError>
      break;
 8006eae:	bf00      	nop
  }

  return ret;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop

08006ebc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d003      	beq.n	8006ede <USBD_StdItfReq+0x22>
 8006ed6:	2b40      	cmp	r3, #64	; 0x40
 8006ed8:	d001      	beq.n	8006ede <USBD_StdItfReq+0x22>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d12a      	bne.n	8006f34 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d81d      	bhi.n	8006f26 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	889b      	ldrh	r3, [r3, #4]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d813      	bhi.n	8006f1c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d110      	bne.n	8006f30 <USBD_StdItfReq+0x74>
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10d      	bne.n	8006f30 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fd4d 	bl	80079b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f1a:	e009      	b.n	8006f30 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fc80 	bl	8007824 <USBD_CtlError>
          break;
 8006f24:	e004      	b.n	8006f30 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fc7b 	bl	8007824 <USBD_CtlError>
          break;
 8006f2e:	e000      	b.n	8006f32 <USBD_StdItfReq+0x76>
          break;
 8006f30:	bf00      	nop
      }
      break;
 8006f32:	e004      	b.n	8006f3e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fc74 	bl	8007824 <USBD_CtlError>
      break;
 8006f3c:	bf00      	nop
  }

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	889b      	ldrh	r3, [r3, #4]
 8006f5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d004      	beq.n	8006f72 <USBD_StdEPReq+0x2a>
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d002      	beq.n	8006f72 <USBD_StdEPReq+0x2a>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d008      	beq.n	8006f82 <USBD_StdEPReq+0x3a>
 8006f70:	e13d      	b.n	80071ee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
      break;
 8006f80:	e13a      	b.n	80071f8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d10a      	bne.n	8006fa4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	e12a      	b.n	80071fa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d03e      	beq.n	800702a <USBD_StdEPReq+0xe2>
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d002      	beq.n	8006fb6 <USBD_StdEPReq+0x6e>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d070      	beq.n	8007096 <USBD_StdEPReq+0x14e>
 8006fb4:	e115      	b.n	80071e2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d002      	beq.n	8006fc6 <USBD_StdEPReq+0x7e>
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d015      	beq.n	8006ff0 <USBD_StdEPReq+0xa8>
 8006fc4:	e02b      	b.n	800701e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00c      	beq.n	8006fe6 <USBD_StdEPReq+0x9e>
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b80      	cmp	r3, #128	; 0x80
 8006fd0:	d009      	beq.n	8006fe6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 f88c 	bl	80080f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fdc:	2180      	movs	r1, #128	; 0x80
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f001 f888 	bl	80080f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fe4:	e020      	b.n	8007028 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fc1b 	bl	8007824 <USBD_CtlError>
              break;
 8006fee:	e01b      	b.n	8007028 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	885b      	ldrh	r3, [r3, #2]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10e      	bne.n	8007016 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <USBD_StdEPReq+0xce>
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	d008      	beq.n	8007016 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	88db      	ldrh	r3, [r3, #6]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f86f 	bl	80080f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fccc 	bl	80079b4 <USBD_CtlSendStatus>

              break;
 800701c:	e004      	b.n	8007028 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fbff 	bl	8007824 <USBD_CtlError>
              break;
 8007026:	bf00      	nop
          }
          break;
 8007028:	e0e0      	b.n	80071ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	2b02      	cmp	r3, #2
 8007032:	d002      	beq.n	800703a <USBD_StdEPReq+0xf2>
 8007034:	2b03      	cmp	r3, #3
 8007036:	d015      	beq.n	8007064 <USBD_StdEPReq+0x11c>
 8007038:	e026      	b.n	8007088 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00c      	beq.n	800705a <USBD_StdEPReq+0x112>
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b80      	cmp	r3, #128	; 0x80
 8007044:	d009      	beq.n	800705a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 f852 	bl	80080f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007050:	2180      	movs	r1, #128	; 0x80
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f84e 	bl	80080f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007058:	e01c      	b.n	8007094 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fbe1 	bl	8007824 <USBD_CtlError>
              break;
 8007062:	e017      	b.n	8007094 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	885b      	ldrh	r3, [r3, #2]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d112      	bne.n	8007092 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 f859 	bl	8008132 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc97 	bl	80079b4 <USBD_CtlSendStatus>
              }
              break;
 8007086:	e004      	b.n	8007092 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fbca 	bl	8007824 <USBD_CtlError>
              break;
 8007090:	e000      	b.n	8007094 <USBD_StdEPReq+0x14c>
              break;
 8007092:	bf00      	nop
          }
          break;
 8007094:	e0aa      	b.n	80071ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709c:	2b02      	cmp	r3, #2
 800709e:	d002      	beq.n	80070a6 <USBD_StdEPReq+0x15e>
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d032      	beq.n	800710a <USBD_StdEPReq+0x1c2>
 80070a4:	e097      	b.n	80071d6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <USBD_StdEPReq+0x174>
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b80      	cmp	r3, #128	; 0x80
 80070b0:	d004      	beq.n	80070bc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fbb5 	bl	8007824 <USBD_CtlError>
                break;
 80070ba:	e091      	b.n	80071e0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da0b      	bge.n	80070dc <USBD_StdEPReq+0x194>
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	3310      	adds	r3, #16
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	3304      	adds	r3, #4
 80070da:	e00b      	b.n	80070f4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	3304      	adds	r3, #4
 80070f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2202      	movs	r2, #2
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fbf8 	bl	80078f8 <USBD_CtlSendData>
              break;
 8007108:	e06a      	b.n	80071e0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800710a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800710e:	2b00      	cmp	r3, #0
 8007110:	da11      	bge.n	8007136 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	f003 020f 	and.w	r2, r3, #15
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	3318      	adds	r3, #24
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d117      	bne.n	800715c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fb78 	bl	8007824 <USBD_CtlError>
                  break;
 8007134:	e054      	b.n	80071e0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	f003 020f 	and.w	r2, r3, #15
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb65 	bl	8007824 <USBD_CtlError>
                  break;
 800715a:	e041      	b.n	80071e0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800715c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da0b      	bge.n	800717c <USBD_StdEPReq+0x234>
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	3310      	adds	r3, #16
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	3304      	adds	r3, #4
 800717a:	e00b      	b.n	8007194 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800717c:	7bbb      	ldrb	r3, [r7, #14]
 800717e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	4413      	add	r3, r2
 8007192:	3304      	adds	r3, #4
 8007194:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <USBD_StdEPReq+0x25a>
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b80      	cmp	r3, #128	; 0x80
 80071a0:	d103      	bne.n	80071aa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e00e      	b.n	80071c8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 ffde 	bl	8008170 <USBD_LL_IsStallEP>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2201      	movs	r2, #1
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e002      	b.n	80071c8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2202      	movs	r2, #2
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb92 	bl	80078f8 <USBD_CtlSendData>
              break;
 80071d4:	e004      	b.n	80071e0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb23 	bl	8007824 <USBD_CtlError>
              break;
 80071de:	bf00      	nop
          }
          break;
 80071e0:	e004      	b.n	80071ec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb1d 	bl	8007824 <USBD_CtlError>
          break;
 80071ea:	bf00      	nop
      }
      break;
 80071ec:	e004      	b.n	80071f8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb17 	bl	8007824 <USBD_CtlError>
      break;
 80071f6:	bf00      	nop
  }

  return ret;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	885b      	ldrh	r3, [r3, #2]
 800721e:	0a1b      	lsrs	r3, r3, #8
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	2b06      	cmp	r3, #6
 8007226:	f200 8128 	bhi.w	800747a <USBD_GetDescriptor+0x276>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <USBD_GetDescriptor+0x2c>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	0800724d 	.word	0x0800724d
 8007234:	08007265 	.word	0x08007265
 8007238:	080072a5 	.word	0x080072a5
 800723c:	0800747b 	.word	0x0800747b
 8007240:	0800747b 	.word	0x0800747b
 8007244:	0800741b 	.word	0x0800741b
 8007248:	08007447 	.word	0x08007447
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	7c12      	ldrb	r2, [r2, #16]
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	4610      	mov	r0, r2
 800725e:	4798      	blx	r3
 8007260:	60f8      	str	r0, [r7, #12]
      break;
 8007262:	e112      	b.n	800748a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	7c1b      	ldrb	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10d      	bne.n	8007288 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	f107 0208 	add.w	r2, r7, #8
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	2202      	movs	r2, #2
 8007284:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007286:	e100      	b.n	800748a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	f107 0208 	add.w	r2, r7, #8
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3301      	adds	r3, #1
 800729e:	2202      	movs	r2, #2
 80072a0:	701a      	strb	r2, [r3, #0]
      break;
 80072a2:	e0f2      	b.n	800748a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	f200 80ac 	bhi.w	8007408 <USBD_GetDescriptor+0x204>
 80072b0:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <USBD_GetDescriptor+0xb4>)
 80072b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b6:	bf00      	nop
 80072b8:	080072d1 	.word	0x080072d1
 80072bc:	08007305 	.word	0x08007305
 80072c0:	08007339 	.word	0x08007339
 80072c4:	0800736d 	.word	0x0800736d
 80072c8:	080073a1 	.word	0x080073a1
 80072cc:	080073d5 	.word	0x080073d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e091      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa94 	bl	8007824 <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e089      	b.n	8007418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7c12      	ldrb	r2, [r2, #16]
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007326:	e077      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa7a 	bl	8007824 <USBD_CtlError>
            err++;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	3301      	adds	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
          break;
 8007336:	e06f      	b.n	8007418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7c12      	ldrb	r2, [r2, #16]
 8007350:	f107 0108 	add.w	r1, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735a:	e05d      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa60 	bl	8007824 <USBD_CtlError>
            err++;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	3301      	adds	r3, #1
 8007368:	72fb      	strb	r3, [r7, #11]
          break;
 800736a:	e055      	b.n	8007418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	7c12      	ldrb	r2, [r2, #16]
 8007384:	f107 0108 	add.w	r1, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800738e:	e043      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa46 	bl	8007824 <USBD_CtlError>
            err++;
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	3301      	adds	r3, #1
 800739c:	72fb      	strb	r3, [r7, #11]
          break;
 800739e:	e03b      	b.n	8007418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 0108 	add.w	r1, r7, #8
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073c2:	e029      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa2c 	bl	8007824 <USBD_CtlError>
            err++;
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	3301      	adds	r3, #1
 80073d0:	72fb      	strb	r3, [r7, #11]
          break;
 80073d2:	e021      	b.n	8007418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	7c12      	ldrb	r2, [r2, #16]
 80073ec:	f107 0108 	add.w	r1, r7, #8
 80073f0:	4610      	mov	r0, r2
 80073f2:	4798      	blx	r3
 80073f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073f6:	e00f      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa12 	bl	8007824 <USBD_CtlError>
            err++;
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	3301      	adds	r3, #1
 8007404:	72fb      	strb	r3, [r7, #11]
          break;
 8007406:	e007      	b.n	8007418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa0a 	bl	8007824 <USBD_CtlError>
          err++;
 8007410:	7afb      	ldrb	r3, [r7, #11]
 8007412:	3301      	adds	r3, #1
 8007414:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007416:	e038      	b.n	800748a <USBD_GetDescriptor+0x286>
 8007418:	e037      	b.n	800748a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	7c1b      	ldrb	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742a:	f107 0208 	add.w	r2, r7, #8
 800742e:	4610      	mov	r0, r2
 8007430:	4798      	blx	r3
 8007432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007434:	e029      	b.n	800748a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9f3 	bl	8007824 <USBD_CtlError>
        err++;
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	3301      	adds	r3, #1
 8007442:	72fb      	strb	r3, [r7, #11]
      break;
 8007444:	e021      	b.n	800748a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	7c1b      	ldrb	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10d      	bne.n	800746a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f107 0208 	add.w	r2, r7, #8
 800745a:	4610      	mov	r0, r2
 800745c:	4798      	blx	r3
 800745e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	2207      	movs	r2, #7
 8007466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007468:	e00f      	b.n	800748a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f9d9 	bl	8007824 <USBD_CtlError>
        err++;
 8007472:	7afb      	ldrb	r3, [r7, #11]
 8007474:	3301      	adds	r3, #1
 8007476:	72fb      	strb	r3, [r7, #11]
      break;
 8007478:	e007      	b.n	800748a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f9d1 	bl	8007824 <USBD_CtlError>
      err++;
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	3301      	adds	r3, #1
 8007486:	72fb      	strb	r3, [r7, #11]
      break;
 8007488:	bf00      	nop
  }

  if (err != 0U)
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d11c      	bne.n	80074ca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007490:	893b      	ldrh	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d011      	beq.n	80074ba <USBD_GetDescriptor+0x2b6>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	88db      	ldrh	r3, [r3, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	88da      	ldrh	r2, [r3, #6]
 80074a2:	893b      	ldrh	r3, [r7, #8]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	bf28      	it	cs
 80074a8:	4613      	movcs	r3, r2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074ae:	893b      	ldrh	r3, [r7, #8]
 80074b0:	461a      	mov	r2, r3
 80074b2:	68f9      	ldr	r1, [r7, #12]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fa1f 	bl	80078f8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa76 	bl	80079b4 <USBD_CtlSendStatus>
 80074c8:	e000      	b.n	80074cc <USBD_GetDescriptor+0x2c8>
    return;
 80074ca:	bf00      	nop
    }
  }
}
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop

080074d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	889b      	ldrh	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d130      	bne.n	8007548 <USBD_SetAddress+0x74>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	88db      	ldrh	r3, [r3, #6]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d12c      	bne.n	8007548 <USBD_SetAddress+0x74>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	885b      	ldrh	r3, [r3, #2]
 80074f2:	2b7f      	cmp	r3, #127	; 0x7f
 80074f4:	d828      	bhi.n	8007548 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	885b      	ldrh	r3, [r3, #2]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007500:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007508:	2b03      	cmp	r3, #3
 800750a:	d104      	bne.n	8007516 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f988 	bl	8007824 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007514:	e01c      	b.n	8007550 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	7bfa      	ldrb	r2, [r7, #15]
 800751a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fe49 	bl	80081ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fa43 	bl	80079b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d004      	beq.n	800753e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753c:	e008      	b.n	8007550 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007546:	e003      	b.n	8007550 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f96a 	bl	8007824 <USBD_CtlError>
  }
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	885b      	ldrh	r3, [r3, #2]
 8007566:	b2da      	uxtb	r2, r3
 8007568:	4b41      	ldr	r3, [pc, #260]	; (8007670 <USBD_SetConfig+0x118>)
 800756a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800756c:	4b40      	ldr	r3, [pc, #256]	; (8007670 <USBD_SetConfig+0x118>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d904      	bls.n	800757e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f954 	bl	8007824 <USBD_CtlError>
 800757c:	e075      	b.n	800766a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b02      	cmp	r3, #2
 8007586:	d002      	beq.n	800758e <USBD_SetConfig+0x36>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d023      	beq.n	80075d4 <USBD_SetConfig+0x7c>
 800758c:	e062      	b.n	8007654 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800758e:	4b38      	ldr	r3, [pc, #224]	; (8007670 <USBD_SetConfig+0x118>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01a      	beq.n	80075cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007596:	4b36      	ldr	r3, [pc, #216]	; (8007670 <USBD_SetConfig+0x118>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075a8:	4b31      	ldr	r3, [pc, #196]	; (8007670 <USBD_SetConfig+0x118>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff f9f3 	bl	800699a <USBD_SetClassConfig>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d104      	bne.n	80075c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f931 	bl	8007824 <USBD_CtlError>
            return;
 80075c2:	e052      	b.n	800766a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f9f5 	bl	80079b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075ca:	e04e      	b.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9f1 	bl	80079b4 <USBD_CtlSendStatus>
        break;
 80075d2:	e04a      	b.n	800766a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075d4:	4b26      	ldr	r3, [pc, #152]	; (8007670 <USBD_SetConfig+0x118>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d112      	bne.n	8007602 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075e4:	4b22      	ldr	r3, [pc, #136]	; (8007670 <USBD_SetConfig+0x118>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <USBD_SetConfig+0x118>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff f9ef 	bl	80069d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9da 	bl	80079b4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007600:	e033      	b.n	800766a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007602:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <USBD_SetConfig+0x118>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	429a      	cmp	r2, r3
 800760e:	d01d      	beq.n	800764c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff f9dd 	bl	80069d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <USBD_SetConfig+0x118>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <USBD_SetConfig+0x118>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff f9b3 	bl	800699a <USBD_SetClassConfig>
 8007634:	4603      	mov	r3, r0
 8007636:	2b02      	cmp	r3, #2
 8007638:	d104      	bne.n	8007644 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f8f1 	bl	8007824 <USBD_CtlError>
            return;
 8007642:	e012      	b.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9b5 	bl	80079b4 <USBD_CtlSendStatus>
        break;
 800764a:	e00e      	b.n	800766a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f9b1 	bl	80079b4 <USBD_CtlSendStatus>
        break;
 8007652:	e00a      	b.n	800766a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8e4 	bl	8007824 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <USBD_SetConfig+0x118>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff f9b8 	bl	80069d8 <USBD_ClrClassConfig>
        break;
 8007668:	bf00      	nop
    }
  }
}
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200003f0 	.word	0x200003f0

08007674 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	88db      	ldrh	r3, [r3, #6]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d004      	beq.n	8007690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f8cb 	bl	8007824 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800768e:	e021      	b.n	80076d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007696:	2b01      	cmp	r3, #1
 8007698:	db17      	blt.n	80076ca <USBD_GetConfig+0x56>
 800769a:	2b02      	cmp	r3, #2
 800769c:	dd02      	ble.n	80076a4 <USBD_GetConfig+0x30>
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d00b      	beq.n	80076ba <USBD_GetConfig+0x46>
 80076a2:	e012      	b.n	80076ca <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3308      	adds	r3, #8
 80076ae:	2201      	movs	r2, #1
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f920 	bl	80078f8 <USBD_CtlSendData>
        break;
 80076b8:	e00c      	b.n	80076d4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3304      	adds	r3, #4
 80076be:	2201      	movs	r2, #1
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f918 	bl	80078f8 <USBD_CtlSendData>
        break;
 80076c8:	e004      	b.n	80076d4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f8a9 	bl	8007824 <USBD_CtlError>
        break;
 80076d2:	bf00      	nop
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	3b01      	subs	r3, #1
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d81e      	bhi.n	8007730 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	88db      	ldrh	r3, [r3, #6]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d004      	beq.n	8007704 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f891 	bl	8007824 <USBD_CtlError>
        break;
 8007702:	e01a      	b.n	800773a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f043 0202 	orr.w	r2, r3, #2
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	330c      	adds	r3, #12
 8007724:	2202      	movs	r2, #2
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f8e5 	bl	80078f8 <USBD_CtlSendData>
      break;
 800772e:	e004      	b.n	800773a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f876 	bl	8007824 <USBD_CtlError>
      break;
 8007738:	bf00      	nop
  }
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	885b      	ldrh	r3, [r3, #2]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d106      	bne.n	8007762 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f929 	bl	80079b4 <USBD_CtlSendStatus>
  }
}
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777a:	3b01      	subs	r3, #1
 800777c:	2b02      	cmp	r3, #2
 800777e:	d80b      	bhi.n	8007798 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	885b      	ldrh	r3, [r3, #2]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10c      	bne.n	80077a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f90f 	bl	80079b4 <USBD_CtlSendStatus>
      }
      break;
 8007796:	e004      	b.n	80077a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f842 	bl	8007824 <USBD_CtlError>
      break;
 80077a0:	e000      	b.n	80077a4 <USBD_ClrFeature+0x3a>
      break;
 80077a2:	bf00      	nop
  }
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	785a      	ldrb	r2, [r3, #1]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3302      	adds	r3, #2
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	3303      	adds	r3, #3
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b29b      	uxth	r3, r3
 80077da:	4413      	add	r3, r2
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	3305      	adds	r3, #5
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	4413      	add	r3, r2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	3306      	adds	r3, #6
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	b29a      	uxth	r2, r3
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	3307      	adds	r3, #7
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	b29b      	uxth	r3, r3
 8007812:	4413      	add	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	80da      	strh	r2, [r3, #6]

}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800782e:	2180      	movs	r1, #128	; 0x80
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc5f 	bl	80080f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007836:	2100      	movs	r1, #0
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fc5b 	bl	80080f4 <USBD_LL_StallEP>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d032      	beq.n	80078c2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f834 	bl	80078ca <USBD_GetLen>
 8007862:	4603      	mov	r3, r0
 8007864:	3301      	adds	r3, #1
 8007866:	b29b      	uxth	r3, r3
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	75fa      	strb	r2, [r7, #23]
 8007876:	461a      	mov	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4413      	add	r3, r2
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	75fa      	strb	r2, [r7, #23]
 8007888:	461a      	mov	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	2203      	movs	r2, #3
 8007890:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007892:	e012      	b.n	80078ba <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	60fa      	str	r2, [r7, #12]
 800789a:	7dfa      	ldrb	r2, [r7, #23]
 800789c:	1c51      	adds	r1, r2, #1
 800789e:	75f9      	strb	r1, [r7, #23]
 80078a0:	4611      	mov	r1, r2
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	440a      	add	r2, r1
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	75fa      	strb	r2, [r7, #23]
 80078b0:	461a      	mov	r2, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4413      	add	r3, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e8      	bne.n	8007894 <USBD_GetString+0x4e>
    }
  }
}
 80078c2:	bf00      	nop
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b085      	sub	sp, #20
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078d6:	e005      	b.n	80078e4 <USBD_GetLen+0x1a>
  {
    len++;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	3301      	adds	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3301      	adds	r3, #1
 80078e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f5      	bne.n	80078d8 <USBD_GetLen+0xe>
  }

  return len;
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr

080078f8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2202      	movs	r2, #2
 800790a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800790e:	88fa      	ldrh	r2, [r7, #6]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007914:	88fa      	ldrh	r2, [r7, #6]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800791a:	88fb      	ldrh	r3, [r7, #6]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	2100      	movs	r1, #0
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fc69 	bl	80081f8 <USBD_LL_Transmit>

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	2100      	movs	r1, #0
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fc57 	bl	80081f8 <USBD_LL_Transmit>

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2203      	movs	r2, #3
 8007966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800796a:	88fa      	ldrh	r2, [r7, #6]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007972:	88fa      	ldrh	r2, [r7, #6]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	2100      	movs	r1, #0
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fc5c 	bl	800823e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	2100      	movs	r1, #0
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fc4a 	bl	800823e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079c4:	2300      	movs	r3, #0
 80079c6:	2200      	movs	r2, #0
 80079c8:	2100      	movs	r1, #0
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc14 	bl	80081f8 <USBD_LL_Transmit>

  return USBD_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2205      	movs	r2, #5
 80079e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ea:	2300      	movs	r3, #0
 80079ec:	2200      	movs	r2, #0
 80079ee:	2100      	movs	r1, #0
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fc24 	bl	800823e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a04:	2200      	movs	r2, #0
 8007a06:	4912      	ldr	r1, [pc, #72]	; (8007a50 <MX_USB_DEVICE_Init+0x50>)
 8007a08:	4812      	ldr	r0, [pc, #72]	; (8007a54 <MX_USB_DEVICE_Init+0x54>)
 8007a0a:	f7fe ff6c 	bl	80068e6 <USBD_Init>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a14:	f7fa f820 	bl	8001a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a18:	490f      	ldr	r1, [pc, #60]	; (8007a58 <MX_USB_DEVICE_Init+0x58>)
 8007a1a:	480e      	ldr	r0, [pc, #56]	; (8007a54 <MX_USB_DEVICE_Init+0x54>)
 8007a1c:	f7fe ff8e 	bl	800693c <USBD_RegisterClass>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a26:	f7fa f817 	bl	8001a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a2a:	490c      	ldr	r1, [pc, #48]	; (8007a5c <MX_USB_DEVICE_Init+0x5c>)
 8007a2c:	4809      	ldr	r0, [pc, #36]	; (8007a54 <MX_USB_DEVICE_Init+0x54>)
 8007a2e:	f7fe febf 	bl	80067b0 <USBD_CDC_RegisterInterface>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a38:	f7fa f80e 	bl	8001a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a3c:	4805      	ldr	r0, [pc, #20]	; (8007a54 <MX_USB_DEVICE_Init+0x54>)
 8007a3e:	f7fe ff96 	bl	800696e <USBD_Start>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a48:	f7fa f806 	bl	8001a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a4c:	bf00      	nop
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	2000012c 	.word	0x2000012c
 8007a54:	20000ea0 	.word	0x20000ea0
 8007a58:	20000018 	.word	0x20000018
 8007a5c:	2000011c 	.word	0x2000011c

08007a60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a64:	2200      	movs	r2, #0
 8007a66:	4905      	ldr	r1, [pc, #20]	; (8007a7c <CDC_Init_FS+0x1c>)
 8007a68:	4805      	ldr	r0, [pc, #20]	; (8007a80 <CDC_Init_FS+0x20>)
 8007a6a:	f7fe feb7 	bl	80067dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a6e:	4905      	ldr	r1, [pc, #20]	; (8007a84 <CDC_Init_FS+0x24>)
 8007a70:	4803      	ldr	r0, [pc, #12]	; (8007a80 <CDC_Init_FS+0x20>)
 8007a72:	f7fe fecc 	bl	800680e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	2000154c 	.word	0x2000154c
 8007a80:	20000ea0 	.word	0x20000ea0
 8007a84:	20001164 	.word	0x20001164

08007a88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr
	...

08007a98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	6039      	str	r1, [r7, #0]
 8007aa2:	71fb      	strb	r3, [r7, #7]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007aa8:	79fb      	ldrb	r3, [r7, #7]
 8007aaa:	2b23      	cmp	r3, #35	; 0x23
 8007aac:	d84a      	bhi.n	8007b44 <CDC_Control_FS+0xac>
 8007aae:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <CDC_Control_FS+0x1c>)
 8007ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab4:	08007b45 	.word	0x08007b45
 8007ab8:	08007b45 	.word	0x08007b45
 8007abc:	08007b45 	.word	0x08007b45
 8007ac0:	08007b45 	.word	0x08007b45
 8007ac4:	08007b45 	.word	0x08007b45
 8007ac8:	08007b45 	.word	0x08007b45
 8007acc:	08007b45 	.word	0x08007b45
 8007ad0:	08007b45 	.word	0x08007b45
 8007ad4:	08007b45 	.word	0x08007b45
 8007ad8:	08007b45 	.word	0x08007b45
 8007adc:	08007b45 	.word	0x08007b45
 8007ae0:	08007b45 	.word	0x08007b45
 8007ae4:	08007b45 	.word	0x08007b45
 8007ae8:	08007b45 	.word	0x08007b45
 8007aec:	08007b45 	.word	0x08007b45
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007b45 	.word	0x08007b45
 8007af8:	08007b45 	.word	0x08007b45
 8007afc:	08007b45 	.word	0x08007b45
 8007b00:	08007b45 	.word	0x08007b45
 8007b04:	08007b45 	.word	0x08007b45
 8007b08:	08007b45 	.word	0x08007b45
 8007b0c:	08007b45 	.word	0x08007b45
 8007b10:	08007b45 	.word	0x08007b45
 8007b14:	08007b45 	.word	0x08007b45
 8007b18:	08007b45 	.word	0x08007b45
 8007b1c:	08007b45 	.word	0x08007b45
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b45 	.word	0x08007b45
 8007b28:	08007b45 	.word	0x08007b45
 8007b2c:	08007b45 	.word	0x08007b45
 8007b30:	08007b45 	.word	0x08007b45
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b45 	.word	0x08007b45
 8007b3c:	08007b45 	.word	0x08007b45
 8007b40:	08007b45 	.word	0x08007b45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b44:	bf00      	nop
  }

  return (USBD_OK);
 8007b46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	char response[20];
	apiDoInstruction((char *)Buf, response);
 8007b5e:	f107 030c 	add.w	r3, r7, #12
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7f9 f80f 	bl	8000b88 <apiDoInstruction>
	CDC_Transmit_FS((uint8_t *)response, strlen(response));
 8007b6a:	f107 030c 	add.w	r3, r7, #12
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7f8 faee 	bl	8000150 <strlen>
 8007b74:	4603      	mov	r3, r0
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	f107 030c 	add.w	r3, r7, #12
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f80e 	bl	8007ba0 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4805      	ldr	r0, [pc, #20]	; (8007b9c <CDC_Receive_FS+0x48>)
 8007b88:	f7fe fe41 	bl	800680e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b8c:	4803      	ldr	r0, [pc, #12]	; (8007b9c <CDC_Receive_FS+0x48>)
 8007b8e:	f7fe fe80 	bl	8006892 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000ea0 	.word	0x20000ea0

08007ba0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */


  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <CDC_Transmit_FS+0x48>)
 8007bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e00b      	b.n	8007bde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bc6:	887b      	ldrh	r3, [r7, #2]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4806      	ldr	r0, [pc, #24]	; (8007be8 <CDC_Transmit_FS+0x48>)
 8007bce:	f7fe fe05 	bl	80067dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007bd2:	4805      	ldr	r0, [pc, #20]	; (8007be8 <CDC_Transmit_FS+0x48>)
 8007bd4:	f7fe fe2e 	bl	8006834 <USBD_CDC_TransmitPacket>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000ea0 	.word	0x20000ea0

08007bec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2212      	movs	r2, #18
 8007bfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bfe:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000148 	.word	0x20000148

08007c10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c22:	4b03      	ldr	r3, [pc, #12]	; (8007c30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2000015c 	.word	0x2000015c

08007c34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	4907      	ldr	r1, [pc, #28]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c4a:	4808      	ldr	r0, [pc, #32]	; (8007c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c4c:	f7ff fdfb 	bl	8007846 <USBD_GetString>
 8007c50:	e004      	b.n	8007c5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4904      	ldr	r1, [pc, #16]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c56:	4805      	ldr	r0, [pc, #20]	; (8007c6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c58:	f7ff fdf5 	bl	8007846 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20001934 	.word	0x20001934
 8007c6c:	0800a934 	.word	0x0800a934

08007c70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	4904      	ldr	r1, [pc, #16]	; (8007c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c80:	4804      	ldr	r0, [pc, #16]	; (8007c94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c82:	f7ff fde0 	bl	8007846 <USBD_GetString>
  return USBD_StrDesc;
 8007c86:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20001934 	.word	0x20001934
 8007c94:	0800a94c 	.word	0x0800a94c

08007c98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	221a      	movs	r2, #26
 8007ca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007caa:	f000 f843 	bl	8007d34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cae:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000160 	.word	0x20000160

08007cbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d105      	bne.n	8007cda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	4907      	ldr	r1, [pc, #28]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cd2:	4808      	ldr	r0, [pc, #32]	; (8007cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cd4:	f7ff fdb7 	bl	8007846 <USBD_GetString>
 8007cd8:	e004      	b.n	8007ce4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4904      	ldr	r1, [pc, #16]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cde:	4805      	ldr	r0, [pc, #20]	; (8007cf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ce0:	f7ff fdb1 	bl	8007846 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20001934 	.word	0x20001934
 8007cf4:	0800a960 	.word	0x0800a960

08007cf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d105      	bne.n	8007d16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4907      	ldr	r1, [pc, #28]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d0e:	4808      	ldr	r0, [pc, #32]	; (8007d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d10:	f7ff fd99 	bl	8007846 <USBD_GetString>
 8007d14:	e004      	b.n	8007d20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	4904      	ldr	r1, [pc, #16]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d1a:	4805      	ldr	r0, [pc, #20]	; (8007d30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d1c:	f7ff fd93 	bl	8007846 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20001934 	.word	0x20001934
 8007d30:	0800a96c 	.word	0x0800a96c

08007d34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <Get_SerialNum+0x44>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d40:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <Get_SerialNum+0x48>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d46:	4b0e      	ldr	r3, [pc, #56]	; (8007d80 <Get_SerialNum+0x4c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4413      	add	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d5a:	2208      	movs	r2, #8
 8007d5c:	4909      	ldr	r1, [pc, #36]	; (8007d84 <Get_SerialNum+0x50>)
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f814 	bl	8007d8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d64:	2204      	movs	r2, #4
 8007d66:	4908      	ldr	r1, [pc, #32]	; (8007d88 <Get_SerialNum+0x54>)
 8007d68:	68b8      	ldr	r0, [r7, #8]
 8007d6a:	f000 f80f 	bl	8007d8c <IntToUnicode>
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	1ffff7e8 	.word	0x1ffff7e8
 8007d7c:	1ffff7ec 	.word	0x1ffff7ec
 8007d80:	1ffff7f0 	.word	0x1ffff7f0
 8007d84:	20000162 	.word	0x20000162
 8007d88:	20000172 	.word	0x20000172

08007d8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]
 8007da2:	e027      	b.n	8007df4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	0f1b      	lsrs	r3, r3, #28
 8007da8:	2b09      	cmp	r3, #9
 8007daa:	d80b      	bhi.n	8007dc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	0f1b      	lsrs	r3, r3, #28
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	4619      	mov	r1, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	440b      	add	r3, r1
 8007dbc:	3230      	adds	r2, #48	; 0x30
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e00a      	b.n	8007dda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	0f1b      	lsrs	r3, r3, #28
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4619      	mov	r1, r3
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	440b      	add	r3, r1
 8007dd4:	3237      	adds	r2, #55	; 0x37
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	3301      	adds	r3, #1
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	4413      	add	r3, r2
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	3301      	adds	r3, #1
 8007df2:	75fb      	strb	r3, [r7, #23]
 8007df4:	7dfa      	ldrb	r2, [r7, #23]
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3d3      	bcc.n	8007da4 <IntToUnicode+0x18>
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
	...

08007e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0d      	ldr	r2, [pc, #52]	; (8007e4c <HAL_PCD_MspInit+0x44>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d113      	bne.n	8007e42 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <HAL_PCD_MspInit+0x48>)
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <HAL_PCD_MspInit+0x48>)
 8007e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e24:	61d3      	str	r3, [r2, #28]
 8007e26:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <HAL_PCD_MspInit+0x48>)
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e32:	2200      	movs	r2, #0
 8007e34:	2100      	movs	r1, #0
 8007e36:	2014      	movs	r0, #20
 8007e38:	f7fa fa2f 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e3c:	2014      	movs	r0, #20
 8007e3e:	f7fa fa48 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	40005c00 	.word	0x40005c00
 8007e50:	40021000 	.word	0x40021000

08007e54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f7fe fdc7 	bl	80069fe <USBD_LL_SetupStage>
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	015b      	lsls	r3, r3, #5
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	f7fe fdfa 	bl	8006a94 <USBD_LL_DataOutStage>
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	015b      	lsls	r3, r3, #5
 8007ec0:	4413      	add	r3, r2
 8007ec2:	333c      	adds	r3, #60	; 0x3c
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	4619      	mov	r1, r3
 8007eca:	f7fe fe54 	bl	8006b76 <USBD_LL_DataInStage>
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b082      	sub	sp, #8
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe ff64 	bl	8006db2 <USBD_LL_SOF>
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d001      	beq.n	8007f0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f06:	f7f9 fda7 	bl	8001a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f10:	7bfa      	ldrb	r2, [r7, #15]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe ff14 	bl	8006d42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7fe fecd 	bl	8006cc0 <USBD_LL_Reset>
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe ff0e 	bl	8006d60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <HAL_PCD_SuspendCallback+0x30>)
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	4a03      	ldr	r2, [pc, #12]	; (8007f60 <HAL_PCD_SuspendCallback+0x30>)
 8007f52:	f043 0306 	orr.w	r3, r3, #6
 8007f56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	e000ed00 	.word	0xe000ed00

08007f64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe ff08 	bl	8006d88 <USBD_LL_Resume>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f88:	4a28      	ldr	r2, [pc, #160]	; (800802c <USBD_LL_Init+0xac>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a26      	ldr	r2, [pc, #152]	; (800802c <USBD_LL_Init+0xac>)
 8007f94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f98:	4b24      	ldr	r3, [pc, #144]	; (800802c <USBD_LL_Init+0xac>)
 8007f9a:	4a25      	ldr	r2, [pc, #148]	; (8008030 <USBD_LL_Init+0xb0>)
 8007f9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f9e:	4b23      	ldr	r3, [pc, #140]	; (800802c <USBD_LL_Init+0xac>)
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fa4:	4b21      	ldr	r3, [pc, #132]	; (800802c <USBD_LL_Init+0xac>)
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007faa:	4b20      	ldr	r3, [pc, #128]	; (800802c <USBD_LL_Init+0xac>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fb0:	4b1e      	ldr	r3, [pc, #120]	; (800802c <USBD_LL_Init+0xac>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fb6:	4b1d      	ldr	r3, [pc, #116]	; (800802c <USBD_LL_Init+0xac>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fbc:	481b      	ldr	r0, [pc, #108]	; (800802c <USBD_LL_Init+0xac>)
 8007fbe:	f7fa fcb3 	bl	8002928 <HAL_PCD_Init>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fc8:	f7f9 fd46 	bl	8001a58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fd2:	2318      	movs	r3, #24
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	f7fb fb4c 	bl	8003674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fe2:	2358      	movs	r3, #88	; 0x58
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2180      	movs	r1, #128	; 0x80
 8007fe8:	f7fb fb44 	bl	8003674 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ff2:	23c0      	movs	r3, #192	; 0xc0
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2181      	movs	r1, #129	; 0x81
 8007ff8:	f7fb fb3c 	bl	8003674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008002:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008006:	2200      	movs	r2, #0
 8008008:	2101      	movs	r1, #1
 800800a:	f7fb fb33 	bl	8003674 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008018:	2200      	movs	r2, #0
 800801a:	2182      	movs	r1, #130	; 0x82
 800801c:	f7fb fb2a 	bl	8003674 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	20001b34 	.word	0x20001b34
 8008030:	40005c00 	.word	0x40005c00

08008034 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800804a:	4618      	mov	r0, r3
 800804c:	f7fa fd4d 	bl	8002aea <HAL_PCD_Start>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	4618      	mov	r0, r3
 8008058:	f000 f948 	bl	80082ec <USBD_Get_USB_Status>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008060:	7bbb      	ldrb	r3, [r7, #14]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b084      	sub	sp, #16
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	4608      	mov	r0, r1
 8008074:	4611      	mov	r1, r2
 8008076:	461a      	mov	r2, r3
 8008078:	4603      	mov	r3, r0
 800807a:	70fb      	strb	r3, [r7, #3]
 800807c:	460b      	mov	r3, r1
 800807e:	70bb      	strb	r3, [r7, #2]
 8008080:	4613      	mov	r3, r2
 8008082:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008092:	78bb      	ldrb	r3, [r7, #2]
 8008094:	883a      	ldrh	r2, [r7, #0]
 8008096:	78f9      	ldrb	r1, [r7, #3]
 8008098:	f7fa fe80 	bl	8002d9c <HAL_PCD_EP_Open>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f922 	bl	80082ec <USBD_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fa fec1 	bl	8002e5c <HAL_PCD_EP_Close>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f903 	bl	80082ec <USBD_Get_USB_Status>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	4611      	mov	r1, r2
 8008112:	4618      	mov	r0, r3
 8008114:	f7fa ff6b 	bl	8002fee <HAL_PCD_EP_SetStall>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	4618      	mov	r0, r3
 8008120:	f000 f8e4 	bl	80082ec <USBD_Get_USB_Status>
 8008124:	4603      	mov	r3, r0
 8008126:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008128:	7bbb      	ldrb	r3, [r7, #14]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7fa ffa6 	bl	80030a2 <HAL_PCD_EP_ClrStall>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f8c5 	bl	80082ec <USBD_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008166:	7bbb      	ldrb	r3, [r7, #14]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008182:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008188:	2b00      	cmp	r3, #0
 800818a:	da08      	bge.n	800819e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	015b      	lsls	r3, r3, #5
 8008196:	4413      	add	r3, r2
 8008198:	332a      	adds	r3, #42	; 0x2a
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	e008      	b.n	80081b0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800819e:	78fb      	ldrb	r3, [r7, #3]
 80081a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	015b      	lsls	r3, r3, #5
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80081ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fa fdba 	bl	8002d52 <HAL_PCD_SetAddress>
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f881 	bl	80082ec <USBD_Get_USB_Status>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	461a      	mov	r2, r3
 8008204:	460b      	mov	r3, r1
 8008206:	72fb      	strb	r3, [r7, #11]
 8008208:	4613      	mov	r3, r2
 800820a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800821a:	893b      	ldrh	r3, [r7, #8]
 800821c:	7af9      	ldrb	r1, [r7, #11]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	f7fa feac 	bl	8002f7c <HAL_PCD_EP_Transmit>
 8008224:	4603      	mov	r3, r0
 8008226:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008228:	7dfb      	ldrb	r3, [r7, #23]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f85e 	bl	80082ec <USBD_Get_USB_Status>
 8008230:	4603      	mov	r3, r0
 8008232:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008234:	7dbb      	ldrb	r3, [r7, #22]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	461a      	mov	r2, r3
 800824a:	460b      	mov	r3, r1
 800824c:	72fb      	strb	r3, [r7, #11]
 800824e:	4613      	mov	r3, r2
 8008250:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008260:	893b      	ldrh	r3, [r7, #8]
 8008262:	7af9      	ldrb	r1, [r7, #11]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	f7fa fe3b 	bl	8002ee0 <HAL_PCD_EP_Receive>
 800826a:	4603      	mov	r3, r0
 800826c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800826e:	7dfb      	ldrb	r3, [r7, #23]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f83b 	bl	80082ec <USBD_Get_USB_Status>
 8008276:	4603      	mov	r3, r0
 8008278:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800827a:	7dbb      	ldrb	r3, [r7, #22]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fa fe5a 	bl	8002f54 <HAL_PCD_EP_GetRxCount>
 80082a0:	4603      	mov	r3, r0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <USBD_static_malloc+0x14>)
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	200003f4 	.word	0x200003f4

080082c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]

}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr

080082d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80082e2:	bf00      	nop
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc80      	pop	{r7}
 80082ea:	4770      	bx	lr

080082ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	4603      	mov	r3, r0
 80082f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d817      	bhi.n	8008330 <USBD_Get_USB_Status+0x44>
 8008300:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <USBD_Get_USB_Status+0x1c>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008319 	.word	0x08008319
 800830c:	0800831f 	.word	0x0800831f
 8008310:	08008325 	.word	0x08008325
 8008314:	0800832b 	.word	0x0800832b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
    break;
 800831c:	e00b      	b.n	8008336 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800831e:	2302      	movs	r3, #2
 8008320:	73fb      	strb	r3, [r7, #15]
    break;
 8008322:	e008      	b.n	8008336 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008324:	2301      	movs	r3, #1
 8008326:	73fb      	strb	r3, [r7, #15]
    break;
 8008328:	e005      	b.n	8008336 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	73fb      	strb	r3, [r7, #15]
    break;
 800832e:	e002      	b.n	8008336 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008330:	2302      	movs	r3, #2
 8008332:	73fb      	strb	r3, [r7, #15]
    break;
 8008334:	bf00      	nop
  }
  return usb_status;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop

08008344 <atof>:
 8008344:	2100      	movs	r1, #0
 8008346:	f000 beaf 	b.w	80090a8 <strtod>
	...

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000017c 	.word	0x2000017c

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	2500      	movs	r5, #0
 800835c:	4e0c      	ldr	r6, [pc, #48]	; (8008390 <__libc_init_array+0x38>)
 800835e:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 8008360:	1ba4      	subs	r4, r4, r6
 8008362:	10a4      	asrs	r4, r4, #2
 8008364:	42a5      	cmp	r5, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	f002 fa86 	bl	800a878 <_init>
 800836c:	2500      	movs	r5, #0
 800836e:	4e0a      	ldr	r6, [pc, #40]	; (8008398 <__libc_init_array+0x40>)
 8008370:	4c0a      	ldr	r4, [pc, #40]	; (800839c <__libc_init_array+0x44>)
 8008372:	1ba4      	subs	r4, r4, r6
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	42a5      	cmp	r5, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008380:	4798      	blx	r3
 8008382:	3501      	adds	r5, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800838a:	4798      	blx	r3
 800838c:	3501      	adds	r5, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	0800ac30 	.word	0x0800ac30
 8008394:	0800ac30 	.word	0x0800ac30
 8008398:	0800ac30 	.word	0x0800ac30
 800839c:	0800ac34 	.word	0x0800ac34

080083a0 <memcpy>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	1e43      	subs	r3, r0, #1
 80083a4:	440a      	add	r2, r1
 80083a6:	4291      	cmp	r1, r2
 80083a8:	d100      	bne.n	80083ac <memcpy+0xc>
 80083aa:	bd10      	pop	{r4, pc}
 80083ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b4:	e7f7      	b.n	80083a6 <memcpy+0x6>

080083b6 <memset>:
 80083b6:	4603      	mov	r3, r0
 80083b8:	4402      	add	r2, r0
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d100      	bne.n	80083c0 <memset+0xa>
 80083be:	4770      	bx	lr
 80083c0:	f803 1b01 	strb.w	r1, [r3], #1
 80083c4:	e7f9      	b.n	80083ba <memset+0x4>
	...

080083c8 <siprintf>:
 80083c8:	b40e      	push	{r1, r2, r3}
 80083ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083ce:	b500      	push	{lr}
 80083d0:	b09c      	sub	sp, #112	; 0x70
 80083d2:	ab1d      	add	r3, sp, #116	; 0x74
 80083d4:	9002      	str	r0, [sp, #8]
 80083d6:	9006      	str	r0, [sp, #24]
 80083d8:	9107      	str	r1, [sp, #28]
 80083da:	9104      	str	r1, [sp, #16]
 80083dc:	4808      	ldr	r0, [pc, #32]	; (8008400 <siprintf+0x38>)
 80083de:	4909      	ldr	r1, [pc, #36]	; (8008404 <siprintf+0x3c>)
 80083e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e4:	9105      	str	r1, [sp, #20]
 80083e6:	6800      	ldr	r0, [r0, #0]
 80083e8:	a902      	add	r1, sp, #8
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	f001 fefa 	bl	800a1e4 <_svfiprintf_r>
 80083f0:	2200      	movs	r2, #0
 80083f2:	9b02      	ldr	r3, [sp, #8]
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	b01c      	add	sp, #112	; 0x70
 80083f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083fc:	b003      	add	sp, #12
 80083fe:	4770      	bx	lr
 8008400:	2000017c 	.word	0x2000017c
 8008404:	ffff0208 	.word	0xffff0208

08008408 <strcpy>:
 8008408:	4603      	mov	r3, r0
 800840a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800840e:	f803 2b01 	strb.w	r2, [r3], #1
 8008412:	2a00      	cmp	r2, #0
 8008414:	d1f9      	bne.n	800840a <strcpy+0x2>
 8008416:	4770      	bx	lr

08008418 <strncmp>:
 8008418:	b510      	push	{r4, lr}
 800841a:	b16a      	cbz	r2, 8008438 <strncmp+0x20>
 800841c:	3901      	subs	r1, #1
 800841e:	1884      	adds	r4, r0, r2
 8008420:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008424:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008428:	4293      	cmp	r3, r2
 800842a:	d103      	bne.n	8008434 <strncmp+0x1c>
 800842c:	42a0      	cmp	r0, r4
 800842e:	d001      	beq.n	8008434 <strncmp+0x1c>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f5      	bne.n	8008420 <strncmp+0x8>
 8008434:	1a98      	subs	r0, r3, r2
 8008436:	bd10      	pop	{r4, pc}
 8008438:	4610      	mov	r0, r2
 800843a:	e7fc      	b.n	8008436 <strncmp+0x1e>

0800843c <strncpy>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4604      	mov	r4, r0
 8008440:	3901      	subs	r1, #1
 8008442:	b902      	cbnz	r2, 8008446 <strncpy+0xa>
 8008444:	bd70      	pop	{r4, r5, r6, pc}
 8008446:	4623      	mov	r3, r4
 8008448:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800844c:	1e56      	subs	r6, r2, #1
 800844e:	f803 5b01 	strb.w	r5, [r3], #1
 8008452:	b92d      	cbnz	r5, 8008460 <strncpy+0x24>
 8008454:	4414      	add	r4, r2
 8008456:	42a3      	cmp	r3, r4
 8008458:	d0f4      	beq.n	8008444 <strncpy+0x8>
 800845a:	f803 5b01 	strb.w	r5, [r3], #1
 800845e:	e7fa      	b.n	8008456 <strncpy+0x1a>
 8008460:	461c      	mov	r4, r3
 8008462:	4632      	mov	r2, r6
 8008464:	e7ed      	b.n	8008442 <strncpy+0x6>

08008466 <sulp>:
 8008466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800846a:	460f      	mov	r7, r1
 800846c:	4690      	mov	r8, r2
 800846e:	f001 fcc9 	bl	8009e04 <__ulp>
 8008472:	4604      	mov	r4, r0
 8008474:	460d      	mov	r5, r1
 8008476:	f1b8 0f00 	cmp.w	r8, #0
 800847a:	d011      	beq.n	80084a0 <sulp+0x3a>
 800847c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008480:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008484:	2b00      	cmp	r3, #0
 8008486:	dd0b      	ble.n	80084a0 <sulp+0x3a>
 8008488:	2400      	movs	r4, #0
 800848a:	051b      	lsls	r3, r3, #20
 800848c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008490:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008494:	4622      	mov	r2, r4
 8008496:	462b      	mov	r3, r5
 8008498:	f7f8 f81e 	bl	80004d8 <__aeabi_dmul>
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084a8 <_strtod_l>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	461f      	mov	r7, r3
 80084ae:	2300      	movs	r3, #0
 80084b0:	b0a1      	sub	sp, #132	; 0x84
 80084b2:	4683      	mov	fp, r0
 80084b4:	4638      	mov	r0, r7
 80084b6:	460e      	mov	r6, r1
 80084b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80084ba:	931c      	str	r3, [sp, #112]	; 0x70
 80084bc:	f001 f9c3 	bl	8009846 <__localeconv_l>
 80084c0:	4680      	mov	r8, r0
 80084c2:	6800      	ldr	r0, [r0, #0]
 80084c4:	f7f7 fe44 	bl	8000150 <strlen>
 80084c8:	f04f 0900 	mov.w	r9, #0
 80084cc:	4604      	mov	r4, r0
 80084ce:	f04f 0a00 	mov.w	sl, #0
 80084d2:	961b      	str	r6, [sp, #108]	; 0x6c
 80084d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084d6:	781a      	ldrb	r2, [r3, #0]
 80084d8:	2a0d      	cmp	r2, #13
 80084da:	d832      	bhi.n	8008542 <_strtod_l+0x9a>
 80084dc:	2a09      	cmp	r2, #9
 80084de:	d236      	bcs.n	800854e <_strtod_l+0xa6>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	d03e      	beq.n	8008562 <_strtod_l+0xba>
 80084e4:	2300      	movs	r3, #0
 80084e6:	930d      	str	r3, [sp, #52]	; 0x34
 80084e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80084ea:	782b      	ldrb	r3, [r5, #0]
 80084ec:	2b30      	cmp	r3, #48	; 0x30
 80084ee:	f040 80ac 	bne.w	800864a <_strtod_l+0x1a2>
 80084f2:	786b      	ldrb	r3, [r5, #1]
 80084f4:	2b58      	cmp	r3, #88	; 0x58
 80084f6:	d001      	beq.n	80084fc <_strtod_l+0x54>
 80084f8:	2b78      	cmp	r3, #120	; 0x78
 80084fa:	d167      	bne.n	80085cc <_strtod_l+0x124>
 80084fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084fe:	9702      	str	r7, [sp, #8]
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	ab1c      	add	r3, sp, #112	; 0x70
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4a89      	ldr	r2, [pc, #548]	; (800872c <_strtod_l+0x284>)
 8008508:	ab1d      	add	r3, sp, #116	; 0x74
 800850a:	a91b      	add	r1, sp, #108	; 0x6c
 800850c:	4658      	mov	r0, fp
 800850e:	f000 febf 	bl	8009290 <__gethex>
 8008512:	f010 0407 	ands.w	r4, r0, #7
 8008516:	4606      	mov	r6, r0
 8008518:	d005      	beq.n	8008526 <_strtod_l+0x7e>
 800851a:	2c06      	cmp	r4, #6
 800851c:	d12b      	bne.n	8008576 <_strtod_l+0xce>
 800851e:	2300      	movs	r3, #0
 8008520:	3501      	adds	r5, #1
 8008522:	951b      	str	r5, [sp, #108]	; 0x6c
 8008524:	930d      	str	r3, [sp, #52]	; 0x34
 8008526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 85a6 	bne.w	800907a <_strtod_l+0xbd2>
 800852e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008530:	b1e3      	cbz	r3, 800856c <_strtod_l+0xc4>
 8008532:	464a      	mov	r2, r9
 8008534:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008538:	4610      	mov	r0, r2
 800853a:	4619      	mov	r1, r3
 800853c:	b021      	add	sp, #132	; 0x84
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	2a2b      	cmp	r2, #43	; 0x2b
 8008544:	d015      	beq.n	8008572 <_strtod_l+0xca>
 8008546:	2a2d      	cmp	r2, #45	; 0x2d
 8008548:	d004      	beq.n	8008554 <_strtod_l+0xac>
 800854a:	2a20      	cmp	r2, #32
 800854c:	d1ca      	bne.n	80084e4 <_strtod_l+0x3c>
 800854e:	3301      	adds	r3, #1
 8008550:	931b      	str	r3, [sp, #108]	; 0x6c
 8008552:	e7bf      	b.n	80084d4 <_strtod_l+0x2c>
 8008554:	2201      	movs	r2, #1
 8008556:	920d      	str	r2, [sp, #52]	; 0x34
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	921b      	str	r2, [sp, #108]	; 0x6c
 800855c:	785b      	ldrb	r3, [r3, #1]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1c2      	bne.n	80084e8 <_strtod_l+0x40>
 8008562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008564:	961b      	str	r6, [sp, #108]	; 0x6c
 8008566:	2b00      	cmp	r3, #0
 8008568:	f040 8585 	bne.w	8009076 <_strtod_l+0xbce>
 800856c:	464a      	mov	r2, r9
 800856e:	4653      	mov	r3, sl
 8008570:	e7e2      	b.n	8008538 <_strtod_l+0x90>
 8008572:	2200      	movs	r2, #0
 8008574:	e7ef      	b.n	8008556 <_strtod_l+0xae>
 8008576:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008578:	b13a      	cbz	r2, 800858a <_strtod_l+0xe2>
 800857a:	2135      	movs	r1, #53	; 0x35
 800857c:	a81e      	add	r0, sp, #120	; 0x78
 800857e:	f001 fd34 	bl	8009fea <__copybits>
 8008582:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008584:	4658      	mov	r0, fp
 8008586:	f001 f9a6 	bl	80098d6 <_Bfree>
 800858a:	3c01      	subs	r4, #1
 800858c:	2c04      	cmp	r4, #4
 800858e:	d806      	bhi.n	800859e <_strtod_l+0xf6>
 8008590:	e8df f004 	tbb	[pc, r4]
 8008594:	1714030a 	.word	0x1714030a
 8008598:	0a          	.byte	0x0a
 8008599:	00          	.byte	0x00
 800859a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800859e:	0731      	lsls	r1, r6, #28
 80085a0:	d5c1      	bpl.n	8008526 <_strtod_l+0x7e>
 80085a2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80085a6:	e7be      	b.n	8008526 <_strtod_l+0x7e>
 80085a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085aa:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80085ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085b6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80085ba:	e7f0      	b.n	800859e <_strtod_l+0xf6>
 80085bc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008730 <_strtod_l+0x288>
 80085c0:	e7ed      	b.n	800859e <_strtod_l+0xf6>
 80085c2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80085c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80085ca:	e7e8      	b.n	800859e <_strtod_l+0xf6>
 80085cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80085d2:	785b      	ldrb	r3, [r3, #1]
 80085d4:	2b30      	cmp	r3, #48	; 0x30
 80085d6:	d0f9      	beq.n	80085cc <_strtod_l+0x124>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0a4      	beq.n	8008526 <_strtod_l+0x7e>
 80085dc:	2301      	movs	r3, #1
 80085de:	2500      	movs	r5, #0
 80085e0:	220a      	movs	r2, #10
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085e6:	9506      	str	r5, [sp, #24]
 80085e8:	9308      	str	r3, [sp, #32]
 80085ea:	9504      	str	r5, [sp, #16]
 80085ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80085ee:	7807      	ldrb	r7, [r0, #0]
 80085f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80085f4:	b2d9      	uxtb	r1, r3
 80085f6:	2909      	cmp	r1, #9
 80085f8:	d929      	bls.n	800864e <_strtod_l+0x1a6>
 80085fa:	4622      	mov	r2, r4
 80085fc:	f8d8 1000 	ldr.w	r1, [r8]
 8008600:	f7ff ff0a 	bl	8008418 <strncmp>
 8008604:	2800      	cmp	r0, #0
 8008606:	d031      	beq.n	800866c <_strtod_l+0x1c4>
 8008608:	2000      	movs	r0, #0
 800860a:	463b      	mov	r3, r7
 800860c:	4602      	mov	r2, r0
 800860e:	9c04      	ldr	r4, [sp, #16]
 8008610:	9005      	str	r0, [sp, #20]
 8008612:	2b65      	cmp	r3, #101	; 0x65
 8008614:	d001      	beq.n	800861a <_strtod_l+0x172>
 8008616:	2b45      	cmp	r3, #69	; 0x45
 8008618:	d114      	bne.n	8008644 <_strtod_l+0x19c>
 800861a:	b924      	cbnz	r4, 8008626 <_strtod_l+0x17e>
 800861c:	b910      	cbnz	r0, 8008624 <_strtod_l+0x17c>
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d09e      	beq.n	8008562 <_strtod_l+0xba>
 8008624:	2400      	movs	r4, #0
 8008626:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008628:	1c73      	adds	r3, r6, #1
 800862a:	931b      	str	r3, [sp, #108]	; 0x6c
 800862c:	7873      	ldrb	r3, [r6, #1]
 800862e:	2b2b      	cmp	r3, #43	; 0x2b
 8008630:	d078      	beq.n	8008724 <_strtod_l+0x27c>
 8008632:	2b2d      	cmp	r3, #45	; 0x2d
 8008634:	d070      	beq.n	8008718 <_strtod_l+0x270>
 8008636:	f04f 0c00 	mov.w	ip, #0
 800863a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800863e:	2f09      	cmp	r7, #9
 8008640:	d97c      	bls.n	800873c <_strtod_l+0x294>
 8008642:	961b      	str	r6, [sp, #108]	; 0x6c
 8008644:	f04f 0e00 	mov.w	lr, #0
 8008648:	e09a      	b.n	8008780 <_strtod_l+0x2d8>
 800864a:	2300      	movs	r3, #0
 800864c:	e7c7      	b.n	80085de <_strtod_l+0x136>
 800864e:	9904      	ldr	r1, [sp, #16]
 8008650:	3001      	adds	r0, #1
 8008652:	2908      	cmp	r1, #8
 8008654:	bfd7      	itett	le
 8008656:	9906      	ldrle	r1, [sp, #24]
 8008658:	fb02 3505 	mlagt	r5, r2, r5, r3
 800865c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008660:	9306      	strle	r3, [sp, #24]
 8008662:	9b04      	ldr	r3, [sp, #16]
 8008664:	901b      	str	r0, [sp, #108]	; 0x6c
 8008666:	3301      	adds	r3, #1
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	e7bf      	b.n	80085ec <_strtod_l+0x144>
 800866c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800866e:	191a      	adds	r2, r3, r4
 8008670:	921b      	str	r2, [sp, #108]	; 0x6c
 8008672:	9a04      	ldr	r2, [sp, #16]
 8008674:	5d1b      	ldrb	r3, [r3, r4]
 8008676:	2a00      	cmp	r2, #0
 8008678:	d037      	beq.n	80086ea <_strtod_l+0x242>
 800867a:	4602      	mov	r2, r0
 800867c:	9c04      	ldr	r4, [sp, #16]
 800867e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008682:	2909      	cmp	r1, #9
 8008684:	d913      	bls.n	80086ae <_strtod_l+0x206>
 8008686:	2101      	movs	r1, #1
 8008688:	9105      	str	r1, [sp, #20]
 800868a:	e7c2      	b.n	8008612 <_strtod_l+0x16a>
 800868c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800868e:	3001      	adds	r0, #1
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	921b      	str	r2, [sp, #108]	; 0x6c
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b30      	cmp	r3, #48	; 0x30
 8008698:	d0f8      	beq.n	800868c <_strtod_l+0x1e4>
 800869a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800869e:	2a08      	cmp	r2, #8
 80086a0:	f200 84f0 	bhi.w	8009084 <_strtod_l+0xbdc>
 80086a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80086a6:	9208      	str	r2, [sp, #32]
 80086a8:	4602      	mov	r2, r0
 80086aa:	2000      	movs	r0, #0
 80086ac:	4604      	mov	r4, r0
 80086ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80086b2:	f100 0101 	add.w	r1, r0, #1
 80086b6:	d012      	beq.n	80086de <_strtod_l+0x236>
 80086b8:	440a      	add	r2, r1
 80086ba:	270a      	movs	r7, #10
 80086bc:	4621      	mov	r1, r4
 80086be:	eb00 0c04 	add.w	ip, r0, r4
 80086c2:	458c      	cmp	ip, r1
 80086c4:	d113      	bne.n	80086ee <_strtod_l+0x246>
 80086c6:	1821      	adds	r1, r4, r0
 80086c8:	2908      	cmp	r1, #8
 80086ca:	f104 0401 	add.w	r4, r4, #1
 80086ce:	4404      	add	r4, r0
 80086d0:	dc19      	bgt.n	8008706 <_strtod_l+0x25e>
 80086d2:	210a      	movs	r1, #10
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	fb01 e303 	mla	r3, r1, r3, lr
 80086da:	9306      	str	r3, [sp, #24]
 80086dc:	2100      	movs	r1, #0
 80086de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086e0:	1c58      	adds	r0, r3, #1
 80086e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	4608      	mov	r0, r1
 80086e8:	e7c9      	b.n	800867e <_strtod_l+0x1d6>
 80086ea:	9804      	ldr	r0, [sp, #16]
 80086ec:	e7d3      	b.n	8008696 <_strtod_l+0x1ee>
 80086ee:	2908      	cmp	r1, #8
 80086f0:	f101 0101 	add.w	r1, r1, #1
 80086f4:	dc03      	bgt.n	80086fe <_strtod_l+0x256>
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	437b      	muls	r3, r7
 80086fa:	9306      	str	r3, [sp, #24]
 80086fc:	e7e1      	b.n	80086c2 <_strtod_l+0x21a>
 80086fe:	2910      	cmp	r1, #16
 8008700:	bfd8      	it	le
 8008702:	437d      	mulle	r5, r7
 8008704:	e7dd      	b.n	80086c2 <_strtod_l+0x21a>
 8008706:	2c10      	cmp	r4, #16
 8008708:	bfdc      	itt	le
 800870a:	210a      	movle	r1, #10
 800870c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008710:	e7e4      	b.n	80086dc <_strtod_l+0x234>
 8008712:	2301      	movs	r3, #1
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	e781      	b.n	800861c <_strtod_l+0x174>
 8008718:	f04f 0c01 	mov.w	ip, #1
 800871c:	1cb3      	adds	r3, r6, #2
 800871e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008720:	78b3      	ldrb	r3, [r6, #2]
 8008722:	e78a      	b.n	800863a <_strtod_l+0x192>
 8008724:	f04f 0c00 	mov.w	ip, #0
 8008728:	e7f8      	b.n	800871c <_strtod_l+0x274>
 800872a:	bf00      	nop
 800872c:	0800a9a0 	.word	0x0800a9a0
 8008730:	7ff00000 	.word	0x7ff00000
 8008734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008736:	1c5f      	adds	r7, r3, #1
 8008738:	971b      	str	r7, [sp, #108]	; 0x6c
 800873a:	785b      	ldrb	r3, [r3, #1]
 800873c:	2b30      	cmp	r3, #48	; 0x30
 800873e:	d0f9      	beq.n	8008734 <_strtod_l+0x28c>
 8008740:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008744:	2f08      	cmp	r7, #8
 8008746:	f63f af7d 	bhi.w	8008644 <_strtod_l+0x19c>
 800874a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800874e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008750:	9309      	str	r3, [sp, #36]	; 0x24
 8008752:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008754:	1c5f      	adds	r7, r3, #1
 8008756:	971b      	str	r7, [sp, #108]	; 0x6c
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800875e:	f1b8 0f09 	cmp.w	r8, #9
 8008762:	d937      	bls.n	80087d4 <_strtod_l+0x32c>
 8008764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008766:	1a7f      	subs	r7, r7, r1
 8008768:	2f08      	cmp	r7, #8
 800876a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800876e:	dc37      	bgt.n	80087e0 <_strtod_l+0x338>
 8008770:	45be      	cmp	lr, r7
 8008772:	bfa8      	it	ge
 8008774:	46be      	movge	lr, r7
 8008776:	f1bc 0f00 	cmp.w	ip, #0
 800877a:	d001      	beq.n	8008780 <_strtod_l+0x2d8>
 800877c:	f1ce 0e00 	rsb	lr, lr, #0
 8008780:	2c00      	cmp	r4, #0
 8008782:	d151      	bne.n	8008828 <_strtod_l+0x380>
 8008784:	2800      	cmp	r0, #0
 8008786:	f47f aece 	bne.w	8008526 <_strtod_l+0x7e>
 800878a:	9a07      	ldr	r2, [sp, #28]
 800878c:	2a00      	cmp	r2, #0
 800878e:	f47f aeca 	bne.w	8008526 <_strtod_l+0x7e>
 8008792:	9a05      	ldr	r2, [sp, #20]
 8008794:	2a00      	cmp	r2, #0
 8008796:	f47f aee4 	bne.w	8008562 <_strtod_l+0xba>
 800879a:	2b4e      	cmp	r3, #78	; 0x4e
 800879c:	d027      	beq.n	80087ee <_strtod_l+0x346>
 800879e:	dc21      	bgt.n	80087e4 <_strtod_l+0x33c>
 80087a0:	2b49      	cmp	r3, #73	; 0x49
 80087a2:	f47f aede 	bne.w	8008562 <_strtod_l+0xba>
 80087a6:	49a4      	ldr	r1, [pc, #656]	; (8008a38 <_strtod_l+0x590>)
 80087a8:	a81b      	add	r0, sp, #108	; 0x6c
 80087aa:	f000 ffa5 	bl	80096f8 <__match>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f aed7 	beq.w	8008562 <_strtod_l+0xba>
 80087b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087b6:	49a1      	ldr	r1, [pc, #644]	; (8008a3c <_strtod_l+0x594>)
 80087b8:	3b01      	subs	r3, #1
 80087ba:	a81b      	add	r0, sp, #108	; 0x6c
 80087bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80087be:	f000 ff9b 	bl	80096f8 <__match>
 80087c2:	b910      	cbnz	r0, 80087ca <_strtod_l+0x322>
 80087c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087c6:	3301      	adds	r3, #1
 80087c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80087ca:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008a50 <_strtod_l+0x5a8>
 80087ce:	f04f 0900 	mov.w	r9, #0
 80087d2:	e6a8      	b.n	8008526 <_strtod_l+0x7e>
 80087d4:	210a      	movs	r1, #10
 80087d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80087da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80087de:	e7b8      	b.n	8008752 <_strtod_l+0x2aa>
 80087e0:	46be      	mov	lr, r7
 80087e2:	e7c8      	b.n	8008776 <_strtod_l+0x2ce>
 80087e4:	2b69      	cmp	r3, #105	; 0x69
 80087e6:	d0de      	beq.n	80087a6 <_strtod_l+0x2fe>
 80087e8:	2b6e      	cmp	r3, #110	; 0x6e
 80087ea:	f47f aeba 	bne.w	8008562 <_strtod_l+0xba>
 80087ee:	4994      	ldr	r1, [pc, #592]	; (8008a40 <_strtod_l+0x598>)
 80087f0:	a81b      	add	r0, sp, #108	; 0x6c
 80087f2:	f000 ff81 	bl	80096f8 <__match>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f aeb3 	beq.w	8008562 <_strtod_l+0xba>
 80087fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b28      	cmp	r3, #40	; 0x28
 8008802:	d10e      	bne.n	8008822 <_strtod_l+0x37a>
 8008804:	aa1e      	add	r2, sp, #120	; 0x78
 8008806:	498f      	ldr	r1, [pc, #572]	; (8008a44 <_strtod_l+0x59c>)
 8008808:	a81b      	add	r0, sp, #108	; 0x6c
 800880a:	f000 ff89 	bl	8009720 <__hexnan>
 800880e:	2805      	cmp	r0, #5
 8008810:	d107      	bne.n	8008822 <_strtod_l+0x37a>
 8008812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008814:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008818:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800881c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008820:	e681      	b.n	8008526 <_strtod_l+0x7e>
 8008822:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008a58 <_strtod_l+0x5b0>
 8008826:	e7d2      	b.n	80087ce <_strtod_l+0x326>
 8008828:	ebae 0302 	sub.w	r3, lr, r2
 800882c:	9307      	str	r3, [sp, #28]
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	9806      	ldr	r0, [sp, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	bf08      	it	eq
 8008836:	4623      	moveq	r3, r4
 8008838:	2c10      	cmp	r4, #16
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	46a0      	mov	r8, r4
 800883e:	bfa8      	it	ge
 8008840:	f04f 0810 	movge.w	r8, #16
 8008844:	f7f7 fdce 	bl	80003e4 <__aeabi_ui2d>
 8008848:	2c09      	cmp	r4, #9
 800884a:	4681      	mov	r9, r0
 800884c:	468a      	mov	sl, r1
 800884e:	dc13      	bgt.n	8008878 <_strtod_l+0x3d0>
 8008850:	9b07      	ldr	r3, [sp, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f43f ae67 	beq.w	8008526 <_strtod_l+0x7e>
 8008858:	9b07      	ldr	r3, [sp, #28]
 800885a:	dd7e      	ble.n	800895a <_strtod_l+0x4b2>
 800885c:	2b16      	cmp	r3, #22
 800885e:	dc65      	bgt.n	800892c <_strtod_l+0x484>
 8008860:	4a79      	ldr	r2, [pc, #484]	; (8008a48 <_strtod_l+0x5a0>)
 8008862:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008866:	464a      	mov	r2, r9
 8008868:	e9de 0100 	ldrd	r0, r1, [lr]
 800886c:	4653      	mov	r3, sl
 800886e:	f7f7 fe33 	bl	80004d8 <__aeabi_dmul>
 8008872:	4681      	mov	r9, r0
 8008874:	468a      	mov	sl, r1
 8008876:	e656      	b.n	8008526 <_strtod_l+0x7e>
 8008878:	4b73      	ldr	r3, [pc, #460]	; (8008a48 <_strtod_l+0x5a0>)
 800887a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800887e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008882:	f7f7 fe29 	bl	80004d8 <__aeabi_dmul>
 8008886:	4606      	mov	r6, r0
 8008888:	4628      	mov	r0, r5
 800888a:	460f      	mov	r7, r1
 800888c:	f7f7 fdaa 	bl	80003e4 <__aeabi_ui2d>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f7 fc68 	bl	800016c <__adddf3>
 800889c:	2c0f      	cmp	r4, #15
 800889e:	4681      	mov	r9, r0
 80088a0:	468a      	mov	sl, r1
 80088a2:	ddd5      	ble.n	8008850 <_strtod_l+0x3a8>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	eba4 0808 	sub.w	r8, r4, r8
 80088aa:	4498      	add	r8, r3
 80088ac:	f1b8 0f00 	cmp.w	r8, #0
 80088b0:	f340 809a 	ble.w	80089e8 <_strtod_l+0x540>
 80088b4:	f018 030f 	ands.w	r3, r8, #15
 80088b8:	d00a      	beq.n	80088d0 <_strtod_l+0x428>
 80088ba:	4963      	ldr	r1, [pc, #396]	; (8008a48 <_strtod_l+0x5a0>)
 80088bc:	464a      	mov	r2, r9
 80088be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c6:	4653      	mov	r3, sl
 80088c8:	f7f7 fe06 	bl	80004d8 <__aeabi_dmul>
 80088cc:	4681      	mov	r9, r0
 80088ce:	468a      	mov	sl, r1
 80088d0:	f038 080f 	bics.w	r8, r8, #15
 80088d4:	d077      	beq.n	80089c6 <_strtod_l+0x51e>
 80088d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80088da:	dd4b      	ble.n	8008974 <_strtod_l+0x4cc>
 80088dc:	f04f 0800 	mov.w	r8, #0
 80088e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80088e4:	f8cd 8020 	str.w	r8, [sp, #32]
 80088e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80088ec:	2322      	movs	r3, #34	; 0x22
 80088ee:	f04f 0900 	mov.w	r9, #0
 80088f2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008a50 <_strtod_l+0x5a8>
 80088f6:	f8cb 3000 	str.w	r3, [fp]
 80088fa:	9b08      	ldr	r3, [sp, #32]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f43f ae12 	beq.w	8008526 <_strtod_l+0x7e>
 8008902:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008904:	4658      	mov	r0, fp
 8008906:	f000 ffe6 	bl	80098d6 <_Bfree>
 800890a:	9906      	ldr	r1, [sp, #24]
 800890c:	4658      	mov	r0, fp
 800890e:	f000 ffe2 	bl	80098d6 <_Bfree>
 8008912:	9904      	ldr	r1, [sp, #16]
 8008914:	4658      	mov	r0, fp
 8008916:	f000 ffde 	bl	80098d6 <_Bfree>
 800891a:	9908      	ldr	r1, [sp, #32]
 800891c:	4658      	mov	r0, fp
 800891e:	f000 ffda 	bl	80098d6 <_Bfree>
 8008922:	4641      	mov	r1, r8
 8008924:	4658      	mov	r0, fp
 8008926:	f000 ffd6 	bl	80098d6 <_Bfree>
 800892a:	e5fc      	b.n	8008526 <_strtod_l+0x7e>
 800892c:	9a07      	ldr	r2, [sp, #28]
 800892e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008932:	4293      	cmp	r3, r2
 8008934:	dbb6      	blt.n	80088a4 <_strtod_l+0x3fc>
 8008936:	4d44      	ldr	r5, [pc, #272]	; (8008a48 <_strtod_l+0x5a0>)
 8008938:	f1c4 040f 	rsb	r4, r4, #15
 800893c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008940:	464a      	mov	r2, r9
 8008942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008946:	4653      	mov	r3, sl
 8008948:	f7f7 fdc6 	bl	80004d8 <__aeabi_dmul>
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	1b1c      	subs	r4, r3, r4
 8008950:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008954:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008958:	e789      	b.n	800886e <_strtod_l+0x3c6>
 800895a:	f113 0f16 	cmn.w	r3, #22
 800895e:	dba1      	blt.n	80088a4 <_strtod_l+0x3fc>
 8008960:	4a39      	ldr	r2, [pc, #228]	; (8008a48 <_strtod_l+0x5a0>)
 8008962:	4648      	mov	r0, r9
 8008964:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008968:	e9d2 2300 	ldrd	r2, r3, [r2]
 800896c:	4651      	mov	r1, sl
 800896e:	f7f7 fedd 	bl	800072c <__aeabi_ddiv>
 8008972:	e77e      	b.n	8008872 <_strtod_l+0x3ca>
 8008974:	2300      	movs	r3, #0
 8008976:	4648      	mov	r0, r9
 8008978:	4651      	mov	r1, sl
 800897a:	461d      	mov	r5, r3
 800897c:	4e33      	ldr	r6, [pc, #204]	; (8008a4c <_strtod_l+0x5a4>)
 800897e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008982:	f1b8 0f01 	cmp.w	r8, #1
 8008986:	dc21      	bgt.n	80089cc <_strtod_l+0x524>
 8008988:	b10b      	cbz	r3, 800898e <_strtod_l+0x4e6>
 800898a:	4681      	mov	r9, r0
 800898c:	468a      	mov	sl, r1
 800898e:	4b2f      	ldr	r3, [pc, #188]	; (8008a4c <_strtod_l+0x5a4>)
 8008990:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008994:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008998:	464a      	mov	r2, r9
 800899a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800899e:	4653      	mov	r3, sl
 80089a0:	f7f7 fd9a 	bl	80004d8 <__aeabi_dmul>
 80089a4:	4b2a      	ldr	r3, [pc, #168]	; (8008a50 <_strtod_l+0x5a8>)
 80089a6:	460a      	mov	r2, r1
 80089a8:	400b      	ands	r3, r1
 80089aa:	492a      	ldr	r1, [pc, #168]	; (8008a54 <_strtod_l+0x5ac>)
 80089ac:	4681      	mov	r9, r0
 80089ae:	428b      	cmp	r3, r1
 80089b0:	d894      	bhi.n	80088dc <_strtod_l+0x434>
 80089b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80089b6:	428b      	cmp	r3, r1
 80089b8:	bf86      	itte	hi
 80089ba:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80089be:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8008a5c <_strtod_l+0x5b4>
 80089c2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80089c6:	2300      	movs	r3, #0
 80089c8:	9305      	str	r3, [sp, #20]
 80089ca:	e07b      	b.n	8008ac4 <_strtod_l+0x61c>
 80089cc:	f018 0f01 	tst.w	r8, #1
 80089d0:	d006      	beq.n	80089e0 <_strtod_l+0x538>
 80089d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f7f7 fd7d 	bl	80004d8 <__aeabi_dmul>
 80089de:	2301      	movs	r3, #1
 80089e0:	3501      	adds	r5, #1
 80089e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089e6:	e7cc      	b.n	8008982 <_strtod_l+0x4da>
 80089e8:	d0ed      	beq.n	80089c6 <_strtod_l+0x51e>
 80089ea:	f1c8 0800 	rsb	r8, r8, #0
 80089ee:	f018 020f 	ands.w	r2, r8, #15
 80089f2:	d00a      	beq.n	8008a0a <_strtod_l+0x562>
 80089f4:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <_strtod_l+0x5a0>)
 80089f6:	4648      	mov	r0, r9
 80089f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089fc:	4651      	mov	r1, sl
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fe93 	bl	800072c <__aeabi_ddiv>
 8008a06:	4681      	mov	r9, r0
 8008a08:	468a      	mov	sl, r1
 8008a0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a0e:	d0da      	beq.n	80089c6 <_strtod_l+0x51e>
 8008a10:	f1b8 0f1f 	cmp.w	r8, #31
 8008a14:	dd24      	ble.n	8008a60 <_strtod_l+0x5b8>
 8008a16:	f04f 0800 	mov.w	r8, #0
 8008a1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a1e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008a22:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a26:	2322      	movs	r3, #34	; 0x22
 8008a28:	f04f 0900 	mov.w	r9, #0
 8008a2c:	f04f 0a00 	mov.w	sl, #0
 8008a30:	f8cb 3000 	str.w	r3, [fp]
 8008a34:	e761      	b.n	80088fa <_strtod_l+0x452>
 8008a36:	bf00      	nop
 8008a38:	0800a994 	.word	0x0800a994
 8008a3c:	0800a997 	.word	0x0800a997
 8008a40:	0800a99d 	.word	0x0800a99d
 8008a44:	0800a9b4 	.word	0x0800a9b4
 8008a48:	0800aa28 	.word	0x0800aa28
 8008a4c:	0800aa00 	.word	0x0800aa00
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	7ca00000 	.word	0x7ca00000
 8008a58:	fff80000 	.word	0xfff80000
 8008a5c:	7fefffff 	.word	0x7fefffff
 8008a60:	f018 0310 	ands.w	r3, r8, #16
 8008a64:	bf18      	it	ne
 8008a66:	236a      	movne	r3, #106	; 0x6a
 8008a68:	4648      	mov	r0, r9
 8008a6a:	9305      	str	r3, [sp, #20]
 8008a6c:	4651      	mov	r1, sl
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4da1      	ldr	r5, [pc, #644]	; (8008cf8 <_strtod_l+0x850>)
 8008a72:	f1b8 0f00 	cmp.w	r8, #0
 8008a76:	f300 8113 	bgt.w	8008ca0 <_strtod_l+0x7f8>
 8008a7a:	b10b      	cbz	r3, 8008a80 <_strtod_l+0x5d8>
 8008a7c:	4681      	mov	r9, r0
 8008a7e:	468a      	mov	sl, r1
 8008a80:	9b05      	ldr	r3, [sp, #20]
 8008a82:	b1bb      	cbz	r3, 8008ab4 <_strtod_l+0x60c>
 8008a84:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008a88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	4651      	mov	r1, sl
 8008a90:	dd10      	ble.n	8008ab4 <_strtod_l+0x60c>
 8008a92:	2b1f      	cmp	r3, #31
 8008a94:	f340 8110 	ble.w	8008cb8 <_strtod_l+0x810>
 8008a98:	2b34      	cmp	r3, #52	; 0x34
 8008a9a:	bfd8      	it	le
 8008a9c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008aa0:	f04f 0900 	mov.w	r9, #0
 8008aa4:	bfcf      	iteee	gt
 8008aa6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008aaa:	3b20      	suble	r3, #32
 8008aac:	fa02 f303 	lslle.w	r3, r2, r3
 8008ab0:	ea03 0a01 	andle.w	sl, r3, r1
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4648      	mov	r0, r9
 8008aba:	4651      	mov	r1, sl
 8008abc:	f7f7 ff74 	bl	80009a8 <__aeabi_dcmpeq>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d1a8      	bne.n	8008a16 <_strtod_l+0x56e>
 8008ac4:	9b06      	ldr	r3, [sp, #24]
 8008ac6:	9a04      	ldr	r2, [sp, #16]
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	9908      	ldr	r1, [sp, #32]
 8008acc:	4623      	mov	r3, r4
 8008ace:	4658      	mov	r0, fp
 8008ad0:	f000 ff53 	bl	800997a <__s2b>
 8008ad4:	9008      	str	r0, [sp, #32]
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f43f af00 	beq.w	80088dc <_strtod_l+0x434>
 8008adc:	9a07      	ldr	r2, [sp, #28]
 8008ade:	9b07      	ldr	r3, [sp, #28]
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	f1c3 0300 	rsb	r3, r3, #0
 8008ae6:	bfa8      	it	ge
 8008ae8:	2300      	movge	r3, #0
 8008aea:	f04f 0800 	mov.w	r8, #0
 8008aee:	930e      	str	r3, [sp, #56]	; 0x38
 8008af0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008af4:	9316      	str	r3, [sp, #88]	; 0x58
 8008af6:	f8cd 8010 	str.w	r8, [sp, #16]
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	4658      	mov	r0, fp
 8008afe:	6859      	ldr	r1, [r3, #4]
 8008b00:	f000 feb5 	bl	800986e <_Balloc>
 8008b04:	9006      	str	r0, [sp, #24]
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f43f aef0 	beq.w	80088ec <_strtod_l+0x444>
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	300c      	adds	r0, #12
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	f103 010c 	add.w	r1, r3, #12
 8008b16:	3202      	adds	r2, #2
 8008b18:	0092      	lsls	r2, r2, #2
 8008b1a:	f7ff fc41 	bl	80083a0 <memcpy>
 8008b1e:	ab1e      	add	r3, sp, #120	; 0x78
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	ab1d      	add	r3, sp, #116	; 0x74
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	464a      	mov	r2, r9
 8008b28:	4653      	mov	r3, sl
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008b30:	f001 f9de 	bl	8009ef0 <__d2b>
 8008b34:	901c      	str	r0, [sp, #112]	; 0x70
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f aed8 	beq.w	80088ec <_strtod_l+0x444>
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	4658      	mov	r0, fp
 8008b40:	f000 ffa7 	bl	8009a92 <__i2b>
 8008b44:	9004      	str	r0, [sp, #16]
 8008b46:	4603      	mov	r3, r0
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f43f aecf 	beq.w	80088ec <_strtod_l+0x444>
 8008b4e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008b50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	bfab      	itete	ge
 8008b56:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008b58:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008b5a:	18ee      	addge	r6, r5, r3
 8008b5c:	1b5c      	sublt	r4, r3, r5
 8008b5e:	9b05      	ldr	r3, [sp, #20]
 8008b60:	bfa8      	it	ge
 8008b62:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008b64:	eba5 0503 	sub.w	r5, r5, r3
 8008b68:	4415      	add	r5, r2
 8008b6a:	4b64      	ldr	r3, [pc, #400]	; (8008cfc <_strtod_l+0x854>)
 8008b6c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008b70:	bfb8      	it	lt
 8008b72:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008b74:	429d      	cmp	r5, r3
 8008b76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b7a:	f280 80af 	bge.w	8008cdc <_strtod_l+0x834>
 8008b7e:	1b5b      	subs	r3, r3, r5
 8008b80:	2b1f      	cmp	r3, #31
 8008b82:	eba2 0203 	sub.w	r2, r2, r3
 8008b86:	f04f 0701 	mov.w	r7, #1
 8008b8a:	f300 809c 	bgt.w	8008cc6 <_strtod_l+0x81e>
 8008b8e:	2500      	movs	r5, #0
 8008b90:	fa07 f303 	lsl.w	r3, r7, r3
 8008b94:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b96:	18b7      	adds	r7, r6, r2
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	42be      	cmp	r6, r7
 8008b9c:	4414      	add	r4, r2
 8008b9e:	441c      	add	r4, r3
 8008ba0:	4633      	mov	r3, r6
 8008ba2:	bfa8      	it	ge
 8008ba4:	463b      	movge	r3, r7
 8008ba6:	42a3      	cmp	r3, r4
 8008ba8:	bfa8      	it	ge
 8008baa:	4623      	movge	r3, r4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfc2      	ittt	gt
 8008bb0:	1aff      	subgt	r7, r7, r3
 8008bb2:	1ae4      	subgt	r4, r4, r3
 8008bb4:	1af6      	subgt	r6, r6, r3
 8008bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb8:	b1bb      	cbz	r3, 8008bea <_strtod_l+0x742>
 8008bba:	461a      	mov	r2, r3
 8008bbc:	9904      	ldr	r1, [sp, #16]
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	f001 f806 	bl	8009bd0 <__pow5mult>
 8008bc4:	9004      	str	r0, [sp, #16]
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f ae90 	beq.w	80088ec <_strtod_l+0x444>
 8008bcc:	4601      	mov	r1, r0
 8008bce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	f000 ff67 	bl	8009aa4 <__multiply>
 8008bd6:	9009      	str	r0, [sp, #36]	; 0x24
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f43f ae87 	beq.w	80088ec <_strtod_l+0x444>
 8008bde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fe78 	bl	80098d6 <_Bfree>
 8008be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be8:	931c      	str	r3, [sp, #112]	; 0x70
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	dc7a      	bgt.n	8008ce4 <_strtod_l+0x83c>
 8008bee:	9b07      	ldr	r3, [sp, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dd08      	ble.n	8008c06 <_strtod_l+0x75e>
 8008bf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bf6:	9906      	ldr	r1, [sp, #24]
 8008bf8:	4658      	mov	r0, fp
 8008bfa:	f000 ffe9 	bl	8009bd0 <__pow5mult>
 8008bfe:	9006      	str	r0, [sp, #24]
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f43f ae73 	beq.w	80088ec <_strtod_l+0x444>
 8008c06:	2c00      	cmp	r4, #0
 8008c08:	dd08      	ble.n	8008c1c <_strtod_l+0x774>
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	9906      	ldr	r1, [sp, #24]
 8008c0e:	4658      	mov	r0, fp
 8008c10:	f001 f82c 	bl	8009c6c <__lshift>
 8008c14:	9006      	str	r0, [sp, #24]
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f43f ae68 	beq.w	80088ec <_strtod_l+0x444>
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	dd08      	ble.n	8008c32 <_strtod_l+0x78a>
 8008c20:	4632      	mov	r2, r6
 8008c22:	9904      	ldr	r1, [sp, #16]
 8008c24:	4658      	mov	r0, fp
 8008c26:	f001 f821 	bl	8009c6c <__lshift>
 8008c2a:	9004      	str	r0, [sp, #16]
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	f43f ae5d 	beq.w	80088ec <_strtod_l+0x444>
 8008c32:	9a06      	ldr	r2, [sp, #24]
 8008c34:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c36:	4658      	mov	r0, fp
 8008c38:	f001 f886 	bl	8009d48 <__mdiff>
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f43f ae54 	beq.w	80088ec <_strtod_l+0x444>
 8008c44:	2400      	movs	r4, #0
 8008c46:	68c3      	ldr	r3, [r0, #12]
 8008c48:	9904      	ldr	r1, [sp, #16]
 8008c4a:	60c4      	str	r4, [r0, #12]
 8008c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8008c4e:	f001 f861 	bl	8009d14 <__mcmp>
 8008c52:	42a0      	cmp	r0, r4
 8008c54:	da54      	bge.n	8008d00 <_strtod_l+0x858>
 8008c56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c58:	b9f3      	cbnz	r3, 8008c98 <_strtod_l+0x7f0>
 8008c5a:	f1b9 0f00 	cmp.w	r9, #0
 8008c5e:	d11b      	bne.n	8008c98 <_strtod_l+0x7f0>
 8008c60:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008c64:	b9c3      	cbnz	r3, 8008c98 <_strtod_l+0x7f0>
 8008c66:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008c6a:	0d1b      	lsrs	r3, r3, #20
 8008c6c:	051b      	lsls	r3, r3, #20
 8008c6e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c72:	d911      	bls.n	8008c98 <_strtod_l+0x7f0>
 8008c74:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008c78:	b91b      	cbnz	r3, 8008c82 <_strtod_l+0x7da>
 8008c7a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	dd0a      	ble.n	8008c98 <_strtod_l+0x7f0>
 8008c82:	4641      	mov	r1, r8
 8008c84:	2201      	movs	r2, #1
 8008c86:	4658      	mov	r0, fp
 8008c88:	f000 fff0 	bl	8009c6c <__lshift>
 8008c8c:	9904      	ldr	r1, [sp, #16]
 8008c8e:	4680      	mov	r8, r0
 8008c90:	f001 f840 	bl	8009d14 <__mcmp>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	dc68      	bgt.n	8008d6a <_strtod_l+0x8c2>
 8008c98:	9b05      	ldr	r3, [sp, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d172      	bne.n	8008d84 <_strtod_l+0x8dc>
 8008c9e:	e630      	b.n	8008902 <_strtod_l+0x45a>
 8008ca0:	f018 0f01 	tst.w	r8, #1
 8008ca4:	d004      	beq.n	8008cb0 <_strtod_l+0x808>
 8008ca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008caa:	f7f7 fc15 	bl	80004d8 <__aeabi_dmul>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008cb4:	3508      	adds	r5, #8
 8008cb6:	e6dc      	b.n	8008a72 <_strtod_l+0x5ca>
 8008cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	ea03 0909 	and.w	r9, r3, r9
 8008cc4:	e6f6      	b.n	8008ab4 <_strtod_l+0x60c>
 8008cc6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008cca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008cce:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008cd2:	35e2      	adds	r5, #226	; 0xe2
 8008cd4:	fa07 f505 	lsl.w	r5, r7, r5
 8008cd8:	970f      	str	r7, [sp, #60]	; 0x3c
 8008cda:	e75c      	b.n	8008b96 <_strtod_l+0x6ee>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	2500      	movs	r5, #0
 8008ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ce2:	e758      	b.n	8008b96 <_strtod_l+0x6ee>
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ce8:	4658      	mov	r0, fp
 8008cea:	f000 ffbf 	bl	8009c6c <__lshift>
 8008cee:	901c      	str	r0, [sp, #112]	; 0x70
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f47f af7c 	bne.w	8008bee <_strtod_l+0x746>
 8008cf6:	e5f9      	b.n	80088ec <_strtod_l+0x444>
 8008cf8:	0800a9c8 	.word	0x0800a9c8
 8008cfc:	fffffc02 	.word	0xfffffc02
 8008d00:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d04:	f040 8089 	bne.w	8008e1a <_strtod_l+0x972>
 8008d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d0a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008d0e:	b342      	cbz	r2, 8008d62 <_strtod_l+0x8ba>
 8008d10:	4aaf      	ldr	r2, [pc, #700]	; (8008fd0 <_strtod_l+0xb28>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d156      	bne.n	8008dc4 <_strtod_l+0x91c>
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	4648      	mov	r0, r9
 8008d1a:	b1eb      	cbz	r3, 8008d58 <_strtod_l+0x8b0>
 8008d1c:	4653      	mov	r3, sl
 8008d1e:	4aad      	ldr	r2, [pc, #692]	; (8008fd4 <_strtod_l+0xb2c>)
 8008d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d24:	401a      	ands	r2, r3
 8008d26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008d2a:	d818      	bhi.n	8008d5e <_strtod_l+0x8b6>
 8008d2c:	0d12      	lsrs	r2, r2, #20
 8008d2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d32:	fa01 f303 	lsl.w	r3, r1, r3
 8008d36:	4298      	cmp	r0, r3
 8008d38:	d144      	bne.n	8008dc4 <_strtod_l+0x91c>
 8008d3a:	4ba7      	ldr	r3, [pc, #668]	; (8008fd8 <_strtod_l+0xb30>)
 8008d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d102      	bne.n	8008d48 <_strtod_l+0x8a0>
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f add2 	beq.w	80088ec <_strtod_l+0x444>
 8008d48:	4ba2      	ldr	r3, [pc, #648]	; (8008fd4 <_strtod_l+0xb2c>)
 8008d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d4c:	f04f 0900 	mov.w	r9, #0
 8008d50:	401a      	ands	r2, r3
 8008d52:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008d56:	e79f      	b.n	8008c98 <_strtod_l+0x7f0>
 8008d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d5c:	e7eb      	b.n	8008d36 <_strtod_l+0x88e>
 8008d5e:	460b      	mov	r3, r1
 8008d60:	e7e9      	b.n	8008d36 <_strtod_l+0x88e>
 8008d62:	bb7b      	cbnz	r3, 8008dc4 <_strtod_l+0x91c>
 8008d64:	f1b9 0f00 	cmp.w	r9, #0
 8008d68:	d12c      	bne.n	8008dc4 <_strtod_l+0x91c>
 8008d6a:	9905      	ldr	r1, [sp, #20]
 8008d6c:	4653      	mov	r3, sl
 8008d6e:	4a99      	ldr	r2, [pc, #612]	; (8008fd4 <_strtod_l+0xb2c>)
 8008d70:	b1f1      	cbz	r1, 8008db0 <_strtod_l+0x908>
 8008d72:	ea02 010a 	and.w	r1, r2, sl
 8008d76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d7a:	dc19      	bgt.n	8008db0 <_strtod_l+0x908>
 8008d7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d80:	f77f ae51 	ble.w	8008a26 <_strtod_l+0x57e>
 8008d84:	2300      	movs	r3, #0
 8008d86:	4a95      	ldr	r2, [pc, #596]	; (8008fdc <_strtod_l+0xb34>)
 8008d88:	4648      	mov	r0, r9
 8008d8a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008d8e:	4651      	mov	r1, sl
 8008d90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	4681      	mov	r9, r0
 8008d9a:	468a      	mov	sl, r1
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	f47f adb0 	bne.w	8008902 <_strtod_l+0x45a>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	f47f adad 	bne.w	8008902 <_strtod_l+0x45a>
 8008da8:	2322      	movs	r3, #34	; 0x22
 8008daa:	f8cb 3000 	str.w	r3, [fp]
 8008dae:	e5a8      	b.n	8008902 <_strtod_l+0x45a>
 8008db0:	4013      	ands	r3, r2
 8008db2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008db6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008dba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008dbe:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008dc2:	e769      	b.n	8008c98 <_strtod_l+0x7f0>
 8008dc4:	b19d      	cbz	r5, 8008dee <_strtod_l+0x946>
 8008dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc8:	421d      	tst	r5, r3
 8008dca:	f43f af65 	beq.w	8008c98 <_strtod_l+0x7f0>
 8008dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dd0:	9a05      	ldr	r2, [sp, #20]
 8008dd2:	4648      	mov	r0, r9
 8008dd4:	4651      	mov	r1, sl
 8008dd6:	b173      	cbz	r3, 8008df6 <_strtod_l+0x94e>
 8008dd8:	f7ff fb45 	bl	8008466 <sulp>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008de4:	f7f7 f9c2 	bl	800016c <__adddf3>
 8008de8:	4681      	mov	r9, r0
 8008dea:	468a      	mov	sl, r1
 8008dec:	e754      	b.n	8008c98 <_strtod_l+0x7f0>
 8008dee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008df0:	ea13 0f09 	tst.w	r3, r9
 8008df4:	e7e9      	b.n	8008dca <_strtod_l+0x922>
 8008df6:	f7ff fb36 	bl	8008466 <sulp>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e02:	f7f7 f9b1 	bl	8000168 <__aeabi_dsub>
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4681      	mov	r9, r0
 8008e0c:	468a      	mov	sl, r1
 8008e0e:	f7f7 fdcb 	bl	80009a8 <__aeabi_dcmpeq>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f47f ae07 	bne.w	8008a26 <_strtod_l+0x57e>
 8008e18:	e73e      	b.n	8008c98 <_strtod_l+0x7f0>
 8008e1a:	9904      	ldr	r1, [sp, #16]
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	f001 f8b6 	bl	8009f8e <__ratio>
 8008e22:	2200      	movs	r2, #0
 8008e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f7f7 fdd0 	bl	80009d0 <__aeabi_dcmple>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d075      	beq.n	8008f20 <_strtod_l+0xa78>
 8008e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d047      	beq.n	8008eca <_strtod_l+0xa22>
 8008e3a:	2600      	movs	r6, #0
 8008e3c:	4f68      	ldr	r7, [pc, #416]	; (8008fe0 <_strtod_l+0xb38>)
 8008e3e:	4d68      	ldr	r5, [pc, #416]	; (8008fe0 <_strtod_l+0xb38>)
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e46:	0d1b      	lsrs	r3, r3, #20
 8008e48:	051b      	lsls	r3, r3, #20
 8008e4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e4e:	4b65      	ldr	r3, [pc, #404]	; (8008fe4 <_strtod_l+0xb3c>)
 8008e50:	429a      	cmp	r2, r3
 8008e52:	f040 80cf 	bne.w	8008ff4 <_strtod_l+0xb4c>
 8008e56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e5a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e60:	4648      	mov	r0, r9
 8008e62:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008e66:	4651      	mov	r1, sl
 8008e68:	f000 ffcc 	bl	8009e04 <__ulp>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fb30 	bl	80004d8 <__aeabi_dmul>
 8008e78:	464a      	mov	r2, r9
 8008e7a:	4653      	mov	r3, sl
 8008e7c:	f7f7 f976 	bl	800016c <__adddf3>
 8008e80:	460b      	mov	r3, r1
 8008e82:	4954      	ldr	r1, [pc, #336]	; (8008fd4 <_strtod_l+0xb2c>)
 8008e84:	4a58      	ldr	r2, [pc, #352]	; (8008fe8 <_strtod_l+0xb40>)
 8008e86:	4019      	ands	r1, r3
 8008e88:	4291      	cmp	r1, r2
 8008e8a:	4681      	mov	r9, r0
 8008e8c:	d95e      	bls.n	8008f4c <_strtod_l+0xaa4>
 8008e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e90:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d103      	bne.n	8008ea0 <_strtod_l+0x9f8>
 8008e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	f43f ad26 	beq.w	80088ec <_strtod_l+0x444>
 8008ea0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008ea4:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008fd8 <_strtod_l+0xb30>
 8008ea8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008eaa:	4658      	mov	r0, fp
 8008eac:	f000 fd13 	bl	80098d6 <_Bfree>
 8008eb0:	9906      	ldr	r1, [sp, #24]
 8008eb2:	4658      	mov	r0, fp
 8008eb4:	f000 fd0f 	bl	80098d6 <_Bfree>
 8008eb8:	9904      	ldr	r1, [sp, #16]
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f000 fd0b 	bl	80098d6 <_Bfree>
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 fd07 	bl	80098d6 <_Bfree>
 8008ec8:	e617      	b.n	8008afa <_strtod_l+0x652>
 8008eca:	f1b9 0f00 	cmp.w	r9, #0
 8008ece:	d119      	bne.n	8008f04 <_strtod_l+0xa5c>
 8008ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ed6:	b9e3      	cbnz	r3, 8008f12 <_strtod_l+0xa6a>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4b41      	ldr	r3, [pc, #260]	; (8008fe0 <_strtod_l+0xb38>)
 8008edc:	4630      	mov	r0, r6
 8008ede:	4639      	mov	r1, r7
 8008ee0:	f7f7 fd6c 	bl	80009bc <__aeabi_dcmplt>
 8008ee4:	b9c8      	cbnz	r0, 8008f1a <_strtod_l+0xa72>
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	4b40      	ldr	r3, [pc, #256]	; (8008fec <_strtod_l+0xb44>)
 8008eea:	4630      	mov	r0, r6
 8008eec:	4639      	mov	r1, r7
 8008eee:	f7f7 faf3 	bl	80004d8 <__aeabi_dmul>
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008efa:	9418      	str	r4, [sp, #96]	; 0x60
 8008efc:	9319      	str	r3, [sp, #100]	; 0x64
 8008efe:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008f02:	e79d      	b.n	8008e40 <_strtod_l+0x998>
 8008f04:	f1b9 0f01 	cmp.w	r9, #1
 8008f08:	d103      	bne.n	8008f12 <_strtod_l+0xa6a>
 8008f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f43f ad8a 	beq.w	8008a26 <_strtod_l+0x57e>
 8008f12:	2600      	movs	r6, #0
 8008f14:	4f36      	ldr	r7, [pc, #216]	; (8008ff0 <_strtod_l+0xb48>)
 8008f16:	2400      	movs	r4, #0
 8008f18:	e791      	b.n	8008e3e <_strtod_l+0x996>
 8008f1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008f1c:	4d33      	ldr	r5, [pc, #204]	; (8008fec <_strtod_l+0xb44>)
 8008f1e:	e7ea      	b.n	8008ef6 <_strtod_l+0xa4e>
 8008f20:	4b32      	ldr	r3, [pc, #200]	; (8008fec <_strtod_l+0xb44>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 fad6 	bl	80004d8 <__aeabi_dmul>
 8008f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	b933      	cbnz	r3, 8008f42 <_strtod_l+0xa9a>
 8008f34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f38:	9010      	str	r0, [sp, #64]	; 0x40
 8008f3a:	9311      	str	r3, [sp, #68]	; 0x44
 8008f3c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008f40:	e77e      	b.n	8008e40 <_strtod_l+0x998>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f4a:	e7f7      	b.n	8008f3c <_strtod_l+0xa94>
 8008f4c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008f50:	9b05      	ldr	r3, [sp, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1a8      	bne.n	8008ea8 <_strtod_l+0xa00>
 8008f56:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008f5a:	0d1b      	lsrs	r3, r3, #20
 8008f5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f5e:	051b      	lsls	r3, r3, #20
 8008f60:	429a      	cmp	r2, r3
 8008f62:	4656      	mov	r6, sl
 8008f64:	d1a0      	bne.n	8008ea8 <_strtod_l+0xa00>
 8008f66:	4629      	mov	r1, r5
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f7f7 fd4f 	bl	8000a0c <__aeabi_d2iz>
 8008f6e:	f7f7 fa49 	bl	8000404 <__aeabi_i2d>
 8008f72:	460b      	mov	r3, r1
 8008f74:	4602      	mov	r2, r0
 8008f76:	4629      	mov	r1, r5
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f7f7 f8f5 	bl	8000168 <__aeabi_dsub>
 8008f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f80:	4604      	mov	r4, r0
 8008f82:	460d      	mov	r5, r1
 8008f84:	b933      	cbnz	r3, 8008f94 <_strtod_l+0xaec>
 8008f86:	f1b9 0f00 	cmp.w	r9, #0
 8008f8a:	d103      	bne.n	8008f94 <_strtod_l+0xaec>
 8008f8c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	d06a      	beq.n	800906a <_strtod_l+0xbc2>
 8008f94:	a30a      	add	r3, pc, #40	; (adr r3, 8008fc0 <_strtod_l+0xb18>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	f7f7 fd0d 	bl	80009bc <__aeabi_dcmplt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	f47f acad 	bne.w	8008902 <_strtod_l+0x45a>
 8008fa8:	a307      	add	r3, pc, #28	; (adr r3, 8008fc8 <_strtod_l+0xb20>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 fd21 	bl	80009f8 <__aeabi_dcmpgt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f af76 	beq.w	8008ea8 <_strtod_l+0xa00>
 8008fbc:	e4a1      	b.n	8008902 <_strtod_l+0x45a>
 8008fbe:	bf00      	nop
 8008fc0:	94a03595 	.word	0x94a03595
 8008fc4:	3fdfffff 	.word	0x3fdfffff
 8008fc8:	35afe535 	.word	0x35afe535
 8008fcc:	3fe00000 	.word	0x3fe00000
 8008fd0:	000fffff 	.word	0x000fffff
 8008fd4:	7ff00000 	.word	0x7ff00000
 8008fd8:	7fefffff 	.word	0x7fefffff
 8008fdc:	39500000 	.word	0x39500000
 8008fe0:	3ff00000 	.word	0x3ff00000
 8008fe4:	7fe00000 	.word	0x7fe00000
 8008fe8:	7c9fffff 	.word	0x7c9fffff
 8008fec:	3fe00000 	.word	0x3fe00000
 8008ff0:	bff00000 	.word	0xbff00000
 8008ff4:	9b05      	ldr	r3, [sp, #20]
 8008ff6:	b313      	cbz	r3, 800903e <_strtod_l+0xb96>
 8008ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ffa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ffe:	d81e      	bhi.n	800903e <_strtod_l+0xb96>
 8009000:	a325      	add	r3, pc, #148	; (adr r3, 8009098 <_strtod_l+0xbf0>)
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	f7f7 fce1 	bl	80009d0 <__aeabi_dcmple>
 800900e:	b190      	cbz	r0, 8009036 <_strtod_l+0xb8e>
 8009010:	4629      	mov	r1, r5
 8009012:	4620      	mov	r0, r4
 8009014:	f7f7 fd22 	bl	8000a5c <__aeabi_d2uiz>
 8009018:	2800      	cmp	r0, #0
 800901a:	bf08      	it	eq
 800901c:	2001      	moveq	r0, #1
 800901e:	f7f7 f9e1 	bl	80003e4 <__aeabi_ui2d>
 8009022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009024:	4604      	mov	r4, r0
 8009026:	460d      	mov	r5, r1
 8009028:	b9d3      	cbnz	r3, 8009060 <_strtod_l+0xbb8>
 800902a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800902e:	9012      	str	r0, [sp, #72]	; 0x48
 8009030:	9313      	str	r3, [sp, #76]	; 0x4c
 8009032:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8009036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009038:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800903c:	1a9f      	subs	r7, r3, r2
 800903e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009042:	f000 fedf 	bl	8009e04 <__ulp>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4630      	mov	r0, r6
 800904c:	4639      	mov	r1, r7
 800904e:	f7f7 fa43 	bl	80004d8 <__aeabi_dmul>
 8009052:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009056:	f7f7 f889 	bl	800016c <__adddf3>
 800905a:	4681      	mov	r9, r0
 800905c:	468a      	mov	sl, r1
 800905e:	e777      	b.n	8008f50 <_strtod_l+0xaa8>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009068:	e7e3      	b.n	8009032 <_strtod_l+0xb8a>
 800906a:	a30d      	add	r3, pc, #52	; (adr r3, 80090a0 <_strtod_l+0xbf8>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 fca4 	bl	80009bc <__aeabi_dcmplt>
 8009074:	e79f      	b.n	8008fb6 <_strtod_l+0xb0e>
 8009076:	2300      	movs	r3, #0
 8009078:	930d      	str	r3, [sp, #52]	; 0x34
 800907a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800907c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	f7ff ba55 	b.w	800852e <_strtod_l+0x86>
 8009084:	2b65      	cmp	r3, #101	; 0x65
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	f43f ab42 	beq.w	8008712 <_strtod_l+0x26a>
 800908e:	2101      	movs	r1, #1
 8009090:	4614      	mov	r4, r2
 8009092:	9105      	str	r1, [sp, #20]
 8009094:	f7ff babf 	b.w	8008616 <_strtod_l+0x16e>
 8009098:	ffc00000 	.word	0xffc00000
 800909c:	41dfffff 	.word	0x41dfffff
 80090a0:	94a03595 	.word	0x94a03595
 80090a4:	3fcfffff 	.word	0x3fcfffff

080090a8 <strtod>:
 80090a8:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <strtod+0x1c>)
 80090aa:	b410      	push	{r4}
 80090ac:	681c      	ldr	r4, [r3, #0]
 80090ae:	4a06      	ldr	r2, [pc, #24]	; (80090c8 <strtod+0x20>)
 80090b0:	6a23      	ldr	r3, [r4, #32]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bf08      	it	eq
 80090b6:	4613      	moveq	r3, r2
 80090b8:	460a      	mov	r2, r1
 80090ba:	4601      	mov	r1, r0
 80090bc:	4620      	mov	r0, r4
 80090be:	bc10      	pop	{r4}
 80090c0:	f7ff b9f2 	b.w	80084a8 <_strtod_l>
 80090c4:	2000017c 	.word	0x2000017c
 80090c8:	200001e0 	.word	0x200001e0

080090cc <_strtol_l.isra.0>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	4680      	mov	r8, r0
 80090d2:	4689      	mov	r9, r1
 80090d4:	4692      	mov	sl, r2
 80090d6:	461e      	mov	r6, r3
 80090d8:	460f      	mov	r7, r1
 80090da:	463d      	mov	r5, r7
 80090dc:	9808      	ldr	r0, [sp, #32]
 80090de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090e2:	f000 fbad 	bl	8009840 <__locale_ctype_ptr_l>
 80090e6:	4420      	add	r0, r4
 80090e8:	7843      	ldrb	r3, [r0, #1]
 80090ea:	f013 0308 	ands.w	r3, r3, #8
 80090ee:	d132      	bne.n	8009156 <_strtol_l.isra.0+0x8a>
 80090f0:	2c2d      	cmp	r4, #45	; 0x2d
 80090f2:	d132      	bne.n	800915a <_strtol_l.isra.0+0x8e>
 80090f4:	2201      	movs	r2, #1
 80090f6:	787c      	ldrb	r4, [r7, #1]
 80090f8:	1cbd      	adds	r5, r7, #2
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	d05d      	beq.n	80091ba <_strtol_l.isra.0+0xee>
 80090fe:	2e10      	cmp	r6, #16
 8009100:	d109      	bne.n	8009116 <_strtol_l.isra.0+0x4a>
 8009102:	2c30      	cmp	r4, #48	; 0x30
 8009104:	d107      	bne.n	8009116 <_strtol_l.isra.0+0x4a>
 8009106:	782b      	ldrb	r3, [r5, #0]
 8009108:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800910c:	2b58      	cmp	r3, #88	; 0x58
 800910e:	d14f      	bne.n	80091b0 <_strtol_l.isra.0+0xe4>
 8009110:	2610      	movs	r6, #16
 8009112:	786c      	ldrb	r4, [r5, #1]
 8009114:	3502      	adds	r5, #2
 8009116:	2a00      	cmp	r2, #0
 8009118:	bf14      	ite	ne
 800911a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800911e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009122:	2700      	movs	r7, #0
 8009124:	fbb1 fcf6 	udiv	ip, r1, r6
 8009128:	4638      	mov	r0, r7
 800912a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800912e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009132:	2b09      	cmp	r3, #9
 8009134:	d817      	bhi.n	8009166 <_strtol_l.isra.0+0x9a>
 8009136:	461c      	mov	r4, r3
 8009138:	42a6      	cmp	r6, r4
 800913a:	dd23      	ble.n	8009184 <_strtol_l.isra.0+0xb8>
 800913c:	1c7b      	adds	r3, r7, #1
 800913e:	d007      	beq.n	8009150 <_strtol_l.isra.0+0x84>
 8009140:	4584      	cmp	ip, r0
 8009142:	d31c      	bcc.n	800917e <_strtol_l.isra.0+0xb2>
 8009144:	d101      	bne.n	800914a <_strtol_l.isra.0+0x7e>
 8009146:	45a6      	cmp	lr, r4
 8009148:	db19      	blt.n	800917e <_strtol_l.isra.0+0xb2>
 800914a:	2701      	movs	r7, #1
 800914c:	fb00 4006 	mla	r0, r0, r6, r4
 8009150:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009154:	e7eb      	b.n	800912e <_strtol_l.isra.0+0x62>
 8009156:	462f      	mov	r7, r5
 8009158:	e7bf      	b.n	80090da <_strtol_l.isra.0+0xe>
 800915a:	2c2b      	cmp	r4, #43	; 0x2b
 800915c:	bf04      	itt	eq
 800915e:	1cbd      	addeq	r5, r7, #2
 8009160:	787c      	ldrbeq	r4, [r7, #1]
 8009162:	461a      	mov	r2, r3
 8009164:	e7c9      	b.n	80090fa <_strtol_l.isra.0+0x2e>
 8009166:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800916a:	2b19      	cmp	r3, #25
 800916c:	d801      	bhi.n	8009172 <_strtol_l.isra.0+0xa6>
 800916e:	3c37      	subs	r4, #55	; 0x37
 8009170:	e7e2      	b.n	8009138 <_strtol_l.isra.0+0x6c>
 8009172:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009176:	2b19      	cmp	r3, #25
 8009178:	d804      	bhi.n	8009184 <_strtol_l.isra.0+0xb8>
 800917a:	3c57      	subs	r4, #87	; 0x57
 800917c:	e7dc      	b.n	8009138 <_strtol_l.isra.0+0x6c>
 800917e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009182:	e7e5      	b.n	8009150 <_strtol_l.isra.0+0x84>
 8009184:	1c7b      	adds	r3, r7, #1
 8009186:	d108      	bne.n	800919a <_strtol_l.isra.0+0xce>
 8009188:	2322      	movs	r3, #34	; 0x22
 800918a:	4608      	mov	r0, r1
 800918c:	f8c8 3000 	str.w	r3, [r8]
 8009190:	f1ba 0f00 	cmp.w	sl, #0
 8009194:	d107      	bne.n	80091a6 <_strtol_l.isra.0+0xda>
 8009196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919a:	b102      	cbz	r2, 800919e <_strtol_l.isra.0+0xd2>
 800919c:	4240      	negs	r0, r0
 800919e:	f1ba 0f00 	cmp.w	sl, #0
 80091a2:	d0f8      	beq.n	8009196 <_strtol_l.isra.0+0xca>
 80091a4:	b10f      	cbz	r7, 80091aa <_strtol_l.isra.0+0xde>
 80091a6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80091aa:	f8ca 9000 	str.w	r9, [sl]
 80091ae:	e7f2      	b.n	8009196 <_strtol_l.isra.0+0xca>
 80091b0:	2430      	movs	r4, #48	; 0x30
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	d1af      	bne.n	8009116 <_strtol_l.isra.0+0x4a>
 80091b6:	2608      	movs	r6, #8
 80091b8:	e7ad      	b.n	8009116 <_strtol_l.isra.0+0x4a>
 80091ba:	2c30      	cmp	r4, #48	; 0x30
 80091bc:	d0a3      	beq.n	8009106 <_strtol_l.isra.0+0x3a>
 80091be:	260a      	movs	r6, #10
 80091c0:	e7a9      	b.n	8009116 <_strtol_l.isra.0+0x4a>
	...

080091c4 <strtol>:
 80091c4:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <strtol+0x24>)
 80091c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c8:	681c      	ldr	r4, [r3, #0]
 80091ca:	4d08      	ldr	r5, [pc, #32]	; (80091ec <strtol+0x28>)
 80091cc:	6a23      	ldr	r3, [r4, #32]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	bf08      	it	eq
 80091d2:	462b      	moveq	r3, r5
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	4613      	mov	r3, r2
 80091d8:	460a      	mov	r2, r1
 80091da:	4601      	mov	r1, r0
 80091dc:	4620      	mov	r0, r4
 80091de:	f7ff ff75 	bl	80090cc <_strtol_l.isra.0>
 80091e2:	b003      	add	sp, #12
 80091e4:	bd30      	pop	{r4, r5, pc}
 80091e6:	bf00      	nop
 80091e8:	2000017c 	.word	0x2000017c
 80091ec:	200001e0 	.word	0x200001e0

080091f0 <rshift>:
 80091f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f2:	6906      	ldr	r6, [r0, #16]
 80091f4:	114b      	asrs	r3, r1, #5
 80091f6:	429e      	cmp	r6, r3
 80091f8:	f100 0414 	add.w	r4, r0, #20
 80091fc:	dd31      	ble.n	8009262 <rshift+0x72>
 80091fe:	f011 011f 	ands.w	r1, r1, #31
 8009202:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009206:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800920a:	d108      	bne.n	800921e <rshift+0x2e>
 800920c:	4621      	mov	r1, r4
 800920e:	42b2      	cmp	r2, r6
 8009210:	460b      	mov	r3, r1
 8009212:	d211      	bcs.n	8009238 <rshift+0x48>
 8009214:	f852 3b04 	ldr.w	r3, [r2], #4
 8009218:	f841 3b04 	str.w	r3, [r1], #4
 800921c:	e7f7      	b.n	800920e <rshift+0x1e>
 800921e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009222:	4623      	mov	r3, r4
 8009224:	f1c1 0c20 	rsb	ip, r1, #32
 8009228:	40cd      	lsrs	r5, r1
 800922a:	3204      	adds	r2, #4
 800922c:	42b2      	cmp	r2, r6
 800922e:	4617      	mov	r7, r2
 8009230:	d30d      	bcc.n	800924e <rshift+0x5e>
 8009232:	601d      	str	r5, [r3, #0]
 8009234:	b105      	cbz	r5, 8009238 <rshift+0x48>
 8009236:	3304      	adds	r3, #4
 8009238:	42a3      	cmp	r3, r4
 800923a:	eba3 0204 	sub.w	r2, r3, r4
 800923e:	bf08      	it	eq
 8009240:	2300      	moveq	r3, #0
 8009242:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009246:	6102      	str	r2, [r0, #16]
 8009248:	bf08      	it	eq
 800924a:	6143      	streq	r3, [r0, #20]
 800924c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800924e:	683f      	ldr	r7, [r7, #0]
 8009250:	fa07 f70c 	lsl.w	r7, r7, ip
 8009254:	433d      	orrs	r5, r7
 8009256:	f843 5b04 	str.w	r5, [r3], #4
 800925a:	f852 5b04 	ldr.w	r5, [r2], #4
 800925e:	40cd      	lsrs	r5, r1
 8009260:	e7e4      	b.n	800922c <rshift+0x3c>
 8009262:	4623      	mov	r3, r4
 8009264:	e7e8      	b.n	8009238 <rshift+0x48>

08009266 <__hexdig_fun>:
 8009266:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800926a:	2b09      	cmp	r3, #9
 800926c:	d802      	bhi.n	8009274 <__hexdig_fun+0xe>
 800926e:	3820      	subs	r0, #32
 8009270:	b2c0      	uxtb	r0, r0
 8009272:	4770      	bx	lr
 8009274:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009278:	2b05      	cmp	r3, #5
 800927a:	d801      	bhi.n	8009280 <__hexdig_fun+0x1a>
 800927c:	3847      	subs	r0, #71	; 0x47
 800927e:	e7f7      	b.n	8009270 <__hexdig_fun+0xa>
 8009280:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009284:	2b05      	cmp	r3, #5
 8009286:	d801      	bhi.n	800928c <__hexdig_fun+0x26>
 8009288:	3827      	subs	r0, #39	; 0x27
 800928a:	e7f1      	b.n	8009270 <__hexdig_fun+0xa>
 800928c:	2000      	movs	r0, #0
 800928e:	4770      	bx	lr

08009290 <__gethex>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	b08b      	sub	sp, #44	; 0x2c
 8009296:	9002      	str	r0, [sp, #8]
 8009298:	9816      	ldr	r0, [sp, #88]	; 0x58
 800929a:	468a      	mov	sl, r1
 800929c:	4690      	mov	r8, r2
 800929e:	9306      	str	r3, [sp, #24]
 80092a0:	f000 fad1 	bl	8009846 <__localeconv_l>
 80092a4:	6803      	ldr	r3, [r0, #0]
 80092a6:	f04f 0b00 	mov.w	fp, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	f7f6 ff4f 	bl	8000150 <strlen>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	9001      	str	r0, [sp, #4]
 80092b6:	4403      	add	r3, r0
 80092b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092bc:	9307      	str	r3, [sp, #28]
 80092be:	f8da 3000 	ldr.w	r3, [sl]
 80092c2:	3302      	adds	r3, #2
 80092c4:	461f      	mov	r7, r3
 80092c6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092ca:	2830      	cmp	r0, #48	; 0x30
 80092cc:	d06c      	beq.n	80093a8 <__gethex+0x118>
 80092ce:	f7ff ffca 	bl	8009266 <__hexdig_fun>
 80092d2:	4604      	mov	r4, r0
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d16a      	bne.n	80093ae <__gethex+0x11e>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	9903      	ldr	r1, [sp, #12]
 80092dc:	4638      	mov	r0, r7
 80092de:	f7ff f89b 	bl	8008418 <strncmp>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d166      	bne.n	80093b4 <__gethex+0x124>
 80092e6:	9b01      	ldr	r3, [sp, #4]
 80092e8:	5cf8      	ldrb	r0, [r7, r3]
 80092ea:	18fe      	adds	r6, r7, r3
 80092ec:	f7ff ffbb 	bl	8009266 <__hexdig_fun>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d062      	beq.n	80093ba <__gethex+0x12a>
 80092f4:	4633      	mov	r3, r6
 80092f6:	7818      	ldrb	r0, [r3, #0]
 80092f8:	461f      	mov	r7, r3
 80092fa:	2830      	cmp	r0, #48	; 0x30
 80092fc:	f103 0301 	add.w	r3, r3, #1
 8009300:	d0f9      	beq.n	80092f6 <__gethex+0x66>
 8009302:	f7ff ffb0 	bl	8009266 <__hexdig_fun>
 8009306:	fab0 f580 	clz	r5, r0
 800930a:	4634      	mov	r4, r6
 800930c:	f04f 0b01 	mov.w	fp, #1
 8009310:	096d      	lsrs	r5, r5, #5
 8009312:	463a      	mov	r2, r7
 8009314:	4616      	mov	r6, r2
 8009316:	7830      	ldrb	r0, [r6, #0]
 8009318:	3201      	adds	r2, #1
 800931a:	f7ff ffa4 	bl	8009266 <__hexdig_fun>
 800931e:	2800      	cmp	r0, #0
 8009320:	d1f8      	bne.n	8009314 <__gethex+0x84>
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	9903      	ldr	r1, [sp, #12]
 8009326:	4630      	mov	r0, r6
 8009328:	f7ff f876 	bl	8008418 <strncmp>
 800932c:	b950      	cbnz	r0, 8009344 <__gethex+0xb4>
 800932e:	b954      	cbnz	r4, 8009346 <__gethex+0xb6>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	18f4      	adds	r4, r6, r3
 8009334:	4622      	mov	r2, r4
 8009336:	4616      	mov	r6, r2
 8009338:	7830      	ldrb	r0, [r6, #0]
 800933a:	3201      	adds	r2, #1
 800933c:	f7ff ff93 	bl	8009266 <__hexdig_fun>
 8009340:	2800      	cmp	r0, #0
 8009342:	d1f8      	bne.n	8009336 <__gethex+0xa6>
 8009344:	b10c      	cbz	r4, 800934a <__gethex+0xba>
 8009346:	1ba4      	subs	r4, r4, r6
 8009348:	00a4      	lsls	r4, r4, #2
 800934a:	7833      	ldrb	r3, [r6, #0]
 800934c:	2b50      	cmp	r3, #80	; 0x50
 800934e:	d001      	beq.n	8009354 <__gethex+0xc4>
 8009350:	2b70      	cmp	r3, #112	; 0x70
 8009352:	d140      	bne.n	80093d6 <__gethex+0x146>
 8009354:	7873      	ldrb	r3, [r6, #1]
 8009356:	2b2b      	cmp	r3, #43	; 0x2b
 8009358:	d031      	beq.n	80093be <__gethex+0x12e>
 800935a:	2b2d      	cmp	r3, #45	; 0x2d
 800935c:	d033      	beq.n	80093c6 <__gethex+0x136>
 800935e:	f04f 0900 	mov.w	r9, #0
 8009362:	1c71      	adds	r1, r6, #1
 8009364:	7808      	ldrb	r0, [r1, #0]
 8009366:	f7ff ff7e 	bl	8009266 <__hexdig_fun>
 800936a:	1e43      	subs	r3, r0, #1
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b18      	cmp	r3, #24
 8009370:	d831      	bhi.n	80093d6 <__gethex+0x146>
 8009372:	f1a0 0210 	sub.w	r2, r0, #16
 8009376:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800937a:	f7ff ff74 	bl	8009266 <__hexdig_fun>
 800937e:	1e43      	subs	r3, r0, #1
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b18      	cmp	r3, #24
 8009384:	d922      	bls.n	80093cc <__gethex+0x13c>
 8009386:	f1b9 0f00 	cmp.w	r9, #0
 800938a:	d000      	beq.n	800938e <__gethex+0xfe>
 800938c:	4252      	negs	r2, r2
 800938e:	4414      	add	r4, r2
 8009390:	f8ca 1000 	str.w	r1, [sl]
 8009394:	b30d      	cbz	r5, 80093da <__gethex+0x14a>
 8009396:	f1bb 0f00 	cmp.w	fp, #0
 800939a:	bf0c      	ite	eq
 800939c:	2706      	moveq	r7, #6
 800939e:	2700      	movne	r7, #0
 80093a0:	4638      	mov	r0, r7
 80093a2:	b00b      	add	sp, #44	; 0x2c
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	f10b 0b01 	add.w	fp, fp, #1
 80093ac:	e78a      	b.n	80092c4 <__gethex+0x34>
 80093ae:	2500      	movs	r5, #0
 80093b0:	462c      	mov	r4, r5
 80093b2:	e7ae      	b.n	8009312 <__gethex+0x82>
 80093b4:	463e      	mov	r6, r7
 80093b6:	2501      	movs	r5, #1
 80093b8:	e7c7      	b.n	800934a <__gethex+0xba>
 80093ba:	4604      	mov	r4, r0
 80093bc:	e7fb      	b.n	80093b6 <__gethex+0x126>
 80093be:	f04f 0900 	mov.w	r9, #0
 80093c2:	1cb1      	adds	r1, r6, #2
 80093c4:	e7ce      	b.n	8009364 <__gethex+0xd4>
 80093c6:	f04f 0901 	mov.w	r9, #1
 80093ca:	e7fa      	b.n	80093c2 <__gethex+0x132>
 80093cc:	230a      	movs	r3, #10
 80093ce:	fb03 0202 	mla	r2, r3, r2, r0
 80093d2:	3a10      	subs	r2, #16
 80093d4:	e7cf      	b.n	8009376 <__gethex+0xe6>
 80093d6:	4631      	mov	r1, r6
 80093d8:	e7da      	b.n	8009390 <__gethex+0x100>
 80093da:	4629      	mov	r1, r5
 80093dc:	1bf3      	subs	r3, r6, r7
 80093de:	3b01      	subs	r3, #1
 80093e0:	2b07      	cmp	r3, #7
 80093e2:	dc49      	bgt.n	8009478 <__gethex+0x1e8>
 80093e4:	9802      	ldr	r0, [sp, #8]
 80093e6:	f000 fa42 	bl	800986e <_Balloc>
 80093ea:	f04f 0b00 	mov.w	fp, #0
 80093ee:	4605      	mov	r5, r0
 80093f0:	46da      	mov	sl, fp
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	f100 0914 	add.w	r9, r0, #20
 80093f8:	f1c3 0301 	rsb	r3, r3, #1
 80093fc:	f8cd 9010 	str.w	r9, [sp, #16]
 8009400:	9308      	str	r3, [sp, #32]
 8009402:	42b7      	cmp	r7, r6
 8009404:	d33b      	bcc.n	800947e <__gethex+0x1ee>
 8009406:	9804      	ldr	r0, [sp, #16]
 8009408:	f840 ab04 	str.w	sl, [r0], #4
 800940c:	eba0 0009 	sub.w	r0, r0, r9
 8009410:	1080      	asrs	r0, r0, #2
 8009412:	6128      	str	r0, [r5, #16]
 8009414:	0147      	lsls	r7, r0, #5
 8009416:	4650      	mov	r0, sl
 8009418:	f000 faed 	bl	80099f6 <__hi0bits>
 800941c:	f8d8 6000 	ldr.w	r6, [r8]
 8009420:	1a3f      	subs	r7, r7, r0
 8009422:	42b7      	cmp	r7, r6
 8009424:	dd64      	ble.n	80094f0 <__gethex+0x260>
 8009426:	1bbf      	subs	r7, r7, r6
 8009428:	4639      	mov	r1, r7
 800942a:	4628      	mov	r0, r5
 800942c:	f000 fdf7 	bl	800a01e <__any_on>
 8009430:	4682      	mov	sl, r0
 8009432:	b178      	cbz	r0, 8009454 <__gethex+0x1c4>
 8009434:	f04f 0a01 	mov.w	sl, #1
 8009438:	1e7b      	subs	r3, r7, #1
 800943a:	1159      	asrs	r1, r3, #5
 800943c:	f003 021f 	and.w	r2, r3, #31
 8009440:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009444:	fa0a f202 	lsl.w	r2, sl, r2
 8009448:	420a      	tst	r2, r1
 800944a:	d003      	beq.n	8009454 <__gethex+0x1c4>
 800944c:	4553      	cmp	r3, sl
 800944e:	dc46      	bgt.n	80094de <__gethex+0x24e>
 8009450:	f04f 0a02 	mov.w	sl, #2
 8009454:	4639      	mov	r1, r7
 8009456:	4628      	mov	r0, r5
 8009458:	f7ff feca 	bl	80091f0 <rshift>
 800945c:	443c      	add	r4, r7
 800945e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009462:	42a3      	cmp	r3, r4
 8009464:	da52      	bge.n	800950c <__gethex+0x27c>
 8009466:	4629      	mov	r1, r5
 8009468:	9802      	ldr	r0, [sp, #8]
 800946a:	f000 fa34 	bl	80098d6 <_Bfree>
 800946e:	2300      	movs	r3, #0
 8009470:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009472:	27a3      	movs	r7, #163	; 0xa3
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	e793      	b.n	80093a0 <__gethex+0x110>
 8009478:	3101      	adds	r1, #1
 800947a:	105b      	asrs	r3, r3, #1
 800947c:	e7b0      	b.n	80093e0 <__gethex+0x150>
 800947e:	1e73      	subs	r3, r6, #1
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	9a07      	ldr	r2, [sp, #28]
 8009484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009488:	4293      	cmp	r3, r2
 800948a:	d018      	beq.n	80094be <__gethex+0x22e>
 800948c:	f1bb 0f20 	cmp.w	fp, #32
 8009490:	d107      	bne.n	80094a2 <__gethex+0x212>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	f8c3 a000 	str.w	sl, [r3]
 8009498:	f04f 0a00 	mov.w	sl, #0
 800949c:	46d3      	mov	fp, sl
 800949e:	3304      	adds	r3, #4
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80094a6:	f7ff fede 	bl	8009266 <__hexdig_fun>
 80094aa:	f000 000f 	and.w	r0, r0, #15
 80094ae:	fa00 f00b 	lsl.w	r0, r0, fp
 80094b2:	ea4a 0a00 	orr.w	sl, sl, r0
 80094b6:	f10b 0b04 	add.w	fp, fp, #4
 80094ba:	9b05      	ldr	r3, [sp, #20]
 80094bc:	e00d      	b.n	80094da <__gethex+0x24a>
 80094be:	9b05      	ldr	r3, [sp, #20]
 80094c0:	9a08      	ldr	r2, [sp, #32]
 80094c2:	4413      	add	r3, r2
 80094c4:	42bb      	cmp	r3, r7
 80094c6:	d3e1      	bcc.n	800948c <__gethex+0x1fc>
 80094c8:	4618      	mov	r0, r3
 80094ca:	9a01      	ldr	r2, [sp, #4]
 80094cc:	9903      	ldr	r1, [sp, #12]
 80094ce:	9309      	str	r3, [sp, #36]	; 0x24
 80094d0:	f7fe ffa2 	bl	8008418 <strncmp>
 80094d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1d8      	bne.n	800948c <__gethex+0x1fc>
 80094da:	461e      	mov	r6, r3
 80094dc:	e791      	b.n	8009402 <__gethex+0x172>
 80094de:	1eb9      	subs	r1, r7, #2
 80094e0:	4628      	mov	r0, r5
 80094e2:	f000 fd9c 	bl	800a01e <__any_on>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d0b2      	beq.n	8009450 <__gethex+0x1c0>
 80094ea:	f04f 0a03 	mov.w	sl, #3
 80094ee:	e7b1      	b.n	8009454 <__gethex+0x1c4>
 80094f0:	da09      	bge.n	8009506 <__gethex+0x276>
 80094f2:	1bf7      	subs	r7, r6, r7
 80094f4:	4629      	mov	r1, r5
 80094f6:	463a      	mov	r2, r7
 80094f8:	9802      	ldr	r0, [sp, #8]
 80094fa:	f000 fbb7 	bl	8009c6c <__lshift>
 80094fe:	4605      	mov	r5, r0
 8009500:	1be4      	subs	r4, r4, r7
 8009502:	f100 0914 	add.w	r9, r0, #20
 8009506:	f04f 0a00 	mov.w	sl, #0
 800950a:	e7a8      	b.n	800945e <__gethex+0x1ce>
 800950c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009510:	42a0      	cmp	r0, r4
 8009512:	dd6b      	ble.n	80095ec <__gethex+0x35c>
 8009514:	1b04      	subs	r4, r0, r4
 8009516:	42a6      	cmp	r6, r4
 8009518:	dc2e      	bgt.n	8009578 <__gethex+0x2e8>
 800951a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d022      	beq.n	8009568 <__gethex+0x2d8>
 8009522:	2b03      	cmp	r3, #3
 8009524:	d024      	beq.n	8009570 <__gethex+0x2e0>
 8009526:	2b01      	cmp	r3, #1
 8009528:	d115      	bne.n	8009556 <__gethex+0x2c6>
 800952a:	42a6      	cmp	r6, r4
 800952c:	d113      	bne.n	8009556 <__gethex+0x2c6>
 800952e:	2e01      	cmp	r6, #1
 8009530:	dc0b      	bgt.n	800954a <__gethex+0x2ba>
 8009532:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009536:	9a06      	ldr	r2, [sp, #24]
 8009538:	2762      	movs	r7, #98	; 0x62
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	2301      	movs	r3, #1
 800953e:	612b      	str	r3, [r5, #16]
 8009540:	f8c9 3000 	str.w	r3, [r9]
 8009544:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009546:	601d      	str	r5, [r3, #0]
 8009548:	e72a      	b.n	80093a0 <__gethex+0x110>
 800954a:	1e71      	subs	r1, r6, #1
 800954c:	4628      	mov	r0, r5
 800954e:	f000 fd66 	bl	800a01e <__any_on>
 8009552:	2800      	cmp	r0, #0
 8009554:	d1ed      	bne.n	8009532 <__gethex+0x2a2>
 8009556:	4629      	mov	r1, r5
 8009558:	9802      	ldr	r0, [sp, #8]
 800955a:	f000 f9bc 	bl	80098d6 <_Bfree>
 800955e:	2300      	movs	r3, #0
 8009560:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009562:	2750      	movs	r7, #80	; 0x50
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	e71b      	b.n	80093a0 <__gethex+0x110>
 8009568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0e1      	beq.n	8009532 <__gethex+0x2a2>
 800956e:	e7f2      	b.n	8009556 <__gethex+0x2c6>
 8009570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1dd      	bne.n	8009532 <__gethex+0x2a2>
 8009576:	e7ee      	b.n	8009556 <__gethex+0x2c6>
 8009578:	1e67      	subs	r7, r4, #1
 800957a:	f1ba 0f00 	cmp.w	sl, #0
 800957e:	d132      	bne.n	80095e6 <__gethex+0x356>
 8009580:	b127      	cbz	r7, 800958c <__gethex+0x2fc>
 8009582:	4639      	mov	r1, r7
 8009584:	4628      	mov	r0, r5
 8009586:	f000 fd4a 	bl	800a01e <__any_on>
 800958a:	4682      	mov	sl, r0
 800958c:	2301      	movs	r3, #1
 800958e:	117a      	asrs	r2, r7, #5
 8009590:	f007 071f 	and.w	r7, r7, #31
 8009594:	fa03 f707 	lsl.w	r7, r3, r7
 8009598:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800959c:	4621      	mov	r1, r4
 800959e:	421f      	tst	r7, r3
 80095a0:	f04f 0702 	mov.w	r7, #2
 80095a4:	4628      	mov	r0, r5
 80095a6:	bf18      	it	ne
 80095a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80095ac:	1b36      	subs	r6, r6, r4
 80095ae:	f7ff fe1f 	bl	80091f0 <rshift>
 80095b2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80095b6:	f1ba 0f00 	cmp.w	sl, #0
 80095ba:	d048      	beq.n	800964e <__gethex+0x3be>
 80095bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d015      	beq.n	80095f0 <__gethex+0x360>
 80095c4:	2b03      	cmp	r3, #3
 80095c6:	d017      	beq.n	80095f8 <__gethex+0x368>
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d109      	bne.n	80095e0 <__gethex+0x350>
 80095cc:	f01a 0f02 	tst.w	sl, #2
 80095d0:	d006      	beq.n	80095e0 <__gethex+0x350>
 80095d2:	f8d9 3000 	ldr.w	r3, [r9]
 80095d6:	ea4a 0a03 	orr.w	sl, sl, r3
 80095da:	f01a 0f01 	tst.w	sl, #1
 80095de:	d10e      	bne.n	80095fe <__gethex+0x36e>
 80095e0:	f047 0710 	orr.w	r7, r7, #16
 80095e4:	e033      	b.n	800964e <__gethex+0x3be>
 80095e6:	f04f 0a01 	mov.w	sl, #1
 80095ea:	e7cf      	b.n	800958c <__gethex+0x2fc>
 80095ec:	2701      	movs	r7, #1
 80095ee:	e7e2      	b.n	80095b6 <__gethex+0x326>
 80095f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095f2:	f1c3 0301 	rsb	r3, r3, #1
 80095f6:	9315      	str	r3, [sp, #84]	; 0x54
 80095f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0f0      	beq.n	80095e0 <__gethex+0x350>
 80095fe:	f04f 0c00 	mov.w	ip, #0
 8009602:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009606:	f105 0314 	add.w	r3, r5, #20
 800960a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800960e:	eb03 010a 	add.w	r1, r3, sl
 8009612:	4618      	mov	r0, r3
 8009614:	f853 2b04 	ldr.w	r2, [r3], #4
 8009618:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800961c:	d01c      	beq.n	8009658 <__gethex+0x3c8>
 800961e:	3201      	adds	r2, #1
 8009620:	6002      	str	r2, [r0, #0]
 8009622:	2f02      	cmp	r7, #2
 8009624:	f105 0314 	add.w	r3, r5, #20
 8009628:	d138      	bne.n	800969c <__gethex+0x40c>
 800962a:	f8d8 2000 	ldr.w	r2, [r8]
 800962e:	3a01      	subs	r2, #1
 8009630:	42b2      	cmp	r2, r6
 8009632:	d10a      	bne.n	800964a <__gethex+0x3ba>
 8009634:	2201      	movs	r2, #1
 8009636:	1171      	asrs	r1, r6, #5
 8009638:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800963c:	f006 061f 	and.w	r6, r6, #31
 8009640:	fa02 f606 	lsl.w	r6, r2, r6
 8009644:	421e      	tst	r6, r3
 8009646:	bf18      	it	ne
 8009648:	4617      	movne	r7, r2
 800964a:	f047 0720 	orr.w	r7, r7, #32
 800964e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009650:	601d      	str	r5, [r3, #0]
 8009652:	9b06      	ldr	r3, [sp, #24]
 8009654:	601c      	str	r4, [r3, #0]
 8009656:	e6a3      	b.n	80093a0 <__gethex+0x110>
 8009658:	4299      	cmp	r1, r3
 800965a:	f843 cc04 	str.w	ip, [r3, #-4]
 800965e:	d8d8      	bhi.n	8009612 <__gethex+0x382>
 8009660:	68ab      	ldr	r3, [r5, #8]
 8009662:	4599      	cmp	r9, r3
 8009664:	db12      	blt.n	800968c <__gethex+0x3fc>
 8009666:	6869      	ldr	r1, [r5, #4]
 8009668:	9802      	ldr	r0, [sp, #8]
 800966a:	3101      	adds	r1, #1
 800966c:	f000 f8ff 	bl	800986e <_Balloc>
 8009670:	4683      	mov	fp, r0
 8009672:	692a      	ldr	r2, [r5, #16]
 8009674:	f105 010c 	add.w	r1, r5, #12
 8009678:	3202      	adds	r2, #2
 800967a:	0092      	lsls	r2, r2, #2
 800967c:	300c      	adds	r0, #12
 800967e:	f7fe fe8f 	bl	80083a0 <memcpy>
 8009682:	4629      	mov	r1, r5
 8009684:	9802      	ldr	r0, [sp, #8]
 8009686:	f000 f926 	bl	80098d6 <_Bfree>
 800968a:	465d      	mov	r5, fp
 800968c:	692b      	ldr	r3, [r5, #16]
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	612a      	str	r2, [r5, #16]
 8009692:	2201      	movs	r2, #1
 8009694:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009698:	615a      	str	r2, [r3, #20]
 800969a:	e7c2      	b.n	8009622 <__gethex+0x392>
 800969c:	692a      	ldr	r2, [r5, #16]
 800969e:	454a      	cmp	r2, r9
 80096a0:	dd0b      	ble.n	80096ba <__gethex+0x42a>
 80096a2:	2101      	movs	r1, #1
 80096a4:	4628      	mov	r0, r5
 80096a6:	f7ff fda3 	bl	80091f0 <rshift>
 80096aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096ae:	3401      	adds	r4, #1
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	f6ff aed8 	blt.w	8009466 <__gethex+0x1d6>
 80096b6:	2701      	movs	r7, #1
 80096b8:	e7c7      	b.n	800964a <__gethex+0x3ba>
 80096ba:	f016 061f 	ands.w	r6, r6, #31
 80096be:	d0fa      	beq.n	80096b6 <__gethex+0x426>
 80096c0:	449a      	add	sl, r3
 80096c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80096c6:	f000 f996 	bl	80099f6 <__hi0bits>
 80096ca:	f1c6 0620 	rsb	r6, r6, #32
 80096ce:	42b0      	cmp	r0, r6
 80096d0:	dbe7      	blt.n	80096a2 <__gethex+0x412>
 80096d2:	e7f0      	b.n	80096b6 <__gethex+0x426>

080096d4 <L_shift>:
 80096d4:	f1c2 0208 	rsb	r2, r2, #8
 80096d8:	0092      	lsls	r2, r2, #2
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	f1c2 0620 	rsb	r6, r2, #32
 80096e0:	6843      	ldr	r3, [r0, #4]
 80096e2:	6804      	ldr	r4, [r0, #0]
 80096e4:	fa03 f506 	lsl.w	r5, r3, r6
 80096e8:	432c      	orrs	r4, r5
 80096ea:	40d3      	lsrs	r3, r2
 80096ec:	6004      	str	r4, [r0, #0]
 80096ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80096f2:	4288      	cmp	r0, r1
 80096f4:	d3f4      	bcc.n	80096e0 <L_shift+0xc>
 80096f6:	bd70      	pop	{r4, r5, r6, pc}

080096f8 <__match>:
 80096f8:	b530      	push	{r4, r5, lr}
 80096fa:	6803      	ldr	r3, [r0, #0]
 80096fc:	3301      	adds	r3, #1
 80096fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009702:	b914      	cbnz	r4, 800970a <__match+0x12>
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	2001      	movs	r0, #1
 8009708:	bd30      	pop	{r4, r5, pc}
 800970a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009712:	2d19      	cmp	r5, #25
 8009714:	bf98      	it	ls
 8009716:	3220      	addls	r2, #32
 8009718:	42a2      	cmp	r2, r4
 800971a:	d0f0      	beq.n	80096fe <__match+0x6>
 800971c:	2000      	movs	r0, #0
 800971e:	e7f3      	b.n	8009708 <__match+0x10>

08009720 <__hexnan>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	2500      	movs	r5, #0
 8009726:	680b      	ldr	r3, [r1, #0]
 8009728:	4682      	mov	sl, r0
 800972a:	115f      	asrs	r7, r3, #5
 800972c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009730:	f013 031f 	ands.w	r3, r3, #31
 8009734:	bf18      	it	ne
 8009736:	3704      	addne	r7, #4
 8009738:	1f3e      	subs	r6, r7, #4
 800973a:	4690      	mov	r8, r2
 800973c:	46b1      	mov	r9, r6
 800973e:	4634      	mov	r4, r6
 8009740:	46ab      	mov	fp, r5
 8009742:	b087      	sub	sp, #28
 8009744:	6801      	ldr	r1, [r0, #0]
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	f847 5c04 	str.w	r5, [r7, #-4]
 800974c:	9502      	str	r5, [sp, #8]
 800974e:	784a      	ldrb	r2, [r1, #1]
 8009750:	1c4b      	adds	r3, r1, #1
 8009752:	9303      	str	r3, [sp, #12]
 8009754:	b342      	cbz	r2, 80097a8 <__hexnan+0x88>
 8009756:	4610      	mov	r0, r2
 8009758:	9105      	str	r1, [sp, #20]
 800975a:	9204      	str	r2, [sp, #16]
 800975c:	f7ff fd83 	bl	8009266 <__hexdig_fun>
 8009760:	2800      	cmp	r0, #0
 8009762:	d143      	bne.n	80097ec <__hexnan+0xcc>
 8009764:	9a04      	ldr	r2, [sp, #16]
 8009766:	9905      	ldr	r1, [sp, #20]
 8009768:	2a20      	cmp	r2, #32
 800976a:	d818      	bhi.n	800979e <__hexnan+0x7e>
 800976c:	9b02      	ldr	r3, [sp, #8]
 800976e:	459b      	cmp	fp, r3
 8009770:	dd13      	ble.n	800979a <__hexnan+0x7a>
 8009772:	454c      	cmp	r4, r9
 8009774:	d206      	bcs.n	8009784 <__hexnan+0x64>
 8009776:	2d07      	cmp	r5, #7
 8009778:	dc04      	bgt.n	8009784 <__hexnan+0x64>
 800977a:	462a      	mov	r2, r5
 800977c:	4649      	mov	r1, r9
 800977e:	4620      	mov	r0, r4
 8009780:	f7ff ffa8 	bl	80096d4 <L_shift>
 8009784:	4544      	cmp	r4, r8
 8009786:	d944      	bls.n	8009812 <__hexnan+0xf2>
 8009788:	2300      	movs	r3, #0
 800978a:	f1a4 0904 	sub.w	r9, r4, #4
 800978e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009792:	461d      	mov	r5, r3
 8009794:	464c      	mov	r4, r9
 8009796:	f8cd b008 	str.w	fp, [sp, #8]
 800979a:	9903      	ldr	r1, [sp, #12]
 800979c:	e7d7      	b.n	800974e <__hexnan+0x2e>
 800979e:	2a29      	cmp	r2, #41	; 0x29
 80097a0:	d14a      	bne.n	8009838 <__hexnan+0x118>
 80097a2:	3102      	adds	r1, #2
 80097a4:	f8ca 1000 	str.w	r1, [sl]
 80097a8:	f1bb 0f00 	cmp.w	fp, #0
 80097ac:	d044      	beq.n	8009838 <__hexnan+0x118>
 80097ae:	454c      	cmp	r4, r9
 80097b0:	d206      	bcs.n	80097c0 <__hexnan+0xa0>
 80097b2:	2d07      	cmp	r5, #7
 80097b4:	dc04      	bgt.n	80097c0 <__hexnan+0xa0>
 80097b6:	462a      	mov	r2, r5
 80097b8:	4649      	mov	r1, r9
 80097ba:	4620      	mov	r0, r4
 80097bc:	f7ff ff8a 	bl	80096d4 <L_shift>
 80097c0:	4544      	cmp	r4, r8
 80097c2:	d928      	bls.n	8009816 <__hexnan+0xf6>
 80097c4:	4643      	mov	r3, r8
 80097c6:	f854 2b04 	ldr.w	r2, [r4], #4
 80097ca:	42a6      	cmp	r6, r4
 80097cc:	f843 2b04 	str.w	r2, [r3], #4
 80097d0:	d2f9      	bcs.n	80097c6 <__hexnan+0xa6>
 80097d2:	2200      	movs	r2, #0
 80097d4:	f843 2b04 	str.w	r2, [r3], #4
 80097d8:	429e      	cmp	r6, r3
 80097da:	d2fb      	bcs.n	80097d4 <__hexnan+0xb4>
 80097dc:	6833      	ldr	r3, [r6, #0]
 80097de:	b91b      	cbnz	r3, 80097e8 <__hexnan+0xc8>
 80097e0:	4546      	cmp	r6, r8
 80097e2:	d127      	bne.n	8009834 <__hexnan+0x114>
 80097e4:	2301      	movs	r3, #1
 80097e6:	6033      	str	r3, [r6, #0]
 80097e8:	2005      	movs	r0, #5
 80097ea:	e026      	b.n	800983a <__hexnan+0x11a>
 80097ec:	3501      	adds	r5, #1
 80097ee:	2d08      	cmp	r5, #8
 80097f0:	f10b 0b01 	add.w	fp, fp, #1
 80097f4:	dd06      	ble.n	8009804 <__hexnan+0xe4>
 80097f6:	4544      	cmp	r4, r8
 80097f8:	d9cf      	bls.n	800979a <__hexnan+0x7a>
 80097fa:	2300      	movs	r3, #0
 80097fc:	2501      	movs	r5, #1
 80097fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009802:	3c04      	subs	r4, #4
 8009804:	6822      	ldr	r2, [r4, #0]
 8009806:	f000 000f 	and.w	r0, r0, #15
 800980a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	e7c3      	b.n	800979a <__hexnan+0x7a>
 8009812:	2508      	movs	r5, #8
 8009814:	e7c1      	b.n	800979a <__hexnan+0x7a>
 8009816:	9b01      	ldr	r3, [sp, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0df      	beq.n	80097dc <__hexnan+0xbc>
 800981c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009820:	f1c3 0320 	rsb	r3, r3, #32
 8009824:	fa22 f303 	lsr.w	r3, r2, r3
 8009828:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800982c:	401a      	ands	r2, r3
 800982e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009832:	e7d3      	b.n	80097dc <__hexnan+0xbc>
 8009834:	3e04      	subs	r6, #4
 8009836:	e7d1      	b.n	80097dc <__hexnan+0xbc>
 8009838:	2004      	movs	r0, #4
 800983a:	b007      	add	sp, #28
 800983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009840 <__locale_ctype_ptr_l>:
 8009840:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009844:	4770      	bx	lr

08009846 <__localeconv_l>:
 8009846:	30f0      	adds	r0, #240	; 0xf0
 8009848:	4770      	bx	lr

0800984a <__ascii_mbtowc>:
 800984a:	b082      	sub	sp, #8
 800984c:	b901      	cbnz	r1, 8009850 <__ascii_mbtowc+0x6>
 800984e:	a901      	add	r1, sp, #4
 8009850:	b142      	cbz	r2, 8009864 <__ascii_mbtowc+0x1a>
 8009852:	b14b      	cbz	r3, 8009868 <__ascii_mbtowc+0x1e>
 8009854:	7813      	ldrb	r3, [r2, #0]
 8009856:	600b      	str	r3, [r1, #0]
 8009858:	7812      	ldrb	r2, [r2, #0]
 800985a:	1c10      	adds	r0, r2, #0
 800985c:	bf18      	it	ne
 800985e:	2001      	movne	r0, #1
 8009860:	b002      	add	sp, #8
 8009862:	4770      	bx	lr
 8009864:	4610      	mov	r0, r2
 8009866:	e7fb      	b.n	8009860 <__ascii_mbtowc+0x16>
 8009868:	f06f 0001 	mvn.w	r0, #1
 800986c:	e7f8      	b.n	8009860 <__ascii_mbtowc+0x16>

0800986e <_Balloc>:
 800986e:	b570      	push	{r4, r5, r6, lr}
 8009870:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009872:	4604      	mov	r4, r0
 8009874:	460e      	mov	r6, r1
 8009876:	b93d      	cbnz	r5, 8009888 <_Balloc+0x1a>
 8009878:	2010      	movs	r0, #16
 800987a:	f000 ff51 	bl	800a720 <malloc>
 800987e:	6260      	str	r0, [r4, #36]	; 0x24
 8009880:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009884:	6005      	str	r5, [r0, #0]
 8009886:	60c5      	str	r5, [r0, #12]
 8009888:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800988a:	68eb      	ldr	r3, [r5, #12]
 800988c:	b183      	cbz	r3, 80098b0 <_Balloc+0x42>
 800988e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009896:	b9b8      	cbnz	r0, 80098c8 <_Balloc+0x5a>
 8009898:	2101      	movs	r1, #1
 800989a:	fa01 f506 	lsl.w	r5, r1, r6
 800989e:	1d6a      	adds	r2, r5, #5
 80098a0:	0092      	lsls	r2, r2, #2
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 fbdc 	bl	800a060 <_calloc_r>
 80098a8:	b160      	cbz	r0, 80098c4 <_Balloc+0x56>
 80098aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80098ae:	e00e      	b.n	80098ce <_Balloc+0x60>
 80098b0:	2221      	movs	r2, #33	; 0x21
 80098b2:	2104      	movs	r1, #4
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 fbd3 	bl	800a060 <_calloc_r>
 80098ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098bc:	60e8      	str	r0, [r5, #12]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e4      	bne.n	800988e <_Balloc+0x20>
 80098c4:	2000      	movs	r0, #0
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	6802      	ldr	r2, [r0, #0]
 80098ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80098ce:	2300      	movs	r3, #0
 80098d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098d4:	e7f7      	b.n	80098c6 <_Balloc+0x58>

080098d6 <_Bfree>:
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80098da:	4606      	mov	r6, r0
 80098dc:	460d      	mov	r5, r1
 80098de:	b93c      	cbnz	r4, 80098f0 <_Bfree+0x1a>
 80098e0:	2010      	movs	r0, #16
 80098e2:	f000 ff1d 	bl	800a720 <malloc>
 80098e6:	6270      	str	r0, [r6, #36]	; 0x24
 80098e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098ec:	6004      	str	r4, [r0, #0]
 80098ee:	60c4      	str	r4, [r0, #12]
 80098f0:	b13d      	cbz	r5, 8009902 <_Bfree+0x2c>
 80098f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098f4:	686a      	ldr	r2, [r5, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098fc:	6029      	str	r1, [r5, #0]
 80098fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009902:	bd70      	pop	{r4, r5, r6, pc}

08009904 <__multadd>:
 8009904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	461f      	mov	r7, r3
 800990a:	4606      	mov	r6, r0
 800990c:	460c      	mov	r4, r1
 800990e:	2300      	movs	r3, #0
 8009910:	690d      	ldr	r5, [r1, #16]
 8009912:	f101 0c14 	add.w	ip, r1, #20
 8009916:	f8dc 0000 	ldr.w	r0, [ip]
 800991a:	3301      	adds	r3, #1
 800991c:	b281      	uxth	r1, r0
 800991e:	fb02 7101 	mla	r1, r2, r1, r7
 8009922:	0c00      	lsrs	r0, r0, #16
 8009924:	0c0f      	lsrs	r7, r1, #16
 8009926:	fb02 7000 	mla	r0, r2, r0, r7
 800992a:	b289      	uxth	r1, r1
 800992c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009930:	429d      	cmp	r5, r3
 8009932:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009936:	f84c 1b04 	str.w	r1, [ip], #4
 800993a:	dcec      	bgt.n	8009916 <__multadd+0x12>
 800993c:	b1d7      	cbz	r7, 8009974 <__multadd+0x70>
 800993e:	68a3      	ldr	r3, [r4, #8]
 8009940:	42ab      	cmp	r3, r5
 8009942:	dc12      	bgt.n	800996a <__multadd+0x66>
 8009944:	6861      	ldr	r1, [r4, #4]
 8009946:	4630      	mov	r0, r6
 8009948:	3101      	adds	r1, #1
 800994a:	f7ff ff90 	bl	800986e <_Balloc>
 800994e:	4680      	mov	r8, r0
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	f104 010c 	add.w	r1, r4, #12
 8009956:	3202      	adds	r2, #2
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	300c      	adds	r0, #12
 800995c:	f7fe fd20 	bl	80083a0 <memcpy>
 8009960:	4621      	mov	r1, r4
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ffb7 	bl	80098d6 <_Bfree>
 8009968:	4644      	mov	r4, r8
 800996a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800996e:	3501      	adds	r5, #1
 8009970:	615f      	str	r7, [r3, #20]
 8009972:	6125      	str	r5, [r4, #16]
 8009974:	4620      	mov	r0, r4
 8009976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800997a <__s2b>:
 800997a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800997e:	4615      	mov	r5, r2
 8009980:	2209      	movs	r2, #9
 8009982:	461f      	mov	r7, r3
 8009984:	3308      	adds	r3, #8
 8009986:	460c      	mov	r4, r1
 8009988:	fb93 f3f2 	sdiv	r3, r3, r2
 800998c:	4606      	mov	r6, r0
 800998e:	2201      	movs	r2, #1
 8009990:	2100      	movs	r1, #0
 8009992:	429a      	cmp	r2, r3
 8009994:	db20      	blt.n	80099d8 <__s2b+0x5e>
 8009996:	4630      	mov	r0, r6
 8009998:	f7ff ff69 	bl	800986e <_Balloc>
 800999c:	9b08      	ldr	r3, [sp, #32]
 800999e:	2d09      	cmp	r5, #9
 80099a0:	6143      	str	r3, [r0, #20]
 80099a2:	f04f 0301 	mov.w	r3, #1
 80099a6:	6103      	str	r3, [r0, #16]
 80099a8:	dd19      	ble.n	80099de <__s2b+0x64>
 80099aa:	f104 0809 	add.w	r8, r4, #9
 80099ae:	46c1      	mov	r9, r8
 80099b0:	442c      	add	r4, r5
 80099b2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80099b6:	4601      	mov	r1, r0
 80099b8:	3b30      	subs	r3, #48	; 0x30
 80099ba:	220a      	movs	r2, #10
 80099bc:	4630      	mov	r0, r6
 80099be:	f7ff ffa1 	bl	8009904 <__multadd>
 80099c2:	45a1      	cmp	r9, r4
 80099c4:	d1f5      	bne.n	80099b2 <__s2b+0x38>
 80099c6:	eb08 0405 	add.w	r4, r8, r5
 80099ca:	3c08      	subs	r4, #8
 80099cc:	1b2d      	subs	r5, r5, r4
 80099ce:	1963      	adds	r3, r4, r5
 80099d0:	42bb      	cmp	r3, r7
 80099d2:	db07      	blt.n	80099e4 <__s2b+0x6a>
 80099d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d8:	0052      	lsls	r2, r2, #1
 80099da:	3101      	adds	r1, #1
 80099dc:	e7d9      	b.n	8009992 <__s2b+0x18>
 80099de:	340a      	adds	r4, #10
 80099e0:	2509      	movs	r5, #9
 80099e2:	e7f3      	b.n	80099cc <__s2b+0x52>
 80099e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099e8:	4601      	mov	r1, r0
 80099ea:	3b30      	subs	r3, #48	; 0x30
 80099ec:	220a      	movs	r2, #10
 80099ee:	4630      	mov	r0, r6
 80099f0:	f7ff ff88 	bl	8009904 <__multadd>
 80099f4:	e7eb      	b.n	80099ce <__s2b+0x54>

080099f6 <__hi0bits>:
 80099f6:	0c02      	lsrs	r2, r0, #16
 80099f8:	0412      	lsls	r2, r2, #16
 80099fa:	4603      	mov	r3, r0
 80099fc:	b9b2      	cbnz	r2, 8009a2c <__hi0bits+0x36>
 80099fe:	0403      	lsls	r3, r0, #16
 8009a00:	2010      	movs	r0, #16
 8009a02:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a06:	bf04      	itt	eq
 8009a08:	021b      	lsleq	r3, r3, #8
 8009a0a:	3008      	addeq	r0, #8
 8009a0c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a10:	bf04      	itt	eq
 8009a12:	011b      	lsleq	r3, r3, #4
 8009a14:	3004      	addeq	r0, #4
 8009a16:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a1a:	bf04      	itt	eq
 8009a1c:	009b      	lsleq	r3, r3, #2
 8009a1e:	3002      	addeq	r0, #2
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	db06      	blt.n	8009a32 <__hi0bits+0x3c>
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	d503      	bpl.n	8009a30 <__hi0bits+0x3a>
 8009a28:	3001      	adds	r0, #1
 8009a2a:	4770      	bx	lr
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	e7e8      	b.n	8009a02 <__hi0bits+0xc>
 8009a30:	2020      	movs	r0, #32
 8009a32:	4770      	bx	lr

08009a34 <__lo0bits>:
 8009a34:	6803      	ldr	r3, [r0, #0]
 8009a36:	4601      	mov	r1, r0
 8009a38:	f013 0207 	ands.w	r2, r3, #7
 8009a3c:	d00b      	beq.n	8009a56 <__lo0bits+0x22>
 8009a3e:	07da      	lsls	r2, r3, #31
 8009a40:	d423      	bmi.n	8009a8a <__lo0bits+0x56>
 8009a42:	0798      	lsls	r0, r3, #30
 8009a44:	bf49      	itett	mi
 8009a46:	085b      	lsrmi	r3, r3, #1
 8009a48:	089b      	lsrpl	r3, r3, #2
 8009a4a:	2001      	movmi	r0, #1
 8009a4c:	600b      	strmi	r3, [r1, #0]
 8009a4e:	bf5c      	itt	pl
 8009a50:	600b      	strpl	r3, [r1, #0]
 8009a52:	2002      	movpl	r0, #2
 8009a54:	4770      	bx	lr
 8009a56:	b298      	uxth	r0, r3
 8009a58:	b9a8      	cbnz	r0, 8009a86 <__lo0bits+0x52>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	0c1b      	lsrs	r3, r3, #16
 8009a5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a62:	bf04      	itt	eq
 8009a64:	0a1b      	lsreq	r3, r3, #8
 8009a66:	3008      	addeq	r0, #8
 8009a68:	071a      	lsls	r2, r3, #28
 8009a6a:	bf04      	itt	eq
 8009a6c:	091b      	lsreq	r3, r3, #4
 8009a6e:	3004      	addeq	r0, #4
 8009a70:	079a      	lsls	r2, r3, #30
 8009a72:	bf04      	itt	eq
 8009a74:	089b      	lsreq	r3, r3, #2
 8009a76:	3002      	addeq	r0, #2
 8009a78:	07da      	lsls	r2, r3, #31
 8009a7a:	d402      	bmi.n	8009a82 <__lo0bits+0x4e>
 8009a7c:	085b      	lsrs	r3, r3, #1
 8009a7e:	d006      	beq.n	8009a8e <__lo0bits+0x5a>
 8009a80:	3001      	adds	r0, #1
 8009a82:	600b      	str	r3, [r1, #0]
 8009a84:	4770      	bx	lr
 8009a86:	4610      	mov	r0, r2
 8009a88:	e7e9      	b.n	8009a5e <__lo0bits+0x2a>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	4770      	bx	lr
 8009a8e:	2020      	movs	r0, #32
 8009a90:	4770      	bx	lr

08009a92 <__i2b>:
 8009a92:	b510      	push	{r4, lr}
 8009a94:	460c      	mov	r4, r1
 8009a96:	2101      	movs	r1, #1
 8009a98:	f7ff fee9 	bl	800986e <_Balloc>
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	6144      	str	r4, [r0, #20]
 8009aa0:	6102      	str	r2, [r0, #16]
 8009aa2:	bd10      	pop	{r4, pc}

08009aa4 <__multiply>:
 8009aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	690a      	ldr	r2, [r1, #16]
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	4688      	mov	r8, r1
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	bfbe      	ittt	lt
 8009ab4:	460b      	movlt	r3, r1
 8009ab6:	46a0      	movlt	r8, r4
 8009ab8:	461c      	movlt	r4, r3
 8009aba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009abe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ac6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009aca:	eb07 0609 	add.w	r6, r7, r9
 8009ace:	42b3      	cmp	r3, r6
 8009ad0:	bfb8      	it	lt
 8009ad2:	3101      	addlt	r1, #1
 8009ad4:	f7ff fecb 	bl	800986e <_Balloc>
 8009ad8:	f100 0514 	add.w	r5, r0, #20
 8009adc:	462b      	mov	r3, r5
 8009ade:	2200      	movs	r2, #0
 8009ae0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009ae4:	4573      	cmp	r3, lr
 8009ae6:	d316      	bcc.n	8009b16 <__multiply+0x72>
 8009ae8:	f104 0214 	add.w	r2, r4, #20
 8009aec:	f108 0114 	add.w	r1, r8, #20
 8009af0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009af4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	9201      	str	r2, [sp, #4]
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d80c      	bhi.n	8009b1c <__multiply+0x78>
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	dd03      	ble.n	8009b0e <__multiply+0x6a>
 8009b06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d05d      	beq.n	8009bca <__multiply+0x126>
 8009b0e:	6106      	str	r6, [r0, #16]
 8009b10:	b003      	add	sp, #12
 8009b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b16:	f843 2b04 	str.w	r2, [r3], #4
 8009b1a:	e7e3      	b.n	8009ae4 <__multiply+0x40>
 8009b1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b20:	f1bb 0f00 	cmp.w	fp, #0
 8009b24:	d023      	beq.n	8009b6e <__multiply+0xca>
 8009b26:	4689      	mov	r9, r1
 8009b28:	46ac      	mov	ip, r5
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b32:	f8dc a000 	ldr.w	sl, [ip]
 8009b36:	b2a3      	uxth	r3, r4
 8009b38:	fa1f fa8a 	uxth.w	sl, sl
 8009b3c:	fb0b a303 	mla	r3, fp, r3, sl
 8009b40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b44:	f8dc 4000 	ldr.w	r4, [ip]
 8009b48:	4443      	add	r3, r8
 8009b4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b52:	46e2      	mov	sl, ip
 8009b54:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b5e:	454f      	cmp	r7, r9
 8009b60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b64:	f84a 3b04 	str.w	r3, [sl], #4
 8009b68:	d82b      	bhi.n	8009bc2 <__multiply+0x11e>
 8009b6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	3204      	adds	r2, #4
 8009b72:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009b76:	f1ba 0f00 	cmp.w	sl, #0
 8009b7a:	d020      	beq.n	8009bbe <__multiply+0x11a>
 8009b7c:	4689      	mov	r9, r1
 8009b7e:	46a8      	mov	r8, r5
 8009b80:	f04f 0b00 	mov.w	fp, #0
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	f8b9 c000 	ldrh.w	ip, [r9]
 8009b8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	fb0a 440c 	mla	r4, sl, ip, r4
 8009b94:	46c4      	mov	ip, r8
 8009b96:	445c      	add	r4, fp
 8009b98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b9c:	f84c 3b04 	str.w	r3, [ip], #4
 8009ba0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ba4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009ba8:	0c1b      	lsrs	r3, r3, #16
 8009baa:	fb0a b303 	mla	r3, sl, r3, fp
 8009bae:	454f      	cmp	r7, r9
 8009bb0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009bb4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009bb8:	d805      	bhi.n	8009bc6 <__multiply+0x122>
 8009bba:	f8c8 3004 	str.w	r3, [r8, #4]
 8009bbe:	3504      	adds	r5, #4
 8009bc0:	e79b      	b.n	8009afa <__multiply+0x56>
 8009bc2:	46d4      	mov	ip, sl
 8009bc4:	e7b3      	b.n	8009b2e <__multiply+0x8a>
 8009bc6:	46e0      	mov	r8, ip
 8009bc8:	e7dd      	b.n	8009b86 <__multiply+0xe2>
 8009bca:	3e01      	subs	r6, #1
 8009bcc:	e799      	b.n	8009b02 <__multiply+0x5e>
	...

08009bd0 <__pow5mult>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	4615      	mov	r5, r2
 8009bd6:	f012 0203 	ands.w	r2, r2, #3
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460f      	mov	r7, r1
 8009bde:	d007      	beq.n	8009bf0 <__pow5mult+0x20>
 8009be0:	4c21      	ldr	r4, [pc, #132]	; (8009c68 <__pow5mult+0x98>)
 8009be2:	3a01      	subs	r2, #1
 8009be4:	2300      	movs	r3, #0
 8009be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bea:	f7ff fe8b 	bl	8009904 <__multadd>
 8009bee:	4607      	mov	r7, r0
 8009bf0:	10ad      	asrs	r5, r5, #2
 8009bf2:	d035      	beq.n	8009c60 <__pow5mult+0x90>
 8009bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bf6:	b93c      	cbnz	r4, 8009c08 <__pow5mult+0x38>
 8009bf8:	2010      	movs	r0, #16
 8009bfa:	f000 fd91 	bl	800a720 <malloc>
 8009bfe:	6270      	str	r0, [r6, #36]	; 0x24
 8009c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c04:	6004      	str	r4, [r0, #0]
 8009c06:	60c4      	str	r4, [r0, #12]
 8009c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c10:	b94c      	cbnz	r4, 8009c26 <__pow5mult+0x56>
 8009c12:	f240 2171 	movw	r1, #625	; 0x271
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7ff ff3b 	bl	8009a92 <__i2b>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4604      	mov	r4, r0
 8009c20:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c24:	6003      	str	r3, [r0, #0]
 8009c26:	f04f 0800 	mov.w	r8, #0
 8009c2a:	07eb      	lsls	r3, r5, #31
 8009c2c:	d50a      	bpl.n	8009c44 <__pow5mult+0x74>
 8009c2e:	4639      	mov	r1, r7
 8009c30:	4622      	mov	r2, r4
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff ff36 	bl	8009aa4 <__multiply>
 8009c38:	4681      	mov	r9, r0
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7ff fe4a 	bl	80098d6 <_Bfree>
 8009c42:	464f      	mov	r7, r9
 8009c44:	106d      	asrs	r5, r5, #1
 8009c46:	d00b      	beq.n	8009c60 <__pow5mult+0x90>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	b938      	cbnz	r0, 8009c5c <__pow5mult+0x8c>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff ff27 	bl	8009aa4 <__multiply>
 8009c56:	6020      	str	r0, [r4, #0]
 8009c58:	f8c0 8000 	str.w	r8, [r0]
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	e7e4      	b.n	8009c2a <__pow5mult+0x5a>
 8009c60:	4638      	mov	r0, r7
 8009c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c66:	bf00      	nop
 8009c68:	0800aaf0 	.word	0x0800aaf0

08009c6c <__lshift>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	460c      	mov	r4, r1
 8009c72:	4607      	mov	r7, r0
 8009c74:	4616      	mov	r6, r2
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c7c:	eb0a 0903 	add.w	r9, sl, r3
 8009c80:	6849      	ldr	r1, [r1, #4]
 8009c82:	68a3      	ldr	r3, [r4, #8]
 8009c84:	f109 0501 	add.w	r5, r9, #1
 8009c88:	42ab      	cmp	r3, r5
 8009c8a:	db32      	blt.n	8009cf2 <__lshift+0x86>
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7ff fdee 	bl	800986e <_Balloc>
 8009c92:	2300      	movs	r3, #0
 8009c94:	4680      	mov	r8, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	f100 0114 	add.w	r1, r0, #20
 8009c9c:	4553      	cmp	r3, sl
 8009c9e:	db2b      	blt.n	8009cf8 <__lshift+0x8c>
 8009ca0:	6920      	ldr	r0, [r4, #16]
 8009ca2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca6:	f104 0314 	add.w	r3, r4, #20
 8009caa:	f016 021f 	ands.w	r2, r6, #31
 8009cae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cb6:	d025      	beq.n	8009d04 <__lshift+0x98>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	f1c2 0e20 	rsb	lr, r2, #32
 8009cbe:	468a      	mov	sl, r1
 8009cc0:	681e      	ldr	r6, [r3, #0]
 8009cc2:	4096      	lsls	r6, r2
 8009cc4:	4330      	orrs	r0, r6
 8009cc6:	f84a 0b04 	str.w	r0, [sl], #4
 8009cca:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cce:	459c      	cmp	ip, r3
 8009cd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8009cd4:	d814      	bhi.n	8009d00 <__lshift+0x94>
 8009cd6:	6048      	str	r0, [r1, #4]
 8009cd8:	b108      	cbz	r0, 8009cde <__lshift+0x72>
 8009cda:	f109 0502 	add.w	r5, r9, #2
 8009cde:	3d01      	subs	r5, #1
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f8c8 5010 	str.w	r5, [r8, #16]
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	f7ff fdf5 	bl	80098d6 <_Bfree>
 8009cec:	4640      	mov	r0, r8
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	3101      	adds	r1, #1
 8009cf4:	005b      	lsls	r3, r3, #1
 8009cf6:	e7c7      	b.n	8009c88 <__lshift+0x1c>
 8009cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	e7cd      	b.n	8009c9c <__lshift+0x30>
 8009d00:	4651      	mov	r1, sl
 8009d02:	e7dc      	b.n	8009cbe <__lshift+0x52>
 8009d04:	3904      	subs	r1, #4
 8009d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d0a:	459c      	cmp	ip, r3
 8009d0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d10:	d8f9      	bhi.n	8009d06 <__lshift+0x9a>
 8009d12:	e7e4      	b.n	8009cde <__lshift+0x72>

08009d14 <__mcmp>:
 8009d14:	6903      	ldr	r3, [r0, #16]
 8009d16:	690a      	ldr	r2, [r1, #16]
 8009d18:	b530      	push	{r4, r5, lr}
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	d10c      	bne.n	8009d38 <__mcmp+0x24>
 8009d1e:	0092      	lsls	r2, r2, #2
 8009d20:	3014      	adds	r0, #20
 8009d22:	3114      	adds	r1, #20
 8009d24:	1884      	adds	r4, r0, r2
 8009d26:	4411      	add	r1, r2
 8009d28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d30:	4295      	cmp	r5, r2
 8009d32:	d003      	beq.n	8009d3c <__mcmp+0x28>
 8009d34:	d305      	bcc.n	8009d42 <__mcmp+0x2e>
 8009d36:	2301      	movs	r3, #1
 8009d38:	4618      	mov	r0, r3
 8009d3a:	bd30      	pop	{r4, r5, pc}
 8009d3c:	42a0      	cmp	r0, r4
 8009d3e:	d3f3      	bcc.n	8009d28 <__mcmp+0x14>
 8009d40:	e7fa      	b.n	8009d38 <__mcmp+0x24>
 8009d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d46:	e7f7      	b.n	8009d38 <__mcmp+0x24>

08009d48 <__mdiff>:
 8009d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	4607      	mov	r7, r0
 8009d50:	4611      	mov	r1, r2
 8009d52:	4628      	mov	r0, r5
 8009d54:	4614      	mov	r4, r2
 8009d56:	f7ff ffdd 	bl	8009d14 <__mcmp>
 8009d5a:	1e06      	subs	r6, r0, #0
 8009d5c:	d108      	bne.n	8009d70 <__mdiff+0x28>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff fd84 	bl	800986e <_Balloc>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d70:	bfa4      	itt	ge
 8009d72:	4623      	movge	r3, r4
 8009d74:	462c      	movge	r4, r5
 8009d76:	4638      	mov	r0, r7
 8009d78:	6861      	ldr	r1, [r4, #4]
 8009d7a:	bfa6      	itte	ge
 8009d7c:	461d      	movge	r5, r3
 8009d7e:	2600      	movge	r6, #0
 8009d80:	2601      	movlt	r6, #1
 8009d82:	f7ff fd74 	bl	800986e <_Balloc>
 8009d86:	f04f 0e00 	mov.w	lr, #0
 8009d8a:	60c6      	str	r6, [r0, #12]
 8009d8c:	692b      	ldr	r3, [r5, #16]
 8009d8e:	6926      	ldr	r6, [r4, #16]
 8009d90:	f104 0214 	add.w	r2, r4, #20
 8009d94:	f105 0914 	add.w	r9, r5, #20
 8009d98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009d9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009da0:	f100 0114 	add.w	r1, r0, #20
 8009da4:	f852 ab04 	ldr.w	sl, [r2], #4
 8009da8:	f859 5b04 	ldr.w	r5, [r9], #4
 8009dac:	fa1f f38a 	uxth.w	r3, sl
 8009db0:	4473      	add	r3, lr
 8009db2:	b2ac      	uxth	r4, r5
 8009db4:	1b1b      	subs	r3, r3, r4
 8009db6:	0c2c      	lsrs	r4, r5, #16
 8009db8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009dbc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009dc6:	45c8      	cmp	r8, r9
 8009dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009dcc:	4694      	mov	ip, r2
 8009dce:	f841 4b04 	str.w	r4, [r1], #4
 8009dd2:	d8e7      	bhi.n	8009da4 <__mdiff+0x5c>
 8009dd4:	45bc      	cmp	ip, r7
 8009dd6:	d304      	bcc.n	8009de2 <__mdiff+0x9a>
 8009dd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ddc:	b183      	cbz	r3, 8009e00 <__mdiff+0xb8>
 8009dde:	6106      	str	r6, [r0, #16]
 8009de0:	e7c4      	b.n	8009d6c <__mdiff+0x24>
 8009de2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009de6:	b2a2      	uxth	r2, r4
 8009de8:	4472      	add	r2, lr
 8009dea:	1413      	asrs	r3, r2, #16
 8009dec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009df0:	b292      	uxth	r2, r2
 8009df2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009df6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009dfa:	f841 2b04 	str.w	r2, [r1], #4
 8009dfe:	e7e9      	b.n	8009dd4 <__mdiff+0x8c>
 8009e00:	3e01      	subs	r6, #1
 8009e02:	e7e9      	b.n	8009dd8 <__mdiff+0x90>

08009e04 <__ulp>:
 8009e04:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <__ulp+0x44>)
 8009e06:	400b      	ands	r3, r1
 8009e08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dd02      	ble.n	8009e16 <__ulp+0x12>
 8009e10:	2000      	movs	r0, #0
 8009e12:	4619      	mov	r1, r3
 8009e14:	4770      	bx	lr
 8009e16:	425b      	negs	r3, r3
 8009e18:	151b      	asrs	r3, r3, #20
 8009e1a:	2b13      	cmp	r3, #19
 8009e1c:	f04f 0000 	mov.w	r0, #0
 8009e20:	f04f 0100 	mov.w	r1, #0
 8009e24:	dc04      	bgt.n	8009e30 <__ulp+0x2c>
 8009e26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e2a:	fa42 f103 	asr.w	r1, r2, r3
 8009e2e:	4770      	bx	lr
 8009e30:	2201      	movs	r2, #1
 8009e32:	3b14      	subs	r3, #20
 8009e34:	2b1e      	cmp	r3, #30
 8009e36:	bfce      	itee	gt
 8009e38:	4613      	movgt	r3, r2
 8009e3a:	f1c3 031f 	rsble	r3, r3, #31
 8009e3e:	fa02 f303 	lslle.w	r3, r2, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	7ff00000 	.word	0x7ff00000

08009e4c <__b2d>:
 8009e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e50:	6907      	ldr	r7, [r0, #16]
 8009e52:	f100 0914 	add.w	r9, r0, #20
 8009e56:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009e5a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009e5e:	f1a7 0804 	sub.w	r8, r7, #4
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff fdc7 	bl	80099f6 <__hi0bits>
 8009e68:	f1c0 0320 	rsb	r3, r0, #32
 8009e6c:	280a      	cmp	r0, #10
 8009e6e:	600b      	str	r3, [r1, #0]
 8009e70:	491e      	ldr	r1, [pc, #120]	; (8009eec <__b2d+0xa0>)
 8009e72:	dc17      	bgt.n	8009ea4 <__b2d+0x58>
 8009e74:	45c1      	cmp	r9, r8
 8009e76:	bf28      	it	cs
 8009e78:	2200      	movcs	r2, #0
 8009e7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e7e:	fa26 f30c 	lsr.w	r3, r6, ip
 8009e82:	bf38      	it	cc
 8009e84:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e88:	ea43 0501 	orr.w	r5, r3, r1
 8009e8c:	f100 0315 	add.w	r3, r0, #21
 8009e90:	fa06 f303 	lsl.w	r3, r6, r3
 8009e94:	fa22 f20c 	lsr.w	r2, r2, ip
 8009e98:	ea43 0402 	orr.w	r4, r3, r2
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ea4:	45c1      	cmp	r9, r8
 8009ea6:	bf3a      	itte	cc
 8009ea8:	f1a7 0808 	subcc.w	r8, r7, #8
 8009eac:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009eb0:	2200      	movcs	r2, #0
 8009eb2:	f1b0 030b 	subs.w	r3, r0, #11
 8009eb6:	d015      	beq.n	8009ee4 <__b2d+0x98>
 8009eb8:	409e      	lsls	r6, r3
 8009eba:	f1c3 0720 	rsb	r7, r3, #32
 8009ebe:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009ec2:	fa22 f107 	lsr.w	r1, r2, r7
 8009ec6:	45c8      	cmp	r8, r9
 8009ec8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009ecc:	ea46 0501 	orr.w	r5, r6, r1
 8009ed0:	bf94      	ite	ls
 8009ed2:	2100      	movls	r1, #0
 8009ed4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009ed8:	fa02 f003 	lsl.w	r0, r2, r3
 8009edc:	40f9      	lsrs	r1, r7
 8009ede:	ea40 0401 	orr.w	r4, r0, r1
 8009ee2:	e7db      	b.n	8009e9c <__b2d+0x50>
 8009ee4:	ea46 0501 	orr.w	r5, r6, r1
 8009ee8:	4614      	mov	r4, r2
 8009eea:	e7d7      	b.n	8009e9c <__b2d+0x50>
 8009eec:	3ff00000 	.word	0x3ff00000

08009ef0 <__d2b>:
 8009ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ef4:	461c      	mov	r4, r3
 8009ef6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009efa:	2101      	movs	r1, #1
 8009efc:	4690      	mov	r8, r2
 8009efe:	f7ff fcb6 	bl	800986e <_Balloc>
 8009f02:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009f06:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	bb34      	cbnz	r4, 8009f5c <__d2b+0x6c>
 8009f0e:	9201      	str	r2, [sp, #4]
 8009f10:	f1b8 0200 	subs.w	r2, r8, #0
 8009f14:	d027      	beq.n	8009f66 <__d2b+0x76>
 8009f16:	a802      	add	r0, sp, #8
 8009f18:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009f1c:	f7ff fd8a 	bl	8009a34 <__lo0bits>
 8009f20:	9900      	ldr	r1, [sp, #0]
 8009f22:	b1f0      	cbz	r0, 8009f62 <__d2b+0x72>
 8009f24:	9a01      	ldr	r2, [sp, #4]
 8009f26:	f1c0 0320 	rsb	r3, r0, #32
 8009f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2e:	430b      	orrs	r3, r1
 8009f30:	40c2      	lsrs	r2, r0
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	9201      	str	r2, [sp, #4]
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bf14      	ite	ne
 8009f3c:	2102      	movne	r1, #2
 8009f3e:	2101      	moveq	r1, #1
 8009f40:	61bb      	str	r3, [r7, #24]
 8009f42:	6139      	str	r1, [r7, #16]
 8009f44:	b1c4      	cbz	r4, 8009f78 <__d2b+0x88>
 8009f46:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f4a:	4404      	add	r4, r0
 8009f4c:	6034      	str	r4, [r6, #0]
 8009f4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	4638      	mov	r0, r7
 8009f56:	b002      	add	sp, #8
 8009f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f5c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f60:	e7d5      	b.n	8009f0e <__d2b+0x1e>
 8009f62:	6179      	str	r1, [r7, #20]
 8009f64:	e7e7      	b.n	8009f36 <__d2b+0x46>
 8009f66:	a801      	add	r0, sp, #4
 8009f68:	f7ff fd64 	bl	8009a34 <__lo0bits>
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	6139      	str	r1, [r7, #16]
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	3020      	adds	r0, #32
 8009f76:	e7e5      	b.n	8009f44 <__d2b+0x54>
 8009f78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f80:	6030      	str	r0, [r6, #0]
 8009f82:	6918      	ldr	r0, [r3, #16]
 8009f84:	f7ff fd37 	bl	80099f6 <__hi0bits>
 8009f88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f8c:	e7e1      	b.n	8009f52 <__d2b+0x62>

08009f8e <__ratio>:
 8009f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f92:	4688      	mov	r8, r1
 8009f94:	4669      	mov	r1, sp
 8009f96:	4681      	mov	r9, r0
 8009f98:	f7ff ff58 	bl	8009e4c <__b2d>
 8009f9c:	468b      	mov	fp, r1
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	a901      	add	r1, sp, #4
 8009fa6:	f7ff ff51 	bl	8009e4c <__b2d>
 8009faa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	eba3 0c02 	sub.w	ip, r3, r2
 8009fb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	bfd5      	itete	le
 8009fc6:	460a      	movle	r2, r1
 8009fc8:	463a      	movgt	r2, r7
 8009fca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009fd2:	bfd8      	it	le
 8009fd4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009fd8:	462b      	mov	r3, r5
 8009fda:	4602      	mov	r2, r0
 8009fdc:	4659      	mov	r1, fp
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7f6 fba4 	bl	800072c <__aeabi_ddiv>
 8009fe4:	b003      	add	sp, #12
 8009fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fea <__copybits>:
 8009fea:	3901      	subs	r1, #1
 8009fec:	b510      	push	{r4, lr}
 8009fee:	1149      	asrs	r1, r1, #5
 8009ff0:	6914      	ldr	r4, [r2, #16]
 8009ff2:	3101      	adds	r1, #1
 8009ff4:	f102 0314 	add.w	r3, r2, #20
 8009ff8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ffc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a000:	42a3      	cmp	r3, r4
 800a002:	4602      	mov	r2, r0
 800a004:	d303      	bcc.n	800a00e <__copybits+0x24>
 800a006:	2300      	movs	r3, #0
 800a008:	428a      	cmp	r2, r1
 800a00a:	d305      	bcc.n	800a018 <__copybits+0x2e>
 800a00c:	bd10      	pop	{r4, pc}
 800a00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a012:	f840 2b04 	str.w	r2, [r0], #4
 800a016:	e7f3      	b.n	800a000 <__copybits+0x16>
 800a018:	f842 3b04 	str.w	r3, [r2], #4
 800a01c:	e7f4      	b.n	800a008 <__copybits+0x1e>

0800a01e <__any_on>:
 800a01e:	f100 0214 	add.w	r2, r0, #20
 800a022:	6900      	ldr	r0, [r0, #16]
 800a024:	114b      	asrs	r3, r1, #5
 800a026:	4298      	cmp	r0, r3
 800a028:	b510      	push	{r4, lr}
 800a02a:	db11      	blt.n	800a050 <__any_on+0x32>
 800a02c:	dd0a      	ble.n	800a044 <__any_on+0x26>
 800a02e:	f011 011f 	ands.w	r1, r1, #31
 800a032:	d007      	beq.n	800a044 <__any_on+0x26>
 800a034:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a038:	fa24 f001 	lsr.w	r0, r4, r1
 800a03c:	fa00 f101 	lsl.w	r1, r0, r1
 800a040:	428c      	cmp	r4, r1
 800a042:	d10b      	bne.n	800a05c <__any_on+0x3e>
 800a044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a048:	4293      	cmp	r3, r2
 800a04a:	d803      	bhi.n	800a054 <__any_on+0x36>
 800a04c:	2000      	movs	r0, #0
 800a04e:	bd10      	pop	{r4, pc}
 800a050:	4603      	mov	r3, r0
 800a052:	e7f7      	b.n	800a044 <__any_on+0x26>
 800a054:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a058:	2900      	cmp	r1, #0
 800a05a:	d0f5      	beq.n	800a048 <__any_on+0x2a>
 800a05c:	2001      	movs	r0, #1
 800a05e:	e7f6      	b.n	800a04e <__any_on+0x30>

0800a060 <_calloc_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	fb02 f401 	mul.w	r4, r2, r1
 800a066:	4621      	mov	r1, r4
 800a068:	f000 f808 	bl	800a07c <_malloc_r>
 800a06c:	4605      	mov	r5, r0
 800a06e:	b118      	cbz	r0, 800a078 <_calloc_r+0x18>
 800a070:	4622      	mov	r2, r4
 800a072:	2100      	movs	r1, #0
 800a074:	f7fe f99f 	bl	80083b6 <memset>
 800a078:	4628      	mov	r0, r5
 800a07a:	bd38      	pop	{r3, r4, r5, pc}

0800a07c <_malloc_r>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	1ccd      	adds	r5, r1, #3
 800a080:	f025 0503 	bic.w	r5, r5, #3
 800a084:	3508      	adds	r5, #8
 800a086:	2d0c      	cmp	r5, #12
 800a088:	bf38      	it	cc
 800a08a:	250c      	movcc	r5, #12
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	4606      	mov	r6, r0
 800a090:	db01      	blt.n	800a096 <_malloc_r+0x1a>
 800a092:	42a9      	cmp	r1, r5
 800a094:	d903      	bls.n	800a09e <_malloc_r+0x22>
 800a096:	230c      	movs	r3, #12
 800a098:	6033      	str	r3, [r6, #0]
 800a09a:	2000      	movs	r0, #0
 800a09c:	bd70      	pop	{r4, r5, r6, pc}
 800a09e:	f000 fb6e 	bl	800a77e <__malloc_lock>
 800a0a2:	4a21      	ldr	r2, [pc, #132]	; (800a128 <_malloc_r+0xac>)
 800a0a4:	6814      	ldr	r4, [r2, #0]
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	b991      	cbnz	r1, 800a0d0 <_malloc_r+0x54>
 800a0aa:	4c20      	ldr	r4, [pc, #128]	; (800a12c <_malloc_r+0xb0>)
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	b91b      	cbnz	r3, 800a0b8 <_malloc_r+0x3c>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f000 fb17 	bl	800a6e4 <_sbrk_r>
 800a0b6:	6020      	str	r0, [r4, #0]
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f000 fb12 	bl	800a6e4 <_sbrk_r>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d124      	bne.n	800a10e <_malloc_r+0x92>
 800a0c4:	230c      	movs	r3, #12
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	f000 fb59 	bl	800a780 <__malloc_unlock>
 800a0ce:	e7e4      	b.n	800a09a <_malloc_r+0x1e>
 800a0d0:	680b      	ldr	r3, [r1, #0]
 800a0d2:	1b5b      	subs	r3, r3, r5
 800a0d4:	d418      	bmi.n	800a108 <_malloc_r+0x8c>
 800a0d6:	2b0b      	cmp	r3, #11
 800a0d8:	d90f      	bls.n	800a0fa <_malloc_r+0x7e>
 800a0da:	600b      	str	r3, [r1, #0]
 800a0dc:	18cc      	adds	r4, r1, r3
 800a0de:	50cd      	str	r5, [r1, r3]
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 fb4d 	bl	800a780 <__malloc_unlock>
 800a0e6:	f104 000b 	add.w	r0, r4, #11
 800a0ea:	1d23      	adds	r3, r4, #4
 800a0ec:	f020 0007 	bic.w	r0, r0, #7
 800a0f0:	1ac3      	subs	r3, r0, r3
 800a0f2:	d0d3      	beq.n	800a09c <_malloc_r+0x20>
 800a0f4:	425a      	negs	r2, r3
 800a0f6:	50e2      	str	r2, [r4, r3]
 800a0f8:	e7d0      	b.n	800a09c <_malloc_r+0x20>
 800a0fa:	684b      	ldr	r3, [r1, #4]
 800a0fc:	428c      	cmp	r4, r1
 800a0fe:	bf16      	itet	ne
 800a100:	6063      	strne	r3, [r4, #4]
 800a102:	6013      	streq	r3, [r2, #0]
 800a104:	460c      	movne	r4, r1
 800a106:	e7eb      	b.n	800a0e0 <_malloc_r+0x64>
 800a108:	460c      	mov	r4, r1
 800a10a:	6849      	ldr	r1, [r1, #4]
 800a10c:	e7cc      	b.n	800a0a8 <_malloc_r+0x2c>
 800a10e:	1cc4      	adds	r4, r0, #3
 800a110:	f024 0403 	bic.w	r4, r4, #3
 800a114:	42a0      	cmp	r0, r4
 800a116:	d005      	beq.n	800a124 <_malloc_r+0xa8>
 800a118:	1a21      	subs	r1, r4, r0
 800a11a:	4630      	mov	r0, r6
 800a11c:	f000 fae2 	bl	800a6e4 <_sbrk_r>
 800a120:	3001      	adds	r0, #1
 800a122:	d0cf      	beq.n	800a0c4 <_malloc_r+0x48>
 800a124:	6025      	str	r5, [r4, #0]
 800a126:	e7db      	b.n	800a0e0 <_malloc_r+0x64>
 800a128:	20000614 	.word	0x20000614
 800a12c:	20000618 	.word	0x20000618

0800a130 <__ssputs_r>:
 800a130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a134:	688e      	ldr	r6, [r1, #8]
 800a136:	4682      	mov	sl, r0
 800a138:	429e      	cmp	r6, r3
 800a13a:	460c      	mov	r4, r1
 800a13c:	4690      	mov	r8, r2
 800a13e:	4699      	mov	r9, r3
 800a140:	d837      	bhi.n	800a1b2 <__ssputs_r+0x82>
 800a142:	898a      	ldrh	r2, [r1, #12]
 800a144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a148:	d031      	beq.n	800a1ae <__ssputs_r+0x7e>
 800a14a:	2302      	movs	r3, #2
 800a14c:	6825      	ldr	r5, [r4, #0]
 800a14e:	6909      	ldr	r1, [r1, #16]
 800a150:	1a6f      	subs	r7, r5, r1
 800a152:	6965      	ldr	r5, [r4, #20]
 800a154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a158:	fb95 f5f3 	sdiv	r5, r5, r3
 800a15c:	f109 0301 	add.w	r3, r9, #1
 800a160:	443b      	add	r3, r7
 800a162:	429d      	cmp	r5, r3
 800a164:	bf38      	it	cc
 800a166:	461d      	movcc	r5, r3
 800a168:	0553      	lsls	r3, r2, #21
 800a16a:	d530      	bpl.n	800a1ce <__ssputs_r+0x9e>
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7ff ff85 	bl	800a07c <_malloc_r>
 800a172:	4606      	mov	r6, r0
 800a174:	b950      	cbnz	r0, 800a18c <__ssputs_r+0x5c>
 800a176:	230c      	movs	r3, #12
 800a178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a17c:	f8ca 3000 	str.w	r3, [sl]
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18c:	463a      	mov	r2, r7
 800a18e:	6921      	ldr	r1, [r4, #16]
 800a190:	f7fe f906 	bl	80083a0 <memcpy>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a19a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	6126      	str	r6, [r4, #16]
 800a1a2:	443e      	add	r6, r7
 800a1a4:	6026      	str	r6, [r4, #0]
 800a1a6:	464e      	mov	r6, r9
 800a1a8:	6165      	str	r5, [r4, #20]
 800a1aa:	1bed      	subs	r5, r5, r7
 800a1ac:	60a5      	str	r5, [r4, #8]
 800a1ae:	454e      	cmp	r6, r9
 800a1b0:	d900      	bls.n	800a1b4 <__ssputs_r+0x84>
 800a1b2:	464e      	mov	r6, r9
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	6820      	ldr	r0, [r4, #0]
 800a1ba:	f000 fac7 	bl	800a74c <memmove>
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	1b9b      	subs	r3, r3, r6
 800a1c4:	60a3      	str	r3, [r4, #8]
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	441e      	add	r6, r3
 800a1ca:	6026      	str	r6, [r4, #0]
 800a1cc:	e7dc      	b.n	800a188 <__ssputs_r+0x58>
 800a1ce:	462a      	mov	r2, r5
 800a1d0:	f000 fb24 	bl	800a81c <_realloc_r>
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	d1e2      	bne.n	800a1a0 <__ssputs_r+0x70>
 800a1da:	6921      	ldr	r1, [r4, #16]
 800a1dc:	4650      	mov	r0, sl
 800a1de:	f000 fad1 	bl	800a784 <_free_r>
 800a1e2:	e7c8      	b.n	800a176 <__ssputs_r+0x46>

0800a1e4 <_svfiprintf_r>:
 800a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	461d      	mov	r5, r3
 800a1ea:	898b      	ldrh	r3, [r1, #12]
 800a1ec:	b09d      	sub	sp, #116	; 0x74
 800a1ee:	061f      	lsls	r7, r3, #24
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	d50f      	bpl.n	800a218 <_svfiprintf_r+0x34>
 800a1f8:	690b      	ldr	r3, [r1, #16]
 800a1fa:	b96b      	cbnz	r3, 800a218 <_svfiprintf_r+0x34>
 800a1fc:	2140      	movs	r1, #64	; 0x40
 800a1fe:	f7ff ff3d 	bl	800a07c <_malloc_r>
 800a202:	6020      	str	r0, [r4, #0]
 800a204:	6120      	str	r0, [r4, #16]
 800a206:	b928      	cbnz	r0, 800a214 <_svfiprintf_r+0x30>
 800a208:	230c      	movs	r3, #12
 800a20a:	f8c8 3000 	str.w	r3, [r8]
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a212:	e0c8      	b.n	800a3a6 <_svfiprintf_r+0x1c2>
 800a214:	2340      	movs	r3, #64	; 0x40
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	2300      	movs	r3, #0
 800a21a:	9309      	str	r3, [sp, #36]	; 0x24
 800a21c:	2320      	movs	r3, #32
 800a21e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a222:	2330      	movs	r3, #48	; 0x30
 800a224:	f04f 0b01 	mov.w	fp, #1
 800a228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a22c:	9503      	str	r5, [sp, #12]
 800a22e:	4637      	mov	r7, r6
 800a230:	463d      	mov	r5, r7
 800a232:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a236:	b10b      	cbz	r3, 800a23c <_svfiprintf_r+0x58>
 800a238:	2b25      	cmp	r3, #37	; 0x25
 800a23a:	d13e      	bne.n	800a2ba <_svfiprintf_r+0xd6>
 800a23c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a240:	d00b      	beq.n	800a25a <_svfiprintf_r+0x76>
 800a242:	4653      	mov	r3, sl
 800a244:	4632      	mov	r2, r6
 800a246:	4621      	mov	r1, r4
 800a248:	4640      	mov	r0, r8
 800a24a:	f7ff ff71 	bl	800a130 <__ssputs_r>
 800a24e:	3001      	adds	r0, #1
 800a250:	f000 80a4 	beq.w	800a39c <_svfiprintf_r+0x1b8>
 800a254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a256:	4453      	add	r3, sl
 800a258:	9309      	str	r3, [sp, #36]	; 0x24
 800a25a:	783b      	ldrb	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 809d 	beq.w	800a39c <_svfiprintf_r+0x1b8>
 800a262:	2300      	movs	r3, #0
 800a264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a274:	931a      	str	r3, [sp, #104]	; 0x68
 800a276:	462f      	mov	r7, r5
 800a278:	2205      	movs	r2, #5
 800a27a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a27e:	4850      	ldr	r0, [pc, #320]	; (800a3c0 <_svfiprintf_r+0x1dc>)
 800a280:	f000 fa56 	bl	800a730 <memchr>
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	b9d0      	cbnz	r0, 800a2be <_svfiprintf_r+0xda>
 800a288:	06d9      	lsls	r1, r3, #27
 800a28a:	bf44      	itt	mi
 800a28c:	2220      	movmi	r2, #32
 800a28e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a292:	071a      	lsls	r2, r3, #28
 800a294:	bf44      	itt	mi
 800a296:	222b      	movmi	r2, #43	; 0x2b
 800a298:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a29c:	782a      	ldrb	r2, [r5, #0]
 800a29e:	2a2a      	cmp	r2, #42	; 0x2a
 800a2a0:	d015      	beq.n	800a2ce <_svfiprintf_r+0xea>
 800a2a2:	462f      	mov	r7, r5
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	250a      	movs	r5, #10
 800a2a8:	9a07      	ldr	r2, [sp, #28]
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2b0:	3b30      	subs	r3, #48	; 0x30
 800a2b2:	2b09      	cmp	r3, #9
 800a2b4:	d94d      	bls.n	800a352 <_svfiprintf_r+0x16e>
 800a2b6:	b1b8      	cbz	r0, 800a2e8 <_svfiprintf_r+0x104>
 800a2b8:	e00f      	b.n	800a2da <_svfiprintf_r+0xf6>
 800a2ba:	462f      	mov	r7, r5
 800a2bc:	e7b8      	b.n	800a230 <_svfiprintf_r+0x4c>
 800a2be:	4a40      	ldr	r2, [pc, #256]	; (800a3c0 <_svfiprintf_r+0x1dc>)
 800a2c0:	463d      	mov	r5, r7
 800a2c2:	1a80      	subs	r0, r0, r2
 800a2c4:	fa0b f000 	lsl.w	r0, fp, r0
 800a2c8:	4318      	orrs	r0, r3
 800a2ca:	9004      	str	r0, [sp, #16]
 800a2cc:	e7d3      	b.n	800a276 <_svfiprintf_r+0x92>
 800a2ce:	9a03      	ldr	r2, [sp, #12]
 800a2d0:	1d11      	adds	r1, r2, #4
 800a2d2:	6812      	ldr	r2, [r2, #0]
 800a2d4:	9103      	str	r1, [sp, #12]
 800a2d6:	2a00      	cmp	r2, #0
 800a2d8:	db01      	blt.n	800a2de <_svfiprintf_r+0xfa>
 800a2da:	9207      	str	r2, [sp, #28]
 800a2dc:	e004      	b.n	800a2e8 <_svfiprintf_r+0x104>
 800a2de:	4252      	negs	r2, r2
 800a2e0:	f043 0302 	orr.w	r3, r3, #2
 800a2e4:	9207      	str	r2, [sp, #28]
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	783b      	ldrb	r3, [r7, #0]
 800a2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a2ec:	d10c      	bne.n	800a308 <_svfiprintf_r+0x124>
 800a2ee:	787b      	ldrb	r3, [r7, #1]
 800a2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f2:	d133      	bne.n	800a35c <_svfiprintf_r+0x178>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	3702      	adds	r7, #2
 800a2f8:	1d1a      	adds	r2, r3, #4
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	9203      	str	r2, [sp, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	bfb8      	it	lt
 800a302:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a306:	9305      	str	r3, [sp, #20]
 800a308:	4d2e      	ldr	r5, [pc, #184]	; (800a3c4 <_svfiprintf_r+0x1e0>)
 800a30a:	2203      	movs	r2, #3
 800a30c:	7839      	ldrb	r1, [r7, #0]
 800a30e:	4628      	mov	r0, r5
 800a310:	f000 fa0e 	bl	800a730 <memchr>
 800a314:	b138      	cbz	r0, 800a326 <_svfiprintf_r+0x142>
 800a316:	2340      	movs	r3, #64	; 0x40
 800a318:	1b40      	subs	r0, r0, r5
 800a31a:	fa03 f000 	lsl.w	r0, r3, r0
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	3701      	adds	r7, #1
 800a322:	4303      	orrs	r3, r0
 800a324:	9304      	str	r3, [sp, #16]
 800a326:	7839      	ldrb	r1, [r7, #0]
 800a328:	2206      	movs	r2, #6
 800a32a:	4827      	ldr	r0, [pc, #156]	; (800a3c8 <_svfiprintf_r+0x1e4>)
 800a32c:	1c7e      	adds	r6, r7, #1
 800a32e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a332:	f000 f9fd 	bl	800a730 <memchr>
 800a336:	2800      	cmp	r0, #0
 800a338:	d038      	beq.n	800a3ac <_svfiprintf_r+0x1c8>
 800a33a:	4b24      	ldr	r3, [pc, #144]	; (800a3cc <_svfiprintf_r+0x1e8>)
 800a33c:	bb13      	cbnz	r3, 800a384 <_svfiprintf_r+0x1a0>
 800a33e:	9b03      	ldr	r3, [sp, #12]
 800a340:	3307      	adds	r3, #7
 800a342:	f023 0307 	bic.w	r3, r3, #7
 800a346:	3308      	adds	r3, #8
 800a348:	9303      	str	r3, [sp, #12]
 800a34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34c:	444b      	add	r3, r9
 800a34e:	9309      	str	r3, [sp, #36]	; 0x24
 800a350:	e76d      	b.n	800a22e <_svfiprintf_r+0x4a>
 800a352:	fb05 3202 	mla	r2, r5, r2, r3
 800a356:	2001      	movs	r0, #1
 800a358:	460f      	mov	r7, r1
 800a35a:	e7a6      	b.n	800a2aa <_svfiprintf_r+0xc6>
 800a35c:	2300      	movs	r3, #0
 800a35e:	250a      	movs	r5, #10
 800a360:	4619      	mov	r1, r3
 800a362:	3701      	adds	r7, #1
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	4638      	mov	r0, r7
 800a368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a36c:	3a30      	subs	r2, #48	; 0x30
 800a36e:	2a09      	cmp	r2, #9
 800a370:	d903      	bls.n	800a37a <_svfiprintf_r+0x196>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0c8      	beq.n	800a308 <_svfiprintf_r+0x124>
 800a376:	9105      	str	r1, [sp, #20]
 800a378:	e7c6      	b.n	800a308 <_svfiprintf_r+0x124>
 800a37a:	fb05 2101 	mla	r1, r5, r1, r2
 800a37e:	2301      	movs	r3, #1
 800a380:	4607      	mov	r7, r0
 800a382:	e7f0      	b.n	800a366 <_svfiprintf_r+0x182>
 800a384:	ab03      	add	r3, sp, #12
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4622      	mov	r2, r4
 800a38a:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <_svfiprintf_r+0x1ec>)
 800a38c:	a904      	add	r1, sp, #16
 800a38e:	4640      	mov	r0, r8
 800a390:	f3af 8000 	nop.w
 800a394:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a398:	4681      	mov	r9, r0
 800a39a:	d1d6      	bne.n	800a34a <_svfiprintf_r+0x166>
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	065b      	lsls	r3, r3, #25
 800a3a0:	f53f af35 	bmi.w	800a20e <_svfiprintf_r+0x2a>
 800a3a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3a6:	b01d      	add	sp, #116	; 0x74
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ac:	ab03      	add	r3, sp, #12
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <_svfiprintf_r+0x1ec>)
 800a3b4:	a904      	add	r1, sp, #16
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	f000 f882 	bl	800a4c0 <_printf_i>
 800a3bc:	e7ea      	b.n	800a394 <_svfiprintf_r+0x1b0>
 800a3be:	bf00      	nop
 800a3c0:	0800aafc 	.word	0x0800aafc
 800a3c4:	0800ab02 	.word	0x0800ab02
 800a3c8:	0800ab06 	.word	0x0800ab06
 800a3cc:	00000000 	.word	0x00000000
 800a3d0:	0800a131 	.word	0x0800a131

0800a3d4 <_printf_common>:
 800a3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d8:	4691      	mov	r9, r2
 800a3da:	461f      	mov	r7, r3
 800a3dc:	688a      	ldr	r2, [r1, #8]
 800a3de:	690b      	ldr	r3, [r1, #16]
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	bfb8      	it	lt
 800a3e6:	4613      	movlt	r3, r2
 800a3e8:	f8c9 3000 	str.w	r3, [r9]
 800a3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3f6:	b112      	cbz	r2, 800a3fe <_printf_common+0x2a>
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	f8c9 3000 	str.w	r3, [r9]
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	0699      	lsls	r1, r3, #26
 800a402:	bf42      	ittt	mi
 800a404:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a408:	3302      	addmi	r3, #2
 800a40a:	f8c9 3000 	strmi.w	r3, [r9]
 800a40e:	6825      	ldr	r5, [r4, #0]
 800a410:	f015 0506 	ands.w	r5, r5, #6
 800a414:	d107      	bne.n	800a426 <_printf_common+0x52>
 800a416:	f104 0a19 	add.w	sl, r4, #25
 800a41a:	68e3      	ldr	r3, [r4, #12]
 800a41c:	f8d9 2000 	ldr.w	r2, [r9]
 800a420:	1a9b      	subs	r3, r3, r2
 800a422:	42ab      	cmp	r3, r5
 800a424:	dc29      	bgt.n	800a47a <_printf_common+0xa6>
 800a426:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a42a:	6822      	ldr	r2, [r4, #0]
 800a42c:	3300      	adds	r3, #0
 800a42e:	bf18      	it	ne
 800a430:	2301      	movne	r3, #1
 800a432:	0692      	lsls	r2, r2, #26
 800a434:	d42e      	bmi.n	800a494 <_printf_common+0xc0>
 800a436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a43a:	4639      	mov	r1, r7
 800a43c:	4630      	mov	r0, r6
 800a43e:	47c0      	blx	r8
 800a440:	3001      	adds	r0, #1
 800a442:	d021      	beq.n	800a488 <_printf_common+0xb4>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	68e5      	ldr	r5, [r4, #12]
 800a448:	f003 0306 	and.w	r3, r3, #6
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	bf18      	it	ne
 800a450:	2500      	movne	r5, #0
 800a452:	f8d9 2000 	ldr.w	r2, [r9]
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	bf08      	it	eq
 800a45c:	1aad      	subeq	r5, r5, r2
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	6922      	ldr	r2, [r4, #16]
 800a462:	bf08      	it	eq
 800a464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a468:	4293      	cmp	r3, r2
 800a46a:	bfc4      	itt	gt
 800a46c:	1a9b      	subgt	r3, r3, r2
 800a46e:	18ed      	addgt	r5, r5, r3
 800a470:	341a      	adds	r4, #26
 800a472:	454d      	cmp	r5, r9
 800a474:	d11a      	bne.n	800a4ac <_printf_common+0xd8>
 800a476:	2000      	movs	r0, #0
 800a478:	e008      	b.n	800a48c <_printf_common+0xb8>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4652      	mov	r2, sl
 800a47e:	4639      	mov	r1, r7
 800a480:	4630      	mov	r0, r6
 800a482:	47c0      	blx	r8
 800a484:	3001      	adds	r0, #1
 800a486:	d103      	bne.n	800a490 <_printf_common+0xbc>
 800a488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a490:	3501      	adds	r5, #1
 800a492:	e7c2      	b.n	800a41a <_printf_common+0x46>
 800a494:	2030      	movs	r0, #48	; 0x30
 800a496:	18e1      	adds	r1, r4, r3
 800a498:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4a2:	4422      	add	r2, r4
 800a4a4:	3302      	adds	r3, #2
 800a4a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4aa:	e7c4      	b.n	800a436 <_printf_common+0x62>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	47c0      	blx	r8
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d0e6      	beq.n	800a488 <_printf_common+0xb4>
 800a4ba:	f109 0901 	add.w	r9, r9, #1
 800a4be:	e7d8      	b.n	800a472 <_printf_common+0x9e>

0800a4c0 <_printf_i>:
 800a4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	7e09      	ldrb	r1, [r1, #24]
 800a4cc:	b085      	sub	sp, #20
 800a4ce:	296e      	cmp	r1, #110	; 0x6e
 800a4d0:	4617      	mov	r7, r2
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	4698      	mov	r8, r3
 800a4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4d8:	f000 80b3 	beq.w	800a642 <_printf_i+0x182>
 800a4dc:	d822      	bhi.n	800a524 <_printf_i+0x64>
 800a4de:	2963      	cmp	r1, #99	; 0x63
 800a4e0:	d036      	beq.n	800a550 <_printf_i+0x90>
 800a4e2:	d80a      	bhi.n	800a4fa <_printf_i+0x3a>
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	f000 80b9 	beq.w	800a65c <_printf_i+0x19c>
 800a4ea:	2958      	cmp	r1, #88	; 0x58
 800a4ec:	f000 8083 	beq.w	800a5f6 <_printf_i+0x136>
 800a4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a4f8:	e032      	b.n	800a560 <_printf_i+0xa0>
 800a4fa:	2964      	cmp	r1, #100	; 0x64
 800a4fc:	d001      	beq.n	800a502 <_printf_i+0x42>
 800a4fe:	2969      	cmp	r1, #105	; 0x69
 800a500:	d1f6      	bne.n	800a4f0 <_printf_i+0x30>
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	6813      	ldr	r3, [r2, #0]
 800a506:	0605      	lsls	r5, r0, #24
 800a508:	f103 0104 	add.w	r1, r3, #4
 800a50c:	d52a      	bpl.n	800a564 <_printf_i+0xa4>
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	da03      	bge.n	800a51e <_printf_i+0x5e>
 800a516:	222d      	movs	r2, #45	; 0x2d
 800a518:	425b      	negs	r3, r3
 800a51a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a51e:	486f      	ldr	r0, [pc, #444]	; (800a6dc <_printf_i+0x21c>)
 800a520:	220a      	movs	r2, #10
 800a522:	e039      	b.n	800a598 <_printf_i+0xd8>
 800a524:	2973      	cmp	r1, #115	; 0x73
 800a526:	f000 809d 	beq.w	800a664 <_printf_i+0x1a4>
 800a52a:	d808      	bhi.n	800a53e <_printf_i+0x7e>
 800a52c:	296f      	cmp	r1, #111	; 0x6f
 800a52e:	d020      	beq.n	800a572 <_printf_i+0xb2>
 800a530:	2970      	cmp	r1, #112	; 0x70
 800a532:	d1dd      	bne.n	800a4f0 <_printf_i+0x30>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	f043 0320 	orr.w	r3, r3, #32
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	e003      	b.n	800a546 <_printf_i+0x86>
 800a53e:	2975      	cmp	r1, #117	; 0x75
 800a540:	d017      	beq.n	800a572 <_printf_i+0xb2>
 800a542:	2978      	cmp	r1, #120	; 0x78
 800a544:	d1d4      	bne.n	800a4f0 <_printf_i+0x30>
 800a546:	2378      	movs	r3, #120	; 0x78
 800a548:	4865      	ldr	r0, [pc, #404]	; (800a6e0 <_printf_i+0x220>)
 800a54a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a54e:	e055      	b.n	800a5fc <_printf_i+0x13c>
 800a550:	6813      	ldr	r3, [r2, #0]
 800a552:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a556:	1d19      	adds	r1, r3, #4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6011      	str	r1, [r2, #0]
 800a55c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a560:	2301      	movs	r3, #1
 800a562:	e08c      	b.n	800a67e <_printf_i+0x1be>
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a56a:	6011      	str	r1, [r2, #0]
 800a56c:	bf18      	it	ne
 800a56e:	b21b      	sxthne	r3, r3
 800a570:	e7cf      	b.n	800a512 <_printf_i+0x52>
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	6825      	ldr	r5, [r4, #0]
 800a576:	1d18      	adds	r0, r3, #4
 800a578:	6010      	str	r0, [r2, #0]
 800a57a:	0628      	lsls	r0, r5, #24
 800a57c:	d501      	bpl.n	800a582 <_printf_i+0xc2>
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	e002      	b.n	800a588 <_printf_i+0xc8>
 800a582:	0668      	lsls	r0, r5, #25
 800a584:	d5fb      	bpl.n	800a57e <_printf_i+0xbe>
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	296f      	cmp	r1, #111	; 0x6f
 800a58a:	bf14      	ite	ne
 800a58c:	220a      	movne	r2, #10
 800a58e:	2208      	moveq	r2, #8
 800a590:	4852      	ldr	r0, [pc, #328]	; (800a6dc <_printf_i+0x21c>)
 800a592:	2100      	movs	r1, #0
 800a594:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a598:	6865      	ldr	r5, [r4, #4]
 800a59a:	2d00      	cmp	r5, #0
 800a59c:	60a5      	str	r5, [r4, #8]
 800a59e:	f2c0 8095 	blt.w	800a6cc <_printf_i+0x20c>
 800a5a2:	6821      	ldr	r1, [r4, #0]
 800a5a4:	f021 0104 	bic.w	r1, r1, #4
 800a5a8:	6021      	str	r1, [r4, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d13d      	bne.n	800a62a <_printf_i+0x16a>
 800a5ae:	2d00      	cmp	r5, #0
 800a5b0:	f040 808e 	bne.w	800a6d0 <_printf_i+0x210>
 800a5b4:	4665      	mov	r5, ip
 800a5b6:	2a08      	cmp	r2, #8
 800a5b8:	d10b      	bne.n	800a5d2 <_printf_i+0x112>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	07db      	lsls	r3, r3, #31
 800a5be:	d508      	bpl.n	800a5d2 <_printf_i+0x112>
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	6862      	ldr	r2, [r4, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	bfde      	ittt	le
 800a5c8:	2330      	movle	r3, #48	; 0x30
 800a5ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5d2:	ebac 0305 	sub.w	r3, ip, r5
 800a5d6:	6123      	str	r3, [r4, #16]
 800a5d8:	f8cd 8000 	str.w	r8, [sp]
 800a5dc:	463b      	mov	r3, r7
 800a5de:	aa03      	add	r2, sp, #12
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f7ff fef6 	bl	800a3d4 <_printf_common>
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d14d      	bne.n	800a688 <_printf_i+0x1c8>
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f0:	b005      	add	sp, #20
 800a5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5f6:	4839      	ldr	r0, [pc, #228]	; (800a6dc <_printf_i+0x21c>)
 800a5f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a5fc:	6813      	ldr	r3, [r2, #0]
 800a5fe:	6821      	ldr	r1, [r4, #0]
 800a600:	1d1d      	adds	r5, r3, #4
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6015      	str	r5, [r2, #0]
 800a606:	060a      	lsls	r2, r1, #24
 800a608:	d50b      	bpl.n	800a622 <_printf_i+0x162>
 800a60a:	07ca      	lsls	r2, r1, #31
 800a60c:	bf44      	itt	mi
 800a60e:	f041 0120 	orrmi.w	r1, r1, #32
 800a612:	6021      	strmi	r1, [r4, #0]
 800a614:	b91b      	cbnz	r3, 800a61e <_printf_i+0x15e>
 800a616:	6822      	ldr	r2, [r4, #0]
 800a618:	f022 0220 	bic.w	r2, r2, #32
 800a61c:	6022      	str	r2, [r4, #0]
 800a61e:	2210      	movs	r2, #16
 800a620:	e7b7      	b.n	800a592 <_printf_i+0xd2>
 800a622:	064d      	lsls	r5, r1, #25
 800a624:	bf48      	it	mi
 800a626:	b29b      	uxthmi	r3, r3
 800a628:	e7ef      	b.n	800a60a <_printf_i+0x14a>
 800a62a:	4665      	mov	r5, ip
 800a62c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a630:	fb02 3311 	mls	r3, r2, r1, r3
 800a634:	5cc3      	ldrb	r3, [r0, r3]
 800a636:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a63a:	460b      	mov	r3, r1
 800a63c:	2900      	cmp	r1, #0
 800a63e:	d1f5      	bne.n	800a62c <_printf_i+0x16c>
 800a640:	e7b9      	b.n	800a5b6 <_printf_i+0xf6>
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	6825      	ldr	r5, [r4, #0]
 800a646:	1d18      	adds	r0, r3, #4
 800a648:	6961      	ldr	r1, [r4, #20]
 800a64a:	6010      	str	r0, [r2, #0]
 800a64c:	0628      	lsls	r0, r5, #24
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	d501      	bpl.n	800a656 <_printf_i+0x196>
 800a652:	6019      	str	r1, [r3, #0]
 800a654:	e002      	b.n	800a65c <_printf_i+0x19c>
 800a656:	066a      	lsls	r2, r5, #25
 800a658:	d5fb      	bpl.n	800a652 <_printf_i+0x192>
 800a65a:	8019      	strh	r1, [r3, #0]
 800a65c:	2300      	movs	r3, #0
 800a65e:	4665      	mov	r5, ip
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	e7b9      	b.n	800a5d8 <_printf_i+0x118>
 800a664:	6813      	ldr	r3, [r2, #0]
 800a666:	1d19      	adds	r1, r3, #4
 800a668:	6011      	str	r1, [r2, #0]
 800a66a:	681d      	ldr	r5, [r3, #0]
 800a66c:	6862      	ldr	r2, [r4, #4]
 800a66e:	2100      	movs	r1, #0
 800a670:	4628      	mov	r0, r5
 800a672:	f000 f85d 	bl	800a730 <memchr>
 800a676:	b108      	cbz	r0, 800a67c <_printf_i+0x1bc>
 800a678:	1b40      	subs	r0, r0, r5
 800a67a:	6060      	str	r0, [r4, #4]
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	6123      	str	r3, [r4, #16]
 800a680:	2300      	movs	r3, #0
 800a682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a686:	e7a7      	b.n	800a5d8 <_printf_i+0x118>
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	462a      	mov	r2, r5
 800a68c:	4639      	mov	r1, r7
 800a68e:	4630      	mov	r0, r6
 800a690:	47c0      	blx	r8
 800a692:	3001      	adds	r0, #1
 800a694:	d0aa      	beq.n	800a5ec <_printf_i+0x12c>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	079b      	lsls	r3, r3, #30
 800a69a:	d413      	bmi.n	800a6c4 <_printf_i+0x204>
 800a69c:	68e0      	ldr	r0, [r4, #12]
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	4298      	cmp	r0, r3
 800a6a2:	bfb8      	it	lt
 800a6a4:	4618      	movlt	r0, r3
 800a6a6:	e7a3      	b.n	800a5f0 <_printf_i+0x130>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	464a      	mov	r2, r9
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	47c0      	blx	r8
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d09a      	beq.n	800a5ec <_printf_i+0x12c>
 800a6b6:	3501      	adds	r5, #1
 800a6b8:	68e3      	ldr	r3, [r4, #12]
 800a6ba:	9a03      	ldr	r2, [sp, #12]
 800a6bc:	1a9b      	subs	r3, r3, r2
 800a6be:	42ab      	cmp	r3, r5
 800a6c0:	dcf2      	bgt.n	800a6a8 <_printf_i+0x1e8>
 800a6c2:	e7eb      	b.n	800a69c <_printf_i+0x1dc>
 800a6c4:	2500      	movs	r5, #0
 800a6c6:	f104 0919 	add.w	r9, r4, #25
 800a6ca:	e7f5      	b.n	800a6b8 <_printf_i+0x1f8>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1ac      	bne.n	800a62a <_printf_i+0x16a>
 800a6d0:	7803      	ldrb	r3, [r0, #0]
 800a6d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6da:	e76c      	b.n	800a5b6 <_printf_i+0xf6>
 800a6dc:	0800ab0d 	.word	0x0800ab0d
 800a6e0:	0800ab1e 	.word	0x0800ab1e

0800a6e4 <_sbrk_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4c05      	ldr	r4, [pc, #20]	; (800a700 <_sbrk_r+0x1c>)
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	6023      	str	r3, [r4, #0]
 800a6f0:	f7f7 fbf2 	bl	8001ed8 <_sbrk>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_sbrk_r+0x1a>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_sbrk_r+0x1a>
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20001da0 	.word	0x20001da0

0800a704 <__ascii_wctomb>:
 800a704:	b149      	cbz	r1, 800a71a <__ascii_wctomb+0x16>
 800a706:	2aff      	cmp	r2, #255	; 0xff
 800a708:	bf8b      	itete	hi
 800a70a:	238a      	movhi	r3, #138	; 0x8a
 800a70c:	700a      	strbls	r2, [r1, #0]
 800a70e:	6003      	strhi	r3, [r0, #0]
 800a710:	2001      	movls	r0, #1
 800a712:	bf88      	it	hi
 800a714:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a718:	4770      	bx	lr
 800a71a:	4608      	mov	r0, r1
 800a71c:	4770      	bx	lr
	...

0800a720 <malloc>:
 800a720:	4b02      	ldr	r3, [pc, #8]	; (800a72c <malloc+0xc>)
 800a722:	4601      	mov	r1, r0
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	f7ff bca9 	b.w	800a07c <_malloc_r>
 800a72a:	bf00      	nop
 800a72c:	2000017c 	.word	0x2000017c

0800a730 <memchr>:
 800a730:	b510      	push	{r4, lr}
 800a732:	b2c9      	uxtb	r1, r1
 800a734:	4402      	add	r2, r0
 800a736:	4290      	cmp	r0, r2
 800a738:	4603      	mov	r3, r0
 800a73a:	d101      	bne.n	800a740 <memchr+0x10>
 800a73c:	2300      	movs	r3, #0
 800a73e:	e003      	b.n	800a748 <memchr+0x18>
 800a740:	781c      	ldrb	r4, [r3, #0]
 800a742:	3001      	adds	r0, #1
 800a744:	428c      	cmp	r4, r1
 800a746:	d1f6      	bne.n	800a736 <memchr+0x6>
 800a748:	4618      	mov	r0, r3
 800a74a:	bd10      	pop	{r4, pc}

0800a74c <memmove>:
 800a74c:	4288      	cmp	r0, r1
 800a74e:	b510      	push	{r4, lr}
 800a750:	eb01 0302 	add.w	r3, r1, r2
 800a754:	d807      	bhi.n	800a766 <memmove+0x1a>
 800a756:	1e42      	subs	r2, r0, #1
 800a758:	4299      	cmp	r1, r3
 800a75a:	d00a      	beq.n	800a772 <memmove+0x26>
 800a75c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a760:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a764:	e7f8      	b.n	800a758 <memmove+0xc>
 800a766:	4283      	cmp	r3, r0
 800a768:	d9f5      	bls.n	800a756 <memmove+0xa>
 800a76a:	1881      	adds	r1, r0, r2
 800a76c:	1ad2      	subs	r2, r2, r3
 800a76e:	42d3      	cmn	r3, r2
 800a770:	d100      	bne.n	800a774 <memmove+0x28>
 800a772:	bd10      	pop	{r4, pc}
 800a774:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a778:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a77c:	e7f7      	b.n	800a76e <memmove+0x22>

0800a77e <__malloc_lock>:
 800a77e:	4770      	bx	lr

0800a780 <__malloc_unlock>:
 800a780:	4770      	bx	lr
	...

0800a784 <_free_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4605      	mov	r5, r0
 800a788:	2900      	cmp	r1, #0
 800a78a:	d043      	beq.n	800a814 <_free_r+0x90>
 800a78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a790:	1f0c      	subs	r4, r1, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfb8      	it	lt
 800a796:	18e4      	addlt	r4, r4, r3
 800a798:	f7ff fff1 	bl	800a77e <__malloc_lock>
 800a79c:	4a1e      	ldr	r2, [pc, #120]	; (800a818 <_free_r+0x94>)
 800a79e:	6813      	ldr	r3, [r2, #0]
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	b933      	cbnz	r3, 800a7b2 <_free_r+0x2e>
 800a7a4:	6063      	str	r3, [r4, #4]
 800a7a6:	6014      	str	r4, [r2, #0]
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ae:	f7ff bfe7 	b.w	800a780 <__malloc_unlock>
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	d90b      	bls.n	800a7ce <_free_r+0x4a>
 800a7b6:	6821      	ldr	r1, [r4, #0]
 800a7b8:	1862      	adds	r2, r4, r1
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	bf01      	itttt	eq
 800a7be:	681a      	ldreq	r2, [r3, #0]
 800a7c0:	685b      	ldreq	r3, [r3, #4]
 800a7c2:	1852      	addeq	r2, r2, r1
 800a7c4:	6022      	streq	r2, [r4, #0]
 800a7c6:	6063      	str	r3, [r4, #4]
 800a7c8:	6004      	str	r4, [r0, #0]
 800a7ca:	e7ed      	b.n	800a7a8 <_free_r+0x24>
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	b10a      	cbz	r2, 800a7d6 <_free_r+0x52>
 800a7d2:	42a2      	cmp	r2, r4
 800a7d4:	d9fa      	bls.n	800a7cc <_free_r+0x48>
 800a7d6:	6819      	ldr	r1, [r3, #0]
 800a7d8:	1858      	adds	r0, r3, r1
 800a7da:	42a0      	cmp	r0, r4
 800a7dc:	d10b      	bne.n	800a7f6 <_free_r+0x72>
 800a7de:	6820      	ldr	r0, [r4, #0]
 800a7e0:	4401      	add	r1, r0
 800a7e2:	1858      	adds	r0, r3, r1
 800a7e4:	4282      	cmp	r2, r0
 800a7e6:	6019      	str	r1, [r3, #0]
 800a7e8:	d1de      	bne.n	800a7a8 <_free_r+0x24>
 800a7ea:	6810      	ldr	r0, [r2, #0]
 800a7ec:	6852      	ldr	r2, [r2, #4]
 800a7ee:	4401      	add	r1, r0
 800a7f0:	6019      	str	r1, [r3, #0]
 800a7f2:	605a      	str	r2, [r3, #4]
 800a7f4:	e7d8      	b.n	800a7a8 <_free_r+0x24>
 800a7f6:	d902      	bls.n	800a7fe <_free_r+0x7a>
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	602b      	str	r3, [r5, #0]
 800a7fc:	e7d4      	b.n	800a7a8 <_free_r+0x24>
 800a7fe:	6820      	ldr	r0, [r4, #0]
 800a800:	1821      	adds	r1, r4, r0
 800a802:	428a      	cmp	r2, r1
 800a804:	bf01      	itttt	eq
 800a806:	6811      	ldreq	r1, [r2, #0]
 800a808:	6852      	ldreq	r2, [r2, #4]
 800a80a:	1809      	addeq	r1, r1, r0
 800a80c:	6021      	streq	r1, [r4, #0]
 800a80e:	6062      	str	r2, [r4, #4]
 800a810:	605c      	str	r4, [r3, #4]
 800a812:	e7c9      	b.n	800a7a8 <_free_r+0x24>
 800a814:	bd38      	pop	{r3, r4, r5, pc}
 800a816:	bf00      	nop
 800a818:	20000614 	.word	0x20000614

0800a81c <_realloc_r>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	4607      	mov	r7, r0
 800a820:	4614      	mov	r4, r2
 800a822:	460e      	mov	r6, r1
 800a824:	b921      	cbnz	r1, 800a830 <_realloc_r+0x14>
 800a826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a82a:	4611      	mov	r1, r2
 800a82c:	f7ff bc26 	b.w	800a07c <_malloc_r>
 800a830:	b922      	cbnz	r2, 800a83c <_realloc_r+0x20>
 800a832:	f7ff ffa7 	bl	800a784 <_free_r>
 800a836:	4625      	mov	r5, r4
 800a838:	4628      	mov	r0, r5
 800a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a83c:	f000 f814 	bl	800a868 <_malloc_usable_size_r>
 800a840:	42a0      	cmp	r0, r4
 800a842:	d20f      	bcs.n	800a864 <_realloc_r+0x48>
 800a844:	4621      	mov	r1, r4
 800a846:	4638      	mov	r0, r7
 800a848:	f7ff fc18 	bl	800a07c <_malloc_r>
 800a84c:	4605      	mov	r5, r0
 800a84e:	2800      	cmp	r0, #0
 800a850:	d0f2      	beq.n	800a838 <_realloc_r+0x1c>
 800a852:	4631      	mov	r1, r6
 800a854:	4622      	mov	r2, r4
 800a856:	f7fd fda3 	bl	80083a0 <memcpy>
 800a85a:	4631      	mov	r1, r6
 800a85c:	4638      	mov	r0, r7
 800a85e:	f7ff ff91 	bl	800a784 <_free_r>
 800a862:	e7e9      	b.n	800a838 <_realloc_r+0x1c>
 800a864:	4635      	mov	r5, r6
 800a866:	e7e7      	b.n	800a838 <_realloc_r+0x1c>

0800a868 <_malloc_usable_size_r>:
 800a868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a86c:	1f18      	subs	r0, r3, #4
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbc      	itt	lt
 800a872:	580b      	ldrlt	r3, [r1, r0]
 800a874:	18c0      	addlt	r0, r0, r3
 800a876:	4770      	bx	lr

0800a878 <_init>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

0800a884 <_fini>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr
