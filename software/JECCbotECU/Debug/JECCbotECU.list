
JECCbotECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a78c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800a8a0  0800a8a0  0001a8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf8  0800abf8  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800abf8  0800abf8  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abf8  0800abf8  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800ac00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000197c  2000034c  0800af4c  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001cc8  0800af4c  00021cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c92d  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cb8  00000000  00000000  0003cca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  00040960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  00041f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d2b  00000000  00000000  00043390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001315f  00000000  00000000  0005c0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a033  00000000  00000000  0006f21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e924d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  000e92c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a884 	.word	0x0800a884

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800a884 	.word	0x0800a884

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <apiInit>:
bool apiLocked;

ApiInstruction apiInstruction;

void apiInit()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e00c      	b.n	8000b62 <apiInit+0x26>
	{
		apiMemory[i] = 0;
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <apiInit+0x44>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		apiWriteables[i] = true;
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <apiInit+0x48>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b68:	dbee      	blt.n	8000b48 <apiInit+0xc>
	}

	apiInstruction.set = false;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <apiInit+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
	apiLocked = false;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <apiInit+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	20000764 	.word	0x20000764
 8000b84:	200005a0 	.word	0x200005a0
 8000b88:	20000730 	.word	0x20000730
 8000b8c:	2000059c 	.word	0x2000059c

08000b90 <apiSetInstruction>:

void apiSetInstruction(char *instruction)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	apiInstruction.commandLen = strlen(instruction)+1;
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fad9 	bl	8000150 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <apiSetInstruction+0x34>)
 8000ba6:	619a      	str	r2, [r3, #24]
	strncpy(apiInstruction.command, instruction, apiInstruction.commandLen);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <apiSetInstruction+0x34>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	461a      	mov	r2, r3
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <apiSetInstruction+0x38>)
 8000bb2:	f007 fc3f 	bl	8008434 <strncpy>
	apiInstruction.set = true;
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <apiSetInstruction+0x34>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000730 	.word	0x20000730
 8000bc8:	20000731 	.word	0x20000731

08000bcc <apiUpdate>:

ApiInstruction apiUpdate()
{
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	apiInstruction.responseLen = 0;
 8000bd4:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <apiUpdate+0x174>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	631a      	str	r2, [r3, #48]	; 0x30

		if(apiInstruction.set)
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <apiUpdate+0x174>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 809a 	beq.w	8000d18 <apiUpdate+0x14c>
		{
			if(':' == apiInstruction.command[0] && '\n' == apiInstruction.command[apiInstruction.commandLen - 2])
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <apiUpdate+0x174>)
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	2b3a      	cmp	r3, #58	; 0x3a
 8000bea:	f040 808d 	bne.w	8000d08 <apiUpdate+0x13c>
 8000bee:	4b54      	ldr	r3, [pc, #336]	; (8000d40 <apiUpdate+0x174>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	4a52      	ldr	r2, [pc, #328]	; (8000d40 <apiUpdate+0x174>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	f040 8084 	bne.w	8000d08 <apiUpdate+0x13c>
				char addressStr[5];

				uint8_t instructor;
				uint16_t address;

				strncpy(instructorStr, &apiInstruction.command[1], 2);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	2202      	movs	r2, #2
 8000c06:	494f      	ldr	r1, [pc, #316]	; (8000d44 <apiUpdate+0x178>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 fc13 	bl	8008434 <strncpy>
				instructorStr[2] = '\0';
 8000c0e:	2300      	movs	r3, #0
 8000c10:	77bb      	strb	r3, [r7, #30]
				strncpy(addressStr, &apiInstruction.command[3], 4);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2204      	movs	r2, #4
 8000c18:	494b      	ldr	r1, [pc, #300]	; (8000d48 <apiUpdate+0x17c>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 fc0a 	bl	8008434 <strncpy>
				addressStr[4] = '\0';
 8000c20:	2300      	movs	r3, #0
 8000c22:	763b      	strb	r3, [r7, #24]


				instructor = strtol(instructorStr, NULL, 16);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2210      	movs	r2, #16
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f008 fac5 	bl	80091bc <strtol>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				address = strtol(addressStr, NULL, 16);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f008 fabb 	bl	80091bc <strtol>
 8000c46:	4603      	mov	r3, r0
 8000c48:	84bb      	strh	r3, [r7, #36]	; 0x24


				if(address < API_MEMORY_SIZE)
 8000c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c4c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c50:	d251      	bcs.n	8000cf6 <apiUpdate+0x12a>
				{
//					while(apiLocked){}
//					apiLocked = true;
					if(API_INSTRUCTION_READ == instructor)
 8000c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d10d      	bne.n	8000c76 <apiUpdate+0xaa>
					{
						apiInstruction.responseLen = sprintf(apiInstruction.response, "%04x%04x\n", address, apiMemory[address]);
 8000c5a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c5e:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <apiUpdate+0x180>)
 8000c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c64:	460a      	mov	r2, r1
 8000c66:	493a      	ldr	r1, [pc, #232]	; (8000d50 <apiUpdate+0x184>)
 8000c68:	483a      	ldr	r0, [pc, #232]	; (8000d54 <apiUpdate+0x188>)
 8000c6a:	f007 fba9 	bl	80083c0 <siprintf>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <apiUpdate+0x174>)
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000c74:	e050      	b.n	8000d18 <apiUpdate+0x14c>
					}
					else if(API_INSTRUCTION_WRITE == instructor)
 8000c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d132      	bne.n	8000ce4 <apiUpdate+0x118>
					{
						if(apiWriteables[address])
 8000c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c80:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <apiUpdate+0x18c>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d024      	beq.n	8000cd2 <apiUpdate+0x106>
						{
							char valueStr[5];
							uint16_t value;

							strncpy(valueStr, &apiInstruction.command[7], 4);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4933      	ldr	r1, [pc, #204]	; (8000d5c <apiUpdate+0x190>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f007 fbcf 	bl	8008434 <strncpy>
							valueStr[4] = '\0';
 8000c96:	2300      	movs	r3, #0
 8000c98:	743b      	strb	r3, [r7, #16]

							value = strtol(valueStr, NULL, 16);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f008 fa8a 	bl	80091bc <strtol>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	847b      	strh	r3, [r7, #34]	; 0x22

							apiMemory[address] = value;
 8000cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cae:	4927      	ldr	r1, [pc, #156]	; (8000d4c <apiUpdate+0x180>)
 8000cb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000cb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

							apiInstruction.responseLen = sprintf(apiInstruction.response, "%04x%04x\n", address, apiMemory[address]);
 8000cb6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cba:	4a24      	ldr	r2, [pc, #144]	; (8000d4c <apiUpdate+0x180>)
 8000cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	4923      	ldr	r1, [pc, #140]	; (8000d50 <apiUpdate+0x184>)
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <apiUpdate+0x188>)
 8000cc6:	f007 fb7b 	bl	80083c0 <siprintf>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <apiUpdate+0x174>)
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000cd0:	e022      	b.n	8000d18 <apiUpdate+0x14c>
						}
						else
						{
							apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_ACCESS_DENIED);
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4922      	ldr	r1, [pc, #136]	; (8000d60 <apiUpdate+0x194>)
 8000cd6:	481f      	ldr	r0, [pc, #124]	; (8000d54 <apiUpdate+0x188>)
 8000cd8:	f007 fb72 	bl	80083c0 <siprintf>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <apiUpdate+0x174>)
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000ce2:	e019      	b.n	8000d18 <apiUpdate+0x14c>
						}
					}
					else
					{
						apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_WRONG_INSTRUCTOR);
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	491e      	ldr	r1, [pc, #120]	; (8000d60 <apiUpdate+0x194>)
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <apiUpdate+0x188>)
 8000cea:	f007 fb69 	bl	80083c0 <siprintf>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <apiUpdate+0x174>)
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000cf4:	e010      	b.n	8000d18 <apiUpdate+0x14c>
					}
//					apiLocked = false;
				}
				else
				{
					apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_INVALID_ADDRESS);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4919      	ldr	r1, [pc, #100]	; (8000d60 <apiUpdate+0x194>)
 8000cfa:	4816      	ldr	r0, [pc, #88]	; (8000d54 <apiUpdate+0x188>)
 8000cfc:	f007 fb60 	bl	80083c0 <siprintf>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <apiUpdate+0x174>)
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000d06:	e007      	b.n	8000d18 <apiUpdate+0x14c>
				}

			}
			else
			{
				apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_WRONG_FORMAT);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4915      	ldr	r1, [pc, #84]	; (8000d60 <apiUpdate+0x194>)
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <apiUpdate+0x188>)
 8000d0e:	f007 fb57 	bl	80083c0 <siprintf>
 8000d12:	4602      	mov	r2, r0
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <apiUpdate+0x174>)
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
			}
		}


	apiInstruction.set = false;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <apiUpdate+0x174>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

	return apiInstruction;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <apiUpdate+0x174>)
 8000d22:	461c      	mov	r4, r3
 8000d24:	4615      	mov	r5, r2
 8000d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	6023      	str	r3, [r4, #0]
}
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000730 	.word	0x20000730
 8000d44:	20000732 	.word	0x20000732
 8000d48:	20000734 	.word	0x20000734
 8000d4c:	20000764 	.word	0x20000764
 8000d50:	0800a8a0 	.word	0x0800a8a0
 8000d54:	2000074c 	.word	0x2000074c
 8000d58:	200005a0 	.word	0x200005a0
 8000d5c:	20000738 	.word	0x20000738
 8000d60:	0800a8ac 	.word	0x0800a8ac

08000d64 <isApiAddressValid>:

bool isApiAddressValid(int address)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(address > 0 && address < API_MEMORY_SIZE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dd05      	ble.n	8000d7e <isApiAddressValid+0x1a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d78:	da01      	bge.n	8000d7e <isApiAddressValid+0x1a>
	{
		return true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <isApiAddressValid+0x1c>
	}
	else
	{
		return false;
 8000d7e:	2300      	movs	r3, #0
	}
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <apiWrite16>:

bool apiWrite16(int address, int16_t value)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	if(isApiAddressValid(address))
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe3 	bl	8000d64 <isApiAddressValid>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d007      	beq.n	8000db4 <apiWrite16+0x28>
	{
		memcpy(&apiMemory[address], &value, 2);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <apiWrite16+0x34>)
 8000daa:	4413      	add	r3, r2
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	801a      	strh	r2, [r3, #0]
		return true;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <apiWrite16+0x2a>
	}
	else
	{
		return false;
 8000db4:	2300      	movs	r3, #0
	}
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000764 	.word	0x20000764

08000dc4 <apiWrite32>:

	return val;
}

bool apiWrite32(int address, int32_t value)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	if(isApiAddressValid(address))
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffc8 	bl	8000d64 <isApiAddressValid>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <apiWrite32+0x26>
	{
		memcpy(&apiMemory[address], &value, 4);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <apiWrite32+0x30>)
 8000de0:	4413      	add	r3, r2
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	601a      	str	r2, [r3, #0]
		return true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <apiWrite32+0x28>
	}
	else
	{
		return false;
 8000dea:	2300      	movs	r3, #0
	}
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000764 	.word	0x20000764

08000df8 <apiRead32>:

int32_t apiRead32(int address)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	int32_t val = -1;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e04:	60fb      	str	r3, [r7, #12]

	if(isApiAddressValid(address))
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffac 	bl	8000d64 <isApiAddressValid>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d005      	beq.n	8000e1e <apiRead32+0x26>
	{
		memcpy(&val, &apiMemory[address], 4);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <apiRead32+0x30>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
	}

	return val;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000764 	.word	0x20000764

08000e2c <apiWriteFloat>:


bool apiWriteFloat(int address, float value)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	if(isApiAddressValid(address))
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff94 	bl	8000d64 <isApiAddressValid>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <apiWriteFloat+0x26>
	{
		memcpy(&apiMemory[address], &value, 4);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <apiWriteFloat+0x30>)
 8000e48:	4413      	add	r3, r2
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	601a      	str	r2, [r3, #0]
		return true;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <apiWriteFloat+0x28>
	}
	else
	{
		return false;
 8000e52:	2300      	movs	r3, #0
	}
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000764 	.word	0x20000764

08000e60 <apiReadFloat>:

float apiReadFloat(int address)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	float f =  -1.0;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <apiReadFloat+0x30>)
 8000e6a:	60fb      	str	r3, [r7, #12]
	if(isApiAddressValid(address))
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff79 	bl	8000d64 <isApiAddressValid>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <apiReadFloat+0x24>
	{
		memcpy(&f, &apiMemory[address], 4);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <apiReadFloat+0x34>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60fb      	str	r3, [r7, #12]
	}

	return f;
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	bf800000 	.word	0xbf800000
 8000e94:	20000764 	.word	0x20000764

08000e98 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_UART_RxCpltCallback+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d102      	bne.n	8000eb2 <HAL_UART_RxCpltCallback+0x1a>
	{
		kvhFetch();
 8000eac:	f000 fb86 	bl	80015bc <kvhFetch>
	}
	else if(huart->Instance == huart3.Instance)
	{
		gpsFetch();
	}
}
 8000eb0:	e00d      	b.n	8000ece <HAL_UART_RxCpltCallback+0x36>
	else if(huart->Instance == huart2.Instance)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_UART_RxCpltCallback+0x44>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d007      	beq.n	8000ece <HAL_UART_RxCpltCallback+0x36>
	else if(huart->Instance == huart3.Instance)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_UART_RxCpltCallback+0x48>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d101      	bne.n	8000ece <HAL_UART_RxCpltCallback+0x36>
		gpsFetch();
 8000eca:	f000 fbd3 	bl	8001674 <gpsFetch>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000c64 	.word	0x20000c64
 8000edc:	20000d7c 	.word	0x20000d7c
 8000ee0:	20000ac4 	.word	0x20000ac4

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f001 f88d 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eee:	f000 f85d 	bl	8000fac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fa35 	bl	8001360 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ef6:	f006 fd95 	bl	8007a24 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000efa:	f000 f9dd 	bl	80012b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000efe:	f000 f8af 	bl	8001060 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f02:	f000 f8db 	bl	80010bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f06:	f000 f953 	bl	80011b0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000f0a:	f000 f9ab 	bl	8001264 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f0e:	f000 f9fd 	bl	800130c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  apiInit();
 8000f12:	f7ff fe13 	bl	8000b3c <apiInit>

  powertrainInit();
 8000f16:	f000 fa6d 	bl	80013f4 <powertrainInit>

  kvhInit();
 8000f1a:	f000 fae7 	bl	80014ec <kvhInit>

  gpsInit();
 8000f1e:	f000 fb97 	bl	8001650 <gpsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  insertSensordataToApi();
 8000f22:	f000 fbf3 	bl	800170c <insertSensordataToApi>

	  ApiInstruction ins = apiUpdate();
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fe4f 	bl	8000bcc <apiUpdate>
	  if(ins.responseLen > 0)
 8000f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd06      	ble.n	8000f42 <main+0x5e>
	  {
		  CDC_Transmit_FS(ins.response, ins.responseLen);
 8000f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	331c      	adds	r3, #28
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fe37 	bl	8007bb0 <CDC_Transmit_FS>
	  }

	  if(API_STATE_JOYDRIVE == apiMemory[API_REG_STATE])
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <main+0xb4>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <main+0x7a>
	  {
		  powertrainSetSpeeds(apiMemory[API_REG_PWMLEFT], apiMemory[API_REG_PWMRIGHT]);
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <main+0xb4>)
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <main+0xb4>)
 8000f52:	891b      	ldrh	r3, [r3, #8]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	f000 fa81 	bl	8001460 <powertrainSetSpeeds>
	  }

	  heading = apiMemory[API_REG_HEADING_KVH];
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <main+0xb4>)
 8000f60:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <main+0xb8>)
 8000f68:	601a      	str	r2, [r3, #0]
	  time = apiRead32(API_BENCH_GPS_START);
 8000f6a:	f240 1079 	movw	r0, #377	; 0x179
 8000f6e:	f7ff ff43 	bl	8000df8 <apiRead32>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <main+0xbc>)
 8000f78:	601a      	str	r2, [r3, #0]
	  latitude = apiReadFloat(API_BENCH_GPS_START+2);
 8000f7a:	f240 107b 	movw	r0, #379	; 0x17b
 8000f7e:	f7ff ff6f 	bl	8000e60 <apiReadFloat>
 8000f82:	4602      	mov	r2, r0
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <main+0xc0>)
 8000f86:	601a      	str	r2, [r3, #0]
	  longitude = apiReadFloat(API_BENCH_GPS_START +4);
 8000f88:	f240 107d 	movw	r0, #381	; 0x17d
 8000f8c:	f7ff ff68 	bl	8000e60 <apiReadFloat>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <main+0xc4>)
 8000f94:	601a      	str	r2, [r3, #0]
  {
 8000f96:	e7c4      	b.n	8000f22 <main+0x3e>
 8000f98:	20000764 	.word	0x20000764
 8000f9c:	20000dbc 	.word	0x20000dbc
 8000fa0:	20000ca8 	.word	0x20000ca8
 8000fa4:	20000cac 	.word	0x20000cac
 8000fa8:	20000ca4 	.word	0x20000ca4

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 f9f8 	bl	80083b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fea:	2301      	movs	r3, #1
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fb84 	bl	8003710 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800100e:	f000 fb85 	bl	800171c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001022:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f002 fdee 	bl	8003c10 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800103a:	f000 fb6f 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800103e:	2310      	movs	r3, #16
 8001040:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4618      	mov	r0, r3
 800104a:	f002 ff7d 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001054:	f000 fb62 	bl	800171c <Error_Handler>
  }
}
 8001058:	bf00      	nop
 800105a:	3750      	adds	r7, #80	; 0x50
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <MX_I2C1_Init+0x54>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x50>)
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x58>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_I2C1_Init+0x50>)
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_I2C1_Init+0x50>)
 800109e:	f001 fb2d 	bl	80026fc <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 fb38 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000b04 	.word	0x20000b04
 80010b4:	40005400 	.word	0x40005400
 80010b8:	000186a0 	.word	0x000186a0

080010bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <MX_TIM3_Init+0xec>)
 80010e0:	4a32      	ldr	r2, [pc, #200]	; (80011ac <MX_TIM3_Init+0xf0>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <MX_TIM3_Init+0xec>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_TIM3_Init+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x7fff;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_TIM3_Init+0xec>)
 80010f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80010f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <MX_TIM3_Init+0xec>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_TIM3_Init+0xec>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001104:	4828      	ldr	r0, [pc, #160]	; (80011a8 <MX_TIM3_Init+0xec>)
 8001106:	f002 ffd5 	bl	80040b4 <HAL_TIM_PWM_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 fb04 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4619      	mov	r1, r3
 8001122:	4821      	ldr	r0, [pc, #132]	; (80011a8 <MX_TIM3_Init+0xec>)
 8001124:	f003 faf8 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800112e:	f000 faf5 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001132:	2360      	movs	r3, #96	; 0x60
 8001134:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <MX_TIM3_Init+0xec>)
 800114a:	f003 f811 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001154:	f000 fae2 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2204      	movs	r2, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_TIM3_Init+0xec>)
 8001160:	f003 f806 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800116a:	f000 fad7 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2208      	movs	r2, #8
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	; (80011a8 <MX_TIM3_Init+0xec>)
 8001176:	f002 fffb 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001180:	f000 facc 	bl	800171c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	220c      	movs	r2, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM3_Init+0xec>)
 800118c:	f002 fff0 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001196:	f000 fac1 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM3_Init+0xec>)
 800119c:	f000 fd16 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000b58 	.word	0x20000b58
 80011ac:	40000400 	.word	0x40000400

080011b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_TIM4_Init+0xac>)
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <MX_TIM4_Init+0xb0>)
 80011d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_TIM4_Init+0xac>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_TIM4_Init+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM4_Init+0xac>)
 80011e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM4_Init+0xac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_TIM4_Init+0xac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <MX_TIM4_Init+0xac>)
 80011fa:	f002 ff5b 	bl	80040b4 <HAL_TIM_PWM_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001204:	f000 fa8a 	bl	800171c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4619      	mov	r1, r3
 8001216:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_TIM4_Init+0xac>)
 8001218:	f003 fa7e 	bl	8004718 <HAL_TIMEx_MasterConfigSynchronization>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001222:	f000 fa7b 	bl	800171c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001226:	2360      	movs	r3, #96	; 0x60
 8001228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 800122a:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800122e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2208      	movs	r2, #8
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM4_Init+0xac>)
 8001240:	f002 ff96 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800124a:	f000 fa67 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM4_Init+0xac>)
 8001250:	f000 fcbc 	bl	8001bcc <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000a84 	.word	0x20000a84
 8001260:	40000800 	.word	0x40000800

08001264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_USART1_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001270:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART1_UART_Init+0x4c>)
 800129c:	f003 fa80 	bl	80047a0 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 fa39 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000c64 	.word	0x20000c64
 80012b4:	40013800 	.word	0x40013800

080012b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_USART2_UART_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f003 fa56 	bl	80047a0 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012fa:	f000 fa0f 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000d7c 	.word	0x20000d7c
 8001308:	40004400 	.word	0x40004400

0800130c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART3_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001318:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART3_UART_Init+0x4c>)
 8001344:	f003 fa2c 	bl	80047a0 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 f9e5 	bl	800171c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000ac4 	.word	0x20000ac4
 800135c:	40004800 	.word	0x40004800

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <MX_GPIO_Init+0x8c>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_GPIO_Init+0x8c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a16      	ldr	r2, [pc, #88]	; (80013ec <MX_GPIO_Init+0x8c>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_GPIO_Init+0x8c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_GPIO_Init+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INH34_Pin|INH12_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2130      	movs	r1, #48	; 0x30
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013c2:	f001 f983 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INH34_Pin INH12_Pin */
  GPIO_InitStruct.Pin = INH34_Pin|INH12_Pin;
 80013c6:	2330      	movs	r3, #48	; 0x30
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_GPIO_Init+0x90>)
 80013de:	f001 f81b 	bl	8002418 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800

080013f4 <powertrainInit>:

/* USER CODE BEGIN 4 */
void powertrainInit()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <powertrainInit+0x38>)
 80013fc:	f002 fe86 	bl	800410c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001400:	2104      	movs	r1, #4
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <powertrainInit+0x38>)
 8001404:	f002 fe82 	bl	800410c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001408:	2108      	movs	r1, #8
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <powertrainInit+0x38>)
 800140c:	f002 fe7e 	bl	800410c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001410:	210c      	movs	r1, #12
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <powertrainInit+0x38>)
 8001414:	f002 fe7a 	bl	800410c <HAL_TIM_PWM_Start>

	powertrainEnableMotors(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 f809 	bl	8001430 <powertrainEnableMotors>

	powertrainSetSpeeds(0, 0);
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f000 f81d 	bl	8001460 <powertrainSetSpeeds>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000b58 	.word	0x20000b58

08001430 <powertrainEnableMotors>:


void powertrainEnableMotors(int enableState)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(INH12_GPIO_Port, INH12_Pin, enableState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	2120      	movs	r1, #32
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <powertrainEnableMotors+0x2c>)
 8001442:	f001 f943 	bl	80026cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH34_GPIO_Port, INH34_Pin, enableState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	2110      	movs	r1, #16
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <powertrainEnableMotors+0x2c>)
 8001450:	f001 f93c 	bl	80026cc <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010800 	.word	0x40010800

08001460 <powertrainSetSpeeds>:

void powertrainSetSpeeds(int16_t left, int16_t right)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
	if(left < 0)
 8001470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	da0d      	bge.n	8001494 <powertrainSetSpeeds+0x34>
	{
		left = -left;
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	425b      	negs	r3, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	80fb      	strh	r3, [r7, #6]
		htim3.Instance->CCR3 = 0;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <powertrainSetSpeeds+0x88>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = left;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <powertrainSetSpeeds+0x88>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	e008      	b.n	80014a6 <powertrainSetSpeeds+0x46>
	}
	else
	{
		htim3.Instance->CCR3 = left;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <powertrainSetSpeeds+0x88>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800149c:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <powertrainSetSpeeds+0x88>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(right < 0)
 80014a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	da0d      	bge.n	80014ca <powertrainSetSpeeds+0x6a>
	{
		right = -right;
 80014ae:	88bb      	ldrh	r3, [r7, #4]
 80014b0:	425b      	negs	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	80bb      	strh	r3, [r7, #4]
		htim3.Instance->CCR1 = 0;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <powertrainSetSpeeds+0x88>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = right;
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <powertrainSetSpeeds+0x88>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014c6:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		htim3.Instance->CCR1 = right;
		htim3.Instance->CCR2 = 0;
	}
}
 80014c8:	e008      	b.n	80014dc <powertrainSetSpeeds+0x7c>
		htim3.Instance->CCR1 = right;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <powertrainSetSpeeds+0x88>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <powertrainSetSpeeds+0x88>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000b58 	.word	0x20000b58

080014ec <kvhInit>:

void kvhInit()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
	  char kvhInitStr[3] = { 's', '\r' };
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	2100      	movs	r1, #0
 80014f8:	460a      	mov	r2, r1
 80014fa:	801a      	strh	r2, [r3, #0]
 80014fc:	460a      	mov	r2, r1
 80014fe:	709a      	strb	r2, [r3, #2]
 8001500:	2373      	movs	r3, #115	; 0x73
 8001502:	773b      	strb	r3, [r7, #28]
 8001504:	230d      	movs	r3, #13
 8001506:	777b      	strb	r3, [r7, #29]
	  char kvhConfigNmeaStr[5] = { '=', 't' , ',', '0', '\r' };
 8001508:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <kvhInit+0xbc>)
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001512:	6018      	str	r0, [r3, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	7019      	strb	r1, [r3, #0]
	  char kvhConfigSpeedStr[7] = { '=', 'r', ',' , '6', '0', '0', '\r' };
 8001518:	4a24      	ldr	r2, [pc, #144]	; (80015ac <kvhInit+0xc0>)
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001522:	6018      	str	r0, [r3, #0]
 8001524:	3304      	adds	r3, #4
 8001526:	8019      	strh	r1, [r3, #0]
 8001528:	3302      	adds	r3, #2
 800152a:	0c0a      	lsrs	r2, r1, #16
 800152c:	701a      	strb	r2, [r3, #0]
	  char kvhConfigUnitStr[5] = { '=', 'i' , ',', 'd', '\r' };
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <kvhInit+0xc4>)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001536:	6018      	str	r0, [r3, #0]
 8001538:	3304      	adds	r3, #4
 800153a:	7019      	strb	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1, kvhInitStr, 2, 1000);
 800153c:	f107 011c 	add.w	r1, r7, #28
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	2202      	movs	r2, #2
 8001546:	481b      	ldr	r0, [pc, #108]	; (80015b4 <kvhInit+0xc8>)
 8001548:	f003 f977 	bl	800483a <HAL_UART_Transmit>
	  HAL_Delay(100);
 800154c:	2064      	movs	r0, #100	; 0x64
 800154e:	f000 fdbd 	bl	80020cc <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigNmeaStr, 5, 1000);
 8001552:	f107 0114 	add.w	r1, r7, #20
 8001556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155a:	2205      	movs	r2, #5
 800155c:	4815      	ldr	r0, [pc, #84]	; (80015b4 <kvhInit+0xc8>)
 800155e:	f003 f96c 	bl	800483a <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001562:	2064      	movs	r0, #100	; 0x64
 8001564:	f000 fdb2 	bl	80020cc <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigUnitStr, 5, 1000);
 8001568:	1d39      	adds	r1, r7, #4
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	2205      	movs	r2, #5
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <kvhInit+0xc8>)
 8001572:	f003 f962 	bl	800483a <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001576:	2064      	movs	r0, #100	; 0x64
 8001578:	f000 fda8 	bl	80020cc <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigSpeedStr, 7, 1000);
 800157c:	f107 010c 	add.w	r1, r7, #12
 8001580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001584:	2207      	movs	r2, #7
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <kvhInit+0xc8>)
 8001588:	f003 f957 	bl	800483a <HAL_UART_Transmit>

	  kvhString.available = false;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <kvhInit+0xcc>)
 800158e:	2200      	movs	r2, #0
 8001590:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	  HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <kvhInit+0xcc>)
 8001598:	4806      	ldr	r0, [pc, #24]	; (80015b4 <kvhInit+0xc8>)
 800159a:	f003 f9e7 	bl	800496c <HAL_UART_Receive_IT>
}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800a8b4 	.word	0x0800a8b4
 80015ac:	0800a8bc 	.word	0x0800a8bc
 80015b0:	0800a8c4 	.word	0x0800a8c4
 80015b4:	20000c64 	.word	0x20000c64
 80015b8:	20000cb0 	.word	0x20000cb0

080015bc <kvhFetch>:

void kvhFetch()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	static bool startFound = false;

	if('$' == kvhString.nmeaStr[0])
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <kvhFetch+0x4c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b24      	cmp	r3, #36	; 0x24
 80015c6:	d114      	bne.n	80015f2 <kvhFetch+0x36>
	{
		if(startFound)
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <kvhFetch+0x50>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <kvhFetch+0x24>
		{
			startFound = false;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <kvhFetch+0x50>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
			kvhString.available = true;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <kvhFetch+0x4c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	else
	{
		startFound = false;
		HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
	}
}
 80015de:	e010      	b.n	8001602 <kvhFetch+0x46>
			startFound = true;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <kvhFetch+0x50>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &kvhString.nmeaStr[1], NMEA_STR_LEN - 1);
 80015e6:	22c7      	movs	r2, #199	; 0xc7
 80015e8:	4909      	ldr	r1, [pc, #36]	; (8001610 <kvhFetch+0x54>)
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <kvhFetch+0x58>)
 80015ec:	f003 f9be 	bl	800496c <HAL_UART_Receive_IT>
}
 80015f0:	e007      	b.n	8001602 <kvhFetch+0x46>
		startFound = false;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <kvhFetch+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
 80015f8:	2201      	movs	r2, #1
 80015fa:	4903      	ldr	r1, [pc, #12]	; (8001608 <kvhFetch+0x4c>)
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <kvhFetch+0x58>)
 80015fe:	f003 f9b5 	bl	800496c <HAL_UART_Receive_IT>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000cb0 	.word	0x20000cb0
 800160c:	20000368 	.word	0x20000368
 8001610:	20000cb1 	.word	0x20000cb1
 8001614:	20000c64 	.word	0x20000c64

08001618 <kvhDecode>:

void kvhDecode()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	if(kvhString.available)
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <kvhDecode+0x30>)
 800161e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <kvhDecode+0x2c>
	{
		kvhString.available = false;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <kvhDecode+0x30>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		kvhString.nmeaStr[NMEA_HCHDT_LEN] = '\0';
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <kvhDecode+0x30>)
 8001630:	2200      	movs	r2, #0
 8001632:	74da      	strb	r2, [r3, #19]
		nmeaDecodeToApi(&kvhString);
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <kvhDecode+0x30>)
 8001636:	f000 f877 	bl	8001728 <nmeaDecodeToApi>
		HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	4902      	ldr	r1, [pc, #8]	; (8001648 <kvhDecode+0x30>)
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <kvhDecode+0x34>)
 8001640:	f003 f994 	bl	800496c <HAL_UART_Receive_IT>
	}
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000cb0 	.word	0x20000cb0
 800164c:	20000c64 	.word	0x20000c64

08001650 <gpsInit>:

void gpsInit()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
		gpsString.available = false;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <gpsInit+0x1c>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	4903      	ldr	r1, [pc, #12]	; (800166c <gpsInit+0x1c>)
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <gpsInit+0x20>)
 8001662:	f003 f983 	bl	800496c <HAL_UART_Receive_IT>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000b98 	.word	0x20000b98
 8001670:	20000ac4 	.word	0x20000ac4

08001674 <gpsFetch>:

void gpsFetch()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	static bool startFound = false;

	if('$' == gpsString.nmeaStr[0])
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <gpsFetch+0x4c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b24      	cmp	r3, #36	; 0x24
 800167e:	d114      	bne.n	80016aa <gpsFetch+0x36>
	{
		if(startFound)
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <gpsFetch+0x50>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <gpsFetch+0x24>
		{
			startFound = false;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <gpsFetch+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
			gpsString.available = true;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <gpsFetch+0x4c>)
 8001690:	2201      	movs	r2, #1
 8001692:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	else
	{
		startFound = false;
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
	}
}
 8001696:	e010      	b.n	80016ba <gpsFetch+0x46>
			startFound = true;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <gpsFetch+0x50>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, &gpsString.nmeaStr[1], NMEA_STR_LEN - 1);
 800169e:	22c7      	movs	r2, #199	; 0xc7
 80016a0:	4909      	ldr	r1, [pc, #36]	; (80016c8 <gpsFetch+0x54>)
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <gpsFetch+0x58>)
 80016a4:	f003 f962 	bl	800496c <HAL_UART_Receive_IT>
}
 80016a8:	e007      	b.n	80016ba <gpsFetch+0x46>
		startFound = false;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <gpsFetch+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
 80016b0:	2201      	movs	r2, #1
 80016b2:	4903      	ldr	r1, [pc, #12]	; (80016c0 <gpsFetch+0x4c>)
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <gpsFetch+0x58>)
 80016b6:	f003 f959 	bl	800496c <HAL_UART_Receive_IT>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000b98 	.word	0x20000b98
 80016c4:	20000369 	.word	0x20000369
 80016c8:	20000b99 	.word	0x20000b99
 80016cc:	20000ac4 	.word	0x20000ac4

080016d0 <gpsDecode>:

void gpsDecode()
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	if(gpsString.available)
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <gpsDecode+0x34>)
 80016d6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00f      	beq.n	80016fe <gpsDecode+0x2e>
	{
		gpsString.available = false;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <gpsDecode+0x34>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		gpsString.nmeaStr[NMEA_GPRMC_LEN] = '\0';
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <gpsDecode+0x34>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		nmeaDecodeToApi(&gpsString);
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <gpsDecode+0x34>)
 80016f0:	f000 f81a 	bl	8001728 <nmeaDecodeToApi>
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
 80016f4:	2201      	movs	r2, #1
 80016f6:	4903      	ldr	r1, [pc, #12]	; (8001704 <gpsDecode+0x34>)
 80016f8:	4803      	ldr	r0, [pc, #12]	; (8001708 <gpsDecode+0x38>)
 80016fa:	f003 f937 	bl	800496c <HAL_UART_Receive_IT>
	}
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000b98 	.word	0x20000b98
 8001708:	20000ac4 	.word	0x20000ac4

0800170c <insertSensordataToApi>:

void insertSensordataToApi()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	kvhDecode();
 8001710:	f7ff ff82 	bl	8001618 <kvhDecode>
	gpsDecode();
 8001714:	f7ff ffdc 	bl	80016d0 <gpsDecode>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <nmeaDecodeToApi>:
 */
#include "nmeaUtils.h"


void nmeaDecodeToApi(NmeaString *nmeaString)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NMEA_STR_LEN; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e03c      	b.n	80017b0 <nmeaDecodeToApi+0x88>
	{
		if(nmeaString->nmeaStr[i] ==  '$')
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b24      	cmp	r3, #36	; 0x24
 8001740:	d133      	bne.n	80017aa <nmeaDecodeToApi+0x82>
		{
			if(strncmp("$HCHDT", &nmeaString->nmeaStr[i], 6) == 0 && NMEA_STR_LEN - i > NMEA_HCHDT_LEN)
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	2206      	movs	r2, #6
 800174a:	4619      	mov	r1, r3
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <nmeaDecodeToApi+0x98>)
 800174e:	f006 fe5f 	bl	8008410 <strncmp>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <nmeaDecodeToApi+0x44>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800175e:	2b13      	cmp	r3, #19
 8001760:	dd04      	ble.n	800176c <nmeaDecodeToApi+0x44>
			{
				hchdtToApi(nmeaString, i);
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f831 	bl	80017cc <hchdtToApi>
 800176a:	e01e      	b.n	80017aa <nmeaDecodeToApi+0x82>
			}
			else if((strncmp("$GNRMC", &nmeaString->nmeaStr[i], 6) == 0 || strncmp("$GPRMC", &nmeaString->nmeaStr[i], 6) == 0) && NMEA_STR_LEN - i > NMEA_GPRMC_LEN)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	2206      	movs	r2, #6
 8001774:	4619      	mov	r1, r3
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <nmeaDecodeToApi+0x9c>)
 8001778:	f006 fe4a 	bl	8008410 <strncmp>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <nmeaDecodeToApi+0x70>
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	2206      	movs	r2, #6
 800178a:	4619      	mov	r1, r3
 800178c:	480e      	ldr	r0, [pc, #56]	; (80017c8 <nmeaDecodeToApi+0xa0>)
 800178e:	f006 fe3f 	bl	8008410 <strncmp>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d108      	bne.n	80017aa <nmeaDecodeToApi+0x82>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800179e:	2b48      	cmp	r3, #72	; 0x48
 80017a0:	dd03      	ble.n	80017aa <nmeaDecodeToApi+0x82>
			{
				gprmcToApi(nmeaString, i);
 80017a2:	68f9      	ldr	r1, [r7, #12]
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f83f 	bl	8001828 <gprmcToApi>
	for(int i = 0; i < NMEA_STR_LEN; i++)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2bc7      	cmp	r3, #199	; 0xc7
 80017b4:	ddbf      	ble.n	8001736 <nmeaDecodeToApi+0xe>
			}
		}
	}
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800a8cc 	.word	0x0800a8cc
 80017c4:	0800a8d4 	.word	0x0800a8d4
 80017c8:	0800a8dc 	.word	0x0800a8dc

080017cc <hchdtToApi>:

void hchdtToApi(NmeaString *nmeaString, int start)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	char headingStr[4];
	strncpy(headingStr, &nmeaString->nmeaStr[start + 7], 3);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3307      	adds	r3, #7
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	18d1      	adds	r1, r2, r3
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	2203      	movs	r2, #3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 fe25 	bl	8008434 <strncpy>
	headingStr[3] = '\0';
 80017ea:	2300      	movs	r3, #0
 80017ec:	72fb      	strb	r3, [r7, #11]

	int heading = strtol(headingStr, NULL, 10);
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	220a      	movs	r2, #10
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f007 fce0 	bl	80091bc <strtol>
 80017fc:	60f8      	str	r0, [r7, #12]

	heading += NMEA_HEADING_OFFSET;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	33b4      	adds	r3, #180	; 0xb4
 8001802:	60fb      	str	r3, [r7, #12]

	if(heading > 180)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2bb4      	cmp	r3, #180	; 0xb4
 8001808:	dd03      	ble.n	8001812 <hchdtToApi+0x46>
	{
		heading -= 360;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001810:	60fb      	str	r3, [r7, #12]
	}

	apiWrite16(API_REG_HEADING_KVH, heading);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	b21b      	sxth	r3, r3
 8001816:	4619      	mov	r1, r3
 8001818:	f44f 70bc 	mov.w	r0, #376	; 0x178
 800181c:	f7ff fab6 	bl	8000d8c <apiWrite16>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <gprmcToApi>:

void gprmcToApi(NmeaString *nmeaString, int start)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b0c6      	sub	sp, #280	; 0x118
 800182c:	af00      	add	r7, sp, #0
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	6018      	str	r0, [r3, #0]
 8001832:	463b      	mov	r3, r7
 8001834:	6019      	str	r1, [r3, #0]
	int fieldIndex=0;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int charIndex=0;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	char fields[13][15];
	char currentField[15];

	float lat, lon;

	for(int i=7; i<strlen(nmeaString->nmeaStr); i++)
 8001842:	2307      	movs	r3, #7
 8001844:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001848:	e041      	b.n	80018ce <gprmcToApi+0xa6>
	{
	  char currentChar=nmeaString->nmeaStr[start + i];
 800184a:	463b      	mov	r3, r7
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001852:	4413      	add	r3, r2
 8001854:	1d3a      	adds	r2, r7, #4
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	  if(currentChar!=',')
 800185e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001862:	2b2c      	cmp	r3, #44	; 0x2c
 8001864:	d00d      	beq.n	8001882 <gprmcToApi+0x5a>
	  {
	    currentField[charIndex]=currentChar;
 8001866:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800186a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800186e:	4413      	add	r3, r2
 8001870:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8001874:	701a      	strb	r2, [r3, #0]
	    charIndex++;
 8001876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800187a:	3301      	adds	r3, #1
 800187c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001880:	e020      	b.n	80018c4 <gprmcToApi+0x9c>
	  }
	  else
	  {
		currentField[charIndex] = '\0';
 8001882:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001886:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800188a:	4413      	add	r3, r2
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
	    strcpy(fields[fieldIndex], currentField);
 8001890:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001894:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fdaa 	bl	8008400 <strcpy>
	    charIndex = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	    fieldIndex++;
 80018b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018b6:	3301      	adds	r3, #1
 80018b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	    if(fieldIndex > 5)
 80018bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	dc0f      	bgt.n	80018e4 <gprmcToApi+0xbc>
	for(int i=7; i<strlen(nmeaString->nmeaStr); i++)
 80018c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fc3c 	bl	8000150 <strlen>
 80018d8:	4602      	mov	r2, r0
 80018da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018de:	429a      	cmp	r2, r3
 80018e0:	d8b3      	bhi.n	800184a <gprmcToApi+0x22>
 80018e2:	e000      	b.n	80018e6 <gprmcToApi+0xbe>
	    {
	    	break;
 80018e4:	bf00      	nop
	}

	//decode time -> fieldIndex 0
	char timeStr[7];
	uint32_t time;
	strncpy(timeStr, fields[0], 6);
 80018e6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	2206      	movs	r2, #6
 80018f0:	4618      	mov	r0, r3
 80018f2:	f006 fd9f 	bl	8008434 <strncpy>
	timeStr[6] = '\0';
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	time = strtol(timeStr, NULL, 10);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	220a      	movs	r2, #10
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f007 fc59 	bl	80091bc <strtol>
 800190a:	4603      	mov	r3, r0
 800190c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	time += NMEA_TIME_OFFSET * 10000;
 8001910:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001914:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8001918:	3320      	adds	r3, #32
 800191a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	if(time > 240000)
 800191e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001922:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <gprmcToApi+0x258>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d907      	bls.n	8001938 <gprmcToApi+0x110>
	{
		time -= 240000;
 8001928:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800192c:	f5a3 336a 	sub.w	r3, r3, #239616	; 0x3a800
 8001930:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001934:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	}

		//decode latitude -> fieldIndex 2/3
		char ddLat[3];
		char mmLat[8];
		strncpy(ddLat, fields[2], 2);
 8001938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800193c:	f103 011e 	add.w	r1, r3, #30
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	2202      	movs	r2, #2
 8001946:	4618      	mov	r0, r3
 8001948:	f006 fd74 	bl	8008434 <strncpy>
		ddLat[2] = '\0';
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		strncpy(mmLat, &fields[2][2], 7);
 8001952:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001956:	f103 0120 	add.w	r1, r3, #32
 800195a:	f107 0318 	add.w	r3, r7, #24
 800195e:	2207      	movs	r2, #7
 8001960:	4618      	mov	r0, r3
 8001962:	f006 fd67 	bl	8008434 <strncpy>
		mmLat[7] = '\0';
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	2200      	movs	r2, #0
 800196c:	71da      	strb	r2, [r3, #7]

		lat=atof(ddLat) + atof(mmLat)/60;
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4618      	mov	r0, r3
 8001974:	f006 fcee 	bl	8008354 <atof>
 8001978:	4604      	mov	r4, r0
 800197a:	460d      	mov	r5, r1
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4618      	mov	r0, r3
 8001982:	f006 fce7 	bl	8008354 <atof>
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <gprmcToApi+0x25c>)
 800198c:	f7fe fece 	bl	800072c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fbe8 	bl	800016c <__adddf3>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	4618      	mov	r0, r3
 80019a2:	4621      	mov	r1, r4
 80019a4:	f7ff f87a 	bl	8000a9c <__aeabi_d2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if(fields[3][0]=='S')
 80019ae:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80019b2:	2b53      	cmp	r3, #83	; 0x53
 80019b4:	d105      	bne.n	80019c2 <gprmcToApi+0x19a>
		  lat=-lat;
 80019b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c


//			//decode longitude -> fieldIndex 4/5
		char ddLon[4];
		char mmLon[8];
		strncpy(ddLon, fields[4], 3);
 80019c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	2203      	movs	r2, #3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f006 fd2f 	bl	8008434 <strncpy>
		ddLon[3] = '\0';
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	70da      	strb	r2, [r3, #3]
		strncpy(mmLon, &fields[4][3], 7);
 80019de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019e2:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2207      	movs	r2, #7
 80019ec:	4618      	mov	r0, r3
 80019ee:	f006 fd21 	bl	8008434 <strncpy>
		mmLon[7] = '\0';
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2200      	movs	r2, #0
 80019f8:	71da      	strb	r2, [r3, #7]

		lon=atof(ddLon) + atof(mmLon)/60;
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 fca8 	bl	8008354 <atof>
 8001a04:	4604      	mov	r4, r0
 8001a06:	460d      	mov	r5, r1
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 fca1 	bl	8008354 <atof>
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <gprmcToApi+0x25c>)
 8001a18:	f7fe fe88 	bl	800072c <__aeabi_ddiv>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fba2 	bl	800016c <__adddf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	4621      	mov	r1, r4
 8001a30:	f7ff f834 	bl	8000a9c <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(fields[6][0]=='W')
 8001a3a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001a3e:	2b57      	cmp	r3, #87	; 0x57
 8001a40:	d105      	bne.n	8001a4e <gprmcToApi+0x226>
		  lon=-lon;
 8001a42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		apiWrite32(API_BENCH_GPS_START, time);
 8001a4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a52:	4619      	mov	r1, r3
 8001a54:	f240 1079 	movw	r0, #377	; 0x179
 8001a58:	f7ff f9b4 	bl	8000dc4 <apiWrite32>
		apiWriteFloat(API_BENCH_GPS_START + 2, lat);
 8001a5c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001a60:	f240 107b 	movw	r0, #379	; 0x17b
 8001a64:	f7ff f9e2 	bl	8000e2c <apiWriteFloat>
		apiWriteFloat(API_BENCH_GPS_START + 4,  lon);
 8001a68:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001a6c:	f240 107d 	movw	r0, #381	; 0x17d
 8001a70:	f7ff f9dc 	bl	8000e2c <apiWriteFloat>
}
 8001a74:	bf00      	nop
 8001a76:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	0003a980 	.word	0x0003a980
 8001a84:	404e0000 	.word	0x404e0000

08001a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6193      	str	r3, [r2, #24]
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x5c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_MspInit+0x60>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_MspInit+0x60>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000

08001aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <HAL_I2C_MspInit+0x70>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d123      	bne.n	8001b54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0c:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_I2C_MspInit+0x74>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_I2C_MspInit+0x74>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_I2C_MspInit+0x74>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <HAL_I2C_MspInit+0x78>)
 8001b38:	f000 fc6e 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_I2C_MspInit+0x74>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_I2C_MspInit+0x74>)
 8001b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b46:	61d3      	str	r3, [r2, #28]
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_I2C_MspInit+0x74>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010c00 	.word	0x40010c00

08001b68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <HAL_TIM_PWM_MspInit+0x58>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10c      	bne.n	8001b94 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b92:	e010      	b.n	8001bb6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_TIM_PWM_MspInit+0x60>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40000800 	.word	0x40000800

08001bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2b      	ldr	r2, [pc, #172]	; (8001c94 <HAL_TIM_MspPostInit+0xc8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d130      	bne.n	8001c4e <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin;
 8001c1c:	23c0      	movs	r3, #192	; 0xc0
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2302      	movs	r3, #2
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481b      	ldr	r0, [pc, #108]	; (8001c9c <HAL_TIM_MspPostInit+0xd0>)
 8001c30:	f000 fbf2 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8001c34:	2303      	movs	r3, #3
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	4619      	mov	r1, r3
 8001c46:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <HAL_TIM_MspPostInit+0xd4>)
 8001c48:	f000 fbe6 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c4c:	e01d      	b.n	8001c8a <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_TIM_MspPostInit+0xd8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d118      	bne.n	8001c8a <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_TIM_MspPostInit+0xcc>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8001c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0318 	add.w	r3, r7, #24
 8001c82:	4619      	mov	r1, r3
 8001c84:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <HAL_TIM_MspPostInit+0xd4>)
 8001c86:	f000 fbc7 	bl	8002418 <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40000400 	.word	0x40000400
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0320 	add.w	r3, r7, #32
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a5f      	ldr	r2, [pc, #380]	; (8001e40 <HAL_UART_MspInit+0x198>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d13a      	bne.n	8001d3e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = KVH_TX_Pin;
 8001cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(KVH_TX_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484e      	ldr	r0, [pc, #312]	; (8001e48 <HAL_UART_MspInit+0x1a0>)
 8001d0e:	f000 fb83 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KVH_RX_Pin;
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(KVH_RX_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4619      	mov	r1, r3
 8001d26:	4848      	ldr	r0, [pc, #288]	; (8001e48 <HAL_UART_MspInit+0x1a0>)
 8001d28:	f000 fb76 	bl	8002418 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2025      	movs	r0, #37	; 0x25
 8001d32:	f000 fac4 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d36:	2025      	movs	r0, #37	; 0x25
 8001d38:	f000 fadd 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d3c:	e07c      	b.n	8001e38 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a42      	ldr	r2, [pc, #264]	; (8001e4c <HAL_UART_MspInit+0x1a4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d138      	bne.n	8001dba <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a3d      	ldr	r2, [pc, #244]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a37      	ldr	r2, [pc, #220]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482f      	ldr	r0, [pc, #188]	; (8001e48 <HAL_UART_MspInit+0x1a0>)
 8001d8c:	f000 fb44 	bl	8002418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001d90:	2308      	movs	r3, #8
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4619      	mov	r1, r3
 8001da2:	4829      	ldr	r0, [pc, #164]	; (8001e48 <HAL_UART_MspInit+0x1a0>)
 8001da4:	f000 fb38 	bl	8002418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2102      	movs	r1, #2
 8001dac:	2026      	movs	r0, #38	; 0x26
 8001dae:	f000 fa86 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001db2:	2026      	movs	r0, #38	; 0x26
 8001db4:	f000 fa9f 	bl	80022f6 <HAL_NVIC_EnableIRQ>
}
 8001db8:	e03e      	b.n	8001e38 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <HAL_UART_MspInit+0x1a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d139      	bne.n	8001e38 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dce:	61d3      	str	r3, [r2, #28]
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	4a18      	ldr	r2, [pc, #96]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_UART_MspInit+0x19c>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	4619      	mov	r1, r3
 8001e08:	4812      	ldr	r0, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0x1ac>)
 8001e0a:	f000 fb05 	bl	8002418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0320 	add.w	r3, r7, #32
 8001e20:	4619      	mov	r1, r3
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <HAL_UART_MspInit+0x1ac>)
 8001e24:	f000 faf8 	bl	8002418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2027      	movs	r0, #39	; 0x27
 8001e2e:	f000 fa46 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e32:	2027      	movs	r0, #39	; 0x27
 8001e34:	f000 fa5f 	bl	80022f6 <HAL_NVIC_EnableIRQ>
}
 8001e38:	bf00      	nop
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010800 	.word	0x40010800
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	40004800 	.word	0x40004800
 8001e54:	40010c00 	.word	0x40010c00

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <HardFault_Handler+0x4>

08001e6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <MemManage_Handler+0x4>

08001e70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <BusFault_Handler+0x4>

08001e76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <UsageFault_Handler+0x4>

08001e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 f8f6 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001eb2:	f000 fe52 	bl	8002b5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20001a58 	.word	0x20001a58

08001ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <USART1_IRQHandler+0x10>)
 8001ec6:	f002 fda5 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000c64 	.word	0x20000c64

08001ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
//	static int counter = 0;
//	dataFromLidar.len = 500;
//	uint8_t byte;
//	HAL_UART_Receive(&huart2, &byte, 1, 1000);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <USART2_IRQHandler+0x10>)
 8001eda:	f002 fd9b 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000d7c 	.word	0x20000d7c

08001ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <USART3_IRQHandler+0x10>)
 8001eee:	f002 fd91 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000ac4 	.word	0x20000ac4

08001efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <_sbrk+0x50>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x16>
		heap_end = &end;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <_sbrk+0x50>)
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <_sbrk+0x54>)
 8001f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <_sbrk+0x50>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <_sbrk+0x50>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	466a      	mov	r2, sp
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d907      	bls.n	8001f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f26:	f006 fa19 	bl	800835c <__errno>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f34:	e006      	b.n	8001f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <_sbrk+0x50>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a03      	ldr	r2, [pc, #12]	; (8001f4c <_sbrk+0x50>)
 8001f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000036c 	.word	0x2000036c
 8001f50:	20001cc8 	.word	0x20001cc8

08001f54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <SystemInit+0x5c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	; (8001fb0 <SystemInit+0x5c>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <SystemInit+0x5c>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4911      	ldr	r1, [pc, #68]	; (8001fb0 <SystemInit+0x5c>)
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <SystemInit+0x60>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <SystemInit+0x5c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <SystemInit+0x5c>)
 8001f76:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <SystemInit+0x5c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SystemInit+0x5c>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <SystemInit+0x5c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <SystemInit+0x5c>)
 8001f92:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001f96:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SystemInit+0x5c>)
 8001f9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f9e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SystemInit+0x64>)
 8001fa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fa6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	f8ff0000 	.word	0xf8ff0000
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001fbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001fbe:	e003      	b.n	8001fc8 <LoopCopyDataInit>

08001fc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001fc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001fc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001fc6:	3104      	adds	r1, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001fcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001fce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001fd0:	d3f6      	bcc.n	8001fc0 <CopyDataInit>
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001fd4:	e002      	b.n	8001fdc <LoopFillZerobss>

08001fd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001fd8:	f842 3b04 	str.w	r3, [r2], #4

08001fdc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001fde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fe0:	d3f9      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fe2:	f7ff ffb7 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f006 f9bf 	bl	8008368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fea:	f7fe ff7b 	bl	8000ee4 <main>
  bx lr
 8001fee:	4770      	bx	lr
  ldr r3, =_sidata
 8001ff0:	0800ac00 	.word	0x0800ac00
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ff8:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8001ffc:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8002000:	20001cc8 	.word	0x20001cc8

08002004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC1_2_IRQHandler>
	...

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_Init+0x28>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_Init+0x28>)
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f945 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f808 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002024:	f7ff fd30 	bl	8001a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f95d 	bl	8002312 <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002070:	f000 f925 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000000 	.word	0x20000000
 800208c:	20000008 	.word	0x20000008
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_IncTick+0x1c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_IncTick+0x20>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a03      	ldr	r2, [pc, #12]	; (80020b4 <HAL_IncTick+0x20>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	20000008 	.word	0x20000008
 80020b4:	20000dc0 	.word	0x20000dc0

080020b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return uwTick;
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <HAL_GetTick+0x10>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	20000dc0 	.word	0x20000dc0

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_Delay+0x40>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffe0 	bl	80020b8 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000008 	.word	0x20000008

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4906      	ldr	r1, [pc, #24]	; (80021a8 <__NVIC_EnableIRQ+0x34>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002288:	f7ff ff90 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff2d 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff42 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff90 	bl	8002200 <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5f 	bl	80021ac <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff35 	bl	8002174 <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800233e:	2b02      	cmp	r3, #2
 8002340:	d005      	beq.n	800234e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e051      	b.n	80023f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020e 	bic.w	r2, r2, #14
 800235c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_DMA_Abort_IT+0xd0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d029      	beq.n	80023cc <HAL_DMA_Abort_IT+0xa0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_DMA_Abort_IT+0xd4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d022      	beq.n	80023c8 <HAL_DMA_Abort_IT+0x9c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_DMA_Abort_IT+0xd8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d01a      	beq.n	80023c2 <HAL_DMA_Abort_IT+0x96>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_DMA_Abort_IT+0xdc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d012      	beq.n	80023bc <HAL_DMA_Abort_IT+0x90>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_DMA_Abort_IT+0xe0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00a      	beq.n	80023b6 <HAL_DMA_Abort_IT+0x8a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_DMA_Abort_IT+0xe4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d102      	bne.n	80023b0 <HAL_DMA_Abort_IT+0x84>
 80023aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023ae:	e00e      	b.n	80023ce <HAL_DMA_Abort_IT+0xa2>
 80023b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023b4:	e00b      	b.n	80023ce <HAL_DMA_Abort_IT+0xa2>
 80023b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ba:	e008      	b.n	80023ce <HAL_DMA_Abort_IT+0xa2>
 80023bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c0:	e005      	b.n	80023ce <HAL_DMA_Abort_IT+0xa2>
 80023c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c6:	e002      	b.n	80023ce <HAL_DMA_Abort_IT+0xa2>
 80023c8:	2310      	movs	r3, #16
 80023ca:	e000      	b.n	80023ce <HAL_DMA_Abort_IT+0xa2>
 80023cc:	2301      	movs	r3, #1
 80023ce:	4a11      	ldr	r2, [pc, #68]	; (8002414 <HAL_DMA_Abort_IT+0xe8>)
 80023d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
    } 
  }
  return status;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40020008 	.word	0x40020008
 8002400:	4002001c 	.word	0x4002001c
 8002404:	40020030 	.word	0x40020030
 8002408:	40020044 	.word	0x40020044
 800240c:	40020058 	.word	0x40020058
 8002410:	4002006c 	.word	0x4002006c
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b08b      	sub	sp, #44	; 0x2c
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e127      	b.n	800267c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800242c:	2201      	movs	r2, #1
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8116 	bne.w	8002676 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b12      	cmp	r3, #18
 8002450:	d034      	beq.n	80024bc <HAL_GPIO_Init+0xa4>
 8002452:	2b12      	cmp	r3, #18
 8002454:	d80d      	bhi.n	8002472 <HAL_GPIO_Init+0x5a>
 8002456:	2b02      	cmp	r3, #2
 8002458:	d02b      	beq.n	80024b2 <HAL_GPIO_Init+0x9a>
 800245a:	2b02      	cmp	r3, #2
 800245c:	d804      	bhi.n	8002468 <HAL_GPIO_Init+0x50>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d031      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
 8002462:	2b01      	cmp	r3, #1
 8002464:	d01c      	beq.n	80024a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002466:	e048      	b.n	80024fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002468:	2b03      	cmp	r3, #3
 800246a:	d043      	beq.n	80024f4 <HAL_GPIO_Init+0xdc>
 800246c:	2b11      	cmp	r3, #17
 800246e:	d01b      	beq.n	80024a8 <HAL_GPIO_Init+0x90>
          break;
 8002470:	e043      	b.n	80024fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002472:	4a89      	ldr	r2, [pc, #548]	; (8002698 <HAL_GPIO_Init+0x280>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d026      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
 8002478:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_GPIO_Init+0x280>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d806      	bhi.n	800248c <HAL_GPIO_Init+0x74>
 800247e:	4a87      	ldr	r2, [pc, #540]	; (800269c <HAL_GPIO_Init+0x284>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d020      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
 8002484:	4a86      	ldr	r2, [pc, #536]	; (80026a0 <HAL_GPIO_Init+0x288>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01d      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
          break;
 800248a:	e036      	b.n	80024fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <HAL_GPIO_Init+0x28c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
 8002492:	4a85      	ldr	r2, [pc, #532]	; (80026a8 <HAL_GPIO_Init+0x290>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d016      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
 8002498:	4a84      	ldr	r2, [pc, #528]	; (80026ac <HAL_GPIO_Init+0x294>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0xae>
          break;
 800249e:	e02c      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	623b      	str	r3, [r7, #32]
          break;
 80024a6:	e028      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	3304      	adds	r3, #4
 80024ae:	623b      	str	r3, [r7, #32]
          break;
 80024b0:	e023      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	3308      	adds	r3, #8
 80024b8:	623b      	str	r3, [r7, #32]
          break;
 80024ba:	e01e      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	330c      	adds	r3, #12
 80024c2:	623b      	str	r3, [r7, #32]
          break;
 80024c4:	e019      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024ce:	2304      	movs	r3, #4
 80024d0:	623b      	str	r3, [r7, #32]
          break;
 80024d2:	e012      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d105      	bne.n	80024e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024dc:	2308      	movs	r3, #8
 80024de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	611a      	str	r2, [r3, #16]
          break;
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e8:	2308      	movs	r3, #8
 80024ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	615a      	str	r2, [r3, #20]
          break;
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
          break;
 80024f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2bff      	cmp	r3, #255	; 0xff
 80024fe:	d801      	bhi.n	8002504 <HAL_GPIO_Init+0xec>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	e001      	b.n	8002508 <HAL_GPIO_Init+0xf0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3304      	adds	r3, #4
 8002508:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d802      	bhi.n	8002516 <HAL_GPIO_Init+0xfe>
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x104>
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3b08      	subs	r3, #8
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	210f      	movs	r1, #15
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	6a39      	ldr	r1, [r7, #32]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	431a      	orrs	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8096 	beq.w	8002676 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800254a:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <HAL_GPIO_Init+0x298>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a58      	ldr	r2, [pc, #352]	; (80026b0 <HAL_GPIO_Init+0x298>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <HAL_GPIO_Init+0x298>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002562:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_GPIO_Init+0x29c>)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <HAL_GPIO_Init+0x2a0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x19e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_GPIO_Init+0x2a4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x19a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a49      	ldr	r2, [pc, #292]	; (80026c0 <HAL_GPIO_Init+0x2a8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x196>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a48      	ldr	r2, [pc, #288]	; (80026c4 <HAL_GPIO_Init+0x2ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x192>
 80025a6:	2303      	movs	r3, #3
 80025a8:	e006      	b.n	80025b8 <HAL_GPIO_Init+0x1a0>
 80025aa:	2304      	movs	r3, #4
 80025ac:	e004      	b.n	80025b8 <HAL_GPIO_Init+0x1a0>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e002      	b.n	80025b8 <HAL_GPIO_Init+0x1a0>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_GPIO_Init+0x1a0>
 80025b6:	2300      	movs	r3, #0
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	f002 0203 	and.w	r2, r2, #3
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	4093      	lsls	r3, r2
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025c8:	493a      	ldr	r1, [pc, #232]	; (80026b4 <HAL_GPIO_Init+0x29c>)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4938      	ldr	r1, [pc, #224]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4933      	ldr	r1, [pc, #204]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	492e      	ldr	r1, [pc, #184]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
 8002616:	e006      	b.n	8002626 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	43db      	mvns	r3, r3
 8002620:	4929      	ldr	r1, [pc, #164]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002622:	4013      	ands	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002632:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4924      	ldr	r1, [pc, #144]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
 800263e:	e006      	b.n	800264e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	43db      	mvns	r3, r3
 8002648:	491f      	ldr	r1, [pc, #124]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 800264a:	4013      	ands	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
 8002666:	e006      	b.n	8002676 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	43db      	mvns	r3, r3
 8002670:	4915      	ldr	r1, [pc, #84]	; (80026c8 <HAL_GPIO_Init+0x2b0>)
 8002672:	4013      	ands	r3, r2
 8002674:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	3301      	adds	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	f47f aed0 	bne.w	800242c <HAL_GPIO_Init+0x14>
  }
}
 800268c:	bf00      	nop
 800268e:	372c      	adds	r7, #44	; 0x2c
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	10210000 	.word	0x10210000
 800269c:	10110000 	.word	0x10110000
 80026a0:	10120000 	.word	0x10120000
 80026a4:	10310000 	.word	0x10310000
 80026a8:	10320000 	.word	0x10320000
 80026ac:	10220000 	.word	0x10220000
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40010800 	.word	0x40010800
 80026bc:	40010c00 	.word	0x40010c00
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40011400 	.word	0x40011400
 80026c8:	40010400 	.word	0x40010400

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e10f      	b.n	800292e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff f9e2 	bl	8001aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002740:	f001 fbbc 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a7b      	ldr	r2, [pc, #492]	; (8002938 <HAL_I2C_Init+0x23c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d807      	bhi.n	8002760 <HAL_I2C_Init+0x64>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a7a      	ldr	r2, [pc, #488]	; (800293c <HAL_I2C_Init+0x240>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e006      	b.n	800276e <HAL_I2C_Init+0x72>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a77      	ldr	r2, [pc, #476]	; (8002940 <HAL_I2C_Init+0x244>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0db      	b.n	800292e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a72      	ldr	r2, [pc, #456]	; (8002944 <HAL_I2C_Init+0x248>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9b      	lsrs	r3, r3, #18
 8002780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_I2C_Init+0x23c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d802      	bhi.n	80027b0 <HAL_I2C_Init+0xb4>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3301      	adds	r3, #1
 80027ae:	e009      	b.n	80027c4 <HAL_I2C_Init+0xc8>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	4a63      	ldr	r2, [pc, #396]	; (8002948 <HAL_I2C_Init+0x24c>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	3301      	adds	r3, #1
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4956      	ldr	r1, [pc, #344]	; (8002938 <HAL_I2C_Init+0x23c>)
 80027e0:	428b      	cmp	r3, r1
 80027e2:	d80d      	bhi.n	8002800 <HAL_I2C_Init+0x104>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e59      	subs	r1, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	bf38      	it	cc
 80027fc:	2304      	movcc	r3, #4
 80027fe:	e04f      	b.n	80028a0 <HAL_I2C_Init+0x1a4>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <HAL_I2C_Init+0x130>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	440b      	add	r3, r1
 8002816:	fbb0 f3f3 	udiv	r3, r0, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e012      	b.n	8002852 <HAL_I2C_Init+0x156>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e58      	subs	r0, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	0099      	lsls	r1, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Init+0x15e>
 8002856:	2301      	movs	r3, #1
 8002858:	e022      	b.n	80028a0 <HAL_I2C_Init+0x1a4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10e      	bne.n	8002880 <HAL_I2C_Init+0x184>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e58      	subs	r0, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	440b      	add	r3, r1
 8002870:	fbb0 f3f3 	udiv	r3, r0, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	e00f      	b.n	80028a0 <HAL_I2C_Init+0x1a4>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	6809      	ldr	r1, [r1, #0]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6911      	ldr	r1, [r2, #16]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	000186a0 	.word	0x000186a0
 800293c:	001e847f 	.word	0x001e847f
 8002940:	003d08ff 	.word	0x003d08ff
 8002944:	431bde83 	.word	0x431bde83
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b08b      	sub	sp, #44	; 0x2c
 8002950:	af06      	add	r7, sp, #24
 8002952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0d3      	b.n	8002b06 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f005 fa50 	bl	8007e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2203      	movs	r2, #3
 800297c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fbbe 	bl	8005106 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	687e      	ldr	r6, [r7, #4]
 8002992:	466d      	mov	r5, sp
 8002994:	f106 0410 	add.w	r4, r6, #16
 8002998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800299a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	1d33      	adds	r3, r6, #4
 80029a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	f002 fb87 	bl	80050b8 <USB_CoreInit>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0a4      	b.n	8002b06 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fbbb 	bl	800513e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e035      	b.n	8002a3a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	015b      	lsls	r3, r3, #5
 80029d4:	4413      	add	r3, r2
 80029d6:	3329      	adds	r3, #41	; 0x29
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	015b      	lsls	r3, r3, #5
 80029e2:	4413      	add	r3, r2
 80029e4:	3328      	adds	r3, #40	; 0x28
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	b291      	uxth	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	015b      	lsls	r3, r3, #5
 80029f4:	4413      	add	r3, r2
 80029f6:	3336      	adds	r3, #54	; 0x36
 80029f8:	460a      	mov	r2, r1
 80029fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	4413      	add	r3, r2
 8002a04:	332b      	adds	r3, #43	; 0x2b
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	015b      	lsls	r3, r3, #5
 8002a10:	4413      	add	r3, r2
 8002a12:	3338      	adds	r3, #56	; 0x38
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	015b      	lsls	r3, r3, #5
 8002a1e:	4413      	add	r3, r2
 8002a20:	333c      	adds	r3, #60	; 0x3c
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	015b      	lsls	r3, r3, #5
 8002a2e:	4413      	add	r3, r2
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	3301      	adds	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3c4      	bcc.n	80029ce <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e031      	b.n	8002aae <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	015b      	lsls	r3, r3, #5
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	015b      	lsls	r3, r3, #5
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	015b      	lsls	r3, r3, #5
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	330a      	adds	r3, #10
 8002aa0:	015b      	lsls	r3, r3, #5
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d3c8      	bcc.n	8002a4a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	603b      	str	r3, [r7, #0]
 8002abe:	687e      	ldr	r6, [r7, #4]
 8002ac0:	466d      	mov	r5, sp
 8002ac2:	f106 0410 	add.w	r4, r6, #16
 8002ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	1d33      	adds	r3, r6, #4
 8002ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	f002 fb3f 	bl	8005156 <USB_DevInit>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00d      	b.n	8002b06 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fb7d 	bl	80061fe <USB_DevDisconnect>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_PCD_Start+0x16>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e016      	b.n	8002b52 <HAL_PCD_Start+0x44>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f005 fbd9 	bl	80082e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 fb56 	bl	80061ea <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 fac8 	bl	80050d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fb53 	bl	8006212 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b76:	d102      	bne.n	8002b7e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 faf3 	bl	8003164 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fb45 	bl	8006212 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d112      	bne.n	8002bba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba6:	b292      	uxth	r2, r2
 8002ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f005 f9a8 	bl	8007f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8de 	bl	8002d76 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fb27 	bl	8006212 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bce:	d10b      	bne.n	8002be8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002be2:	b292      	uxth	r2, r2
 8002be4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fb10 	bl	8006212 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfc:	d10b      	bne.n	8002c16 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c10:	b292      	uxth	r2, r2
 8002c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 faf9 	bl	8006212 <USB_ReadInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2a:	d126      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0208 	bic.w	r2, r2, #8
 8002c56:	b292      	uxth	r2, r2
 8002c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f005 f989 	bl	8007f74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c74:	b292      	uxth	r2, r2
 8002c76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fac7 	bl	8006212 <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8e:	d13d      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cba:	b292      	uxth	r2, r2
 8002cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0204 	orr.w	r2, r2, #4
 8002cd2:	b292      	uxth	r2, r2
 8002cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fa98 	bl	8006212 <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d10b      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d00:	b292      	uxth	r2, r2
 8002d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f005 f91a 	bl	8007f40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fa7e 	bl	8006212 <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d20:	d10e      	bne.n	8002d40 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d34:	b292      	uxth	r2, r2
 8002d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f005 f8d3 	bl	8007ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 fa64 	bl	8006212 <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d10b      	bne.n	8002d6e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d68:	b292      	uxth	r2, r2
 8002d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_SetAddress+0x1a>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e013      	b.n	8002db8 <HAL_PCD_SetAddress+0x42>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fa0b 	bl	80061c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	4608      	mov	r0, r1
 8002dca:	4611      	mov	r1, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4603      	mov	r3, r0
 8002dd0:	70fb      	strb	r3, [r7, #3]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	803b      	strh	r3, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	da0b      	bge.n	8002dfe <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	015b      	lsls	r3, r3, #5
 8002dee:	3328      	adds	r3, #40	; 0x28
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	705a      	strb	r2, [r3, #1]
 8002dfc:	e00b      	b.n	8002e16 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e22:	883a      	ldrh	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	78ba      	ldrb	r2, [r7, #2]
 8002e2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e40:	78bb      	ldrb	r3, [r7, #2]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_PCD_EP_Open+0x9a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e00e      	b.n	8002e78 <HAL_PCD_EP_Open+0xb8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 f999 	bl	80051a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0b      	bge.n	8002eac <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	3328      	adds	r3, #40	; 0x28
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	705a      	strb	r2, [r3, #1]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_PCD_EP_Close+0x5e>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e00e      	b.n	8002efc <HAL_PCD_EP_Close+0x7c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68f9      	ldr	r1, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 fc45 	bl	800577c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	460b      	mov	r3, r1
 8002f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	015b      	lsls	r3, r3, #5
 8002f1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fda4 	bl	8005aa8 <USB_EPStartXfer>
 8002f60:	e005      	b.n	8002f6e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 fd9d 	bl	8005aa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	330a      	adds	r3, #10
 8002f8e:	015b      	lsls	r3, r3, #5
 8002f90:	4413      	add	r3, r2
 8002f92:	3304      	adds	r3, #4
 8002f94:	681b      	ldr	r3, [r3, #0]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	460b      	mov	r3, r1
 8002fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	3328      	adds	r3, #40	; 0x28
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fe4:	7afb      	ldrb	r3, [r7, #11]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6979      	ldr	r1, [r7, #20]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 fd57 	bl	8005aa8 <USB_EPStartXfer>
 8002ffa:	e005      	b.n	8003008 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6979      	ldr	r1, [r7, #20]
 8003002:	4618      	mov	r0, r3
 8003004:	f002 fd50 	bl	8005aa8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 0207 	and.w	r2, r3, #7
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	429a      	cmp	r2, r3
 800302a:	d901      	bls.n	8003030 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e046      	b.n	80030be <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003034:	2b00      	cmp	r3, #0
 8003036:	da0b      	bge.n	8003050 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	3328      	adds	r3, #40	; 0x28
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	705a      	strb	r2, [r3, #1]
 800304e:	e009      	b.n	8003064 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_PCD_EP_SetStall+0x72>
 8003080:	2302      	movs	r3, #2
 8003082:	e01c      	b.n	80030be <HAL_PCD_EP_SetStall+0xac>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68f9      	ldr	r1, [r7, #12]
 8003092:	4618      	mov	r0, r3
 8003094:	f002 ffc0 	bl	8006018 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d108      	bne.n	80030b4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f003 f8be 	bl	8006230 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d901      	bls.n	80030e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e03a      	b.n	800315a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	da0b      	bge.n	8003104 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	015b      	lsls	r3, r3, #5
 80030f4:	3328      	adds	r3, #40	; 0x28
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	705a      	strb	r2, [r3, #1]
 8003102:	e00b      	b.n	800311c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_PCD_EP_ClrStall+0x76>
 8003138:	2302      	movs	r3, #2
 800313a:	e00e      	b.n	800315a <HAL_PCD_EP_ClrStall+0x94>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f002 ffa6 	bl	800609c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800316c:	e282      	b.n	8003674 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003176:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003178:	8afb      	ldrh	r3, [r7, #22]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003182:	7d7b      	ldrb	r3, [r7, #21]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 8142 	bne.w	800340e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800318a:	8afb      	ldrh	r3, [r7, #22]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d151      	bne.n	8003238 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80031a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a4:	b29c      	uxth	r4, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80031ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3328      	adds	r3, #40	; 0x28
 80031ba:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	3302      	adds	r3, #2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	441a      	add	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031f6:	2100      	movs	r1, #0
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f004 fe5d 	bl	8007eb8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8234 	beq.w	8003674 <PCD_EP_ISR_Handler+0x510>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 822f 	bne.w	8003674 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003222:	b2da      	uxtb	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b292      	uxth	r2, r2
 800322a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003236:	e21d      	b.n	8003674 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800323e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003248:	8a7b      	ldrh	r3, [r7, #18]
 800324a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324e:	2b00      	cmp	r3, #0
 8003250:	d033      	beq.n	80032ba <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	3306      	adds	r3, #6
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003290:	b29b      	uxth	r3, r3
 8003292:	f003 f81c 	bl	80062ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29a      	uxth	r2, r3
 800329e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29c      	uxth	r4, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80032ae:	b292      	uxth	r2, r2
 80032b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f004 fdd6 	bl	8007e64 <HAL_PCD_SetupStageCallback>
 80032b8:	e1dc      	b.n	8003674 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f280 81d8 	bge.w	8003674 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29c      	uxth	r4, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80032dc:	b292      	uxth	r2, r2
 80032de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	3306      	adds	r3, #6
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d019      	beq.n	8003348 <PCD_EP_ISR_Handler+0x1e4>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6959      	ldr	r1, [r3, #20]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800332c:	b29b      	uxth	r3, r3
 800332e:	f002 ffce 	bl	80062ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	441a      	add	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003340:	2100      	movs	r1, #0
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f004 fda0 	bl	8007e88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461c      	mov	r4, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003356:	b29b      	uxth	r3, r3
 8003358:	441c      	add	r4, r3
 800335a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800335e:	461c      	mov	r4, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10e      	bne.n	8003386 <PCD_EP_ISR_Handler+0x222>
 8003368:	8823      	ldrh	r3, [r4, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003370:	b29b      	uxth	r3, r3
 8003372:	8023      	strh	r3, [r4, #0]
 8003374:	8823      	ldrh	r3, [r4, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003380:	b29b      	uxth	r3, r3
 8003382:	8023      	strh	r3, [r4, #0]
 8003384:	e02d      	b.n	80033e2 <PCD_EP_ISR_Handler+0x27e>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b3e      	cmp	r3, #62	; 0x3e
 800338c:	d812      	bhi.n	80033b4 <PCD_EP_ISR_Handler+0x250>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <PCD_EP_ISR_Handler+0x244>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61bb      	str	r3, [r7, #24]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	029b      	lsls	r3, r3, #10
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	8023      	strh	r3, [r4, #0]
 80033b2:	e016      	b.n	80033e2 <PCD_EP_ISR_Handler+0x27e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <PCD_EP_ISR_Handler+0x26a>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	b29c      	uxth	r4, r3
 80033f4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80033f8:	b29c      	uxth	r4, r3
 80033fa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033fe:	b29c      	uxth	r4, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4ba2      	ldr	r3, [pc, #648]	; (8003690 <PCD_EP_ISR_Handler+0x52c>)
 8003406:	4323      	orrs	r3, r4
 8003408:	b29b      	uxth	r3, r3
 800340a:	8013      	strh	r3, [r2, #0]
 800340c:	e132      	b.n	8003674 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	7d7b      	ldrb	r3, [r7, #21]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800341e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f280 80d1 	bge.w	80035ca <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	7d7b      	ldrb	r3, [r7, #21]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29a      	uxth	r2, r3
 8003438:	f640 738f 	movw	r3, #3983	; 0xf8f
 800343c:	4013      	ands	r3, r2
 800343e:	b29c      	uxth	r4, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	7d7b      	ldrb	r3, [r7, #21]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003450:	b292      	uxth	r2, r2
 8003452:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003454:	7d7b      	ldrb	r3, [r7, #21]
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	7b1b      	ldrb	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d121      	bne.n	80034ae <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	3306      	adds	r3, #6
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003492:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003494:	8bfb      	ldrh	r3, [r7, #30]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d072      	beq.n	8003580 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6959      	ldr	r1, [r3, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	88da      	ldrh	r2, [r3, #6]
 80034a6:	8bfb      	ldrh	r3, [r7, #30]
 80034a8:	f002 ff11 	bl	80062ce <USB_ReadPMA>
 80034ac:	e068      	b.n	8003580 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d021      	beq.n	800350c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	3302      	adds	r3, #2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034f2:	8bfb      	ldrh	r3, [r7, #30]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d02a      	beq.n	800354e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6959      	ldr	r1, [r3, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	891a      	ldrh	r2, [r3, #8]
 8003504:	8bfb      	ldrh	r3, [r7, #30]
 8003506:	f002 fee2 	bl	80062ce <USB_ReadPMA>
 800350a:	e020      	b.n	800354e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	3306      	adds	r3, #6
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003534:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003536:	8bfb      	ldrh	r3, [r7, #30]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6959      	ldr	r1, [r3, #20]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	895a      	ldrh	r2, [r3, #10]
 8003548:	8bfb      	ldrh	r3, [r7, #30]
 800354a:	f002 fec0 	bl	80062ce <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003568:	b29c      	uxth	r4, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	4b46      	ldr	r3, [pc, #280]	; (8003694 <PCD_EP_ISR_Handler+0x530>)
 800357a:	4323      	orrs	r3, r4
 800357c:	b29b      	uxth	r3, r3
 800357e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	441a      	add	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	8bfb      	ldrh	r3, [r7, #30]
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <PCD_EP_ISR_Handler+0x446>
 80035a0:	8bfa      	ldrh	r2, [r7, #30]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d206      	bcs.n	80035b8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 fc69 	bl	8007e88 <HAL_PCD_DataOutStageCallback>
 80035b6:	e008      	b.n	80035ca <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	7819      	ldrb	r1, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fc9d 	bl	8002f04 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035ca:	8a7b      	ldrh	r3, [r7, #18]
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d04f      	beq.n	8003674 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80035d4:	7d7b      	ldrb	r3, [r7, #21]
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	3328      	adds	r3, #40	; 0x28
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	7d7b      	ldrb	r3, [r7, #21]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	b29c      	uxth	r4, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	7d7b      	ldrb	r3, [r7, #21]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	441a      	add	r2, r3
 8003606:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800360a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360e:	b29b      	uxth	r3, r3
 8003610:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	3302      	adds	r3, #2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 fc2c 	bl	8007eb8 <HAL_PCD_DataInStageCallback>
 8003660:	e008      	b.n	8003674 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	7819      	ldrb	r1, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fc96 	bl	8002fa0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29b      	uxth	r3, r3
 800367e:	b21b      	sxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f6ff ad74 	blt.w	800316e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3724      	adds	r7, #36	; 0x24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	ffff8080 	.word	0xffff8080
 8003694:	ffff80c0 	.word	0xffff80c0

08003698 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	4613      	mov	r3, r2
 80036a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	015b      	lsls	r3, r3, #5
 80036be:	3328      	adds	r3, #40	; 0x28
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e006      	b.n	80036d6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036c8:	897b      	ldrh	r3, [r7, #10]
 80036ca:	015b      	lsls	r3, r3, #5
 80036cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	80da      	strh	r2, [r3, #6]
 80036ea:	e00b      	b.n	8003704 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2201      	movs	r2, #1
 80036f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	b29a      	uxth	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e26c      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8087 	beq.w	800383e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003730:	4b92      	ldr	r3, [pc, #584]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b04      	cmp	r3, #4
 800373a:	d00c      	beq.n	8003756 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d112      	bne.n	800376e <HAL_RCC_OscConfig+0x5e>
 8003748:	4b8c      	ldr	r3, [pc, #560]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003754:	d10b      	bne.n	800376e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d06c      	beq.n	800383c <HAL_RCC_OscConfig+0x12c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d168      	bne.n	800383c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e246      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x76>
 8003778:	4b80      	ldr	r3, [pc, #512]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7f      	ldr	r2, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e02e      	b.n	80037e4 <HAL_RCC_OscConfig+0xd4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x98>
 800378e:	4b7b      	ldr	r3, [pc, #492]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7a      	ldr	r2, [pc, #488]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b78      	ldr	r3, [pc, #480]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a77      	ldr	r2, [pc, #476]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xd4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0xbc>
 80037b2:	4b72      	ldr	r3, [pc, #456]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a71      	ldr	r2, [pc, #452]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b6f      	ldr	r3, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xd4>
 80037cc:	4b6b      	ldr	r3, [pc, #428]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a6a      	ldr	r2, [pc, #424]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a67      	ldr	r2, [pc, #412]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fc64 	bl	80020b8 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fe fc60 	bl	80020b8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1fa      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe4>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fe fc50 	bl	80020b8 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fc4c 	bl	80020b8 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1e6      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x10c>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800384a:	4b4c      	ldr	r3, [pc, #304]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b08      	cmp	r3, #8
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x18c>
 8003862:	4b46      	ldr	r3, [pc, #280]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x176>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1ba      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4939      	ldr	r1, [pc, #228]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e03a      	b.n	8003912 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fe fc05 	bl	80020b8 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe fc01 	bl	80020b8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e19b      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b2d      	ldr	r3, [pc, #180]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4927      	ldr	r1, [pc, #156]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b26      	ldr	r3, [pc, #152]	; (8003980 <HAL_RCC_OscConfig+0x270>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fbe4 	bl	80020b8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fe fbe0 	bl	80020b8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e17a      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03a      	beq.n	8003994 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d019      	beq.n	800395a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b17      	ldr	r3, [pc, #92]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392c:	f7fe fbc4 	bl	80020b8 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003934:	f7fe fbc0 	bl	80020b8 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e15a      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <HAL_RCC_OscConfig+0x26c>)
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003952:	2001      	movs	r0, #1
 8003954:	f000 fada 	bl	8003f0c <RCC_Delay>
 8003958:	e01c      	b.n	8003994 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <HAL_RCC_OscConfig+0x274>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7fe fbaa 	bl	80020b8 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003966:	e00f      	b.n	8003988 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003968:	f7fe fba6 	bl	80020b8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d908      	bls.n	8003988 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e140      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	42420000 	.word	0x42420000
 8003984:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b9e      	ldr	r3, [pc, #632]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e9      	bne.n	8003968 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a6 	beq.w	8003aee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b97      	ldr	r3, [pc, #604]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b94      	ldr	r3, [pc, #592]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4a93      	ldr	r2, [pc, #588]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	61d3      	str	r3, [r2, #28]
 80039be:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b8e      	ldr	r3, [pc, #568]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b8b      	ldr	r3, [pc, #556]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a8a      	ldr	r2, [pc, #552]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fb67 	bl	80020b8 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe fb63 	bl	80020b8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b64      	cmp	r3, #100	; 0x64
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0fd      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x312>
 8003a14:	4b7b      	ldr	r3, [pc, #492]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a7a      	ldr	r2, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e02d      	b.n	8003a7e <HAL_RCC_OscConfig+0x36e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x334>
 8003a2a:	4b76      	ldr	r3, [pc, #472]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	4a75      	ldr	r2, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6213      	str	r3, [r2, #32]
 8003a36:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6213      	str	r3, [r2, #32]
 8003a42:	e01c      	b.n	8003a7e <HAL_RCC_OscConfig+0x36e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x356>
 8003a4c:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a6c      	ldr	r2, [pc, #432]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	e00b      	b.n	8003a7e <HAL_RCC_OscConfig+0x36e>
 8003a66:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a66      	ldr	r2, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d015      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a86:	f7fe fb17 	bl	80020b8 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe fb13 	bl	80020b8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0ab      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ee      	beq.n	8003a8e <HAL_RCC_OscConfig+0x37e>
 8003ab0:	e014      	b.n	8003adc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fb01 	bl	80020b8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fe fafd 	bl	80020b8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e095      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ee      	bne.n	8003aba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a47      	ldr	r2, [pc, #284]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8081 	beq.w	8003bfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d061      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d146      	bne.n	8003b9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCC_OscConfig+0x4fc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fe fad1 	bl	80020b8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe facd 	bl	80020b8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e067      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f0      	bne.n	8003b1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b40:	d108      	bne.n	8003b54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b42:	4b30      	ldr	r3, [pc, #192]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	492d      	ldr	r1, [pc, #180]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a19      	ldr	r1, [r3, #32]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	430b      	orrs	r3, r1
 8003b66:	4927      	ldr	r1, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_OscConfig+0x4fc>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe faa1 	bl	80020b8 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fa9d 	bl	80020b8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e037      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x46a>
 8003b98:	e02f      	b.n	8003bfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <HAL_RCC_OscConfig+0x4fc>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fa8a 	bl	80020b8 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe fa86 	bl	80020b8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e020      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x498>
 8003bc6:	e018      	b.n	8003bfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e013      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x4f4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42420060 	.word	0x42420060

08003c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0d0      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d910      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4965      	ldr	r1, [pc, #404]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0b8      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6c:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c84:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	494d      	ldr	r1, [pc, #308]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d040      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d115      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e07f      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e073      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3d      	ldr	r3, [pc, #244]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06b      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4936      	ldr	r1, [pc, #216]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe f9da 	bl	80020b8 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fe f9d6 	bl	80020b8 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e053      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d210      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	4922      	ldr	r1, [pc, #136]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e032      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d9e:	f000 f821 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003da2:	4601      	mov	r1, r0
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db0:	5cd3      	ldrb	r3, [r2, r3]
 8003db2:	fa21 f303 	lsr.w	r3, r1, r3
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1cc>)
 8003db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1d0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe f938 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800a944 	.word	0x0800a944
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	20000004 	.word	0x20000004

08003de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	b490      	push	{r4, r7}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dec:	1d3c      	adds	r4, r7, #4
 8003dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003df4:	4b28      	ldr	r3, [pc, #160]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x40>
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x46>
 8003e22:	e02d      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e24:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e26:	623b      	str	r3, [r7, #32]
      break;
 8003e28:	e02d      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	0c9b      	lsrs	r3, r3, #18
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e36:	4413      	add	r3, r2
 8003e38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c5b      	lsrs	r3, r3, #17
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e56:	4413      	add	r3, r2
 8003e58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e62:	fb02 f203 	mul.w	r2, r2, r3
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e004      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	623b      	str	r3, [r7, #32]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e82:	623b      	str	r3, [r7, #32]
      break;
 8003e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc90      	pop	{r4, r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	0800a8e4 	.word	0x0800a8e4
 8003e98:	0800a8f4 	.word	0x0800a8f4
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	007a1200 	.word	0x007a1200
 8003ea4:	003d0900 	.word	0x003d0900

08003ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b02      	ldr	r3, [pc, #8]	; (8003eb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr
 8003eb8:	20000000 	.word	0x20000000

08003ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ec0:	f7ff fff2 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec4:	4601      	mov	r1, r0
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4a03      	ldr	r2, [pc, #12]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed2:	5cd3      	ldrb	r3, [r2, r3]
 8003ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	0800a954 	.word	0x0800a954

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee8:	f7ff ffde 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003eec:	4601      	mov	r1, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	0adb      	lsrs	r3, r3, #11
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	0800a954 	.word	0x0800a954

08003f0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <RCC_Delay+0x34>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <RCC_Delay+0x38>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0a5b      	lsrs	r3, r3, #9
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	fb02 f303 	mul.w	r3, r2, r3
 8003f26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f28:	bf00      	nop
  }
  while (Delay --);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	60fa      	str	r2, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <RCC_Delay+0x1c>
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000000 	.word	0x20000000
 8003f44:	10624dd3 	.word	0x10624dd3

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d07d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f68:	4b4f      	ldr	r3, [pc, #316]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10d      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f74:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	61d3      	str	r3, [r2, #28]
 8003f80:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b46      	ldr	r3, [pc, #280]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d118      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9c:	4b43      	ldr	r3, [pc, #268]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a42      	ldr	r2, [pc, #264]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f886 	bl	80020b8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	e008      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fe f882 	bl	80020b8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e06d      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc2:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fce:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02e      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d027      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004002:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d014      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004012:	f7fe f851 	bl	80020b8 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f7fe f84d 	bl	80020b8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	4293      	cmp	r3, r2
 800402a:	d901      	bls.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e036      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ee      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4917      	ldr	r1, [pc, #92]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	4313      	orrs	r3, r2
 800404c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d105      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004054:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	490b      	ldr	r1, [pc, #44]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4904      	ldr	r1, [pc, #16]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40007000 	.word	0x40007000
 80040b0:	42420440 	.word	0x42420440

080040b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e01d      	b.n	8004102 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fd44 	bl	8001b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 f902 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fad6 	bl	80046d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_TIM_PWM_Start+0x60>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d107      	bne.n	800413e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b06      	cmp	r3, #6
 800414e:	d007      	beq.n	8004160 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40012c00 	.word	0x40012c00

08004170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004186:	2302      	movs	r3, #2
 8004188:	e0b4      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	f200 809f 	bhi.w	80042e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80041a2:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	080042e1 	.word	0x080042e1
 80041b0:	080042e1 	.word	0x080042e1
 80041b4:	080042e1 	.word	0x080042e1
 80041b8:	0800421d 	.word	0x0800421d
 80041bc:	080042e1 	.word	0x080042e1
 80041c0:	080042e1 	.word	0x080042e1
 80041c4:	080042e1 	.word	0x080042e1
 80041c8:	0800425f 	.word	0x0800425f
 80041cc:	080042e1 	.word	0x080042e1
 80041d0:	080042e1 	.word	0x080042e1
 80041d4:	080042e1 	.word	0x080042e1
 80041d8:	0800429f 	.word	0x0800429f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f8ec 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0208 	orr.w	r2, r2, #8
 80041f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6999      	ldr	r1, [r3, #24]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	619a      	str	r2, [r3, #24]
      break;
 800421a:	e062      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	4618      	mov	r0, r3
 8004224:	f000 f932 	bl	800448c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6999      	ldr	r1, [r3, #24]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	021a      	lsls	r2, r3, #8
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	619a      	str	r2, [r3, #24]
      break;
 800425c:	e041      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f97b 	bl	8004560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0208 	orr.w	r2, r2, #8
 8004278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0204 	bic.w	r2, r2, #4
 8004288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69d9      	ldr	r1, [r3, #28]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	61da      	str	r2, [r3, #28]
      break;
 800429c:	e021      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f9c5 	bl	8004634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69d9      	ldr	r1, [r3, #28]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	021a      	lsls	r2, r3, #8
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	61da      	str	r2, [r3, #28]
      break;
 80042de:	e000      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x30>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00b      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d007      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a19      	ldr	r2, [pc, #100]	; (80043b8 <TIM_Base_SetConfig+0xbc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0x62>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <TIM_Base_SetConfig+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <TIM_Base_SetConfig+0xb8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a1c      	ldr	r2, [pc, #112]	; (8004488 <TIM_OC1_SetConfig+0xc8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10c      	bne.n	8004436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0308 	bic.w	r3, r3, #8
 8004422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <TIM_OC1_SetConfig+0xc8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d111      	bne.n	8004462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800444c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	621a      	str	r2, [r3, #32]
}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00

0800448c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0210 	bic.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0320 	bic.w	r3, r3, #32
 80044d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <TIM_OC2_SetConfig+0xd0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10d      	bne.n	8004508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a14      	ldr	r2, [pc, #80]	; (800455c <TIM_OC2_SetConfig+0xd0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d113      	bne.n	8004538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00

08004560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0303 	bic.w	r3, r3, #3
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <TIM_OC3_SetConfig+0xd0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10d      	bne.n	80045da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <TIM_OC3_SetConfig+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d113      	bne.n	800460a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40012c00 	.word	0x40012c00

08004634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <TIM_OC4_SetConfig+0x98>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d109      	bne.n	80046a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00

080046d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2201      	movs	r2, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	401a      	ands	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a1a      	ldr	r2, [r3, #32]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800472c:	2302      	movs	r3, #2
 800472e:	e032      	b.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004768:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e03f      	b.n	8004832 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd fa6e 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2224      	movs	r2, #36	; 0x24
 80047d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fb8d 	bl	8004f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b088      	sub	sp, #32
 800483e:	af02      	add	r7, sp, #8
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	f040 8083 	bne.w	8004962 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_UART_Transmit+0x2e>
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e07b      	b.n	8004964 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Transmit+0x40>
 8004876:	2302      	movs	r3, #2
 8004878:	e074      	b.n	8004964 <HAL_UART_Transmit+0x12a>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004890:	f7fd fc12 	bl	80020b8 <HAL_GetTick>
 8004894:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048a2:	e042      	b.n	800492a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d122      	bne.n	8004902 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f9b2 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e046      	b.n	8004964 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3302      	adds	r3, #2
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	e017      	b.n	800492a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	e013      	b.n	800492a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	2180      	movs	r1, #128	; 0x80
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f98f 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e023      	b.n	8004964 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	60ba      	str	r2, [r7, #8]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1b7      	bne.n	80048a4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2200      	movs	r2, #0
 800493c:	2140      	movs	r1, #64	; 0x40
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f976 	bl	8004c30 <UART_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e00a      	b.n	8004964 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d140      	bne.n	8004a08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_UART_Receive_IT+0x26>
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e039      	b.n	8004a0a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_UART_Receive_IT+0x38>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e032      	b.n	8004a0a <HAL_UART_Receive_IT+0x9e>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	88fa      	ldrh	r2, [r7, #6]
 80049b6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88fa      	ldrh	r2, [r7, #6]
 80049bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2222      	movs	r2, #34	; 0x22
 80049c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0220 	orr.w	r2, r2, #32
 8004a02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_UART_IRQHandler+0x52>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9ce 	bl	8004e00 <UART_Receive_IT>
      return;
 8004a64:	e0cc      	b.n	8004c00 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80ab 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x1b0>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <HAL_UART_IRQHandler+0x70>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80a0 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x90>
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_UART_IRQHandler+0xb0>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	f043 0202 	orr.w	r2, r3, #2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_UART_IRQHandler+0xd0>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	f043 0204 	orr.w	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_UART_IRQHandler+0xf0>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	f043 0208 	orr.w	r2, r3, #8
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d078      	beq.n	8004bfe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_UART_IRQHandler+0x112>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f96d 	bl	8004e00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <HAL_UART_IRQHandler+0x13a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d031      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f8b8 	bl	8004cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d023      	beq.n	8004baa <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d013      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7e:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_UART_IRQHandler+0x1f4>)
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd fbd0 	bl	800232c <HAL_DMA_Abort_IT>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d016      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e00e      	b.n	8004bc0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f83b 	bl	8004c1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e00a      	b.n	8004bc0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f837 	bl	8004c1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	e006      	b.n	8004bc0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f833 	bl	8004c1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004bbe:	e01e      	b.n	8004bfe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc0:	bf00      	nop
    return;
 8004bc2:	e01c      	b.n	8004bfe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_UART_IRQHandler+0x1cc>
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8a4 	bl	8004d26 <UART_Transmit_IT>
    return;
 8004bde:	e00f      	b.n	8004c00 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_UART_IRQHandler+0x1ec>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8eb 	bl	8004dd0 <UART_EndTransmit_IT>
    return;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004bfe:	bf00      	nop
  }
}
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	08004cff 	.word	0x08004cff

08004c0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c40:	e02c      	b.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c48:	d028      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c50:	f7fd fa32 	bl	80020b8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d21d      	bcs.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e00f      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d0c3      	beq.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff ff80 	bl	8004c1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b21      	cmp	r3, #33	; 0x21
 8004d38:	d144      	bne.n	8004dc4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d42:	d11a      	bne.n	8004d7a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d58:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	1c9a      	adds	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]
 8004d6c:	e00e      	b.n	8004d8c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	621a      	str	r2, [r3, #32]
 8004d78:	e008      	b.n	8004d8c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6211      	str	r1, [r2, #32]
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e000      	b.n	8004dc6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff0b 	bl	8004c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b22      	cmp	r3, #34	; 0x22
 8004e12:	d171      	bne.n	8004ef8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1c:	d123      	bne.n	8004e66 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10e      	bne.n	8004e4a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	1c9a      	adds	r2, r3, #2
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
 8004e48:	e029      	b.n	8004e9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
 8004e64:	e01b      	b.n	8004e9e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6858      	ldr	r0, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	1c59      	adds	r1, r3, #1
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6291      	str	r1, [r2, #40]	; 0x28
 8004e7e:	b2c2      	uxtb	r2, r0
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	e00c      	b.n	8004e9e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	1c58      	adds	r0, r3, #1
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	6288      	str	r0, [r1, #40]	; 0x28
 8004e96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d120      	bne.n	8004ef4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0220 	bic.w	r2, r2, #32
 8004ec0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fb ffd4 	bl	8000e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e002      	b.n	8004efa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f3e:	f023 030c 	bic.w	r3, r3, #12
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a52      	ldr	r2, [pc, #328]	; (80050b0 <UART_SetConfig+0x1ac>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d14e      	bne.n	800500a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe ffba 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 8004f70:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009a      	lsls	r2, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	4a4a      	ldr	r2, [pc, #296]	; (80050b4 <UART_SetConfig+0x1b0>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	0119      	lsls	r1, r3, #4
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009a      	lsls	r2, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa8:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <UART_SetConfig+0x1b0>)
 8004faa:	fba3 0302 	umull	r0, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	2064      	movs	r0, #100	; 0x64
 8004fb2:	fb00 f303 	mul.w	r3, r0, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	3332      	adds	r3, #50	; 0x32
 8004fbc:	4a3d      	ldr	r2, [pc, #244]	; (80050b4 <UART_SetConfig+0x1b0>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc8:	4419      	add	r1, r3
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009a      	lsls	r2, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe0:	4b34      	ldr	r3, [pc, #208]	; (80050b4 <UART_SetConfig+0x1b0>)
 8004fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2064      	movs	r0, #100	; 0x64
 8004fea:	fb00 f303 	mul.w	r3, r0, r3
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	3332      	adds	r3, #50	; 0x32
 8004ff4:	4a2f      	ldr	r2, [pc, #188]	; (80050b4 <UART_SetConfig+0x1b0>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	440a      	add	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005008:	e04d      	b.n	80050a6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800500a:	f7fe ff57 	bl	8003ebc <HAL_RCC_GetPCLK1Freq>
 800500e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009a      	lsls	r2, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	fbb2 f3f3 	udiv	r3, r2, r3
 8005026:	4a23      	ldr	r2, [pc, #140]	; (80050b4 <UART_SetConfig+0x1b0>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	0119      	lsls	r1, r3, #4
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009a      	lsls	r2, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	fbb2 f2f3 	udiv	r2, r2, r3
 8005046:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <UART_SetConfig+0x1b0>)
 8005048:	fba3 0302 	umull	r0, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	2064      	movs	r0, #100	; 0x64
 8005050:	fb00 f303 	mul.w	r3, r0, r3
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	3332      	adds	r3, #50	; 0x32
 800505a:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <UART_SetConfig+0x1b0>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005066:	4419      	add	r1, r3
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009a      	lsls	r2, r3, #2
 8005072:	441a      	add	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	fbb2 f2f3 	udiv	r2, r2, r3
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <UART_SetConfig+0x1b0>)
 8005080:	fba3 0302 	umull	r0, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2064      	movs	r0, #100	; 0x64
 8005088:	fb00 f303 	mul.w	r3, r0, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	3332      	adds	r3, #50	; 0x32
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <UART_SetConfig+0x1b0>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	440a      	add	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40013800 	.word	0x40013800
 80050b4:	51eb851f 	.word	0x51eb851f

080050b8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050b8:	b084      	sub	sp, #16
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	f107 0014 	add.w	r0, r7, #20
 80050c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	b004      	add	sp, #16
 80050d6:	4770      	bx	lr

080050d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050e4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800510e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005112:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800511a:	b29b      	uxth	r3, r3
 800511c:	b21a      	sxth	r2, r3
 800511e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005122:	43db      	mvns	r3, r3
 8005124:	b21b      	sxth	r3, r3
 8005126:	4013      	ands	r3, r2
 8005128:	b21b      	sxth	r3, r3
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005156:	b084      	sub	sp, #16
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	f107 0014 	add.w	r0, r7, #20
 8005164:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff ffa5 	bl	80050d8 <USB_EnableGlobalInt>

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800519a:	b004      	add	sp, #16
 800519c:	4770      	bx	lr
	...

080051a0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051a0:	b490      	push	{r4, r7}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80051c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	78db      	ldrb	r3, [r3, #3]
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d819      	bhi.n	8005202 <USB_ActivateEndpoint+0x62>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <USB_ActivateEndpoint+0x34>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051f9 	.word	0x080051f9
 80051dc:	08005209 	.word	0x08005209
 80051e0:	080051ef 	.word	0x080051ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051e4:	89bb      	ldrh	r3, [r7, #12]
 80051e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ea:	81bb      	strh	r3, [r7, #12]
      break;
 80051ec:	e00d      	b.n	800520a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051ee:	89bb      	ldrh	r3, [r7, #12]
 80051f0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051f4:	81bb      	strh	r3, [r7, #12]
      break;
 80051f6:	e008      	b.n	800520a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051f8:	89bb      	ldrh	r3, [r7, #12]
 80051fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051fe:	81bb      	strh	r3, [r7, #12]
      break;
 8005200:	e003      	b.n	800520a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	73fb      	strb	r3, [r7, #15]
      break;
 8005206:	e000      	b.n	800520a <USB_ActivateEndpoint+0x6a>
      break;
 8005208:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	441a      	add	r2, r3
 8005214:	89bb      	ldrh	r3, [r7, #12]
 8005216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800521a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800521e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005226:	b29b      	uxth	r3, r3
 8005228:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	b29a      	uxth	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	4313      	orrs	r3, r2
 800524a:	b29c      	uxth	r4, r3
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	4b8a      	ldr	r3, [pc, #552]	; (8005480 <USB_ActivateEndpoint+0x2e0>)
 8005258:	4323      	orrs	r3, r4
 800525a:	b29b      	uxth	r3, r3
 800525c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	7b1b      	ldrb	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 8112 	bne.w	800548c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d067      	beq.n	8005340 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005270:	687c      	ldr	r4, [r7, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005278:	b29b      	uxth	r3, r3
 800527a:	441c      	add	r4, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	4423      	add	r3, r4
 8005284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005288:	461c      	mov	r4, r3
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	88db      	ldrh	r3, [r3, #6]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	b29b      	uxth	r3, r3
 8005296:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29c      	uxth	r4, r3
 80052a6:	4623      	mov	r3, r4
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d014      	beq.n	80052da <USB_ActivateEndpoint+0x13a>
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	b29c      	uxth	r4, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	4b6c      	ldr	r3, [pc, #432]	; (8005484 <USB_ActivateEndpoint+0x2e4>)
 80052d4:	4323      	orrs	r3, r4
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	78db      	ldrb	r3, [r3, #3]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d018      	beq.n	8005314 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f8:	b29c      	uxth	r4, r3
 80052fa:	f084 0320 	eor.w	r3, r4, #32
 80052fe:	b29c      	uxth	r4, r3
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <USB_ActivateEndpoint+0x2e0>)
 800530c:	4323      	orrs	r3, r4
 800530e:	b29b      	uxth	r3, r3
 8005310:	8013      	strh	r3, [r2, #0]
 8005312:	e22b      	b.n	800576c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532a:	b29c      	uxth	r4, r3
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	441a      	add	r2, r3
 8005336:	4b52      	ldr	r3, [pc, #328]	; (8005480 <USB_ActivateEndpoint+0x2e0>)
 8005338:	4323      	orrs	r3, r4
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]
 800533e:	e215      	b.n	800576c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005340:	687c      	ldr	r4, [r7, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	441c      	add	r4, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	4423      	add	r3, r4
 8005354:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005358:	461c      	mov	r4, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	88db      	ldrh	r3, [r3, #6]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	b29b      	uxth	r3, r3
 8005366:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005368:	687c      	ldr	r4, [r7, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	441c      	add	r4, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	4423      	add	r3, r4
 800537c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005380:	461c      	mov	r4, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10e      	bne.n	80053a8 <USB_ActivateEndpoint+0x208>
 800538a:	8823      	ldrh	r3, [r4, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005392:	b29b      	uxth	r3, r3
 8005394:	8023      	strh	r3, [r4, #0]
 8005396:	8823      	ldrh	r3, [r4, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8023      	strh	r3, [r4, #0]
 80053a6:	e02d      	b.n	8005404 <USB_ActivateEndpoint+0x264>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b3e      	cmp	r3, #62	; 0x3e
 80053ae:	d812      	bhi.n	80053d6 <USB_ActivateEndpoint+0x236>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	60bb      	str	r3, [r7, #8]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <USB_ActivateEndpoint+0x22a>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	8023      	strh	r3, [r4, #0]
 80053d4:	e016      	b.n	8005404 <USB_ActivateEndpoint+0x264>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d102      	bne.n	80053f0 <USB_ActivateEndpoint+0x250>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005400:	b29b      	uxth	r3, r3
 8005402:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29c      	uxth	r4, r3
 8005412:	4623      	mov	r3, r4
 8005414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d014      	beq.n	8005446 <USB_ActivateEndpoint+0x2a6>
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	b29c      	uxth	r4, r3
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	441a      	add	r2, r3
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <USB_ActivateEndpoint+0x2e8>)
 8005440:	4323      	orrs	r3, r4
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	b29c      	uxth	r4, r3
 800545e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005462:	b29c      	uxth	r4, r3
 8005464:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005468:	b29c      	uxth	r4, r3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	4b02      	ldr	r3, [pc, #8]	; (8005480 <USB_ActivateEndpoint+0x2e0>)
 8005476:	4323      	orrs	r3, r4
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]
 800547c:	e176      	b.n	800576c <USB_ActivateEndpoint+0x5cc>
 800547e:	bf00      	nop
 8005480:	ffff8080 	.word	0xffff8080
 8005484:	ffff80c0 	.word	0xffff80c0
 8005488:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	b29c      	uxth	r4, r3
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	4b96      	ldr	r3, [pc, #600]	; (8005708 <USB_ActivateEndpoint+0x568>)
 80054b0:	4323      	orrs	r3, r4
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80054b6:	687c      	ldr	r4, [r7, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	441c      	add	r4, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	4423      	add	r3, r4
 80054ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ce:	461c      	mov	r4, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	891b      	ldrh	r3, [r3, #8]
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	005b      	lsls	r3, r3, #1
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8023      	strh	r3, [r4, #0]
 80054de:	687c      	ldr	r4, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	441c      	add	r4, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4423      	add	r3, r4
 80054f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80054f6:	461c      	mov	r4, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	895b      	ldrh	r3, [r3, #10]
 80054fc:	085b      	lsrs	r3, r3, #1
 80054fe:	b29b      	uxth	r3, r3
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	b29b      	uxth	r3, r3
 8005504:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8088 	bne.w	8005620 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29c      	uxth	r4, r3
 800551e:	4623      	mov	r3, r4
 8005520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d014      	beq.n	8005552 <USB_ActivateEndpoint+0x3b2>
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	b29c      	uxth	r4, r3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	4b70      	ldr	r3, [pc, #448]	; (800570c <USB_ActivateEndpoint+0x56c>)
 800554c:	4323      	orrs	r3, r4
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29c      	uxth	r4, r3
 8005560:	4623      	mov	r3, r4
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <USB_ActivateEndpoint+0x3f4>
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	b29c      	uxth	r4, r3
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	4b60      	ldr	r3, [pc, #384]	; (8005710 <USB_ActivateEndpoint+0x570>)
 800558e:	4323      	orrs	r3, r4
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	b29c      	uxth	r4, r3
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	4b56      	ldr	r3, [pc, #344]	; (8005710 <USB_ActivateEndpoint+0x570>)
 80055b8:	4323      	orrs	r3, r4
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d4:	b29c      	uxth	r4, r3
 80055d6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80055da:	b29c      	uxth	r4, r3
 80055dc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80055e0:	b29c      	uxth	r4, r3
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	4b49      	ldr	r3, [pc, #292]	; (8005714 <USB_ActivateEndpoint+0x574>)
 80055ee:	4323      	orrs	r3, r4
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560a:	b29c      	uxth	r4, r3
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <USB_ActivateEndpoint+0x574>)
 8005618:	4323      	orrs	r3, r4
 800561a:	b29b      	uxth	r3, r3
 800561c:	8013      	strh	r3, [r2, #0]
 800561e:	e0a5      	b.n	800576c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29c      	uxth	r4, r3
 800562e:	4623      	mov	r3, r4
 8005630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d014      	beq.n	8005662 <USB_ActivateEndpoint+0x4c2>
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	b29c      	uxth	r4, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <USB_ActivateEndpoint+0x56c>)
 800565c:	4323      	orrs	r3, r4
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29c      	uxth	r4, r3
 8005670:	4623      	mov	r3, r4
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d014      	beq.n	80056a4 <USB_ActivateEndpoint+0x504>
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005690:	b29c      	uxth	r4, r3
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	441a      	add	r2, r3
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <USB_ActivateEndpoint+0x570>)
 800569e:	4323      	orrs	r3, r4
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	b29c      	uxth	r4, r3
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <USB_ActivateEndpoint+0x56c>)
 80056c8:	4323      	orrs	r3, r4
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	78db      	ldrb	r3, [r3, #3]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d020      	beq.n	8005718 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ec:	b29c      	uxth	r4, r3
 80056ee:	f084 0320 	eor.w	r3, r4, #32
 80056f2:	b29c      	uxth	r4, r3
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <USB_ActivateEndpoint+0x574>)
 8005700:	4323      	orrs	r3, r4
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]
 8005706:	e01c      	b.n	8005742 <USB_ActivateEndpoint+0x5a2>
 8005708:	ffff8180 	.word	0xffff8180
 800570c:	ffffc080 	.word	0xffffc080
 8005710:	ffff80c0 	.word	0xffff80c0
 8005714:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572e:	b29c      	uxth	r4, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	4b0f      	ldr	r3, [pc, #60]	; (8005778 <USB_ActivateEndpoint+0x5d8>)
 800573c:	4323      	orrs	r3, r4
 800573e:	b29b      	uxth	r3, r3
 8005740:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	b29c      	uxth	r4, r3
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	441a      	add	r2, r3
 8005764:	4b04      	ldr	r3, [pc, #16]	; (8005778 <USB_ActivateEndpoint+0x5d8>)
 8005766:	4323      	orrs	r3, r4
 8005768:	b29b      	uxth	r3, r3
 800576a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800576c:	7bfb      	ldrb	r3, [r7, #15]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bc90      	pop	{r4, r7}
 8005776:	4770      	bx	lr
 8005778:	ffff8080 	.word	0xffff8080

0800577c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800577c:	b490      	push	{r4, r7}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	7b1b      	ldrb	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d171      	bne.n	8005872 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d036      	beq.n	8005804 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29c      	uxth	r4, r3
 80057a4:	4623      	mov	r3, r4
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d014      	beq.n	80057d8 <USB_DeactivateEndpoint+0x5c>
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	b29c      	uxth	r4, r3
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	441a      	add	r2, r3
 80057d0:	4b6b      	ldr	r3, [pc, #428]	; (8005980 <USB_DeactivateEndpoint+0x204>)
 80057d2:	4323      	orrs	r3, r4
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ee:	b29c      	uxth	r4, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	4b62      	ldr	r3, [pc, #392]	; (8005984 <USB_DeactivateEndpoint+0x208>)
 80057fc:	4323      	orrs	r3, r4
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	e144      	b.n	8005a8e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29c      	uxth	r4, r3
 8005812:	4623      	mov	r3, r4
 8005814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d014      	beq.n	8005846 <USB_DeactivateEndpoint+0xca>
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	b29c      	uxth	r4, r3
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	4b52      	ldr	r3, [pc, #328]	; (8005988 <USB_DeactivateEndpoint+0x20c>)
 8005840:	4323      	orrs	r3, r4
 8005842:	b29b      	uxth	r3, r3
 8005844:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	b29c      	uxth	r4, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	441a      	add	r2, r3
 8005868:	4b46      	ldr	r3, [pc, #280]	; (8005984 <USB_DeactivateEndpoint+0x208>)
 800586a:	4323      	orrs	r3, r4
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]
 8005870:	e10d      	b.n	8005a8e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 8088 	bne.w	800598c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29c      	uxth	r4, r3
 800588a:	4623      	mov	r3, r4
 800588c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d014      	beq.n	80058be <USB_DeactivateEndpoint+0x142>
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	b29c      	uxth	r4, r3
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	4b34      	ldr	r3, [pc, #208]	; (8005988 <USB_DeactivateEndpoint+0x20c>)
 80058b8:	4323      	orrs	r3, r4
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29c      	uxth	r4, r3
 80058cc:	4623      	mov	r3, r4
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d014      	beq.n	8005900 <USB_DeactivateEndpoint+0x184>
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ec:	b29c      	uxth	r4, r3
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	4b21      	ldr	r3, [pc, #132]	; (8005980 <USB_DeactivateEndpoint+0x204>)
 80058fa:	4323      	orrs	r3, r4
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	b29c      	uxth	r4, r3
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	4b17      	ldr	r3, [pc, #92]	; (8005980 <USB_DeactivateEndpoint+0x204>)
 8005924:	4323      	orrs	r3, r4
 8005926:	b29b      	uxth	r3, r3
 8005928:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	b29c      	uxth	r4, r3
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <USB_DeactivateEndpoint+0x208>)
 800594e:	4323      	orrs	r3, r4
 8005950:	b29b      	uxth	r3, r3
 8005952:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596a:	b29c      	uxth	r4, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	4b03      	ldr	r3, [pc, #12]	; (8005984 <USB_DeactivateEndpoint+0x208>)
 8005978:	4323      	orrs	r3, r4
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]
 800597e:	e086      	b.n	8005a8e <USB_DeactivateEndpoint+0x312>
 8005980:	ffff80c0 	.word	0xffff80c0
 8005984:	ffff8080 	.word	0xffff8080
 8005988:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29c      	uxth	r4, r3
 800599a:	4623      	mov	r3, r4
 800599c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d014      	beq.n	80059ce <USB_DeactivateEndpoint+0x252>
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	b29c      	uxth	r4, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	4b35      	ldr	r3, [pc, #212]	; (8005a9c <USB_DeactivateEndpoint+0x320>)
 80059c8:	4323      	orrs	r3, r4
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29c      	uxth	r4, r3
 80059dc:	4623      	mov	r3, r4
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d014      	beq.n	8005a10 <USB_DeactivateEndpoint+0x294>
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fc:	b29c      	uxth	r4, r3
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <USB_DeactivateEndpoint+0x324>)
 8005a0a:	4323      	orrs	r3, r4
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	b29c      	uxth	r4, r3
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	441a      	add	r2, r3
 8005a32:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <USB_DeactivateEndpoint+0x320>)
 8005a34:	4323      	orrs	r3, r4
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a50:	b29c      	uxth	r4, r3
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <USB_DeactivateEndpoint+0x328>)
 8005a5e:	4323      	orrs	r3, r4
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	b29c      	uxth	r4, r3
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <USB_DeactivateEndpoint+0x328>)
 8005a88:	4323      	orrs	r3, r4
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc90      	pop	{r4, r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	ffffc080 	.word	0xffffc080
 8005aa0:	ffff80c0 	.word	0xffff80c0
 8005aa4:	ffff8080 	.word	0xffff8080

08005aa8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b08d      	sub	sp, #52	; 0x34
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	f040 8160 	bne.w	8005d7c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d909      	bls.n	8005adc <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	1ad2      	subs	r2, r2, r3
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	619a      	str	r2, [r3, #24]
 8005ada:	e005      	b.n	8005ae8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	7b1b      	ldrb	r3, [r3, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d119      	bne.n	8005b24 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	6959      	ldr	r1, [r3, #20]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	88da      	ldrh	r2, [r3, #6]
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fba2 	bl	8006246 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b02:	687c      	ldr	r4, [r7, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	441c      	add	r4, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	4423      	add	r3, r4
 8005b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1a:	461c      	mov	r4, r3
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8023      	strh	r3, [r4, #0]
 8005b22:	e10f      	b.n	8005d44 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d065      	beq.n	8005c06 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b3a:	687c      	ldr	r4, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d148      	bne.n	8005bd6 <USB_EPStartXfer+0x12e>
 8005b44:	687c      	ldr	r4, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	441c      	add	r4, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	4423      	add	r3, r4
 8005b58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10e      	bne.n	8005b82 <USB_EPStartXfer+0xda>
 8005b64:	8823      	ldrh	r3, [r4, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	8023      	strh	r3, [r4, #0]
 8005b70:	8823      	ldrh	r3, [r4, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8023      	strh	r3, [r4, #0]
 8005b80:	e03d      	b.n	8005bfe <USB_EPStartXfer+0x156>
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	2b3e      	cmp	r3, #62	; 0x3e
 8005b86:	d810      	bhi.n	8005baa <USB_EPStartXfer+0x102>
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <USB_EPStartXfer+0xf6>
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	029b      	lsls	r3, r3, #10
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	8023      	strh	r3, [r4, #0]
 8005ba8:	e029      	b.n	8005bfe <USB_EPStartXfer+0x156>
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <USB_EPStartXfer+0x118>
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8023      	strh	r3, [r4, #0]
 8005bd4:	e013      	b.n	8005bfe <USB_EPStartXfer+0x156>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10f      	bne.n	8005bfe <USB_EPStartXfer+0x156>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	441c      	add	r4, r3
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4423      	add	r3, r4
 8005bf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	895b      	ldrh	r3, [r3, #10]
 8005c02:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005c04:	e063      	b.n	8005cce <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d148      	bne.n	8005ca0 <USB_EPStartXfer+0x1f8>
 8005c0e:	687c      	ldr	r4, [r7, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	441c      	add	r4, r3
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	4423      	add	r3, r4
 8005c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c26:	461c      	mov	r4, r3
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10e      	bne.n	8005c4c <USB_EPStartXfer+0x1a4>
 8005c2e:	8823      	ldrh	r3, [r4, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8023      	strh	r3, [r4, #0]
 8005c3a:	8823      	ldrh	r3, [r4, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8023      	strh	r3, [r4, #0]
 8005c4a:	e03d      	b.n	8005cc8 <USB_EPStartXfer+0x220>
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c50:	d810      	bhi.n	8005c74 <USB_EPStartXfer+0x1cc>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	623b      	str	r3, [r7, #32]
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <USB_EPStartXfer+0x1c0>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	3301      	adds	r3, #1
 8005c66:	623b      	str	r3, [r7, #32]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	029b      	lsls	r3, r3, #10
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8023      	strh	r3, [r4, #0]
 8005c72:	e029      	b.n	8005cc8 <USB_EPStartXfer+0x220>
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <USB_EPStartXfer+0x1e2>
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	029b      	lsls	r3, r3, #10
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8023      	strh	r3, [r4, #0]
 8005c9e:	e013      	b.n	8005cc8 <USB_EPStartXfer+0x220>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d10f      	bne.n	8005cc8 <USB_EPStartXfer+0x220>
 8005ca8:	687c      	ldr	r4, [r7, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	441c      	add	r4, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	4423      	add	r3, r4
 8005cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cc0:	461c      	mov	r4, r3
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	891b      	ldrh	r3, [r3, #8]
 8005ccc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6959      	ldr	r1, [r3, #20]
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fab4 	bl	8006246 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d115      	bne.n	8005d12 <USB_EPStartXfer+0x26a>
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfc:	b29c      	uxth	r4, r3
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	4b9a      	ldr	r3, [pc, #616]	; (8005f74 <USB_EPStartXfer+0x4cc>)
 8005d0a:	4323      	orrs	r3, r4
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]
 8005d10:	e018      	b.n	8005d44 <USB_EPStartXfer+0x29c>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d114      	bne.n	8005d44 <USB_EPStartXfer+0x29c>
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d30:	b29c      	uxth	r4, r3
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	4b8e      	ldr	r3, [pc, #568]	; (8005f78 <USB_EPStartXfer+0x4d0>)
 8005d3e:	4323      	orrs	r3, r4
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5a:	b29c      	uxth	r4, r3
 8005d5c:	f084 0310 	eor.w	r3, r4, #16
 8005d60:	b29c      	uxth	r4, r3
 8005d62:	f084 0320 	eor.w	r3, r4, #32
 8005d66:	b29c      	uxth	r4, r3
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	441a      	add	r2, r3
 8005d72:	4b82      	ldr	r3, [pc, #520]	; (8005f7c <USB_EPStartXfer+0x4d4>)
 8005d74:	4323      	orrs	r3, r4
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]
 8005d7a:	e146      	b.n	800600a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d909      	bls.n	8005d9c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	619a      	str	r2, [r3, #24]
 8005d9a:	e005      	b.n	8005da8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	7b1b      	ldrb	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d148      	bne.n	8005e42 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005db0:	687c      	ldr	r4, [r7, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	441c      	add	r4, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	4423      	add	r3, r4
 8005dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dc8:	461c      	mov	r4, r3
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10e      	bne.n	8005dee <USB_EPStartXfer+0x346>
 8005dd0:	8823      	ldrh	r3, [r4, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8023      	strh	r3, [r4, #0]
 8005ddc:	8823      	ldrh	r3, [r4, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	8023      	strh	r3, [r4, #0]
 8005dec:	e0f2      	b.n	8005fd4 <USB_EPStartXfer+0x52c>
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	2b3e      	cmp	r3, #62	; 0x3e
 8005df2:	d810      	bhi.n	8005e16 <USB_EPStartXfer+0x36e>
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <USB_EPStartXfer+0x362>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	3301      	adds	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8023      	strh	r3, [r4, #0]
 8005e14:	e0de      	b.n	8005fd4 <USB_EPStartXfer+0x52c>
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d102      	bne.n	8005e2c <USB_EPStartXfer+0x384>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	029b      	lsls	r3, r3, #10
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	8023      	strh	r3, [r4, #0]
 8005e40:	e0c8      	b.n	8005fd4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	785b      	ldrb	r3, [r3, #1]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d148      	bne.n	8005edc <USB_EPStartXfer+0x434>
 8005e4a:	687c      	ldr	r4, [r7, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	441c      	add	r4, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	4423      	add	r3, r4
 8005e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e62:	461c      	mov	r4, r3
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10e      	bne.n	8005e88 <USB_EPStartXfer+0x3e0>
 8005e6a:	8823      	ldrh	r3, [r4, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8023      	strh	r3, [r4, #0]
 8005e76:	8823      	ldrh	r3, [r4, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	8023      	strh	r3, [r4, #0]
 8005e86:	e03d      	b.n	8005f04 <USB_EPStartXfer+0x45c>
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e8c:	d810      	bhi.n	8005eb0 <USB_EPStartXfer+0x408>
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <USB_EPStartXfer+0x3fc>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	029b      	lsls	r3, r3, #10
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8023      	strh	r3, [r4, #0]
 8005eae:	e029      	b.n	8005f04 <USB_EPStartXfer+0x45c>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <USB_EPStartXfer+0x41e>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	8023      	strh	r3, [r4, #0]
 8005eda:	e013      	b.n	8005f04 <USB_EPStartXfer+0x45c>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10f      	bne.n	8005f04 <USB_EPStartXfer+0x45c>
 8005ee4:	687c      	ldr	r4, [r7, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	441c      	add	r4, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	4423      	add	r3, r4
 8005ef8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005efc:	461c      	mov	r4, r3
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	8023      	strh	r3, [r4, #0]
 8005f04:	687c      	ldr	r4, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d14e      	bne.n	8005fac <USB_EPStartXfer+0x504>
 8005f0e:	687c      	ldr	r4, [r7, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	441c      	add	r4, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	4423      	add	r3, r4
 8005f22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f26:	461c      	mov	r4, r3
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10e      	bne.n	8005f4c <USB_EPStartXfer+0x4a4>
 8005f2e:	8823      	ldrh	r3, [r4, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8023      	strh	r3, [r4, #0]
 8005f3a:	8823      	ldrh	r3, [r4, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8023      	strh	r3, [r4, #0]
 8005f4a:	e043      	b.n	8005fd4 <USB_EPStartXfer+0x52c>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f50:	d816      	bhi.n	8005f80 <USB_EPStartXfer+0x4d8>
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <USB_EPStartXfer+0x4c0>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3301      	adds	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	8023      	strh	r3, [r4, #0]
 8005f72:	e02f      	b.n	8005fd4 <USB_EPStartXfer+0x52c>
 8005f74:	ffff80c0 	.word	0xffff80c0
 8005f78:	ffffc080 	.word	0xffffc080
 8005f7c:	ffff8080 	.word	0xffff8080
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <USB_EPStartXfer+0x4ee>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	029b      	lsls	r3, r3, #10
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8023      	strh	r3, [r4, #0]
 8005faa:	e013      	b.n	8005fd4 <USB_EPStartXfer+0x52c>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d10f      	bne.n	8005fd4 <USB_EPStartXfer+0x52c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	441c      	add	r4, r3
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	4423      	add	r3, r4
 8005fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	b29c      	uxth	r4, r3
 8005fec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ff0:	b29c      	uxth	r4, r3
 8005ff2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005ff6:	b29c      	uxth	r4, r3
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	441a      	add	r2, r3
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <USB_EPStartXfer+0x56c>)
 8006004:	4323      	orrs	r3, r4
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3734      	adds	r7, #52	; 0x34
 8006010:	46bd      	mov	sp, r7
 8006012:	bd90      	pop	{r4, r7, pc}
 8006014:	ffff8080 	.word	0xffff8080

08006018 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006018:	b490      	push	{r4, r7}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006040:	b29c      	uxth	r4, r3
 8006042:	f084 0310 	eor.w	r3, r4, #16
 8006046:	b29c      	uxth	r4, r3
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <USB_EPSetStall+0x80>)
 8006054:	4323      	orrs	r3, r4
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]
 800605a:	e017      	b.n	800608c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800606e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006072:	b29c      	uxth	r4, r3
 8006074:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006078:	b29c      	uxth	r4, r3
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <USB_EPSetStall+0x80>)
 8006086:	4323      	orrs	r3, r4
 8006088:	b29b      	uxth	r3, r3
 800608a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bc90      	pop	{r4, r7}
 8006096:	4770      	bx	lr
 8006098:	ffff8080 	.word	0xffff8080

0800609c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800609c:	b490      	push	{r4, r7}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	7b1b      	ldrb	r3, [r3, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d17d      	bne.n	80061aa <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d03d      	beq.n	8006132 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29c      	uxth	r4, r3
 80060c4:	4623      	mov	r3, r4
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d014      	beq.n	80060f8 <USB_EPClearStall+0x5c>
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e4:	b29c      	uxth	r4, r3
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <USB_EPClearStall+0x11c>)
 80060f2:	4323      	orrs	r3, r4
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d054      	beq.n	80061aa <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006116:	b29c      	uxth	r4, r3
 8006118:	f084 0320 	eor.w	r3, r4, #32
 800611c:	b29c      	uxth	r4, r3
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	441a      	add	r2, r3
 8006128:	4b24      	ldr	r3, [pc, #144]	; (80061bc <USB_EPClearStall+0x120>)
 800612a:	4323      	orrs	r3, r4
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]
 8006130:	e03b      	b.n	80061aa <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29c      	uxth	r4, r3
 8006140:	4623      	mov	r3, r4
 8006142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d014      	beq.n	8006174 <USB_EPClearStall+0xd8>
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	b29c      	uxth	r4, r3
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <USB_EPClearStall+0x124>)
 800616e:	4323      	orrs	r3, r4
 8006170:	b29b      	uxth	r3, r3
 8006172:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	b29c      	uxth	r4, r3
 800618c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006190:	b29c      	uxth	r4, r3
 8006192:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006196:	b29c      	uxth	r4, r3
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <USB_EPClearStall+0x120>)
 80061a4:	4323      	orrs	r3, r4
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc90      	pop	{r4, r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	ffff80c0 	.word	0xffff80c0
 80061bc:	ffff8080 	.word	0xffff8080
 80061c0:	ffffc080 	.word	0xffffc080

080061c4 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2280      	movs	r2, #128	; 0x80
 80061da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr

080061ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr

08006212 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006220:	b29b      	uxth	r3, r3
 8006222:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006246:	b480      	push	{r7}
 8006248:	b08d      	sub	sp, #52	; 0x34
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	4611      	mov	r1, r2
 8006252:	461a      	mov	r2, r3
 8006254:	460b      	mov	r3, r1
 8006256:	80fb      	strh	r3, [r7, #6]
 8006258:	4613      	mov	r3, r2
 800625a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	3301      	adds	r3, #1
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	005a      	lsls	r2, r3, #1
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006278:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627e:	e01e      	b.n	80062be <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	3301      	adds	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	3302      	adds	r3, #2
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	3302      	adds	r3, #2
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	3301      	adds	r3, #1
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	3b01      	subs	r3, #1
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1dd      	bne.n	8006280 <USB_WritePMA+0x3a>
  }
}
 80062c4:	bf00      	nop
 80062c6:	3734      	adds	r7, #52	; 0x34
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b08b      	sub	sp, #44	; 0x2c
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	4611      	mov	r1, r2
 80062da:	461a      	mov	r2, r3
 80062dc:	460b      	mov	r3, r1
 80062de:	80fb      	strh	r3, [r7, #6]
 80062e0:	4613      	mov	r3, r2
 80062e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062e4:	88bb      	ldrh	r3, [r7, #4]
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	005a      	lsls	r2, r3, #1
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006300:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	e01b      	b.n	8006340 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	3302      	adds	r3, #2
 8006314:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b2da      	uxtb	r2, r3
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	3301      	adds	r3, #1
 8006332:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	3302      	adds	r3, #2
 8006338:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	3b01      	subs	r3, #1
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e0      	bne.n	8006308 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006346:	88bb      	ldrh	r3, [r7, #4]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d007      	beq.n	8006362 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	701a      	strb	r2, [r3, #0]
  }
}
 8006362:	bf00      	nop
 8006364:	372c      	adds	r7, #44	; 0x2c
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7c1b      	ldrb	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d115      	bne.n	80063b0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006388:	2202      	movs	r2, #2
 800638a:	2181      	movs	r1, #129	; 0x81
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 fe74 	bl	800807a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800639c:	2202      	movs	r2, #2
 800639e:	2101      	movs	r1, #1
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fe6a 	bl	800807a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80063ae:	e012      	b.n	80063d6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063b0:	2340      	movs	r3, #64	; 0x40
 80063b2:	2202      	movs	r2, #2
 80063b4:	2181      	movs	r1, #129	; 0x81
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fe5f 	bl	800807a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	2202      	movs	r2, #2
 80063c6:	2101      	movs	r1, #1
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 fe56 	bl	800807a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063d6:	2308      	movs	r3, #8
 80063d8:	2203      	movs	r2, #3
 80063da:	2182      	movs	r1, #130	; 0x82
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 fe4c 	bl	800807a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063ec:	f001 ff66 	bl	80082bc <USBD_static_malloc>
 80063f0:	4602      	mov	r2, r0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
 8006406:	e026      	b.n	8006456 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	7c1b      	ldrb	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800643c:	2101      	movs	r1, #1
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 ff05 	bl	800824e <USBD_LL_PrepareReceive>
 8006444:	e007      	b.n	8006456 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800644c:	2340      	movs	r3, #64	; 0x40
 800644e:	2101      	movs	r1, #1
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fefc 	bl	800824e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006456:	7bfb      	ldrb	r3, [r7, #15]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006470:	2181      	movs	r1, #129	; 0x81
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fe27 	bl	80080c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800647e:	2101      	movs	r1, #1
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 fe20 	bl	80080c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800648e:	2182      	movs	r1, #130	; 0x82
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fe18 	bl	80080c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 ff0c 	bl	80082d4 <USBD_static_free>
    pdev->pClassData = NULL;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b086      	sub	sp, #24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d039      	beq.n	800656c <USBD_CDC_Setup+0x9e>
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d17c      	bne.n	80065f6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	88db      	ldrh	r3, [r3, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d029      	beq.n	8006558 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	b25b      	sxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	da11      	bge.n	8006532 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800651a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	88d2      	ldrh	r2, [r2, #6]
 8006520:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006522:	6939      	ldr	r1, [r7, #16]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	88db      	ldrh	r3, [r3, #6]
 8006528:	461a      	mov	r2, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 f9f6 	bl	800791c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006530:	e068      	b.n	8006604 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	785a      	ldrb	r2, [r3, #1]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	88db      	ldrh	r3, [r3, #6]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006548:	6939      	ldr	r1, [r7, #16]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	461a      	mov	r2, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fa11 	bl	8007978 <USBD_CtlPrepareRx>
      break;
 8006556:	e055      	b.n	8006604 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	7850      	ldrb	r0, [r2, #1]
 8006564:	2200      	movs	r2, #0
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	4798      	blx	r3
      break;
 800656a:	e04b      	b.n	8006604 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b0a      	cmp	r3, #10
 8006572:	d017      	beq.n	80065a4 <USBD_CDC_Setup+0xd6>
 8006574:	2b0b      	cmp	r3, #11
 8006576:	d029      	beq.n	80065cc <USBD_CDC_Setup+0xfe>
 8006578:	2b00      	cmp	r3, #0
 800657a:	d133      	bne.n	80065e4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006582:	2b03      	cmp	r3, #3
 8006584:	d107      	bne.n	8006596 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	2202      	movs	r2, #2
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 f9c4 	bl	800791c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006594:	e02e      	b.n	80065f4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 f955 	bl	8007848 <USBD_CtlError>
            ret = USBD_FAIL;
 800659e:	2302      	movs	r3, #2
 80065a0:	75fb      	strb	r3, [r7, #23]
          break;
 80065a2:	e027      	b.n	80065f4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065aa:	2b03      	cmp	r3, #3
 80065ac:	d107      	bne.n	80065be <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80065ae:	f107 030f 	add.w	r3, r7, #15
 80065b2:	2201      	movs	r2, #1
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 f9b0 	bl	800791c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065bc:	e01a      	b.n	80065f4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f941 	bl	8007848 <USBD_CtlError>
            ret = USBD_FAIL;
 80065c6:	2302      	movs	r3, #2
 80065c8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ca:	e013      	b.n	80065f4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d00d      	beq.n	80065f2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f935 	bl	8007848 <USBD_CtlError>
            ret = USBD_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065e2:	e006      	b.n	80065f2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 f92e 	bl	8007848 <USBD_CtlError>
          ret = USBD_FAIL;
 80065ec:	2302      	movs	r3, #2
 80065ee:	75fb      	strb	r3, [r7, #23]
          break;
 80065f0:	e000      	b.n	80065f4 <USBD_CDC_Setup+0x126>
          break;
 80065f2:	bf00      	nop
      }
      break;
 80065f4:	e006      	b.n	8006604 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 f925 	bl	8007848 <USBD_CtlError>
      ret = USBD_FAIL;
 80065fe:	2302      	movs	r3, #2
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006620:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006628:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d037      	beq.n	80066a4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	331c      	adds	r3, #28
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d026      	beq.n	8006698 <USBD_CDC_DataIn+0x8a>
 800664a:	78fa      	ldrb	r2, [r7, #3]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	331c      	adds	r3, #28
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	0152      	lsls	r2, r2, #5
 8006662:	440a      	add	r2, r1
 8006664:	3238      	adds	r2, #56	; 0x38
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	fbb3 f1f2 	udiv	r1, r3, r2
 800666c:	fb02 f201 	mul.w	r2, r2, r1
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d110      	bne.n	8006698 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	331c      	adds	r3, #28
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800668a:	78f9      	ldrb	r1, [r7, #3]
 800668c:	2300      	movs	r3, #0
 800668e:	2200      	movs	r2, #0
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 fdb9 	bl	8008208 <USBD_LL_Transmit>
 8006696:	e003      	b.n	80066a0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fde4 	bl	8008294 <USBD_LL_GetRxDataSize>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00d      	beq.n	80066fa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066f2:	4611      	mov	r1, r2
 80066f4:	4798      	blx	r3

    return USBD_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066fa:	2302      	movs	r3, #2
  }
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <USBD_CDC_EP0_RxReady+0x46>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006724:	2bff      	cmp	r3, #255	; 0xff
 8006726:	d010      	beq.n	800674a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006736:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800673e:	b292      	uxth	r2, r2
 8006740:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2243      	movs	r2, #67	; 0x43
 8006760:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000094 	.word	0x20000094

08006774 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2243      	movs	r2, #67	; 0x43
 8006780:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006782:	4b03      	ldr	r3, [pc, #12]	; (8006790 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000050 	.word	0x20000050

08006794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2243      	movs	r2, #67	; 0x43
 80067a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	200000d8 	.word	0x200000d8

080067b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	220a      	movs	r2, #10
 80067c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067c2:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	2000000c 	.word	0x2000000c

080067d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067de:	2302      	movs	r3, #2
 80067e0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800681e:	88fa      	ldrh	r2, [r7, #6]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006866:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01c      	beq.n	80068ac <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006878:	2b00      	cmp	r3, #0
 800687a:	d115      	bne.n	80068a8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2201      	movs	r2, #1
 8006880:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800689a:	b29b      	uxth	r3, r3
 800689c:	2181      	movs	r1, #129	; 0x81
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fcb2 	bl	8008208 <USBD_LL_Transmit>

      return USBD_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e002      	b.n	80068ae <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d017      	beq.n	8006900 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	7c1b      	ldrb	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e2:	2101      	movs	r1, #1
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fcb2 	bl	800824e <USBD_LL_PrepareReceive>
 80068ea:	e007      	b.n	80068fc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f2:	2340      	movs	r3, #64	; 0x40
 80068f4:	2101      	movs	r1, #1
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fca9 	bl	800824e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e000      	b.n	8006902 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006900:	2302      	movs	r3, #2
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	4613      	mov	r3, r2
 8006916:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800691e:	2302      	movs	r3, #2
 8006920:	e01a      	b.n	8006958 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	79fa      	ldrb	r2, [r7, #7]
 800694e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f001 fb1d 	bl	8007f90 <USBD_LL_Init>

  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d006      	beq.n	8006982 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e001      	b.n	8006986 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006982:	2302      	movs	r3, #2
 8006984:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fb52 	bl	8008044 <USBD_LL_Start>

  return USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069ca:	2302      	movs	r3, #2
 80069cc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	4611      	mov	r1, r2
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	78fa      	ldrb	r2, [r7, #3]
 8006a12:	4611      	mov	r1, r2
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3

  return USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b082      	sub	sp, #8
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fecb 	bl	80077d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a48:	461a      	mov	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d00c      	beq.n	8006a78 <USBD_LL_SetupStage+0x56>
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d302      	bcc.n	8006a68 <USBD_LL_SetupStage+0x46>
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d010      	beq.n	8006a88 <USBD_LL_SetupStage+0x66>
 8006a66:	e017      	b.n	8006a98 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f9cb 	bl	8006e0c <USBD_StdDevReq>
      break;
 8006a76:	e01a      	b.n	8006aae <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fa2d 	bl	8006ee0 <USBD_StdItfReq>
      break;
 8006a86:	e012      	b.n	8006aae <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa6b 	bl	8006f6c <USBD_StdEPReq>
      break;
 8006a96:	e00a      	b.n	8006aae <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 fb2c 	bl	8008104 <USBD_LL_StallEP>
      break;
 8006aac:	bf00      	nop
  }

  return USBD_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d14b      	bne.n	8006b64 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ad2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d134      	bne.n	8006b48 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d919      	bls.n	8006b1e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d203      	bcs.n	8006b0c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	e002      	b.n	8006b12 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	461a      	mov	r2, r3
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 ff4c 	bl	80079b4 <USBD_CtlContinueRx>
 8006b1c:	e038      	b.n	8006b90 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d105      	bne.n	8006b40 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 ff49 	bl	80079d8 <USBD_CtlSendStatus>
 8006b46:	e023      	b.n	8006b90 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b4e:	2b05      	cmp	r3, #5
 8006b50:	d11e      	bne.n	8006b90 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f001 fad1 	bl	8008104 <USBD_LL_StallEP>
 8006b62:	e015      	b.n	8006b90 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d108      	bne.n	8006b8c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	7afa      	ldrb	r2, [r7, #11]
 8006b84:	4611      	mov	r1, r2
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	4798      	blx	r3
 8006b8a:	e001      	b.n	8006b90 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e000      	b.n	8006b92 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	607a      	str	r2, [r7, #4]
 8006ba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d17f      	bne.n	8006cae <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d15c      	bne.n	8006c78 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d915      	bls.n	8006bf6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	1ad2      	subs	r2, r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 feb6 	bl	8007954 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006be8:	2300      	movs	r3, #0
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f001 fb2d 	bl	800824e <USBD_LL_PrepareReceive>
 8006bf4:	e04e      	b.n	8006c94 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	6912      	ldr	r2, [r2, #16]
 8006bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c02:	fb02 f201 	mul.w	r2, r2, r1
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11c      	bne.n	8006c46 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d316      	bcc.n	8006c46 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d20f      	bcs.n	8006c46 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c26:	2200      	movs	r2, #0
 8006c28:	2100      	movs	r1, #0
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fe92 	bl	8007954 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f001 fb05 	bl	800824e <USBD_LL_PrepareReceive>
 8006c44:	e026      	b.n	8006c94 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d105      	bne.n	8006c68 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f001 fa4a 	bl	8008104 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fec4 	bl	80079fe <USBD_CtlReceiveStatus>
 8006c76:	e00d      	b.n	8006c94 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d004      	beq.n	8006c8c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d103      	bne.n	8006c94 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 fa38 	bl	8008104 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d11d      	bne.n	8006cda <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fe83 	bl	80069aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cac:	e015      	b.n	8006cda <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d108      	bne.n	8006cd6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	7afa      	ldrb	r2, [r7, #11]
 8006cce:	4611      	mov	r1, r2
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	4798      	blx	r3
 8006cd4:	e001      	b.n	8006cda <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e000      	b.n	8006cdc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cec:	2340      	movs	r3, #64	; 0x40
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f9c1 	bl	800807a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2240      	movs	r2, #64	; 0x40
 8006d04:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2180      	movs	r1, #128	; 0x80
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 f9b3 	bl	800807a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d009      	beq.n	8006d5c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6852      	ldr	r2, [r2, #4]
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	4611      	mov	r1, r2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	78fa      	ldrb	r2, [r7, #3]
 8006d76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr

08006dac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d105      	bne.n	8006dca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d10b      	bne.n	8006e00 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d004      	beq.n	8006e30 <USBD_StdDevReq+0x24>
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d002      	beq.n	8006e30 <USBD_StdDevReq+0x24>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <USBD_StdDevReq+0x34>
 8006e2e:	e04c      	b.n	8006eca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
      break;
 8006e3e:	e049      	b.n	8006ed4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b09      	cmp	r3, #9
 8006e46:	d83a      	bhi.n	8006ebe <USBD_StdDevReq+0xb2>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <USBD_StdDevReq+0x44>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006eb5 	.word	0x08006eb5
 8006e58:	08006ebf 	.word	0x08006ebf
 8006e5c:	08006eab 	.word	0x08006eab
 8006e60:	08006ebf 	.word	0x08006ebf
 8006e64:	08006e83 	.word	0x08006e83
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006ebf 	.word	0x08006ebf
 8006e70:	08006e97 	.word	0x08006e97
 8006e74:	08006e8d 	.word	0x08006e8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9d4 	bl	8007228 <USBD_GetDescriptor>
          break;
 8006e80:	e022      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fb37 	bl	80074f8 <USBD_SetAddress>
          break;
 8006e8a:	e01d      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fb74 	bl	800757c <USBD_SetConfig>
          break;
 8006e94:	e018      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fbfd 	bl	8007698 <USBD_GetConfig>
          break;
 8006e9e:	e013      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fc2c 	bl	8007700 <USBD_GetStatus>
          break;
 8006ea8:	e00e      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc5a 	bl	8007766 <USBD_SetFeature>
          break;
 8006eb2:	e009      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc69 	bl	800778e <USBD_ClrFeature>
          break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fcc1 	bl	8007848 <USBD_CtlError>
          break;
 8006ec6:	bf00      	nop
      }
      break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fcbb 	bl	8007848 <USBD_CtlError>
      break;
 8006ed2:	bf00      	nop
  }

  return ret;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d003      	beq.n	8006f02 <USBD_StdItfReq+0x22>
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d001      	beq.n	8006f02 <USBD_StdItfReq+0x22>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d12a      	bne.n	8006f58 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d81d      	bhi.n	8006f4a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d813      	bhi.n	8006f40 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4798      	blx	r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	88db      	ldrh	r3, [r3, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d110      	bne.n	8006f54 <USBD_StdItfReq+0x74>
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10d      	bne.n	8006f54 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fd4d 	bl	80079d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f3e:	e009      	b.n	8006f54 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc80 	bl	8007848 <USBD_CtlError>
          break;
 8006f48:	e004      	b.n	8006f54 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fc7b 	bl	8007848 <USBD_CtlError>
          break;
 8006f52:	e000      	b.n	8006f56 <USBD_StdItfReq+0x76>
          break;
 8006f54:	bf00      	nop
      }
      break;
 8006f56:	e004      	b.n	8006f62 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fc74 	bl	8007848 <USBD_CtlError>
      break;
 8006f60:	bf00      	nop
  }

  return USBD_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	889b      	ldrh	r3, [r3, #4]
 8006f7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d004      	beq.n	8006f96 <USBD_StdEPReq+0x2a>
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d002      	beq.n	8006f96 <USBD_StdEPReq+0x2a>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <USBD_StdEPReq+0x3a>
 8006f94:	e13d      	b.n	8007212 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
      break;
 8006fa4:	e13a      	b.n	800721c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d10a      	bne.n	8006fc8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	e12a      	b.n	800721e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d03e      	beq.n	800704e <USBD_StdEPReq+0xe2>
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d002      	beq.n	8006fda <USBD_StdEPReq+0x6e>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d070      	beq.n	80070ba <USBD_StdEPReq+0x14e>
 8006fd8:	e115      	b.n	8007206 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d002      	beq.n	8006fea <USBD_StdEPReq+0x7e>
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d015      	beq.n	8007014 <USBD_StdEPReq+0xa8>
 8006fe8:	e02b      	b.n	8007042 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <USBD_StdEPReq+0x9e>
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d009      	beq.n	800700a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f882 	bl	8008104 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 f87e 	bl	8008104 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007008:	e020      	b.n	800704c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fc1b 	bl	8007848 <USBD_CtlError>
              break;
 8007012:	e01b      	b.n	800704c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	885b      	ldrh	r3, [r3, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10e      	bne.n	800703a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <USBD_StdEPReq+0xce>
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d008      	beq.n	800703a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	88db      	ldrh	r3, [r3, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f865 	bl	8008104 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fccc 	bl	80079d8 <USBD_CtlSendStatus>

              break;
 8007040:	e004      	b.n	800704c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fbff 	bl	8007848 <USBD_CtlError>
              break;
 800704a:	bf00      	nop
          }
          break;
 800704c:	e0e0      	b.n	8007210 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	2b02      	cmp	r3, #2
 8007056:	d002      	beq.n	800705e <USBD_StdEPReq+0xf2>
 8007058:	2b03      	cmp	r3, #3
 800705a:	d015      	beq.n	8007088 <USBD_StdEPReq+0x11c>
 800705c:	e026      	b.n	80070ac <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00c      	beq.n	800707e <USBD_StdEPReq+0x112>
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d009      	beq.n	800707e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 f848 	bl	8008104 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007074:	2180      	movs	r1, #128	; 0x80
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f844 	bl	8008104 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800707c:	e01c      	b.n	80070b8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fbe1 	bl	8007848 <USBD_CtlError>
              break;
 8007086:	e017      	b.n	80070b8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d112      	bne.n	80070b6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800709a:	7bbb      	ldrb	r3, [r7, #14]
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 f84f 	bl	8008142 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fc97 	bl	80079d8 <USBD_CtlSendStatus>
              }
              break;
 80070aa:	e004      	b.n	80070b6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fbca 	bl	8007848 <USBD_CtlError>
              break;
 80070b4:	e000      	b.n	80070b8 <USBD_StdEPReq+0x14c>
              break;
 80070b6:	bf00      	nop
          }
          break;
 80070b8:	e0aa      	b.n	8007210 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d002      	beq.n	80070ca <USBD_StdEPReq+0x15e>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d032      	beq.n	800712e <USBD_StdEPReq+0x1c2>
 80070c8:	e097      	b.n	80071fa <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <USBD_StdEPReq+0x174>
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d004      	beq.n	80070e0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fbb5 	bl	8007848 <USBD_CtlError>
                break;
 80070de:	e091      	b.n	8007204 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da0b      	bge.n	8007100 <USBD_StdEPReq+0x194>
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	3310      	adds	r3, #16
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	4413      	add	r3, r2
 80070fc:	3304      	adds	r3, #4
 80070fe:	e00b      	b.n	8007118 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	3304      	adds	r3, #4
 8007118:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2202      	movs	r2, #2
 8007124:	4619      	mov	r1, r3
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fbf8 	bl	800791c <USBD_CtlSendData>
              break;
 800712c:	e06a      	b.n	8007204 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800712e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007132:	2b00      	cmp	r3, #0
 8007134:	da11      	bge.n	800715a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	f003 020f 	and.w	r2, r3, #15
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	3318      	adds	r3, #24
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d117      	bne.n	8007180 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb78 	bl	8007848 <USBD_CtlError>
                  break;
 8007158:	e054      	b.n	8007204 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fb65 	bl	8007848 <USBD_CtlError>
                  break;
 800717e:	e041      	b.n	8007204 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007184:	2b00      	cmp	r3, #0
 8007186:	da0b      	bge.n	80071a0 <USBD_StdEPReq+0x234>
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	3310      	adds	r3, #16
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4413      	add	r3, r2
 800719c:	3304      	adds	r3, #4
 800719e:	e00b      	b.n	80071b8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	4413      	add	r3, r2
 80071b6:	3304      	adds	r3, #4
 80071b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <USBD_StdEPReq+0x25a>
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d103      	bne.n	80071ce <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	e00e      	b.n	80071ec <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 ffd4 	bl	8008180 <USBD_LL_IsStallEP>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e002      	b.n	80071ec <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2202      	movs	r2, #2
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fb92 	bl	800791c <USBD_CtlSendData>
              break;
 80071f8:	e004      	b.n	8007204 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fb23 	bl	8007848 <USBD_CtlError>
              break;
 8007202:	bf00      	nop
          }
          break;
 8007204:	e004      	b.n	8007210 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fb1d 	bl	8007848 <USBD_CtlError>
          break;
 800720e:	bf00      	nop
      }
      break;
 8007210:	e004      	b.n	800721c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb17 	bl	8007848 <USBD_CtlError>
      break;
 800721a:	bf00      	nop
  }

  return ret;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	2b06      	cmp	r3, #6
 800724a:	f200 8128 	bhi.w	800749e <USBD_GetDescriptor+0x276>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <USBD_GetDescriptor+0x2c>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007271 	.word	0x08007271
 8007258:	08007289 	.word	0x08007289
 800725c:	080072c9 	.word	0x080072c9
 8007260:	0800749f 	.word	0x0800749f
 8007264:	0800749f 	.word	0x0800749f
 8007268:	0800743f 	.word	0x0800743f
 800726c:	0800746b 	.word	0x0800746b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
      break;
 8007286:	e112      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7c1b      	ldrb	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10d      	bne.n	80072ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f107 0208 	add.w	r2, r7, #8
 800729c:	4610      	mov	r0, r2
 800729e:	4798      	blx	r3
 80072a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	2202      	movs	r2, #2
 80072a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072aa:	e100      	b.n	80074ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f107 0208 	add.w	r2, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	2202      	movs	r2, #2
 80072c4:	701a      	strb	r2, [r3, #0]
      break;
 80072c6:	e0f2      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	885b      	ldrh	r3, [r3, #2]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	f200 80ac 	bhi.w	800742c <USBD_GetDescriptor+0x204>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <USBD_GetDescriptor+0xb4>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072f5 	.word	0x080072f5
 80072e0:	08007329 	.word	0x08007329
 80072e4:	0800735d 	.word	0x0800735d
 80072e8:	08007391 	.word	0x08007391
 80072ec:	080073c5 	.word	0x080073c5
 80072f0:	080073f9 	.word	0x080073f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7c12      	ldrb	r2, [r2, #16]
 800730c:	f107 0108 	add.w	r1, r7, #8
 8007310:	4610      	mov	r0, r2
 8007312:	4798      	blx	r3
 8007314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007316:	e091      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa94 	bl	8007848 <USBD_CtlError>
            err++;
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	3301      	adds	r3, #1
 8007324:	72fb      	strb	r3, [r7, #11]
          break;
 8007326:	e089      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	7c12      	ldrb	r2, [r2, #16]
 8007340:	f107 0108 	add.w	r1, r7, #8
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
 8007348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800734a:	e077      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa7a 	bl	8007848 <USBD_CtlError>
            err++;
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	3301      	adds	r3, #1
 8007358:	72fb      	strb	r3, [r7, #11]
          break;
 800735a:	e06f      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800737e:	e05d      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fa60 	bl	8007848 <USBD_CtlError>
            err++;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	3301      	adds	r3, #1
 800738c:	72fb      	strb	r3, [r7, #11]
          break;
 800738e:	e055      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e043      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa46 	bl	8007848 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e03b      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e029      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa2c 	bl	8007848 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e021      	b.n	800743c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e00f      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa12 	bl	8007848 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e007      	b.n	800743c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa0a 	bl	8007848 <USBD_CtlError>
          err++;
 8007434:	7afb      	ldrb	r3, [r7, #11]
 8007436:	3301      	adds	r3, #1
 8007438:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800743a:	e038      	b.n	80074ae <USBD_GetDescriptor+0x286>
 800743c:	e037      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	7c1b      	ldrb	r3, [r3, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f107 0208 	add.w	r2, r7, #8
 8007452:	4610      	mov	r0, r2
 8007454:	4798      	blx	r3
 8007456:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007458:	e029      	b.n	80074ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9f3 	bl	8007848 <USBD_CtlError>
        err++;
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	3301      	adds	r3, #1
 8007466:	72fb      	strb	r3, [r7, #11]
      break;
 8007468:	e021      	b.n	80074ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7c1b      	ldrb	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	f107 0208 	add.w	r2, r7, #8
 800747e:	4610      	mov	r0, r2
 8007480:	4798      	blx	r3
 8007482:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	2207      	movs	r2, #7
 800748a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800748c:	e00f      	b.n	80074ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f9d9 	bl	8007848 <USBD_CtlError>
        err++;
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	3301      	adds	r3, #1
 800749a:	72fb      	strb	r3, [r7, #11]
      break;
 800749c:	e007      	b.n	80074ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f9d1 	bl	8007848 <USBD_CtlError>
      err++;
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	3301      	adds	r3, #1
 80074aa:	72fb      	strb	r3, [r7, #11]
      break;
 80074ac:	bf00      	nop
  }

  if (err != 0U)
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11c      	bne.n	80074ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80074b4:	893b      	ldrh	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d011      	beq.n	80074de <USBD_GetDescriptor+0x2b6>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00d      	beq.n	80074de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	88da      	ldrh	r2, [r3, #6]
 80074c6:	893b      	ldrh	r3, [r7, #8]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bf28      	it	cs
 80074cc:	4613      	movcs	r3, r2
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074d2:	893b      	ldrh	r3, [r7, #8]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fa1f 	bl	800791c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	88db      	ldrh	r3, [r3, #6]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fa76 	bl	80079d8 <USBD_CtlSendStatus>
 80074ec:	e000      	b.n	80074f0 <USBD_GetDescriptor+0x2c8>
    return;
 80074ee:	bf00      	nop
    }
  }
}
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop

080074f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	889b      	ldrh	r3, [r3, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d130      	bne.n	800756c <USBD_SetAddress+0x74>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	88db      	ldrh	r3, [r3, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d12c      	bne.n	800756c <USBD_SetAddress+0x74>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	885b      	ldrh	r3, [r3, #2]
 8007516:	2b7f      	cmp	r3, #127	; 0x7f
 8007518:	d828      	bhi.n	800756c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	885b      	ldrh	r3, [r3, #2]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752c:	2b03      	cmp	r3, #3
 800752e:	d104      	bne.n	800753a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f988 	bl	8007848 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007538:	e01c      	b.n	8007574 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7bfa      	ldrb	r2, [r7, #15]
 800753e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fe3f 	bl	80081ca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa43 	bl	80079d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007560:	e008      	b.n	8007574 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	e003      	b.n	8007574 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f96a 	bl	8007848 <USBD_CtlError>
  }
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	885b      	ldrh	r3, [r3, #2]
 800758a:	b2da      	uxtb	r2, r3
 800758c:	4b41      	ldr	r3, [pc, #260]	; (8007694 <USBD_SetConfig+0x118>)
 800758e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007590:	4b40      	ldr	r3, [pc, #256]	; (8007694 <USBD_SetConfig+0x118>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d904      	bls.n	80075a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f954 	bl	8007848 <USBD_CtlError>
 80075a0:	e075      	b.n	800768e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d002      	beq.n	80075b2 <USBD_SetConfig+0x36>
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d023      	beq.n	80075f8 <USBD_SetConfig+0x7c>
 80075b0:	e062      	b.n	8007678 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80075b2:	4b38      	ldr	r3, [pc, #224]	; (8007694 <USBD_SetConfig+0x118>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01a      	beq.n	80075f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80075ba:	4b36      	ldr	r3, [pc, #216]	; (8007694 <USBD_SetConfig+0x118>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075cc:	4b31      	ldr	r3, [pc, #196]	; (8007694 <USBD_SetConfig+0x118>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff f9f3 	bl	80069be <USBD_SetClassConfig>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d104      	bne.n	80075e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f931 	bl	8007848 <USBD_CtlError>
            return;
 80075e6:	e052      	b.n	800768e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9f5 	bl	80079d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075ee:	e04e      	b.n	800768e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f9f1 	bl	80079d8 <USBD_CtlSendStatus>
        break;
 80075f6:	e04a      	b.n	800768e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075f8:	4b26      	ldr	r3, [pc, #152]	; (8007694 <USBD_SetConfig+0x118>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d112      	bne.n	8007626 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007608:	4b22      	ldr	r3, [pc, #136]	; (8007694 <USBD_SetConfig+0x118>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007612:	4b20      	ldr	r3, [pc, #128]	; (8007694 <USBD_SetConfig+0x118>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff f9ef 	bl	80069fc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9da 	bl	80079d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007624:	e033      	b.n	800768e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007626:	4b1b      	ldr	r3, [pc, #108]	; (8007694 <USBD_SetConfig+0x118>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d01d      	beq.n	8007670 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff f9dd 	bl	80069fc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007642:	4b14      	ldr	r3, [pc, #80]	; (8007694 <USBD_SetConfig+0x118>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <USBD_SetConfig+0x118>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff f9b3 	bl	80069be <USBD_SetClassConfig>
 8007658:	4603      	mov	r3, r0
 800765a:	2b02      	cmp	r3, #2
 800765c:	d104      	bne.n	8007668 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f8f1 	bl	8007848 <USBD_CtlError>
            return;
 8007666:	e012      	b.n	800768e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f9b5 	bl	80079d8 <USBD_CtlSendStatus>
        break;
 800766e:	e00e      	b.n	800768e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9b1 	bl	80079d8 <USBD_CtlSendStatus>
        break;
 8007676:	e00a      	b.n	800768e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8e4 	bl	8007848 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <USBD_SetConfig+0x118>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff f9b8 	bl	80069fc <USBD_ClrClassConfig>
        break;
 800768c:	bf00      	nop
    }
  }
}
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000370 	.word	0x20000370

08007698 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	88db      	ldrh	r3, [r3, #6]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d004      	beq.n	80076b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f8cb 	bl	8007848 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076b2:	e021      	b.n	80076f8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	db17      	blt.n	80076ee <USBD_GetConfig+0x56>
 80076be:	2b02      	cmp	r3, #2
 80076c0:	dd02      	ble.n	80076c8 <USBD_GetConfig+0x30>
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d00b      	beq.n	80076de <USBD_GetConfig+0x46>
 80076c6:	e012      	b.n	80076ee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3308      	adds	r3, #8
 80076d2:	2201      	movs	r2, #1
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f920 	bl	800791c <USBD_CtlSendData>
        break;
 80076dc:	e00c      	b.n	80076f8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2201      	movs	r2, #1
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f918 	bl	800791c <USBD_CtlSendData>
        break;
 80076ec:	e004      	b.n	80076f8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8a9 	bl	8007848 <USBD_CtlError>
        break;
 80076f6:	bf00      	nop
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	3b01      	subs	r3, #1
 8007712:	2b02      	cmp	r3, #2
 8007714:	d81e      	bhi.n	8007754 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	88db      	ldrh	r3, [r3, #6]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d004      	beq.n	8007728 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f891 	bl	8007848 <USBD_CtlError>
        break;
 8007726:	e01a      	b.n	800775e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f043 0202 	orr.w	r2, r3, #2
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	330c      	adds	r3, #12
 8007748:	2202      	movs	r2, #2
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8e5 	bl	800791c <USBD_CtlSendData>
      break;
 8007752:	e004      	b.n	800775e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f876 	bl	8007848 <USBD_CtlError>
      break;
 800775c:	bf00      	nop
  }
}
 800775e:	bf00      	nop
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d106      	bne.n	8007786 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f929 	bl	80079d8 <USBD_CtlSendStatus>
  }
}
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800779e:	3b01      	subs	r3, #1
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d80b      	bhi.n	80077bc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	885b      	ldrh	r3, [r3, #2]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10c      	bne.n	80077c6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f90f 	bl	80079d8 <USBD_CtlSendStatus>
      }
      break;
 80077ba:	e004      	b.n	80077c6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f842 	bl	8007848 <USBD_CtlError>
      break;
 80077c4:	e000      	b.n	80077c8 <USBD_ClrFeature+0x3a>
      break;
 80077c6:	bf00      	nop
  }
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781a      	ldrb	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785a      	ldrb	r2, [r3, #1]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	3302      	adds	r3, #2
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	3303      	adds	r3, #3
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4413      	add	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	3304      	adds	r3, #4
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	3305      	adds	r3, #5
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	021b      	lsls	r3, r3, #8
 8007818:	b29b      	uxth	r3, r3
 800781a:	4413      	add	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	3306      	adds	r3, #6
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	b29a      	uxth	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	3307      	adds	r3, #7
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	b29b      	uxth	r3, r3
 8007836:	4413      	add	r3, r2
 8007838:	b29a      	uxth	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	80da      	strh	r2, [r3, #6]

}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr

08007848 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fc55 	bl	8008104 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800785a:	2100      	movs	r1, #0
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc51 	bl	8008104 <USBD_LL_StallEP>
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d032      	beq.n	80078e6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f834 	bl	80078ee <USBD_GetLen>
 8007886:	4603      	mov	r3, r0
 8007888:	3301      	adds	r3, #1
 800788a:	b29b      	uxth	r3, r3
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	75fa      	strb	r2, [r7, #23]
 800789a:	461a      	mov	r2, r3
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4413      	add	r3, r2
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7812      	ldrb	r2, [r2, #0]
 80078a4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	75fa      	strb	r2, [r7, #23]
 80078ac:	461a      	mov	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4413      	add	r3, r2
 80078b2:	2203      	movs	r2, #3
 80078b4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80078b6:	e012      	b.n	80078de <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	60fa      	str	r2, [r7, #12]
 80078be:	7dfa      	ldrb	r2, [r7, #23]
 80078c0:	1c51      	adds	r1, r2, #1
 80078c2:	75f9      	strb	r1, [r7, #23]
 80078c4:	4611      	mov	r1, r2
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	440a      	add	r2, r1
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	75fa      	strb	r2, [r7, #23]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	2200      	movs	r2, #0
 80078dc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e8      	bne.n	80078b8 <USBD_GetString+0x4e>
    }
  }
}
 80078e6:	bf00      	nop
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b085      	sub	sp, #20
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078fa:	e005      	b.n	8007908 <USBD_GetLen+0x1a>
  {
    len++;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	3301      	adds	r3, #1
 8007900:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3301      	adds	r3, #1
 8007906:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f5      	bne.n	80078fc <USBD_GetLen+0xe>
  }

  return len;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2202      	movs	r2, #2
 800792e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007932:	88fa      	ldrh	r2, [r7, #6]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007938:	88fa      	ldrh	r2, [r7, #6]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	2100      	movs	r1, #0
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fc5f 	bl	8008208 <USBD_LL_Transmit>

  return USBD_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	2100      	movs	r1, #0
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fc4d 	bl	8008208 <USBD_LL_Transmit>

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2203      	movs	r2, #3
 800798a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007996:	88fa      	ldrh	r2, [r7, #6]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	2100      	movs	r1, #0
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fc52 	bl	800824e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	2100      	movs	r1, #0
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fc40 	bl	800824e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2204      	movs	r2, #4
 80079e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079e8:	2300      	movs	r3, #0
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc0a 	bl	8008208 <USBD_LL_Transmit>

  return USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b082      	sub	sp, #8
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2205      	movs	r2, #5
 8007a0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	2200      	movs	r2, #0
 8007a12:	2100      	movs	r1, #0
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fc1a 	bl	800824e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4912      	ldr	r1, [pc, #72]	; (8007a74 <MX_USB_DEVICE_Init+0x50>)
 8007a2c:	4812      	ldr	r0, [pc, #72]	; (8007a78 <MX_USB_DEVICE_Init+0x54>)
 8007a2e:	f7fe ff6c 	bl	800690a <USBD_Init>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a38:	f7f9 fe70 	bl	800171c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a3c:	490f      	ldr	r1, [pc, #60]	; (8007a7c <MX_USB_DEVICE_Init+0x58>)
 8007a3e:	480e      	ldr	r0, [pc, #56]	; (8007a78 <MX_USB_DEVICE_Init+0x54>)
 8007a40:	f7fe ff8e 	bl	8006960 <USBD_RegisterClass>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a4a:	f7f9 fe67 	bl	800171c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a4e:	490c      	ldr	r1, [pc, #48]	; (8007a80 <MX_USB_DEVICE_Init+0x5c>)
 8007a50:	4809      	ldr	r0, [pc, #36]	; (8007a78 <MX_USB_DEVICE_Init+0x54>)
 8007a52:	f7fe febf 	bl	80067d4 <USBD_CDC_RegisterInterface>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a5c:	f7f9 fe5e 	bl	800171c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a60:	4805      	ldr	r0, [pc, #20]	; (8007a78 <MX_USB_DEVICE_Init+0x54>)
 8007a62:	f7fe ff96 	bl	8006992 <USBD_Start>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a6c:	f7f9 fe56 	bl	800171c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a70:	bf00      	nop
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	2000012c 	.word	0x2000012c
 8007a78:	20000dc4 	.word	0x20000dc4
 8007a7c:	20000018 	.word	0x20000018
 8007a80:	2000011c 	.word	0x2000011c

08007a84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4905      	ldr	r1, [pc, #20]	; (8007aa0 <CDC_Init_FS+0x1c>)
 8007a8c:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <CDC_Init_FS+0x20>)
 8007a8e:	f7fe feb7 	bl	8006800 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a92:	4905      	ldr	r1, [pc, #20]	; (8007aa8 <CDC_Init_FS+0x24>)
 8007a94:	4803      	ldr	r0, [pc, #12]	; (8007aa4 <CDC_Init_FS+0x20>)
 8007a96:	f7fe fecc 	bl	8006832 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20001470 	.word	0x20001470
 8007aa4:	20000dc4 	.word	0x20000dc4
 8007aa8:	20001088 	.word	0x20001088

08007aac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ab0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
	...

08007abc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b23      	cmp	r3, #35	; 0x23
 8007ad0:	d84a      	bhi.n	8007b68 <CDC_Control_FS+0xac>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <CDC_Control_FS+0x1c>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b69 	.word	0x08007b69
 8007adc:	08007b69 	.word	0x08007b69
 8007ae0:	08007b69 	.word	0x08007b69
 8007ae4:	08007b69 	.word	0x08007b69
 8007ae8:	08007b69 	.word	0x08007b69
 8007aec:	08007b69 	.word	0x08007b69
 8007af0:	08007b69 	.word	0x08007b69
 8007af4:	08007b69 	.word	0x08007b69
 8007af8:	08007b69 	.word	0x08007b69
 8007afc:	08007b69 	.word	0x08007b69
 8007b00:	08007b69 	.word	0x08007b69
 8007b04:	08007b69 	.word	0x08007b69
 8007b08:	08007b69 	.word	0x08007b69
 8007b0c:	08007b69 	.word	0x08007b69
 8007b10:	08007b69 	.word	0x08007b69
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007b69 	.word	0x08007b69
 8007b1c:	08007b69 	.word	0x08007b69
 8007b20:	08007b69 	.word	0x08007b69
 8007b24:	08007b69 	.word	0x08007b69
 8007b28:	08007b69 	.word	0x08007b69
 8007b2c:	08007b69 	.word	0x08007b69
 8007b30:	08007b69 	.word	0x08007b69
 8007b34:	08007b69 	.word	0x08007b69
 8007b38:	08007b69 	.word	0x08007b69
 8007b3c:	08007b69 	.word	0x08007b69
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b69 	.word	0x08007b69
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b69 	.word	0x08007b69
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b69 	.word	0x08007b69
 8007b60:	08007b69 	.word	0x08007b69
 8007b64:	08007b69 	.word	0x08007b69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b68:	bf00      	nop
  }

  return (USBD_OK);
 8007b6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop

08007b78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  apiSetInstruction((char *)Buf);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7f9 f804 	bl	8000b90 <apiSetInstruction>
  CDC_Transmit_FS(":", 1);
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4807      	ldr	r0, [pc, #28]	; (8007ba8 <CDC_Receive_FS+0x30>)
 8007b8c:	f000 f810 	bl	8007bb0 <CDC_Transmit_FS>

//	char response[20];
//	apiDoInstruction((char *)Buf, response);
//	CDC_Transmit_FS((uint8_t *)response, strlen(response));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4806      	ldr	r0, [pc, #24]	; (8007bac <CDC_Receive_FS+0x34>)
 8007b94:	f7fe fe4d 	bl	8006832 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b98:	4804      	ldr	r0, [pc, #16]	; (8007bac <CDC_Receive_FS+0x34>)
 8007b9a:	f7fe fe8c 	bl	80068b6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b9e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	0800a8f8 	.word	0x0800a8f8
 8007bac:	20000dc4 	.word	0x20000dc4

08007bb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */


  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007bc0:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <CDC_Transmit_FS+0x48>)
 8007bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e00b      	b.n	8007bee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007bd6:	887b      	ldrh	r3, [r7, #2]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	4806      	ldr	r0, [pc, #24]	; (8007bf8 <CDC_Transmit_FS+0x48>)
 8007bde:	f7fe fe0f 	bl	8006800 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007be2:	4805      	ldr	r0, [pc, #20]	; (8007bf8 <CDC_Transmit_FS+0x48>)
 8007be4:	f7fe fe38 	bl	8006858 <USBD_CDC_TransmitPacket>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20000dc4 	.word	0x20000dc4

08007bfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2212      	movs	r2, #18
 8007c0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20000148 	.word	0x20000148

08007c20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	6039      	str	r1, [r7, #0]
 8007c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2204      	movs	r2, #4
 8007c30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c32:	4b03      	ldr	r3, [pc, #12]	; (8007c40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	2000015c 	.word	0x2000015c

08007c44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d105      	bne.n	8007c62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4907      	ldr	r1, [pc, #28]	; (8007c78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c5a:	4808      	ldr	r0, [pc, #32]	; (8007c7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c5c:	f7ff fe05 	bl	800786a <USBD_GetString>
 8007c60:	e004      	b.n	8007c6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4904      	ldr	r1, [pc, #16]	; (8007c78 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c66:	4805      	ldr	r0, [pc, #20]	; (8007c7c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c68:	f7ff fdff 	bl	800786a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c6c:	4b02      	ldr	r3, [pc, #8]	; (8007c78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20001858 	.word	0x20001858
 8007c7c:	0800a8fc 	.word	0x0800a8fc

08007c80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	4603      	mov	r3, r0
 8007c88:	6039      	str	r1, [r7, #0]
 8007c8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	4904      	ldr	r1, [pc, #16]	; (8007ca0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c90:	4804      	ldr	r0, [pc, #16]	; (8007ca4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c92:	f7ff fdea 	bl	800786a <USBD_GetString>
  return USBD_StrDesc;
 8007c96:	4b02      	ldr	r3, [pc, #8]	; (8007ca0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20001858 	.word	0x20001858
 8007ca4:	0800a914 	.word	0x0800a914

08007ca8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	6039      	str	r1, [r7, #0]
 8007cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	221a      	movs	r2, #26
 8007cb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cba:	f000 f843 	bl	8007d44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cbe:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000160 	.word	0x20000160

08007ccc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d105      	bne.n	8007cea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4907      	ldr	r1, [pc, #28]	; (8007d00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ce2:	4808      	ldr	r0, [pc, #32]	; (8007d04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ce4:	f7ff fdc1 	bl	800786a <USBD_GetString>
 8007ce8:	e004      	b.n	8007cf4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	4904      	ldr	r1, [pc, #16]	; (8007d00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cee:	4805      	ldr	r0, [pc, #20]	; (8007d04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cf0:	f7ff fdbb 	bl	800786a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cf4:	4b02      	ldr	r3, [pc, #8]	; (8007d00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20001858 	.word	0x20001858
 8007d04:	0800a928 	.word	0x0800a928

08007d08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6039      	str	r1, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	4907      	ldr	r1, [pc, #28]	; (8007d3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d1e:	4808      	ldr	r0, [pc, #32]	; (8007d40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d20:	f7ff fda3 	bl	800786a <USBD_GetString>
 8007d24:	e004      	b.n	8007d30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4904      	ldr	r1, [pc, #16]	; (8007d3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d2a:	4805      	ldr	r0, [pc, #20]	; (8007d40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d2c:	f7ff fd9d 	bl	800786a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d30:	4b02      	ldr	r3, [pc, #8]	; (8007d3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20001858 	.word	0x20001858
 8007d40:	0800a934 	.word	0x0800a934

08007d44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <Get_SerialNum+0x44>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d50:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <Get_SerialNum+0x48>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <Get_SerialNum+0x4c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4413      	add	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	4909      	ldr	r1, [pc, #36]	; (8007d94 <Get_SerialNum+0x50>)
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 f814 	bl	8007d9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d74:	2204      	movs	r2, #4
 8007d76:	4908      	ldr	r1, [pc, #32]	; (8007d98 <Get_SerialNum+0x54>)
 8007d78:	68b8      	ldr	r0, [r7, #8]
 8007d7a:	f000 f80f 	bl	8007d9c <IntToUnicode>
  }
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	1ffff7e8 	.word	0x1ffff7e8
 8007d8c:	1ffff7ec 	.word	0x1ffff7ec
 8007d90:	1ffff7f0 	.word	0x1ffff7f0
 8007d94:	20000162 	.word	0x20000162
 8007d98:	20000172 	.word	0x20000172

08007d9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4613      	mov	r3, r2
 8007da8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
 8007db2:	e027      	b.n	8007e04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	0f1b      	lsrs	r3, r3, #28
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d80b      	bhi.n	8007dd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	0f1b      	lsrs	r3, r3, #28
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	440b      	add	r3, r1
 8007dcc:	3230      	adds	r2, #48	; 0x30
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	e00a      	b.n	8007dea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	0f1b      	lsrs	r3, r3, #28
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	4619      	mov	r1, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	440b      	add	r3, r1
 8007de4:	3237      	adds	r2, #55	; 0x37
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	3301      	adds	r3, #1
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4413      	add	r3, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	3301      	adds	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
 8007e04:	7dfa      	ldrb	r2, [r7, #23]
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d3d3      	bcc.n	8007db4 <IntToUnicode+0x18>
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr
	...

08007e18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0d      	ldr	r2, [pc, #52]	; (8007e5c <HAL_PCD_MspInit+0x44>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d113      	bne.n	8007e52 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <HAL_PCD_MspInit+0x48>)
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <HAL_PCD_MspInit+0x48>)
 8007e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e34:	61d3      	str	r3, [r2, #28]
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <HAL_PCD_MspInit+0x48>)
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e42:	2200      	movs	r2, #0
 8007e44:	2100      	movs	r1, #0
 8007e46:	2014      	movs	r0, #20
 8007e48:	f7fa fa39 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e4c:	2014      	movs	r0, #20
 8007e4e:	f7fa fa52 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40005c00 	.word	0x40005c00
 8007e60:	40021000 	.word	0x40021000

08007e64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fe fdd1 	bl	8006a22 <USBD_LL_SetupStage>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	015b      	lsls	r3, r3, #5
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f7fe fe04 	bl	8006ab8 <USBD_LL_DataOutStage>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	015b      	lsls	r3, r3, #5
 8007ed0:	4413      	add	r3, r2
 8007ed2:	333c      	adds	r3, #60	; 0x3c
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f7fe fe5e 	bl	8006b9a <USBD_LL_DataInStage>
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe ff6e 	bl	8006dd6 <USBD_LL_SOF>
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b084      	sub	sp, #16
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d001      	beq.n	8007f1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f16:	f7f9 fc01 	bl	800171c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f20:	7bfa      	ldrb	r2, [r7, #15]
 8007f22:	4611      	mov	r1, r2
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe ff1e 	bl	8006d66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fe fed7 	bl	8006ce4 <USBD_LL_Reset>
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe ff18 	bl	8006d84 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f5c:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <HAL_PCD_SuspendCallback+0x30>)
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	4a03      	ldr	r2, [pc, #12]	; (8007f70 <HAL_PCD_SuspendCallback+0x30>)
 8007f62:	f043 0306 	orr.w	r3, r3, #6
 8007f66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	e000ed00 	.word	0xe000ed00

08007f74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe ff12 	bl	8006dac <USBD_LL_Resume>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f98:	4a28      	ldr	r2, [pc, #160]	; (800803c <USBD_LL_Init+0xac>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a26      	ldr	r2, [pc, #152]	; (800803c <USBD_LL_Init+0xac>)
 8007fa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007fa8:	4b24      	ldr	r3, [pc, #144]	; (800803c <USBD_LL_Init+0xac>)
 8007faa:	4a25      	ldr	r2, [pc, #148]	; (8008040 <USBD_LL_Init+0xb0>)
 8007fac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fae:	4b23      	ldr	r3, [pc, #140]	; (800803c <USBD_LL_Init+0xac>)
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fb4:	4b21      	ldr	r3, [pc, #132]	; (800803c <USBD_LL_Init+0xac>)
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007fba:	4b20      	ldr	r3, [pc, #128]	; (800803c <USBD_LL_Init+0xac>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007fc0:	4b1e      	ldr	r3, [pc, #120]	; (800803c <USBD_LL_Init+0xac>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007fc6:	4b1d      	ldr	r3, [pc, #116]	; (800803c <USBD_LL_Init+0xac>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007fcc:	481b      	ldr	r0, [pc, #108]	; (800803c <USBD_LL_Init+0xac>)
 8007fce:	f7fa fcbd 	bl	800294c <HAL_PCD_Init>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fd8:	f7f9 fba0 	bl	800171c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fe2:	2318      	movs	r3, #24
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	f7fb fb56 	bl	8003698 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ff2:	2358      	movs	r3, #88	; 0x58
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2180      	movs	r1, #128	; 0x80
 8007ff8:	f7fb fb4e 	bl	8003698 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008002:	23c0      	movs	r3, #192	; 0xc0
 8008004:	2200      	movs	r2, #0
 8008006:	2181      	movs	r1, #129	; 0x81
 8008008:	f7fb fb46 	bl	8003698 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008012:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008016:	2200      	movs	r2, #0
 8008018:	2101      	movs	r1, #1
 800801a:	f7fb fb3d 	bl	8003698 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008028:	2200      	movs	r2, #0
 800802a:	2182      	movs	r1, #130	; 0x82
 800802c:	f7fb fb34 	bl	8003698 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20001a58 	.word	0x20001a58
 8008040:	40005c00 	.word	0x40005c00

08008044 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805a:	4618      	mov	r0, r3
 800805c:	f7fa fd57 	bl	8002b0e <HAL_PCD_Start>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f948 	bl	80082fc <USBD_Get_USB_Status>
 800806c:	4603      	mov	r3, r0
 800806e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008070:	7bbb      	ldrb	r3, [r7, #14]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	4608      	mov	r0, r1
 8008084:	4611      	mov	r1, r2
 8008086:	461a      	mov	r2, r3
 8008088:	4603      	mov	r3, r0
 800808a:	70fb      	strb	r3, [r7, #3]
 800808c:	460b      	mov	r3, r1
 800808e:	70bb      	strb	r3, [r7, #2]
 8008090:	4613      	mov	r3, r2
 8008092:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080a2:	78bb      	ldrb	r3, [r7, #2]
 80080a4:	883a      	ldrh	r2, [r7, #0]
 80080a6:	78f9      	ldrb	r1, [r7, #3]
 80080a8:	f7fa fe8a 	bl	8002dc0 <HAL_PCD_EP_Open>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f922 	bl	80082fc <USBD_Get_USB_Status>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	460b      	mov	r3, r1
 80080d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	4611      	mov	r1, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7fa fecb 	bl	8002e80 <HAL_PCD_EP_Close>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 f903 	bl	80082fc <USBD_Get_USB_Status>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800811e:	78fa      	ldrb	r2, [r7, #3]
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fa ff75 	bl	8003012 <HAL_PCD_EP_SetStall>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f8e4 	bl	80082fc <USBD_Get_USB_Status>
 8008134:	4603      	mov	r3, r0
 8008136:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008138:	7bbb      	ldrb	r3, [r7, #14]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800815c:	78fa      	ldrb	r2, [r7, #3]
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7fa ffb0 	bl	80030c6 <HAL_PCD_EP_ClrStall>
 8008166:	4603      	mov	r3, r0
 8008168:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f8c5 	bl	80082fc <USBD_Get_USB_Status>
 8008172:	4603      	mov	r3, r0
 8008174:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008176:	7bbb      	ldrb	r3, [r7, #14]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008192:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008198:	2b00      	cmp	r3, #0
 800819a:	da08      	bge.n	80081ae <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	015b      	lsls	r3, r3, #5
 80081a6:	4413      	add	r3, r2
 80081a8:	332a      	adds	r3, #42	; 0x2a
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	e008      	b.n	80081c0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	015b      	lsls	r3, r3, #5
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80081be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bc80      	pop	{r7}
 80081c8:	4770      	bx	lr

080081ca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	4611      	mov	r1, r2
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fa fdc4 	bl	8002d76 <HAL_PCD_SetAddress>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f881 	bl	80082fc <USBD_Get_USB_Status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	461a      	mov	r2, r3
 8008214:	460b      	mov	r3, r1
 8008216:	72fb      	strb	r3, [r7, #11]
 8008218:	4613      	mov	r3, r2
 800821a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800822a:	893b      	ldrh	r3, [r7, #8]
 800822c:	7af9      	ldrb	r1, [r7, #11]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	f7fa feb6 	bl	8002fa0 <HAL_PCD_EP_Transmit>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f85e 	bl	80082fc <USBD_Get_USB_Status>
 8008240:	4603      	mov	r3, r0
 8008242:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008244:	7dbb      	ldrb	r3, [r7, #22]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	461a      	mov	r2, r3
 800825a:	460b      	mov	r3, r1
 800825c:	72fb      	strb	r3, [r7, #11]
 800825e:	4613      	mov	r3, r2
 8008260:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008270:	893b      	ldrh	r3, [r7, #8]
 8008272:	7af9      	ldrb	r1, [r7, #11]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	f7fa fe45 	bl	8002f04 <HAL_PCD_EP_Receive>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f83b 	bl	80082fc <USBD_Get_USB_Status>
 8008286:	4603      	mov	r3, r0
 8008288:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800828a:	7dbb      	ldrb	r3, [r7, #22]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fa fe64 	bl	8002f78 <HAL_PCD_EP_GetRxCount>
 80082b0:	4603      	mov	r3, r0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80082c4:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <USBD_static_malloc+0x14>)
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	370c      	adds	r7, #12
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bc80      	pop	{r7}
 80082ce:	4770      	bx	lr
 80082d0:	20000374 	.word	0x20000374

080082d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]

}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr

080082e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr

080082fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	2b03      	cmp	r3, #3
 800830e:	d817      	bhi.n	8008340 <USBD_Get_USB_Status+0x44>
 8008310:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <USBD_Get_USB_Status+0x1c>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	08008329 	.word	0x08008329
 800831c:	0800832f 	.word	0x0800832f
 8008320:	08008335 	.word	0x08008335
 8008324:	0800833b 	.word	0x0800833b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
    break;
 800832c:	e00b      	b.n	8008346 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	73fb      	strb	r3, [r7, #15]
    break;
 8008332:	e008      	b.n	8008346 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008334:	2301      	movs	r3, #1
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	e005      	b.n	8008346 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800833a:	2302      	movs	r3, #2
 800833c:	73fb      	strb	r3, [r7, #15]
    break;
 800833e:	e002      	b.n	8008346 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008340:	2302      	movs	r3, #2
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	bf00      	nop
  }
  return usb_status;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop

08008354 <atof>:
 8008354:	2100      	movs	r1, #0
 8008356:	f000 bea3 	b.w	80090a0 <strtod>
	...

0800835c <__errno>:
 800835c:	4b01      	ldr	r3, [pc, #4]	; (8008364 <__errno+0x8>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	2000017c 	.word	0x2000017c

08008368 <__libc_init_array>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	2500      	movs	r5, #0
 800836c:	4e0c      	ldr	r6, [pc, #48]	; (80083a0 <__libc_init_array+0x38>)
 800836e:	4c0d      	ldr	r4, [pc, #52]	; (80083a4 <__libc_init_array+0x3c>)
 8008370:	1ba4      	subs	r4, r4, r6
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	42a5      	cmp	r5, r4
 8008376:	d109      	bne.n	800838c <__libc_init_array+0x24>
 8008378:	f002 fa84 	bl	800a884 <_init>
 800837c:	2500      	movs	r5, #0
 800837e:	4e0a      	ldr	r6, [pc, #40]	; (80083a8 <__libc_init_array+0x40>)
 8008380:	4c0a      	ldr	r4, [pc, #40]	; (80083ac <__libc_init_array+0x44>)
 8008382:	1ba4      	subs	r4, r4, r6
 8008384:	10a4      	asrs	r4, r4, #2
 8008386:	42a5      	cmp	r5, r4
 8008388:	d105      	bne.n	8008396 <__libc_init_array+0x2e>
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008390:	4798      	blx	r3
 8008392:	3501      	adds	r5, #1
 8008394:	e7ee      	b.n	8008374 <__libc_init_array+0xc>
 8008396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800839a:	4798      	blx	r3
 800839c:	3501      	adds	r5, #1
 800839e:	e7f2      	b.n	8008386 <__libc_init_array+0x1e>
 80083a0:	0800abf8 	.word	0x0800abf8
 80083a4:	0800abf8 	.word	0x0800abf8
 80083a8:	0800abf8 	.word	0x0800abf8
 80083ac:	0800abfc 	.word	0x0800abfc

080083b0 <memset>:
 80083b0:	4603      	mov	r3, r0
 80083b2:	4402      	add	r2, r0
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d100      	bne.n	80083ba <memset+0xa>
 80083b8:	4770      	bx	lr
 80083ba:	f803 1b01 	strb.w	r1, [r3], #1
 80083be:	e7f9      	b.n	80083b4 <memset+0x4>

080083c0 <siprintf>:
 80083c0:	b40e      	push	{r1, r2, r3}
 80083c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083c6:	b500      	push	{lr}
 80083c8:	b09c      	sub	sp, #112	; 0x70
 80083ca:	ab1d      	add	r3, sp, #116	; 0x74
 80083cc:	9002      	str	r0, [sp, #8]
 80083ce:	9006      	str	r0, [sp, #24]
 80083d0:	9107      	str	r1, [sp, #28]
 80083d2:	9104      	str	r1, [sp, #16]
 80083d4:	4808      	ldr	r0, [pc, #32]	; (80083f8 <siprintf+0x38>)
 80083d6:	4909      	ldr	r1, [pc, #36]	; (80083fc <siprintf+0x3c>)
 80083d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083dc:	9105      	str	r1, [sp, #20]
 80083de:	6800      	ldr	r0, [r0, #0]
 80083e0:	a902      	add	r1, sp, #8
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	f001 ff04 	bl	800a1f0 <_svfiprintf_r>
 80083e8:	2200      	movs	r2, #0
 80083ea:	9b02      	ldr	r3, [sp, #8]
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	b01c      	add	sp, #112	; 0x70
 80083f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f4:	b003      	add	sp, #12
 80083f6:	4770      	bx	lr
 80083f8:	2000017c 	.word	0x2000017c
 80083fc:	ffff0208 	.word	0xffff0208

08008400 <strcpy>:
 8008400:	4603      	mov	r3, r0
 8008402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008406:	f803 2b01 	strb.w	r2, [r3], #1
 800840a:	2a00      	cmp	r2, #0
 800840c:	d1f9      	bne.n	8008402 <strcpy+0x2>
 800840e:	4770      	bx	lr

08008410 <strncmp>:
 8008410:	b510      	push	{r4, lr}
 8008412:	b16a      	cbz	r2, 8008430 <strncmp+0x20>
 8008414:	3901      	subs	r1, #1
 8008416:	1884      	adds	r4, r0, r2
 8008418:	f810 3b01 	ldrb.w	r3, [r0], #1
 800841c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008420:	4293      	cmp	r3, r2
 8008422:	d103      	bne.n	800842c <strncmp+0x1c>
 8008424:	42a0      	cmp	r0, r4
 8008426:	d001      	beq.n	800842c <strncmp+0x1c>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1f5      	bne.n	8008418 <strncmp+0x8>
 800842c:	1a98      	subs	r0, r3, r2
 800842e:	bd10      	pop	{r4, pc}
 8008430:	4610      	mov	r0, r2
 8008432:	e7fc      	b.n	800842e <strncmp+0x1e>

08008434 <strncpy>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4604      	mov	r4, r0
 8008438:	3901      	subs	r1, #1
 800843a:	b902      	cbnz	r2, 800843e <strncpy+0xa>
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	4623      	mov	r3, r4
 8008440:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008444:	1e56      	subs	r6, r2, #1
 8008446:	f803 5b01 	strb.w	r5, [r3], #1
 800844a:	b92d      	cbnz	r5, 8008458 <strncpy+0x24>
 800844c:	4414      	add	r4, r2
 800844e:	42a3      	cmp	r3, r4
 8008450:	d0f4      	beq.n	800843c <strncpy+0x8>
 8008452:	f803 5b01 	strb.w	r5, [r3], #1
 8008456:	e7fa      	b.n	800844e <strncpy+0x1a>
 8008458:	461c      	mov	r4, r3
 800845a:	4632      	mov	r2, r6
 800845c:	e7ed      	b.n	800843a <strncpy+0x6>

0800845e <sulp>:
 800845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	460f      	mov	r7, r1
 8008464:	4690      	mov	r8, r2
 8008466:	f001 fcd3 	bl	8009e10 <__ulp>
 800846a:	4604      	mov	r4, r0
 800846c:	460d      	mov	r5, r1
 800846e:	f1b8 0f00 	cmp.w	r8, #0
 8008472:	d011      	beq.n	8008498 <sulp+0x3a>
 8008474:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800847c:	2b00      	cmp	r3, #0
 800847e:	dd0b      	ble.n	8008498 <sulp+0x3a>
 8008480:	2400      	movs	r4, #0
 8008482:	051b      	lsls	r3, r3, #20
 8008484:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008488:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800848c:	4622      	mov	r2, r4
 800848e:	462b      	mov	r3, r5
 8008490:	f7f8 f822 	bl	80004d8 <__aeabi_dmul>
 8008494:	4604      	mov	r4, r0
 8008496:	460d      	mov	r5, r1
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084a0 <_strtod_l>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	461f      	mov	r7, r3
 80084a6:	2300      	movs	r3, #0
 80084a8:	b0a1      	sub	sp, #132	; 0x84
 80084aa:	4683      	mov	fp, r0
 80084ac:	4638      	mov	r0, r7
 80084ae:	460e      	mov	r6, r1
 80084b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80084b2:	931c      	str	r3, [sp, #112]	; 0x70
 80084b4:	f001 f9c3 	bl	800983e <__localeconv_l>
 80084b8:	4680      	mov	r8, r0
 80084ba:	6800      	ldr	r0, [r0, #0]
 80084bc:	f7f7 fe48 	bl	8000150 <strlen>
 80084c0:	f04f 0900 	mov.w	r9, #0
 80084c4:	4604      	mov	r4, r0
 80084c6:	f04f 0a00 	mov.w	sl, #0
 80084ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80084cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	2a0d      	cmp	r2, #13
 80084d2:	d832      	bhi.n	800853a <_strtod_l+0x9a>
 80084d4:	2a09      	cmp	r2, #9
 80084d6:	d236      	bcs.n	8008546 <_strtod_l+0xa6>
 80084d8:	2a00      	cmp	r2, #0
 80084da:	d03e      	beq.n	800855a <_strtod_l+0xba>
 80084dc:	2300      	movs	r3, #0
 80084de:	930d      	str	r3, [sp, #52]	; 0x34
 80084e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80084e2:	782b      	ldrb	r3, [r5, #0]
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	f040 80ac 	bne.w	8008642 <_strtod_l+0x1a2>
 80084ea:	786b      	ldrb	r3, [r5, #1]
 80084ec:	2b58      	cmp	r3, #88	; 0x58
 80084ee:	d001      	beq.n	80084f4 <_strtod_l+0x54>
 80084f0:	2b78      	cmp	r3, #120	; 0x78
 80084f2:	d167      	bne.n	80085c4 <_strtod_l+0x124>
 80084f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f6:	9702      	str	r7, [sp, #8]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	ab1c      	add	r3, sp, #112	; 0x70
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	4a89      	ldr	r2, [pc, #548]	; (8008724 <_strtod_l+0x284>)
 8008500:	ab1d      	add	r3, sp, #116	; 0x74
 8008502:	a91b      	add	r1, sp, #108	; 0x6c
 8008504:	4658      	mov	r0, fp
 8008506:	f000 febf 	bl	8009288 <__gethex>
 800850a:	f010 0407 	ands.w	r4, r0, #7
 800850e:	4606      	mov	r6, r0
 8008510:	d005      	beq.n	800851e <_strtod_l+0x7e>
 8008512:	2c06      	cmp	r4, #6
 8008514:	d12b      	bne.n	800856e <_strtod_l+0xce>
 8008516:	2300      	movs	r3, #0
 8008518:	3501      	adds	r5, #1
 800851a:	951b      	str	r5, [sp, #108]	; 0x6c
 800851c:	930d      	str	r3, [sp, #52]	; 0x34
 800851e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 85a6 	bne.w	8009072 <_strtod_l+0xbd2>
 8008526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008528:	b1e3      	cbz	r3, 8008564 <_strtod_l+0xc4>
 800852a:	464a      	mov	r2, r9
 800852c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008530:	4610      	mov	r0, r2
 8008532:	4619      	mov	r1, r3
 8008534:	b021      	add	sp, #132	; 0x84
 8008536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853a:	2a2b      	cmp	r2, #43	; 0x2b
 800853c:	d015      	beq.n	800856a <_strtod_l+0xca>
 800853e:	2a2d      	cmp	r2, #45	; 0x2d
 8008540:	d004      	beq.n	800854c <_strtod_l+0xac>
 8008542:	2a20      	cmp	r2, #32
 8008544:	d1ca      	bne.n	80084dc <_strtod_l+0x3c>
 8008546:	3301      	adds	r3, #1
 8008548:	931b      	str	r3, [sp, #108]	; 0x6c
 800854a:	e7bf      	b.n	80084cc <_strtod_l+0x2c>
 800854c:	2201      	movs	r2, #1
 800854e:	920d      	str	r2, [sp, #52]	; 0x34
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	921b      	str	r2, [sp, #108]	; 0x6c
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1c2      	bne.n	80084e0 <_strtod_l+0x40>
 800855a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800855c:	961b      	str	r6, [sp, #108]	; 0x6c
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 8585 	bne.w	800906e <_strtod_l+0xbce>
 8008564:	464a      	mov	r2, r9
 8008566:	4653      	mov	r3, sl
 8008568:	e7e2      	b.n	8008530 <_strtod_l+0x90>
 800856a:	2200      	movs	r2, #0
 800856c:	e7ef      	b.n	800854e <_strtod_l+0xae>
 800856e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008570:	b13a      	cbz	r2, 8008582 <_strtod_l+0xe2>
 8008572:	2135      	movs	r1, #53	; 0x35
 8008574:	a81e      	add	r0, sp, #120	; 0x78
 8008576:	f001 fd3e 	bl	8009ff6 <__copybits>
 800857a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800857c:	4658      	mov	r0, fp
 800857e:	f001 f9b1 	bl	80098e4 <_Bfree>
 8008582:	3c01      	subs	r4, #1
 8008584:	2c04      	cmp	r4, #4
 8008586:	d806      	bhi.n	8008596 <_strtod_l+0xf6>
 8008588:	e8df f004 	tbb	[pc, r4]
 800858c:	1714030a 	.word	0x1714030a
 8008590:	0a          	.byte	0x0a
 8008591:	00          	.byte	0x00
 8008592:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8008596:	0731      	lsls	r1, r6, #28
 8008598:	d5c1      	bpl.n	800851e <_strtod_l+0x7e>
 800859a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800859e:	e7be      	b.n	800851e <_strtod_l+0x7e>
 80085a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80085a2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80085a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80085ae:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80085b2:	e7f0      	b.n	8008596 <_strtod_l+0xf6>
 80085b4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008728 <_strtod_l+0x288>
 80085b8:	e7ed      	b.n	8008596 <_strtod_l+0xf6>
 80085ba:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80085be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80085c2:	e7e8      	b.n	8008596 <_strtod_l+0xf6>
 80085c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b30      	cmp	r3, #48	; 0x30
 80085ce:	d0f9      	beq.n	80085c4 <_strtod_l+0x124>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0a4      	beq.n	800851e <_strtod_l+0x7e>
 80085d4:	2301      	movs	r3, #1
 80085d6:	2500      	movs	r5, #0
 80085d8:	220a      	movs	r2, #10
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085de:	9506      	str	r5, [sp, #24]
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	9504      	str	r5, [sp, #16]
 80085e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80085e6:	7807      	ldrb	r7, [r0, #0]
 80085e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80085ec:	b2d9      	uxtb	r1, r3
 80085ee:	2909      	cmp	r1, #9
 80085f0:	d929      	bls.n	8008646 <_strtod_l+0x1a6>
 80085f2:	4622      	mov	r2, r4
 80085f4:	f8d8 1000 	ldr.w	r1, [r8]
 80085f8:	f7ff ff0a 	bl	8008410 <strncmp>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d031      	beq.n	8008664 <_strtod_l+0x1c4>
 8008600:	2000      	movs	r0, #0
 8008602:	463b      	mov	r3, r7
 8008604:	4602      	mov	r2, r0
 8008606:	9c04      	ldr	r4, [sp, #16]
 8008608:	9005      	str	r0, [sp, #20]
 800860a:	2b65      	cmp	r3, #101	; 0x65
 800860c:	d001      	beq.n	8008612 <_strtod_l+0x172>
 800860e:	2b45      	cmp	r3, #69	; 0x45
 8008610:	d114      	bne.n	800863c <_strtod_l+0x19c>
 8008612:	b924      	cbnz	r4, 800861e <_strtod_l+0x17e>
 8008614:	b910      	cbnz	r0, 800861c <_strtod_l+0x17c>
 8008616:	9b07      	ldr	r3, [sp, #28]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d09e      	beq.n	800855a <_strtod_l+0xba>
 800861c:	2400      	movs	r4, #0
 800861e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008620:	1c73      	adds	r3, r6, #1
 8008622:	931b      	str	r3, [sp, #108]	; 0x6c
 8008624:	7873      	ldrb	r3, [r6, #1]
 8008626:	2b2b      	cmp	r3, #43	; 0x2b
 8008628:	d078      	beq.n	800871c <_strtod_l+0x27c>
 800862a:	2b2d      	cmp	r3, #45	; 0x2d
 800862c:	d070      	beq.n	8008710 <_strtod_l+0x270>
 800862e:	f04f 0c00 	mov.w	ip, #0
 8008632:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008636:	2f09      	cmp	r7, #9
 8008638:	d97c      	bls.n	8008734 <_strtod_l+0x294>
 800863a:	961b      	str	r6, [sp, #108]	; 0x6c
 800863c:	f04f 0e00 	mov.w	lr, #0
 8008640:	e09a      	b.n	8008778 <_strtod_l+0x2d8>
 8008642:	2300      	movs	r3, #0
 8008644:	e7c7      	b.n	80085d6 <_strtod_l+0x136>
 8008646:	9904      	ldr	r1, [sp, #16]
 8008648:	3001      	adds	r0, #1
 800864a:	2908      	cmp	r1, #8
 800864c:	bfd7      	itett	le
 800864e:	9906      	ldrle	r1, [sp, #24]
 8008650:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008654:	fb02 3301 	mlale	r3, r2, r1, r3
 8008658:	9306      	strle	r3, [sp, #24]
 800865a:	9b04      	ldr	r3, [sp, #16]
 800865c:	901b      	str	r0, [sp, #108]	; 0x6c
 800865e:	3301      	adds	r3, #1
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	e7bf      	b.n	80085e4 <_strtod_l+0x144>
 8008664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008666:	191a      	adds	r2, r3, r4
 8008668:	921b      	str	r2, [sp, #108]	; 0x6c
 800866a:	9a04      	ldr	r2, [sp, #16]
 800866c:	5d1b      	ldrb	r3, [r3, r4]
 800866e:	2a00      	cmp	r2, #0
 8008670:	d037      	beq.n	80086e2 <_strtod_l+0x242>
 8008672:	4602      	mov	r2, r0
 8008674:	9c04      	ldr	r4, [sp, #16]
 8008676:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800867a:	2909      	cmp	r1, #9
 800867c:	d913      	bls.n	80086a6 <_strtod_l+0x206>
 800867e:	2101      	movs	r1, #1
 8008680:	9105      	str	r1, [sp, #20]
 8008682:	e7c2      	b.n	800860a <_strtod_l+0x16a>
 8008684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008686:	3001      	adds	r0, #1
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	921b      	str	r2, [sp, #108]	; 0x6c
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b30      	cmp	r3, #48	; 0x30
 8008690:	d0f8      	beq.n	8008684 <_strtod_l+0x1e4>
 8008692:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008696:	2a08      	cmp	r2, #8
 8008698:	f200 84f0 	bhi.w	800907c <_strtod_l+0xbdc>
 800869c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800869e:	9208      	str	r2, [sp, #32]
 80086a0:	4602      	mov	r2, r0
 80086a2:	2000      	movs	r0, #0
 80086a4:	4604      	mov	r4, r0
 80086a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80086aa:	f100 0101 	add.w	r1, r0, #1
 80086ae:	d012      	beq.n	80086d6 <_strtod_l+0x236>
 80086b0:	440a      	add	r2, r1
 80086b2:	270a      	movs	r7, #10
 80086b4:	4621      	mov	r1, r4
 80086b6:	eb00 0c04 	add.w	ip, r0, r4
 80086ba:	458c      	cmp	ip, r1
 80086bc:	d113      	bne.n	80086e6 <_strtod_l+0x246>
 80086be:	1821      	adds	r1, r4, r0
 80086c0:	2908      	cmp	r1, #8
 80086c2:	f104 0401 	add.w	r4, r4, #1
 80086c6:	4404      	add	r4, r0
 80086c8:	dc19      	bgt.n	80086fe <_strtod_l+0x25e>
 80086ca:	210a      	movs	r1, #10
 80086cc:	9b06      	ldr	r3, [sp, #24]
 80086ce:	fb01 e303 	mla	r3, r1, r3, lr
 80086d2:	9306      	str	r3, [sp, #24]
 80086d4:	2100      	movs	r1, #0
 80086d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086d8:	1c58      	adds	r0, r3, #1
 80086da:	901b      	str	r0, [sp, #108]	; 0x6c
 80086dc:	785b      	ldrb	r3, [r3, #1]
 80086de:	4608      	mov	r0, r1
 80086e0:	e7c9      	b.n	8008676 <_strtod_l+0x1d6>
 80086e2:	9804      	ldr	r0, [sp, #16]
 80086e4:	e7d3      	b.n	800868e <_strtod_l+0x1ee>
 80086e6:	2908      	cmp	r1, #8
 80086e8:	f101 0101 	add.w	r1, r1, #1
 80086ec:	dc03      	bgt.n	80086f6 <_strtod_l+0x256>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	437b      	muls	r3, r7
 80086f2:	9306      	str	r3, [sp, #24]
 80086f4:	e7e1      	b.n	80086ba <_strtod_l+0x21a>
 80086f6:	2910      	cmp	r1, #16
 80086f8:	bfd8      	it	le
 80086fa:	437d      	mulle	r5, r7
 80086fc:	e7dd      	b.n	80086ba <_strtod_l+0x21a>
 80086fe:	2c10      	cmp	r4, #16
 8008700:	bfdc      	itt	le
 8008702:	210a      	movle	r1, #10
 8008704:	fb01 e505 	mlale	r5, r1, r5, lr
 8008708:	e7e4      	b.n	80086d4 <_strtod_l+0x234>
 800870a:	2301      	movs	r3, #1
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	e781      	b.n	8008614 <_strtod_l+0x174>
 8008710:	f04f 0c01 	mov.w	ip, #1
 8008714:	1cb3      	adds	r3, r6, #2
 8008716:	931b      	str	r3, [sp, #108]	; 0x6c
 8008718:	78b3      	ldrb	r3, [r6, #2]
 800871a:	e78a      	b.n	8008632 <_strtod_l+0x192>
 800871c:	f04f 0c00 	mov.w	ip, #0
 8008720:	e7f8      	b.n	8008714 <_strtod_l+0x274>
 8008722:	bf00      	nop
 8008724:	0800a968 	.word	0x0800a968
 8008728:	7ff00000 	.word	0x7ff00000
 800872c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800872e:	1c5f      	adds	r7, r3, #1
 8008730:	971b      	str	r7, [sp, #108]	; 0x6c
 8008732:	785b      	ldrb	r3, [r3, #1]
 8008734:	2b30      	cmp	r3, #48	; 0x30
 8008736:	d0f9      	beq.n	800872c <_strtod_l+0x28c>
 8008738:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800873c:	2f08      	cmp	r7, #8
 800873e:	f63f af7d 	bhi.w	800863c <_strtod_l+0x19c>
 8008742:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008748:	9309      	str	r3, [sp, #36]	; 0x24
 800874a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800874c:	1c5f      	adds	r7, r3, #1
 800874e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008756:	f1b8 0f09 	cmp.w	r8, #9
 800875a:	d937      	bls.n	80087cc <_strtod_l+0x32c>
 800875c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800875e:	1a7f      	subs	r7, r7, r1
 8008760:	2f08      	cmp	r7, #8
 8008762:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008766:	dc37      	bgt.n	80087d8 <_strtod_l+0x338>
 8008768:	45be      	cmp	lr, r7
 800876a:	bfa8      	it	ge
 800876c:	46be      	movge	lr, r7
 800876e:	f1bc 0f00 	cmp.w	ip, #0
 8008772:	d001      	beq.n	8008778 <_strtod_l+0x2d8>
 8008774:	f1ce 0e00 	rsb	lr, lr, #0
 8008778:	2c00      	cmp	r4, #0
 800877a:	d151      	bne.n	8008820 <_strtod_l+0x380>
 800877c:	2800      	cmp	r0, #0
 800877e:	f47f aece 	bne.w	800851e <_strtod_l+0x7e>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	2a00      	cmp	r2, #0
 8008786:	f47f aeca 	bne.w	800851e <_strtod_l+0x7e>
 800878a:	9a05      	ldr	r2, [sp, #20]
 800878c:	2a00      	cmp	r2, #0
 800878e:	f47f aee4 	bne.w	800855a <_strtod_l+0xba>
 8008792:	2b4e      	cmp	r3, #78	; 0x4e
 8008794:	d027      	beq.n	80087e6 <_strtod_l+0x346>
 8008796:	dc21      	bgt.n	80087dc <_strtod_l+0x33c>
 8008798:	2b49      	cmp	r3, #73	; 0x49
 800879a:	f47f aede 	bne.w	800855a <_strtod_l+0xba>
 800879e:	49a4      	ldr	r1, [pc, #656]	; (8008a30 <_strtod_l+0x590>)
 80087a0:	a81b      	add	r0, sp, #108	; 0x6c
 80087a2:	f000 ffa5 	bl	80096f0 <__match>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f aed7 	beq.w	800855a <_strtod_l+0xba>
 80087ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087ae:	49a1      	ldr	r1, [pc, #644]	; (8008a34 <_strtod_l+0x594>)
 80087b0:	3b01      	subs	r3, #1
 80087b2:	a81b      	add	r0, sp, #108	; 0x6c
 80087b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80087b6:	f000 ff9b 	bl	80096f0 <__match>
 80087ba:	b910      	cbnz	r0, 80087c2 <_strtod_l+0x322>
 80087bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087be:	3301      	adds	r3, #1
 80087c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80087c2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008a48 <_strtod_l+0x5a8>
 80087c6:	f04f 0900 	mov.w	r9, #0
 80087ca:	e6a8      	b.n	800851e <_strtod_l+0x7e>
 80087cc:	210a      	movs	r1, #10
 80087ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80087d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80087d6:	e7b8      	b.n	800874a <_strtod_l+0x2aa>
 80087d8:	46be      	mov	lr, r7
 80087da:	e7c8      	b.n	800876e <_strtod_l+0x2ce>
 80087dc:	2b69      	cmp	r3, #105	; 0x69
 80087de:	d0de      	beq.n	800879e <_strtod_l+0x2fe>
 80087e0:	2b6e      	cmp	r3, #110	; 0x6e
 80087e2:	f47f aeba 	bne.w	800855a <_strtod_l+0xba>
 80087e6:	4994      	ldr	r1, [pc, #592]	; (8008a38 <_strtod_l+0x598>)
 80087e8:	a81b      	add	r0, sp, #108	; 0x6c
 80087ea:	f000 ff81 	bl	80096f0 <__match>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f aeb3 	beq.w	800855a <_strtod_l+0xba>
 80087f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b28      	cmp	r3, #40	; 0x28
 80087fa:	d10e      	bne.n	800881a <_strtod_l+0x37a>
 80087fc:	aa1e      	add	r2, sp, #120	; 0x78
 80087fe:	498f      	ldr	r1, [pc, #572]	; (8008a3c <_strtod_l+0x59c>)
 8008800:	a81b      	add	r0, sp, #108	; 0x6c
 8008802:	f000 ff89 	bl	8009718 <__hexnan>
 8008806:	2805      	cmp	r0, #5
 8008808:	d107      	bne.n	800881a <_strtod_l+0x37a>
 800880a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800880c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008810:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8008814:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008818:	e681      	b.n	800851e <_strtod_l+0x7e>
 800881a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008a50 <_strtod_l+0x5b0>
 800881e:	e7d2      	b.n	80087c6 <_strtod_l+0x326>
 8008820:	ebae 0302 	sub.w	r3, lr, r2
 8008824:	9307      	str	r3, [sp, #28]
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	9806      	ldr	r0, [sp, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	bf08      	it	eq
 800882e:	4623      	moveq	r3, r4
 8008830:	2c10      	cmp	r4, #16
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	46a0      	mov	r8, r4
 8008836:	bfa8      	it	ge
 8008838:	f04f 0810 	movge.w	r8, #16
 800883c:	f7f7 fdd2 	bl	80003e4 <__aeabi_ui2d>
 8008840:	2c09      	cmp	r4, #9
 8008842:	4681      	mov	r9, r0
 8008844:	468a      	mov	sl, r1
 8008846:	dc13      	bgt.n	8008870 <_strtod_l+0x3d0>
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f43f ae67 	beq.w	800851e <_strtod_l+0x7e>
 8008850:	9b07      	ldr	r3, [sp, #28]
 8008852:	dd7e      	ble.n	8008952 <_strtod_l+0x4b2>
 8008854:	2b16      	cmp	r3, #22
 8008856:	dc65      	bgt.n	8008924 <_strtod_l+0x484>
 8008858:	4a79      	ldr	r2, [pc, #484]	; (8008a40 <_strtod_l+0x5a0>)
 800885a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800885e:	464a      	mov	r2, r9
 8008860:	e9de 0100 	ldrd	r0, r1, [lr]
 8008864:	4653      	mov	r3, sl
 8008866:	f7f7 fe37 	bl	80004d8 <__aeabi_dmul>
 800886a:	4681      	mov	r9, r0
 800886c:	468a      	mov	sl, r1
 800886e:	e656      	b.n	800851e <_strtod_l+0x7e>
 8008870:	4b73      	ldr	r3, [pc, #460]	; (8008a40 <_strtod_l+0x5a0>)
 8008872:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008876:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800887a:	f7f7 fe2d 	bl	80004d8 <__aeabi_dmul>
 800887e:	4606      	mov	r6, r0
 8008880:	4628      	mov	r0, r5
 8008882:	460f      	mov	r7, r1
 8008884:	f7f7 fdae 	bl	80003e4 <__aeabi_ui2d>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	f7f7 fc6c 	bl	800016c <__adddf3>
 8008894:	2c0f      	cmp	r4, #15
 8008896:	4681      	mov	r9, r0
 8008898:	468a      	mov	sl, r1
 800889a:	ddd5      	ble.n	8008848 <_strtod_l+0x3a8>
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	eba4 0808 	sub.w	r8, r4, r8
 80088a2:	4498      	add	r8, r3
 80088a4:	f1b8 0f00 	cmp.w	r8, #0
 80088a8:	f340 809a 	ble.w	80089e0 <_strtod_l+0x540>
 80088ac:	f018 030f 	ands.w	r3, r8, #15
 80088b0:	d00a      	beq.n	80088c8 <_strtod_l+0x428>
 80088b2:	4963      	ldr	r1, [pc, #396]	; (8008a40 <_strtod_l+0x5a0>)
 80088b4:	464a      	mov	r2, r9
 80088b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088be:	4653      	mov	r3, sl
 80088c0:	f7f7 fe0a 	bl	80004d8 <__aeabi_dmul>
 80088c4:	4681      	mov	r9, r0
 80088c6:	468a      	mov	sl, r1
 80088c8:	f038 080f 	bics.w	r8, r8, #15
 80088cc:	d077      	beq.n	80089be <_strtod_l+0x51e>
 80088ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80088d2:	dd4b      	ble.n	800896c <_strtod_l+0x4cc>
 80088d4:	f04f 0800 	mov.w	r8, #0
 80088d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80088dc:	f8cd 8020 	str.w	r8, [sp, #32]
 80088e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80088e4:	2322      	movs	r3, #34	; 0x22
 80088e6:	f04f 0900 	mov.w	r9, #0
 80088ea:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008a48 <_strtod_l+0x5a8>
 80088ee:	f8cb 3000 	str.w	r3, [fp]
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f43f ae12 	beq.w	800851e <_strtod_l+0x7e>
 80088fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80088fc:	4658      	mov	r0, fp
 80088fe:	f000 fff1 	bl	80098e4 <_Bfree>
 8008902:	9906      	ldr	r1, [sp, #24]
 8008904:	4658      	mov	r0, fp
 8008906:	f000 ffed 	bl	80098e4 <_Bfree>
 800890a:	9904      	ldr	r1, [sp, #16]
 800890c:	4658      	mov	r0, fp
 800890e:	f000 ffe9 	bl	80098e4 <_Bfree>
 8008912:	9908      	ldr	r1, [sp, #32]
 8008914:	4658      	mov	r0, fp
 8008916:	f000 ffe5 	bl	80098e4 <_Bfree>
 800891a:	4641      	mov	r1, r8
 800891c:	4658      	mov	r0, fp
 800891e:	f000 ffe1 	bl	80098e4 <_Bfree>
 8008922:	e5fc      	b.n	800851e <_strtod_l+0x7e>
 8008924:	9a07      	ldr	r2, [sp, #28]
 8008926:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800892a:	4293      	cmp	r3, r2
 800892c:	dbb6      	blt.n	800889c <_strtod_l+0x3fc>
 800892e:	4d44      	ldr	r5, [pc, #272]	; (8008a40 <_strtod_l+0x5a0>)
 8008930:	f1c4 040f 	rsb	r4, r4, #15
 8008934:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008938:	464a      	mov	r2, r9
 800893a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800893e:	4653      	mov	r3, sl
 8008940:	f7f7 fdca 	bl	80004d8 <__aeabi_dmul>
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	1b1c      	subs	r4, r3, r4
 8008948:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800894c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008950:	e789      	b.n	8008866 <_strtod_l+0x3c6>
 8008952:	f113 0f16 	cmn.w	r3, #22
 8008956:	dba1      	blt.n	800889c <_strtod_l+0x3fc>
 8008958:	4a39      	ldr	r2, [pc, #228]	; (8008a40 <_strtod_l+0x5a0>)
 800895a:	4648      	mov	r0, r9
 800895c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008960:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008964:	4651      	mov	r1, sl
 8008966:	f7f7 fee1 	bl	800072c <__aeabi_ddiv>
 800896a:	e77e      	b.n	800886a <_strtod_l+0x3ca>
 800896c:	2300      	movs	r3, #0
 800896e:	4648      	mov	r0, r9
 8008970:	4651      	mov	r1, sl
 8008972:	461d      	mov	r5, r3
 8008974:	4e33      	ldr	r6, [pc, #204]	; (8008a44 <_strtod_l+0x5a4>)
 8008976:	ea4f 1828 	mov.w	r8, r8, asr #4
 800897a:	f1b8 0f01 	cmp.w	r8, #1
 800897e:	dc21      	bgt.n	80089c4 <_strtod_l+0x524>
 8008980:	b10b      	cbz	r3, 8008986 <_strtod_l+0x4e6>
 8008982:	4681      	mov	r9, r0
 8008984:	468a      	mov	sl, r1
 8008986:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <_strtod_l+0x5a4>)
 8008988:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800898c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008990:	464a      	mov	r2, r9
 8008992:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008996:	4653      	mov	r3, sl
 8008998:	f7f7 fd9e 	bl	80004d8 <__aeabi_dmul>
 800899c:	4b2a      	ldr	r3, [pc, #168]	; (8008a48 <_strtod_l+0x5a8>)
 800899e:	460a      	mov	r2, r1
 80089a0:	400b      	ands	r3, r1
 80089a2:	492a      	ldr	r1, [pc, #168]	; (8008a4c <_strtod_l+0x5ac>)
 80089a4:	4681      	mov	r9, r0
 80089a6:	428b      	cmp	r3, r1
 80089a8:	d894      	bhi.n	80088d4 <_strtod_l+0x434>
 80089aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80089ae:	428b      	cmp	r3, r1
 80089b0:	bf86      	itte	hi
 80089b2:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80089b6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8008a54 <_strtod_l+0x5b4>
 80089ba:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80089be:	2300      	movs	r3, #0
 80089c0:	9305      	str	r3, [sp, #20]
 80089c2:	e07b      	b.n	8008abc <_strtod_l+0x61c>
 80089c4:	f018 0f01 	tst.w	r8, #1
 80089c8:	d006      	beq.n	80089d8 <_strtod_l+0x538>
 80089ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f7f7 fd81 	bl	80004d8 <__aeabi_dmul>
 80089d6:	2301      	movs	r3, #1
 80089d8:	3501      	adds	r5, #1
 80089da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089de:	e7cc      	b.n	800897a <_strtod_l+0x4da>
 80089e0:	d0ed      	beq.n	80089be <_strtod_l+0x51e>
 80089e2:	f1c8 0800 	rsb	r8, r8, #0
 80089e6:	f018 020f 	ands.w	r2, r8, #15
 80089ea:	d00a      	beq.n	8008a02 <_strtod_l+0x562>
 80089ec:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <_strtod_l+0x5a0>)
 80089ee:	4648      	mov	r0, r9
 80089f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089f4:	4651      	mov	r1, sl
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fe97 	bl	800072c <__aeabi_ddiv>
 80089fe:	4681      	mov	r9, r0
 8008a00:	468a      	mov	sl, r1
 8008a02:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008a06:	d0da      	beq.n	80089be <_strtod_l+0x51e>
 8008a08:	f1b8 0f1f 	cmp.w	r8, #31
 8008a0c:	dd24      	ble.n	8008a58 <_strtod_l+0x5b8>
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	f8cd 8010 	str.w	r8, [sp, #16]
 8008a16:	f8cd 8020 	str.w	r8, [sp, #32]
 8008a1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a1e:	2322      	movs	r3, #34	; 0x22
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	f04f 0a00 	mov.w	sl, #0
 8008a28:	f8cb 3000 	str.w	r3, [fp]
 8008a2c:	e761      	b.n	80088f2 <_strtod_l+0x452>
 8008a2e:	bf00      	nop
 8008a30:	0800a95c 	.word	0x0800a95c
 8008a34:	0800a95f 	.word	0x0800a95f
 8008a38:	0800a965 	.word	0x0800a965
 8008a3c:	0800a97c 	.word	0x0800a97c
 8008a40:	0800a9f0 	.word	0x0800a9f0
 8008a44:	0800a9c8 	.word	0x0800a9c8
 8008a48:	7ff00000 	.word	0x7ff00000
 8008a4c:	7ca00000 	.word	0x7ca00000
 8008a50:	fff80000 	.word	0xfff80000
 8008a54:	7fefffff 	.word	0x7fefffff
 8008a58:	f018 0310 	ands.w	r3, r8, #16
 8008a5c:	bf18      	it	ne
 8008a5e:	236a      	movne	r3, #106	; 0x6a
 8008a60:	4648      	mov	r0, r9
 8008a62:	9305      	str	r3, [sp, #20]
 8008a64:	4651      	mov	r1, sl
 8008a66:	2300      	movs	r3, #0
 8008a68:	4da1      	ldr	r5, [pc, #644]	; (8008cf0 <_strtod_l+0x850>)
 8008a6a:	f1b8 0f00 	cmp.w	r8, #0
 8008a6e:	f300 8113 	bgt.w	8008c98 <_strtod_l+0x7f8>
 8008a72:	b10b      	cbz	r3, 8008a78 <_strtod_l+0x5d8>
 8008a74:	4681      	mov	r9, r0
 8008a76:	468a      	mov	sl, r1
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	b1bb      	cbz	r3, 8008aac <_strtod_l+0x60c>
 8008a7c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008a80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	4651      	mov	r1, sl
 8008a88:	dd10      	ble.n	8008aac <_strtod_l+0x60c>
 8008a8a:	2b1f      	cmp	r3, #31
 8008a8c:	f340 8110 	ble.w	8008cb0 <_strtod_l+0x810>
 8008a90:	2b34      	cmp	r3, #52	; 0x34
 8008a92:	bfd8      	it	le
 8008a94:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	bfcf      	iteee	gt
 8008a9e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008aa2:	3b20      	suble	r3, #32
 8008aa4:	fa02 f303 	lslle.w	r3, r2, r3
 8008aa8:	ea03 0a01 	andle.w	sl, r3, r1
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4648      	mov	r0, r9
 8008ab2:	4651      	mov	r1, sl
 8008ab4:	f7f7 ff78 	bl	80009a8 <__aeabi_dcmpeq>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d1a8      	bne.n	8008a0e <_strtod_l+0x56e>
 8008abc:	9b06      	ldr	r3, [sp, #24]
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	9908      	ldr	r1, [sp, #32]
 8008ac4:	4623      	mov	r3, r4
 8008ac6:	4658      	mov	r0, fp
 8008ac8:	f000 ff5e 	bl	8009988 <__s2b>
 8008acc:	9008      	str	r0, [sp, #32]
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f43f af00 	beq.w	80088d4 <_strtod_l+0x434>
 8008ad4:	9a07      	ldr	r2, [sp, #28]
 8008ad6:	9b07      	ldr	r3, [sp, #28]
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	f1c3 0300 	rsb	r3, r3, #0
 8008ade:	bfa8      	it	ge
 8008ae0:	2300      	movge	r3, #0
 8008ae2:	f04f 0800 	mov.w	r8, #0
 8008ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008aec:	9316      	str	r3, [sp, #88]	; 0x58
 8008aee:	f8cd 8010 	str.w	r8, [sp, #16]
 8008af2:	9b08      	ldr	r3, [sp, #32]
 8008af4:	4658      	mov	r0, fp
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	f000 fec0 	bl	800987c <_Balloc>
 8008afc:	9006      	str	r0, [sp, #24]
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f aef0 	beq.w	80088e4 <_strtod_l+0x444>
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	300c      	adds	r0, #12
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	f103 010c 	add.w	r1, r3, #12
 8008b0e:	3202      	adds	r2, #2
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	f000 fea8 	bl	8009866 <memcpy>
 8008b16:	ab1e      	add	r3, sp, #120	; 0x78
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	464a      	mov	r2, r9
 8008b20:	4653      	mov	r3, sl
 8008b22:	4658      	mov	r0, fp
 8008b24:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008b28:	f001 f9e8 	bl	8009efc <__d2b>
 8008b2c:	901c      	str	r0, [sp, #112]	; 0x70
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f43f aed8 	beq.w	80088e4 <_strtod_l+0x444>
 8008b34:	2101      	movs	r1, #1
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 ffb2 	bl	8009aa0 <__i2b>
 8008b3c:	9004      	str	r0, [sp, #16]
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f43f aecf 	beq.w	80088e4 <_strtod_l+0x444>
 8008b46:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008b48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	bfab      	itete	ge
 8008b4e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008b50:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008b52:	18ee      	addge	r6, r5, r3
 8008b54:	1b5c      	sublt	r4, r3, r5
 8008b56:	9b05      	ldr	r3, [sp, #20]
 8008b58:	bfa8      	it	ge
 8008b5a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008b5c:	eba5 0503 	sub.w	r5, r5, r3
 8008b60:	4415      	add	r5, r2
 8008b62:	4b64      	ldr	r3, [pc, #400]	; (8008cf4 <_strtod_l+0x854>)
 8008b64:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008b68:	bfb8      	it	lt
 8008b6a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008b6c:	429d      	cmp	r5, r3
 8008b6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b72:	f280 80af 	bge.w	8008cd4 <_strtod_l+0x834>
 8008b76:	1b5b      	subs	r3, r3, r5
 8008b78:	2b1f      	cmp	r3, #31
 8008b7a:	eba2 0203 	sub.w	r2, r2, r3
 8008b7e:	f04f 0701 	mov.w	r7, #1
 8008b82:	f300 809c 	bgt.w	8008cbe <_strtod_l+0x81e>
 8008b86:	2500      	movs	r5, #0
 8008b88:	fa07 f303 	lsl.w	r3, r7, r3
 8008b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b8e:	18b7      	adds	r7, r6, r2
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	42be      	cmp	r6, r7
 8008b94:	4414      	add	r4, r2
 8008b96:	441c      	add	r4, r3
 8008b98:	4633      	mov	r3, r6
 8008b9a:	bfa8      	it	ge
 8008b9c:	463b      	movge	r3, r7
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	bfa8      	it	ge
 8008ba2:	4623      	movge	r3, r4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	bfc2      	ittt	gt
 8008ba8:	1aff      	subgt	r7, r7, r3
 8008baa:	1ae4      	subgt	r4, r4, r3
 8008bac:	1af6      	subgt	r6, r6, r3
 8008bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb0:	b1bb      	cbz	r3, 8008be2 <_strtod_l+0x742>
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	9904      	ldr	r1, [sp, #16]
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f001 f810 	bl	8009bdc <__pow5mult>
 8008bbc:	9004      	str	r0, [sp, #16]
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f43f ae90 	beq.w	80088e4 <_strtod_l+0x444>
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008bc8:	4658      	mov	r0, fp
 8008bca:	f000 ff72 	bl	8009ab2 <__multiply>
 8008bce:	9009      	str	r0, [sp, #36]	; 0x24
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f ae87 	beq.w	80088e4 <_strtod_l+0x444>
 8008bd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bd8:	4658      	mov	r0, fp
 8008bda:	f000 fe83 	bl	80098e4 <_Bfree>
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	931c      	str	r3, [sp, #112]	; 0x70
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	dc7a      	bgt.n	8008cdc <_strtod_l+0x83c>
 8008be6:	9b07      	ldr	r3, [sp, #28]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dd08      	ble.n	8008bfe <_strtod_l+0x75e>
 8008bec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bee:	9906      	ldr	r1, [sp, #24]
 8008bf0:	4658      	mov	r0, fp
 8008bf2:	f000 fff3 	bl	8009bdc <__pow5mult>
 8008bf6:	9006      	str	r0, [sp, #24]
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	f43f ae73 	beq.w	80088e4 <_strtod_l+0x444>
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	dd08      	ble.n	8008c14 <_strtod_l+0x774>
 8008c02:	4622      	mov	r2, r4
 8008c04:	9906      	ldr	r1, [sp, #24]
 8008c06:	4658      	mov	r0, fp
 8008c08:	f001 f836 	bl	8009c78 <__lshift>
 8008c0c:	9006      	str	r0, [sp, #24]
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f ae68 	beq.w	80088e4 <_strtod_l+0x444>
 8008c14:	2e00      	cmp	r6, #0
 8008c16:	dd08      	ble.n	8008c2a <_strtod_l+0x78a>
 8008c18:	4632      	mov	r2, r6
 8008c1a:	9904      	ldr	r1, [sp, #16]
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f001 f82b 	bl	8009c78 <__lshift>
 8008c22:	9004      	str	r0, [sp, #16]
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f43f ae5d 	beq.w	80088e4 <_strtod_l+0x444>
 8008c2a:	9a06      	ldr	r2, [sp, #24]
 8008c2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c2e:	4658      	mov	r0, fp
 8008c30:	f001 f890 	bl	8009d54 <__mdiff>
 8008c34:	4680      	mov	r8, r0
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f43f ae54 	beq.w	80088e4 <_strtod_l+0x444>
 8008c3c:	2400      	movs	r4, #0
 8008c3e:	68c3      	ldr	r3, [r0, #12]
 8008c40:	9904      	ldr	r1, [sp, #16]
 8008c42:	60c4      	str	r4, [r0, #12]
 8008c44:	930c      	str	r3, [sp, #48]	; 0x30
 8008c46:	f001 f86b 	bl	8009d20 <__mcmp>
 8008c4a:	42a0      	cmp	r0, r4
 8008c4c:	da54      	bge.n	8008cf8 <_strtod_l+0x858>
 8008c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c50:	b9f3      	cbnz	r3, 8008c90 <_strtod_l+0x7f0>
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	d11b      	bne.n	8008c90 <_strtod_l+0x7f0>
 8008c58:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008c5c:	b9c3      	cbnz	r3, 8008c90 <_strtod_l+0x7f0>
 8008c5e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008c62:	0d1b      	lsrs	r3, r3, #20
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c6a:	d911      	bls.n	8008c90 <_strtod_l+0x7f0>
 8008c6c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008c70:	b91b      	cbnz	r3, 8008c7a <_strtod_l+0x7da>
 8008c72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	dd0a      	ble.n	8008c90 <_strtod_l+0x7f0>
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4658      	mov	r0, fp
 8008c80:	f000 fffa 	bl	8009c78 <__lshift>
 8008c84:	9904      	ldr	r1, [sp, #16]
 8008c86:	4680      	mov	r8, r0
 8008c88:	f001 f84a 	bl	8009d20 <__mcmp>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	dc68      	bgt.n	8008d62 <_strtod_l+0x8c2>
 8008c90:	9b05      	ldr	r3, [sp, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d172      	bne.n	8008d7c <_strtod_l+0x8dc>
 8008c96:	e630      	b.n	80088fa <_strtod_l+0x45a>
 8008c98:	f018 0f01 	tst.w	r8, #1
 8008c9c:	d004      	beq.n	8008ca8 <_strtod_l+0x808>
 8008c9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ca2:	f7f7 fc19 	bl	80004d8 <__aeabi_dmul>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008cac:	3508      	adds	r5, #8
 8008cae:	e6dc      	b.n	8008a6a <_strtod_l+0x5ca>
 8008cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	ea03 0909 	and.w	r9, r3, r9
 8008cbc:	e6f6      	b.n	8008aac <_strtod_l+0x60c>
 8008cbe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008cc2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008cc6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008cca:	35e2      	adds	r5, #226	; 0xe2
 8008ccc:	fa07 f505 	lsl.w	r5, r7, r5
 8008cd0:	970f      	str	r7, [sp, #60]	; 0x3c
 8008cd2:	e75c      	b.n	8008b8e <_strtod_l+0x6ee>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cda:	e758      	b.n	8008b8e <_strtod_l+0x6ee>
 8008cdc:	463a      	mov	r2, r7
 8008cde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ce0:	4658      	mov	r0, fp
 8008ce2:	f000 ffc9 	bl	8009c78 <__lshift>
 8008ce6:	901c      	str	r0, [sp, #112]	; 0x70
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	f47f af7c 	bne.w	8008be6 <_strtod_l+0x746>
 8008cee:	e5f9      	b.n	80088e4 <_strtod_l+0x444>
 8008cf0:	0800a990 	.word	0x0800a990
 8008cf4:	fffffc02 	.word	0xfffffc02
 8008cf8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008cfc:	f040 8089 	bne.w	8008e12 <_strtod_l+0x972>
 8008d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d02:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008d06:	b342      	cbz	r2, 8008d5a <_strtod_l+0x8ba>
 8008d08:	4aaf      	ldr	r2, [pc, #700]	; (8008fc8 <_strtod_l+0xb28>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d156      	bne.n	8008dbc <_strtod_l+0x91c>
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	4648      	mov	r0, r9
 8008d12:	b1eb      	cbz	r3, 8008d50 <_strtod_l+0x8b0>
 8008d14:	4653      	mov	r3, sl
 8008d16:	4aad      	ldr	r2, [pc, #692]	; (8008fcc <_strtod_l+0xb2c>)
 8008d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d1c:	401a      	ands	r2, r3
 8008d1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008d22:	d818      	bhi.n	8008d56 <_strtod_l+0x8b6>
 8008d24:	0d12      	lsrs	r2, r2, #20
 8008d26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	d144      	bne.n	8008dbc <_strtod_l+0x91c>
 8008d32:	4ba7      	ldr	r3, [pc, #668]	; (8008fd0 <_strtod_l+0xb30>)
 8008d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d102      	bne.n	8008d40 <_strtod_l+0x8a0>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	f43f add2 	beq.w	80088e4 <_strtod_l+0x444>
 8008d40:	4ba2      	ldr	r3, [pc, #648]	; (8008fcc <_strtod_l+0xb2c>)
 8008d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d44:	f04f 0900 	mov.w	r9, #0
 8008d48:	401a      	ands	r2, r3
 8008d4a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008d4e:	e79f      	b.n	8008c90 <_strtod_l+0x7f0>
 8008d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d54:	e7eb      	b.n	8008d2e <_strtod_l+0x88e>
 8008d56:	460b      	mov	r3, r1
 8008d58:	e7e9      	b.n	8008d2e <_strtod_l+0x88e>
 8008d5a:	bb7b      	cbnz	r3, 8008dbc <_strtod_l+0x91c>
 8008d5c:	f1b9 0f00 	cmp.w	r9, #0
 8008d60:	d12c      	bne.n	8008dbc <_strtod_l+0x91c>
 8008d62:	9905      	ldr	r1, [sp, #20]
 8008d64:	4653      	mov	r3, sl
 8008d66:	4a99      	ldr	r2, [pc, #612]	; (8008fcc <_strtod_l+0xb2c>)
 8008d68:	b1f1      	cbz	r1, 8008da8 <_strtod_l+0x908>
 8008d6a:	ea02 010a 	and.w	r1, r2, sl
 8008d6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008d72:	dc19      	bgt.n	8008da8 <_strtod_l+0x908>
 8008d74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008d78:	f77f ae51 	ble.w	8008a1e <_strtod_l+0x57e>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4a95      	ldr	r2, [pc, #596]	; (8008fd4 <_strtod_l+0xb34>)
 8008d80:	4648      	mov	r0, r9
 8008d82:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008d86:	4651      	mov	r1, sl
 8008d88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d8c:	f7f7 fba4 	bl	80004d8 <__aeabi_dmul>
 8008d90:	4681      	mov	r9, r0
 8008d92:	468a      	mov	sl, r1
 8008d94:	2900      	cmp	r1, #0
 8008d96:	f47f adb0 	bne.w	80088fa <_strtod_l+0x45a>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f47f adad 	bne.w	80088fa <_strtod_l+0x45a>
 8008da0:	2322      	movs	r3, #34	; 0x22
 8008da2:	f8cb 3000 	str.w	r3, [fp]
 8008da6:	e5a8      	b.n	80088fa <_strtod_l+0x45a>
 8008da8:	4013      	ands	r3, r2
 8008daa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008dae:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008db2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008db6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008dba:	e769      	b.n	8008c90 <_strtod_l+0x7f0>
 8008dbc:	b19d      	cbz	r5, 8008de6 <_strtod_l+0x946>
 8008dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc0:	421d      	tst	r5, r3
 8008dc2:	f43f af65 	beq.w	8008c90 <_strtod_l+0x7f0>
 8008dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc8:	9a05      	ldr	r2, [sp, #20]
 8008dca:	4648      	mov	r0, r9
 8008dcc:	4651      	mov	r1, sl
 8008dce:	b173      	cbz	r3, 8008dee <_strtod_l+0x94e>
 8008dd0:	f7ff fb45 	bl	800845e <sulp>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ddc:	f7f7 f9c6 	bl	800016c <__adddf3>
 8008de0:	4681      	mov	r9, r0
 8008de2:	468a      	mov	sl, r1
 8008de4:	e754      	b.n	8008c90 <_strtod_l+0x7f0>
 8008de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008de8:	ea13 0f09 	tst.w	r3, r9
 8008dec:	e7e9      	b.n	8008dc2 <_strtod_l+0x922>
 8008dee:	f7ff fb36 	bl	800845e <sulp>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dfa:	f7f7 f9b5 	bl	8000168 <__aeabi_dsub>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2300      	movs	r3, #0
 8008e02:	4681      	mov	r9, r0
 8008e04:	468a      	mov	sl, r1
 8008e06:	f7f7 fdcf 	bl	80009a8 <__aeabi_dcmpeq>
 8008e0a:	2800      	cmp	r0, #0
 8008e0c:	f47f ae07 	bne.w	8008a1e <_strtod_l+0x57e>
 8008e10:	e73e      	b.n	8008c90 <_strtod_l+0x7f0>
 8008e12:	9904      	ldr	r1, [sp, #16]
 8008e14:	4640      	mov	r0, r8
 8008e16:	f001 f8c0 	bl	8009f9a <__ratio>
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e20:	4606      	mov	r6, r0
 8008e22:	460f      	mov	r7, r1
 8008e24:	f7f7 fdd4 	bl	80009d0 <__aeabi_dcmple>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d075      	beq.n	8008f18 <_strtod_l+0xa78>
 8008e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d047      	beq.n	8008ec2 <_strtod_l+0xa22>
 8008e32:	2600      	movs	r6, #0
 8008e34:	4f68      	ldr	r7, [pc, #416]	; (8008fd8 <_strtod_l+0xb38>)
 8008e36:	4d68      	ldr	r5, [pc, #416]	; (8008fd8 <_strtod_l+0xb38>)
 8008e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e3e:	0d1b      	lsrs	r3, r3, #20
 8008e40:	051b      	lsls	r3, r3, #20
 8008e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e46:	4b65      	ldr	r3, [pc, #404]	; (8008fdc <_strtod_l+0xb3c>)
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	f040 80cf 	bne.w	8008fec <_strtod_l+0xb4c>
 8008e4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e52:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e58:	4648      	mov	r0, r9
 8008e5a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008e5e:	4651      	mov	r1, sl
 8008e60:	f000 ffd6 	bl	8009e10 <__ulp>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4630      	mov	r0, r6
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f7f7 fb34 	bl	80004d8 <__aeabi_dmul>
 8008e70:	464a      	mov	r2, r9
 8008e72:	4653      	mov	r3, sl
 8008e74:	f7f7 f97a 	bl	800016c <__adddf3>
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4954      	ldr	r1, [pc, #336]	; (8008fcc <_strtod_l+0xb2c>)
 8008e7c:	4a58      	ldr	r2, [pc, #352]	; (8008fe0 <_strtod_l+0xb40>)
 8008e7e:	4019      	ands	r1, r3
 8008e80:	4291      	cmp	r1, r2
 8008e82:	4681      	mov	r9, r0
 8008e84:	d95e      	bls.n	8008f44 <_strtod_l+0xaa4>
 8008e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d103      	bne.n	8008e98 <_strtod_l+0x9f8>
 8008e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e92:	3301      	adds	r3, #1
 8008e94:	f43f ad26 	beq.w	80088e4 <_strtod_l+0x444>
 8008e98:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008e9c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008fd0 <_strtod_l+0xb30>
 8008ea0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f000 fd1e 	bl	80098e4 <_Bfree>
 8008ea8:	9906      	ldr	r1, [sp, #24]
 8008eaa:	4658      	mov	r0, fp
 8008eac:	f000 fd1a 	bl	80098e4 <_Bfree>
 8008eb0:	9904      	ldr	r1, [sp, #16]
 8008eb2:	4658      	mov	r0, fp
 8008eb4:	f000 fd16 	bl	80098e4 <_Bfree>
 8008eb8:	4641      	mov	r1, r8
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f000 fd12 	bl	80098e4 <_Bfree>
 8008ec0:	e617      	b.n	8008af2 <_strtod_l+0x652>
 8008ec2:	f1b9 0f00 	cmp.w	r9, #0
 8008ec6:	d119      	bne.n	8008efc <_strtod_l+0xa5c>
 8008ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ece:	b9e3      	cbnz	r3, 8008f0a <_strtod_l+0xa6a>
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4b41      	ldr	r3, [pc, #260]	; (8008fd8 <_strtod_l+0xb38>)
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	f7f7 fd70 	bl	80009bc <__aeabi_dcmplt>
 8008edc:	b9c8      	cbnz	r0, 8008f12 <_strtod_l+0xa72>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	4b40      	ldr	r3, [pc, #256]	; (8008fe4 <_strtod_l+0xb44>)
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 faf7 	bl	80004d8 <__aeabi_dmul>
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ef2:	9418      	str	r4, [sp, #96]	; 0x60
 8008ef4:	9319      	str	r3, [sp, #100]	; 0x64
 8008ef6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008efa:	e79d      	b.n	8008e38 <_strtod_l+0x998>
 8008efc:	f1b9 0f01 	cmp.w	r9, #1
 8008f00:	d103      	bne.n	8008f0a <_strtod_l+0xa6a>
 8008f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f43f ad8a 	beq.w	8008a1e <_strtod_l+0x57e>
 8008f0a:	2600      	movs	r6, #0
 8008f0c:	4f36      	ldr	r7, [pc, #216]	; (8008fe8 <_strtod_l+0xb48>)
 8008f0e:	2400      	movs	r4, #0
 8008f10:	e791      	b.n	8008e36 <_strtod_l+0x996>
 8008f12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008f14:	4d33      	ldr	r5, [pc, #204]	; (8008fe4 <_strtod_l+0xb44>)
 8008f16:	e7ea      	b.n	8008eee <_strtod_l+0xa4e>
 8008f18:	4b32      	ldr	r3, [pc, #200]	; (8008fe4 <_strtod_l+0xb44>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fada 	bl	80004d8 <__aeabi_dmul>
 8008f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f26:	4604      	mov	r4, r0
 8008f28:	460d      	mov	r5, r1
 8008f2a:	b933      	cbnz	r3, 8008f3a <_strtod_l+0xa9a>
 8008f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f30:	9010      	str	r0, [sp, #64]	; 0x40
 8008f32:	9311      	str	r3, [sp, #68]	; 0x44
 8008f34:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008f38:	e77e      	b.n	8008e38 <_strtod_l+0x998>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f42:	e7f7      	b.n	8008f34 <_strtod_l+0xa94>
 8008f44:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008f48:	9b05      	ldr	r3, [sp, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1a8      	bne.n	8008ea0 <_strtod_l+0xa00>
 8008f4e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008f52:	0d1b      	lsrs	r3, r3, #20
 8008f54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f56:	051b      	lsls	r3, r3, #20
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	4656      	mov	r6, sl
 8008f5c:	d1a0      	bne.n	8008ea0 <_strtod_l+0xa00>
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7f7 fd53 	bl	8000a0c <__aeabi_d2iz>
 8008f66:	f7f7 fa4d 	bl	8000404 <__aeabi_i2d>
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4620      	mov	r0, r4
 8008f72:	f7f7 f8f9 	bl	8000168 <__aeabi_dsub>
 8008f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f78:	4604      	mov	r4, r0
 8008f7a:	460d      	mov	r5, r1
 8008f7c:	b933      	cbnz	r3, 8008f8c <_strtod_l+0xaec>
 8008f7e:	f1b9 0f00 	cmp.w	r9, #0
 8008f82:	d103      	bne.n	8008f8c <_strtod_l+0xaec>
 8008f84:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	d06a      	beq.n	8009062 <_strtod_l+0xbc2>
 8008f8c:	a30a      	add	r3, pc, #40	; (adr r3, 8008fb8 <_strtod_l+0xb18>)
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	4620      	mov	r0, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 fd11 	bl	80009bc <__aeabi_dcmplt>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f47f acad 	bne.w	80088fa <_strtod_l+0x45a>
 8008fa0:	a307      	add	r3, pc, #28	; (adr r3, 8008fc0 <_strtod_l+0xb20>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	4629      	mov	r1, r5
 8008faa:	f7f7 fd25 	bl	80009f8 <__aeabi_dcmpgt>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f43f af76 	beq.w	8008ea0 <_strtod_l+0xa00>
 8008fb4:	e4a1      	b.n	80088fa <_strtod_l+0x45a>
 8008fb6:	bf00      	nop
 8008fb8:	94a03595 	.word	0x94a03595
 8008fbc:	3fdfffff 	.word	0x3fdfffff
 8008fc0:	35afe535 	.word	0x35afe535
 8008fc4:	3fe00000 	.word	0x3fe00000
 8008fc8:	000fffff 	.word	0x000fffff
 8008fcc:	7ff00000 	.word	0x7ff00000
 8008fd0:	7fefffff 	.word	0x7fefffff
 8008fd4:	39500000 	.word	0x39500000
 8008fd8:	3ff00000 	.word	0x3ff00000
 8008fdc:	7fe00000 	.word	0x7fe00000
 8008fe0:	7c9fffff 	.word	0x7c9fffff
 8008fe4:	3fe00000 	.word	0x3fe00000
 8008fe8:	bff00000 	.word	0xbff00000
 8008fec:	9b05      	ldr	r3, [sp, #20]
 8008fee:	b313      	cbz	r3, 8009036 <_strtod_l+0xb96>
 8008ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ff2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ff6:	d81e      	bhi.n	8009036 <_strtod_l+0xb96>
 8008ff8:	a325      	add	r3, pc, #148	; (adr r3, 8009090 <_strtod_l+0xbf0>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 fce5 	bl	80009d0 <__aeabi_dcmple>
 8009006:	b190      	cbz	r0, 800902e <_strtod_l+0xb8e>
 8009008:	4629      	mov	r1, r5
 800900a:	4620      	mov	r0, r4
 800900c:	f7f7 fd26 	bl	8000a5c <__aeabi_d2uiz>
 8009010:	2800      	cmp	r0, #0
 8009012:	bf08      	it	eq
 8009014:	2001      	moveq	r0, #1
 8009016:	f7f7 f9e5 	bl	80003e4 <__aeabi_ui2d>
 800901a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800901c:	4604      	mov	r4, r0
 800901e:	460d      	mov	r5, r1
 8009020:	b9d3      	cbnz	r3, 8009058 <_strtod_l+0xbb8>
 8009022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009026:	9012      	str	r0, [sp, #72]	; 0x48
 8009028:	9313      	str	r3, [sp, #76]	; 0x4c
 800902a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800902e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009030:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8009034:	1a9f      	subs	r7, r3, r2
 8009036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800903a:	f000 fee9 	bl	8009e10 <__ulp>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4630      	mov	r0, r6
 8009044:	4639      	mov	r1, r7
 8009046:	f7f7 fa47 	bl	80004d8 <__aeabi_dmul>
 800904a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800904e:	f7f7 f88d 	bl	800016c <__adddf3>
 8009052:	4681      	mov	r9, r0
 8009054:	468a      	mov	sl, r1
 8009056:	e777      	b.n	8008f48 <_strtod_l+0xaa8>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8009060:	e7e3      	b.n	800902a <_strtod_l+0xb8a>
 8009062:	a30d      	add	r3, pc, #52	; (adr r3, 8009098 <_strtod_l+0xbf8>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 fca8 	bl	80009bc <__aeabi_dcmplt>
 800906c:	e79f      	b.n	8008fae <_strtod_l+0xb0e>
 800906e:	2300      	movs	r3, #0
 8009070:	930d      	str	r3, [sp, #52]	; 0x34
 8009072:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009074:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	f7ff ba55 	b.w	8008526 <_strtod_l+0x86>
 800907c:	2b65      	cmp	r3, #101	; 0x65
 800907e:	f04f 0200 	mov.w	r2, #0
 8009082:	f43f ab42 	beq.w	800870a <_strtod_l+0x26a>
 8009086:	2101      	movs	r1, #1
 8009088:	4614      	mov	r4, r2
 800908a:	9105      	str	r1, [sp, #20]
 800908c:	f7ff babf 	b.w	800860e <_strtod_l+0x16e>
 8009090:	ffc00000 	.word	0xffc00000
 8009094:	41dfffff 	.word	0x41dfffff
 8009098:	94a03595 	.word	0x94a03595
 800909c:	3fcfffff 	.word	0x3fcfffff

080090a0 <strtod>:
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <strtod+0x1c>)
 80090a2:	b410      	push	{r4}
 80090a4:	681c      	ldr	r4, [r3, #0]
 80090a6:	4a06      	ldr	r2, [pc, #24]	; (80090c0 <strtod+0x20>)
 80090a8:	6a23      	ldr	r3, [r4, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bf08      	it	eq
 80090ae:	4613      	moveq	r3, r2
 80090b0:	460a      	mov	r2, r1
 80090b2:	4601      	mov	r1, r0
 80090b4:	4620      	mov	r0, r4
 80090b6:	bc10      	pop	{r4}
 80090b8:	f7ff b9f2 	b.w	80084a0 <_strtod_l>
 80090bc:	2000017c 	.word	0x2000017c
 80090c0:	200001e0 	.word	0x200001e0

080090c4 <_strtol_l.isra.0>:
 80090c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c8:	4680      	mov	r8, r0
 80090ca:	4689      	mov	r9, r1
 80090cc:	4692      	mov	sl, r2
 80090ce:	461e      	mov	r6, r3
 80090d0:	460f      	mov	r7, r1
 80090d2:	463d      	mov	r5, r7
 80090d4:	9808      	ldr	r0, [sp, #32]
 80090d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090da:	f000 fbad 	bl	8009838 <__locale_ctype_ptr_l>
 80090de:	4420      	add	r0, r4
 80090e0:	7843      	ldrb	r3, [r0, #1]
 80090e2:	f013 0308 	ands.w	r3, r3, #8
 80090e6:	d132      	bne.n	800914e <_strtol_l.isra.0+0x8a>
 80090e8:	2c2d      	cmp	r4, #45	; 0x2d
 80090ea:	d132      	bne.n	8009152 <_strtol_l.isra.0+0x8e>
 80090ec:	2201      	movs	r2, #1
 80090ee:	787c      	ldrb	r4, [r7, #1]
 80090f0:	1cbd      	adds	r5, r7, #2
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	d05d      	beq.n	80091b2 <_strtol_l.isra.0+0xee>
 80090f6:	2e10      	cmp	r6, #16
 80090f8:	d109      	bne.n	800910e <_strtol_l.isra.0+0x4a>
 80090fa:	2c30      	cmp	r4, #48	; 0x30
 80090fc:	d107      	bne.n	800910e <_strtol_l.isra.0+0x4a>
 80090fe:	782b      	ldrb	r3, [r5, #0]
 8009100:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009104:	2b58      	cmp	r3, #88	; 0x58
 8009106:	d14f      	bne.n	80091a8 <_strtol_l.isra.0+0xe4>
 8009108:	2610      	movs	r6, #16
 800910a:	786c      	ldrb	r4, [r5, #1]
 800910c:	3502      	adds	r5, #2
 800910e:	2a00      	cmp	r2, #0
 8009110:	bf14      	ite	ne
 8009112:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009116:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800911a:	2700      	movs	r7, #0
 800911c:	fbb1 fcf6 	udiv	ip, r1, r6
 8009120:	4638      	mov	r0, r7
 8009122:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009126:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800912a:	2b09      	cmp	r3, #9
 800912c:	d817      	bhi.n	800915e <_strtol_l.isra.0+0x9a>
 800912e:	461c      	mov	r4, r3
 8009130:	42a6      	cmp	r6, r4
 8009132:	dd23      	ble.n	800917c <_strtol_l.isra.0+0xb8>
 8009134:	1c7b      	adds	r3, r7, #1
 8009136:	d007      	beq.n	8009148 <_strtol_l.isra.0+0x84>
 8009138:	4584      	cmp	ip, r0
 800913a:	d31c      	bcc.n	8009176 <_strtol_l.isra.0+0xb2>
 800913c:	d101      	bne.n	8009142 <_strtol_l.isra.0+0x7e>
 800913e:	45a6      	cmp	lr, r4
 8009140:	db19      	blt.n	8009176 <_strtol_l.isra.0+0xb2>
 8009142:	2701      	movs	r7, #1
 8009144:	fb00 4006 	mla	r0, r0, r6, r4
 8009148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800914c:	e7eb      	b.n	8009126 <_strtol_l.isra.0+0x62>
 800914e:	462f      	mov	r7, r5
 8009150:	e7bf      	b.n	80090d2 <_strtol_l.isra.0+0xe>
 8009152:	2c2b      	cmp	r4, #43	; 0x2b
 8009154:	bf04      	itt	eq
 8009156:	1cbd      	addeq	r5, r7, #2
 8009158:	787c      	ldrbeq	r4, [r7, #1]
 800915a:	461a      	mov	r2, r3
 800915c:	e7c9      	b.n	80090f2 <_strtol_l.isra.0+0x2e>
 800915e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009162:	2b19      	cmp	r3, #25
 8009164:	d801      	bhi.n	800916a <_strtol_l.isra.0+0xa6>
 8009166:	3c37      	subs	r4, #55	; 0x37
 8009168:	e7e2      	b.n	8009130 <_strtol_l.isra.0+0x6c>
 800916a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800916e:	2b19      	cmp	r3, #25
 8009170:	d804      	bhi.n	800917c <_strtol_l.isra.0+0xb8>
 8009172:	3c57      	subs	r4, #87	; 0x57
 8009174:	e7dc      	b.n	8009130 <_strtol_l.isra.0+0x6c>
 8009176:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800917a:	e7e5      	b.n	8009148 <_strtol_l.isra.0+0x84>
 800917c:	1c7b      	adds	r3, r7, #1
 800917e:	d108      	bne.n	8009192 <_strtol_l.isra.0+0xce>
 8009180:	2322      	movs	r3, #34	; 0x22
 8009182:	4608      	mov	r0, r1
 8009184:	f8c8 3000 	str.w	r3, [r8]
 8009188:	f1ba 0f00 	cmp.w	sl, #0
 800918c:	d107      	bne.n	800919e <_strtol_l.isra.0+0xda>
 800918e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009192:	b102      	cbz	r2, 8009196 <_strtol_l.isra.0+0xd2>
 8009194:	4240      	negs	r0, r0
 8009196:	f1ba 0f00 	cmp.w	sl, #0
 800919a:	d0f8      	beq.n	800918e <_strtol_l.isra.0+0xca>
 800919c:	b10f      	cbz	r7, 80091a2 <_strtol_l.isra.0+0xde>
 800919e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80091a2:	f8ca 9000 	str.w	r9, [sl]
 80091a6:	e7f2      	b.n	800918e <_strtol_l.isra.0+0xca>
 80091a8:	2430      	movs	r4, #48	; 0x30
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	d1af      	bne.n	800910e <_strtol_l.isra.0+0x4a>
 80091ae:	2608      	movs	r6, #8
 80091b0:	e7ad      	b.n	800910e <_strtol_l.isra.0+0x4a>
 80091b2:	2c30      	cmp	r4, #48	; 0x30
 80091b4:	d0a3      	beq.n	80090fe <_strtol_l.isra.0+0x3a>
 80091b6:	260a      	movs	r6, #10
 80091b8:	e7a9      	b.n	800910e <_strtol_l.isra.0+0x4a>
	...

080091bc <strtol>:
 80091bc:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <strtol+0x24>)
 80091be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c0:	681c      	ldr	r4, [r3, #0]
 80091c2:	4d08      	ldr	r5, [pc, #32]	; (80091e4 <strtol+0x28>)
 80091c4:	6a23      	ldr	r3, [r4, #32]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bf08      	it	eq
 80091ca:	462b      	moveq	r3, r5
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	4613      	mov	r3, r2
 80091d0:	460a      	mov	r2, r1
 80091d2:	4601      	mov	r1, r0
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7ff ff75 	bl	80090c4 <_strtol_l.isra.0>
 80091da:	b003      	add	sp, #12
 80091dc:	bd30      	pop	{r4, r5, pc}
 80091de:	bf00      	nop
 80091e0:	2000017c 	.word	0x2000017c
 80091e4:	200001e0 	.word	0x200001e0

080091e8 <rshift>:
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ea:	6906      	ldr	r6, [r0, #16]
 80091ec:	114b      	asrs	r3, r1, #5
 80091ee:	429e      	cmp	r6, r3
 80091f0:	f100 0414 	add.w	r4, r0, #20
 80091f4:	dd31      	ble.n	800925a <rshift+0x72>
 80091f6:	f011 011f 	ands.w	r1, r1, #31
 80091fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80091fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009202:	d108      	bne.n	8009216 <rshift+0x2e>
 8009204:	4621      	mov	r1, r4
 8009206:	42b2      	cmp	r2, r6
 8009208:	460b      	mov	r3, r1
 800920a:	d211      	bcs.n	8009230 <rshift+0x48>
 800920c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009210:	f841 3b04 	str.w	r3, [r1], #4
 8009214:	e7f7      	b.n	8009206 <rshift+0x1e>
 8009216:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800921a:	4623      	mov	r3, r4
 800921c:	f1c1 0c20 	rsb	ip, r1, #32
 8009220:	40cd      	lsrs	r5, r1
 8009222:	3204      	adds	r2, #4
 8009224:	42b2      	cmp	r2, r6
 8009226:	4617      	mov	r7, r2
 8009228:	d30d      	bcc.n	8009246 <rshift+0x5e>
 800922a:	601d      	str	r5, [r3, #0]
 800922c:	b105      	cbz	r5, 8009230 <rshift+0x48>
 800922e:	3304      	adds	r3, #4
 8009230:	42a3      	cmp	r3, r4
 8009232:	eba3 0204 	sub.w	r2, r3, r4
 8009236:	bf08      	it	eq
 8009238:	2300      	moveq	r3, #0
 800923a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800923e:	6102      	str	r2, [r0, #16]
 8009240:	bf08      	it	eq
 8009242:	6143      	streq	r3, [r0, #20]
 8009244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009246:	683f      	ldr	r7, [r7, #0]
 8009248:	fa07 f70c 	lsl.w	r7, r7, ip
 800924c:	433d      	orrs	r5, r7
 800924e:	f843 5b04 	str.w	r5, [r3], #4
 8009252:	f852 5b04 	ldr.w	r5, [r2], #4
 8009256:	40cd      	lsrs	r5, r1
 8009258:	e7e4      	b.n	8009224 <rshift+0x3c>
 800925a:	4623      	mov	r3, r4
 800925c:	e7e8      	b.n	8009230 <rshift+0x48>

0800925e <__hexdig_fun>:
 800925e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009262:	2b09      	cmp	r3, #9
 8009264:	d802      	bhi.n	800926c <__hexdig_fun+0xe>
 8009266:	3820      	subs	r0, #32
 8009268:	b2c0      	uxtb	r0, r0
 800926a:	4770      	bx	lr
 800926c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009270:	2b05      	cmp	r3, #5
 8009272:	d801      	bhi.n	8009278 <__hexdig_fun+0x1a>
 8009274:	3847      	subs	r0, #71	; 0x47
 8009276:	e7f7      	b.n	8009268 <__hexdig_fun+0xa>
 8009278:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800927c:	2b05      	cmp	r3, #5
 800927e:	d801      	bhi.n	8009284 <__hexdig_fun+0x26>
 8009280:	3827      	subs	r0, #39	; 0x27
 8009282:	e7f1      	b.n	8009268 <__hexdig_fun+0xa>
 8009284:	2000      	movs	r0, #0
 8009286:	4770      	bx	lr

08009288 <__gethex>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	b08b      	sub	sp, #44	; 0x2c
 800928e:	9002      	str	r0, [sp, #8]
 8009290:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009292:	468a      	mov	sl, r1
 8009294:	4690      	mov	r8, r2
 8009296:	9306      	str	r3, [sp, #24]
 8009298:	f000 fad1 	bl	800983e <__localeconv_l>
 800929c:	6803      	ldr	r3, [r0, #0]
 800929e:	f04f 0b00 	mov.w	fp, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	9303      	str	r3, [sp, #12]
 80092a6:	f7f6 ff53 	bl	8000150 <strlen>
 80092aa:	9b03      	ldr	r3, [sp, #12]
 80092ac:	9001      	str	r0, [sp, #4]
 80092ae:	4403      	add	r3, r0
 80092b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092b4:	9307      	str	r3, [sp, #28]
 80092b6:	f8da 3000 	ldr.w	r3, [sl]
 80092ba:	3302      	adds	r3, #2
 80092bc:	461f      	mov	r7, r3
 80092be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092c2:	2830      	cmp	r0, #48	; 0x30
 80092c4:	d06c      	beq.n	80093a0 <__gethex+0x118>
 80092c6:	f7ff ffca 	bl	800925e <__hexdig_fun>
 80092ca:	4604      	mov	r4, r0
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d16a      	bne.n	80093a6 <__gethex+0x11e>
 80092d0:	9a01      	ldr	r2, [sp, #4]
 80092d2:	9903      	ldr	r1, [sp, #12]
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7ff f89b 	bl	8008410 <strncmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d166      	bne.n	80093ac <__gethex+0x124>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	5cf8      	ldrb	r0, [r7, r3]
 80092e2:	18fe      	adds	r6, r7, r3
 80092e4:	f7ff ffbb 	bl	800925e <__hexdig_fun>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d062      	beq.n	80093b2 <__gethex+0x12a>
 80092ec:	4633      	mov	r3, r6
 80092ee:	7818      	ldrb	r0, [r3, #0]
 80092f0:	461f      	mov	r7, r3
 80092f2:	2830      	cmp	r0, #48	; 0x30
 80092f4:	f103 0301 	add.w	r3, r3, #1
 80092f8:	d0f9      	beq.n	80092ee <__gethex+0x66>
 80092fa:	f7ff ffb0 	bl	800925e <__hexdig_fun>
 80092fe:	fab0 f580 	clz	r5, r0
 8009302:	4634      	mov	r4, r6
 8009304:	f04f 0b01 	mov.w	fp, #1
 8009308:	096d      	lsrs	r5, r5, #5
 800930a:	463a      	mov	r2, r7
 800930c:	4616      	mov	r6, r2
 800930e:	7830      	ldrb	r0, [r6, #0]
 8009310:	3201      	adds	r2, #1
 8009312:	f7ff ffa4 	bl	800925e <__hexdig_fun>
 8009316:	2800      	cmp	r0, #0
 8009318:	d1f8      	bne.n	800930c <__gethex+0x84>
 800931a:	9a01      	ldr	r2, [sp, #4]
 800931c:	9903      	ldr	r1, [sp, #12]
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff f876 	bl	8008410 <strncmp>
 8009324:	b950      	cbnz	r0, 800933c <__gethex+0xb4>
 8009326:	b954      	cbnz	r4, 800933e <__gethex+0xb6>
 8009328:	9b01      	ldr	r3, [sp, #4]
 800932a:	18f4      	adds	r4, r6, r3
 800932c:	4622      	mov	r2, r4
 800932e:	4616      	mov	r6, r2
 8009330:	7830      	ldrb	r0, [r6, #0]
 8009332:	3201      	adds	r2, #1
 8009334:	f7ff ff93 	bl	800925e <__hexdig_fun>
 8009338:	2800      	cmp	r0, #0
 800933a:	d1f8      	bne.n	800932e <__gethex+0xa6>
 800933c:	b10c      	cbz	r4, 8009342 <__gethex+0xba>
 800933e:	1ba4      	subs	r4, r4, r6
 8009340:	00a4      	lsls	r4, r4, #2
 8009342:	7833      	ldrb	r3, [r6, #0]
 8009344:	2b50      	cmp	r3, #80	; 0x50
 8009346:	d001      	beq.n	800934c <__gethex+0xc4>
 8009348:	2b70      	cmp	r3, #112	; 0x70
 800934a:	d140      	bne.n	80093ce <__gethex+0x146>
 800934c:	7873      	ldrb	r3, [r6, #1]
 800934e:	2b2b      	cmp	r3, #43	; 0x2b
 8009350:	d031      	beq.n	80093b6 <__gethex+0x12e>
 8009352:	2b2d      	cmp	r3, #45	; 0x2d
 8009354:	d033      	beq.n	80093be <__gethex+0x136>
 8009356:	f04f 0900 	mov.w	r9, #0
 800935a:	1c71      	adds	r1, r6, #1
 800935c:	7808      	ldrb	r0, [r1, #0]
 800935e:	f7ff ff7e 	bl	800925e <__hexdig_fun>
 8009362:	1e43      	subs	r3, r0, #1
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b18      	cmp	r3, #24
 8009368:	d831      	bhi.n	80093ce <__gethex+0x146>
 800936a:	f1a0 0210 	sub.w	r2, r0, #16
 800936e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009372:	f7ff ff74 	bl	800925e <__hexdig_fun>
 8009376:	1e43      	subs	r3, r0, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b18      	cmp	r3, #24
 800937c:	d922      	bls.n	80093c4 <__gethex+0x13c>
 800937e:	f1b9 0f00 	cmp.w	r9, #0
 8009382:	d000      	beq.n	8009386 <__gethex+0xfe>
 8009384:	4252      	negs	r2, r2
 8009386:	4414      	add	r4, r2
 8009388:	f8ca 1000 	str.w	r1, [sl]
 800938c:	b30d      	cbz	r5, 80093d2 <__gethex+0x14a>
 800938e:	f1bb 0f00 	cmp.w	fp, #0
 8009392:	bf0c      	ite	eq
 8009394:	2706      	moveq	r7, #6
 8009396:	2700      	movne	r7, #0
 8009398:	4638      	mov	r0, r7
 800939a:	b00b      	add	sp, #44	; 0x2c
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	f10b 0b01 	add.w	fp, fp, #1
 80093a4:	e78a      	b.n	80092bc <__gethex+0x34>
 80093a6:	2500      	movs	r5, #0
 80093a8:	462c      	mov	r4, r5
 80093aa:	e7ae      	b.n	800930a <__gethex+0x82>
 80093ac:	463e      	mov	r6, r7
 80093ae:	2501      	movs	r5, #1
 80093b0:	e7c7      	b.n	8009342 <__gethex+0xba>
 80093b2:	4604      	mov	r4, r0
 80093b4:	e7fb      	b.n	80093ae <__gethex+0x126>
 80093b6:	f04f 0900 	mov.w	r9, #0
 80093ba:	1cb1      	adds	r1, r6, #2
 80093bc:	e7ce      	b.n	800935c <__gethex+0xd4>
 80093be:	f04f 0901 	mov.w	r9, #1
 80093c2:	e7fa      	b.n	80093ba <__gethex+0x132>
 80093c4:	230a      	movs	r3, #10
 80093c6:	fb03 0202 	mla	r2, r3, r2, r0
 80093ca:	3a10      	subs	r2, #16
 80093cc:	e7cf      	b.n	800936e <__gethex+0xe6>
 80093ce:	4631      	mov	r1, r6
 80093d0:	e7da      	b.n	8009388 <__gethex+0x100>
 80093d2:	4629      	mov	r1, r5
 80093d4:	1bf3      	subs	r3, r6, r7
 80093d6:	3b01      	subs	r3, #1
 80093d8:	2b07      	cmp	r3, #7
 80093da:	dc49      	bgt.n	8009470 <__gethex+0x1e8>
 80093dc:	9802      	ldr	r0, [sp, #8]
 80093de:	f000 fa4d 	bl	800987c <_Balloc>
 80093e2:	f04f 0b00 	mov.w	fp, #0
 80093e6:	4605      	mov	r5, r0
 80093e8:	46da      	mov	sl, fp
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	f100 0914 	add.w	r9, r0, #20
 80093f0:	f1c3 0301 	rsb	r3, r3, #1
 80093f4:	f8cd 9010 	str.w	r9, [sp, #16]
 80093f8:	9308      	str	r3, [sp, #32]
 80093fa:	42b7      	cmp	r7, r6
 80093fc:	d33b      	bcc.n	8009476 <__gethex+0x1ee>
 80093fe:	9804      	ldr	r0, [sp, #16]
 8009400:	f840 ab04 	str.w	sl, [r0], #4
 8009404:	eba0 0009 	sub.w	r0, r0, r9
 8009408:	1080      	asrs	r0, r0, #2
 800940a:	6128      	str	r0, [r5, #16]
 800940c:	0147      	lsls	r7, r0, #5
 800940e:	4650      	mov	r0, sl
 8009410:	f000 faf8 	bl	8009a04 <__hi0bits>
 8009414:	f8d8 6000 	ldr.w	r6, [r8]
 8009418:	1a3f      	subs	r7, r7, r0
 800941a:	42b7      	cmp	r7, r6
 800941c:	dd64      	ble.n	80094e8 <__gethex+0x260>
 800941e:	1bbf      	subs	r7, r7, r6
 8009420:	4639      	mov	r1, r7
 8009422:	4628      	mov	r0, r5
 8009424:	f000 fe01 	bl	800a02a <__any_on>
 8009428:	4682      	mov	sl, r0
 800942a:	b178      	cbz	r0, 800944c <__gethex+0x1c4>
 800942c:	f04f 0a01 	mov.w	sl, #1
 8009430:	1e7b      	subs	r3, r7, #1
 8009432:	1159      	asrs	r1, r3, #5
 8009434:	f003 021f 	and.w	r2, r3, #31
 8009438:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800943c:	fa0a f202 	lsl.w	r2, sl, r2
 8009440:	420a      	tst	r2, r1
 8009442:	d003      	beq.n	800944c <__gethex+0x1c4>
 8009444:	4553      	cmp	r3, sl
 8009446:	dc46      	bgt.n	80094d6 <__gethex+0x24e>
 8009448:	f04f 0a02 	mov.w	sl, #2
 800944c:	4639      	mov	r1, r7
 800944e:	4628      	mov	r0, r5
 8009450:	f7ff feca 	bl	80091e8 <rshift>
 8009454:	443c      	add	r4, r7
 8009456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800945a:	42a3      	cmp	r3, r4
 800945c:	da52      	bge.n	8009504 <__gethex+0x27c>
 800945e:	4629      	mov	r1, r5
 8009460:	9802      	ldr	r0, [sp, #8]
 8009462:	f000 fa3f 	bl	80098e4 <_Bfree>
 8009466:	2300      	movs	r3, #0
 8009468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800946a:	27a3      	movs	r7, #163	; 0xa3
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	e793      	b.n	8009398 <__gethex+0x110>
 8009470:	3101      	adds	r1, #1
 8009472:	105b      	asrs	r3, r3, #1
 8009474:	e7b0      	b.n	80093d8 <__gethex+0x150>
 8009476:	1e73      	subs	r3, r6, #1
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009480:	4293      	cmp	r3, r2
 8009482:	d018      	beq.n	80094b6 <__gethex+0x22e>
 8009484:	f1bb 0f20 	cmp.w	fp, #32
 8009488:	d107      	bne.n	800949a <__gethex+0x212>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	f8c3 a000 	str.w	sl, [r3]
 8009490:	f04f 0a00 	mov.w	sl, #0
 8009494:	46d3      	mov	fp, sl
 8009496:	3304      	adds	r3, #4
 8009498:	9304      	str	r3, [sp, #16]
 800949a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800949e:	f7ff fede 	bl	800925e <__hexdig_fun>
 80094a2:	f000 000f 	and.w	r0, r0, #15
 80094a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80094aa:	ea4a 0a00 	orr.w	sl, sl, r0
 80094ae:	f10b 0b04 	add.w	fp, fp, #4
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	e00d      	b.n	80094d2 <__gethex+0x24a>
 80094b6:	9b05      	ldr	r3, [sp, #20]
 80094b8:	9a08      	ldr	r2, [sp, #32]
 80094ba:	4413      	add	r3, r2
 80094bc:	42bb      	cmp	r3, r7
 80094be:	d3e1      	bcc.n	8009484 <__gethex+0x1fc>
 80094c0:	4618      	mov	r0, r3
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	9903      	ldr	r1, [sp, #12]
 80094c6:	9309      	str	r3, [sp, #36]	; 0x24
 80094c8:	f7fe ffa2 	bl	8008410 <strncmp>
 80094cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1d8      	bne.n	8009484 <__gethex+0x1fc>
 80094d2:	461e      	mov	r6, r3
 80094d4:	e791      	b.n	80093fa <__gethex+0x172>
 80094d6:	1eb9      	subs	r1, r7, #2
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 fda6 	bl	800a02a <__any_on>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d0b2      	beq.n	8009448 <__gethex+0x1c0>
 80094e2:	f04f 0a03 	mov.w	sl, #3
 80094e6:	e7b1      	b.n	800944c <__gethex+0x1c4>
 80094e8:	da09      	bge.n	80094fe <__gethex+0x276>
 80094ea:	1bf7      	subs	r7, r6, r7
 80094ec:	4629      	mov	r1, r5
 80094ee:	463a      	mov	r2, r7
 80094f0:	9802      	ldr	r0, [sp, #8]
 80094f2:	f000 fbc1 	bl	8009c78 <__lshift>
 80094f6:	4605      	mov	r5, r0
 80094f8:	1be4      	subs	r4, r4, r7
 80094fa:	f100 0914 	add.w	r9, r0, #20
 80094fe:	f04f 0a00 	mov.w	sl, #0
 8009502:	e7a8      	b.n	8009456 <__gethex+0x1ce>
 8009504:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009508:	42a0      	cmp	r0, r4
 800950a:	dd6b      	ble.n	80095e4 <__gethex+0x35c>
 800950c:	1b04      	subs	r4, r0, r4
 800950e:	42a6      	cmp	r6, r4
 8009510:	dc2e      	bgt.n	8009570 <__gethex+0x2e8>
 8009512:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d022      	beq.n	8009560 <__gethex+0x2d8>
 800951a:	2b03      	cmp	r3, #3
 800951c:	d024      	beq.n	8009568 <__gethex+0x2e0>
 800951e:	2b01      	cmp	r3, #1
 8009520:	d115      	bne.n	800954e <__gethex+0x2c6>
 8009522:	42a6      	cmp	r6, r4
 8009524:	d113      	bne.n	800954e <__gethex+0x2c6>
 8009526:	2e01      	cmp	r6, #1
 8009528:	dc0b      	bgt.n	8009542 <__gethex+0x2ba>
 800952a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800952e:	9a06      	ldr	r2, [sp, #24]
 8009530:	2762      	movs	r7, #98	; 0x62
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	2301      	movs	r3, #1
 8009536:	612b      	str	r3, [r5, #16]
 8009538:	f8c9 3000 	str.w	r3, [r9]
 800953c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800953e:	601d      	str	r5, [r3, #0]
 8009540:	e72a      	b.n	8009398 <__gethex+0x110>
 8009542:	1e71      	subs	r1, r6, #1
 8009544:	4628      	mov	r0, r5
 8009546:	f000 fd70 	bl	800a02a <__any_on>
 800954a:	2800      	cmp	r0, #0
 800954c:	d1ed      	bne.n	800952a <__gethex+0x2a2>
 800954e:	4629      	mov	r1, r5
 8009550:	9802      	ldr	r0, [sp, #8]
 8009552:	f000 f9c7 	bl	80098e4 <_Bfree>
 8009556:	2300      	movs	r3, #0
 8009558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800955a:	2750      	movs	r7, #80	; 0x50
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	e71b      	b.n	8009398 <__gethex+0x110>
 8009560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0e1      	beq.n	800952a <__gethex+0x2a2>
 8009566:	e7f2      	b.n	800954e <__gethex+0x2c6>
 8009568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1dd      	bne.n	800952a <__gethex+0x2a2>
 800956e:	e7ee      	b.n	800954e <__gethex+0x2c6>
 8009570:	1e67      	subs	r7, r4, #1
 8009572:	f1ba 0f00 	cmp.w	sl, #0
 8009576:	d132      	bne.n	80095de <__gethex+0x356>
 8009578:	b127      	cbz	r7, 8009584 <__gethex+0x2fc>
 800957a:	4639      	mov	r1, r7
 800957c:	4628      	mov	r0, r5
 800957e:	f000 fd54 	bl	800a02a <__any_on>
 8009582:	4682      	mov	sl, r0
 8009584:	2301      	movs	r3, #1
 8009586:	117a      	asrs	r2, r7, #5
 8009588:	f007 071f 	and.w	r7, r7, #31
 800958c:	fa03 f707 	lsl.w	r7, r3, r7
 8009590:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009594:	4621      	mov	r1, r4
 8009596:	421f      	tst	r7, r3
 8009598:	f04f 0702 	mov.w	r7, #2
 800959c:	4628      	mov	r0, r5
 800959e:	bf18      	it	ne
 80095a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80095a4:	1b36      	subs	r6, r6, r4
 80095a6:	f7ff fe1f 	bl	80091e8 <rshift>
 80095aa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80095ae:	f1ba 0f00 	cmp.w	sl, #0
 80095b2:	d048      	beq.n	8009646 <__gethex+0x3be>
 80095b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d015      	beq.n	80095e8 <__gethex+0x360>
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d017      	beq.n	80095f0 <__gethex+0x368>
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d109      	bne.n	80095d8 <__gethex+0x350>
 80095c4:	f01a 0f02 	tst.w	sl, #2
 80095c8:	d006      	beq.n	80095d8 <__gethex+0x350>
 80095ca:	f8d9 3000 	ldr.w	r3, [r9]
 80095ce:	ea4a 0a03 	orr.w	sl, sl, r3
 80095d2:	f01a 0f01 	tst.w	sl, #1
 80095d6:	d10e      	bne.n	80095f6 <__gethex+0x36e>
 80095d8:	f047 0710 	orr.w	r7, r7, #16
 80095dc:	e033      	b.n	8009646 <__gethex+0x3be>
 80095de:	f04f 0a01 	mov.w	sl, #1
 80095e2:	e7cf      	b.n	8009584 <__gethex+0x2fc>
 80095e4:	2701      	movs	r7, #1
 80095e6:	e7e2      	b.n	80095ae <__gethex+0x326>
 80095e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ea:	f1c3 0301 	rsb	r3, r3, #1
 80095ee:	9315      	str	r3, [sp, #84]	; 0x54
 80095f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0f0      	beq.n	80095d8 <__gethex+0x350>
 80095f6:	f04f 0c00 	mov.w	ip, #0
 80095fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80095fe:	f105 0314 	add.w	r3, r5, #20
 8009602:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009606:	eb03 010a 	add.w	r1, r3, sl
 800960a:	4618      	mov	r0, r3
 800960c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009610:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009614:	d01c      	beq.n	8009650 <__gethex+0x3c8>
 8009616:	3201      	adds	r2, #1
 8009618:	6002      	str	r2, [r0, #0]
 800961a:	2f02      	cmp	r7, #2
 800961c:	f105 0314 	add.w	r3, r5, #20
 8009620:	d138      	bne.n	8009694 <__gethex+0x40c>
 8009622:	f8d8 2000 	ldr.w	r2, [r8]
 8009626:	3a01      	subs	r2, #1
 8009628:	42b2      	cmp	r2, r6
 800962a:	d10a      	bne.n	8009642 <__gethex+0x3ba>
 800962c:	2201      	movs	r2, #1
 800962e:	1171      	asrs	r1, r6, #5
 8009630:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009634:	f006 061f 	and.w	r6, r6, #31
 8009638:	fa02 f606 	lsl.w	r6, r2, r6
 800963c:	421e      	tst	r6, r3
 800963e:	bf18      	it	ne
 8009640:	4617      	movne	r7, r2
 8009642:	f047 0720 	orr.w	r7, r7, #32
 8009646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009648:	601d      	str	r5, [r3, #0]
 800964a:	9b06      	ldr	r3, [sp, #24]
 800964c:	601c      	str	r4, [r3, #0]
 800964e:	e6a3      	b.n	8009398 <__gethex+0x110>
 8009650:	4299      	cmp	r1, r3
 8009652:	f843 cc04 	str.w	ip, [r3, #-4]
 8009656:	d8d8      	bhi.n	800960a <__gethex+0x382>
 8009658:	68ab      	ldr	r3, [r5, #8]
 800965a:	4599      	cmp	r9, r3
 800965c:	db12      	blt.n	8009684 <__gethex+0x3fc>
 800965e:	6869      	ldr	r1, [r5, #4]
 8009660:	9802      	ldr	r0, [sp, #8]
 8009662:	3101      	adds	r1, #1
 8009664:	f000 f90a 	bl	800987c <_Balloc>
 8009668:	4683      	mov	fp, r0
 800966a:	692a      	ldr	r2, [r5, #16]
 800966c:	f105 010c 	add.w	r1, r5, #12
 8009670:	3202      	adds	r2, #2
 8009672:	0092      	lsls	r2, r2, #2
 8009674:	300c      	adds	r0, #12
 8009676:	f000 f8f6 	bl	8009866 <memcpy>
 800967a:	4629      	mov	r1, r5
 800967c:	9802      	ldr	r0, [sp, #8]
 800967e:	f000 f931 	bl	80098e4 <_Bfree>
 8009682:	465d      	mov	r5, fp
 8009684:	692b      	ldr	r3, [r5, #16]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	612a      	str	r2, [r5, #16]
 800968a:	2201      	movs	r2, #1
 800968c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009690:	615a      	str	r2, [r3, #20]
 8009692:	e7c2      	b.n	800961a <__gethex+0x392>
 8009694:	692a      	ldr	r2, [r5, #16]
 8009696:	454a      	cmp	r2, r9
 8009698:	dd0b      	ble.n	80096b2 <__gethex+0x42a>
 800969a:	2101      	movs	r1, #1
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff fda3 	bl	80091e8 <rshift>
 80096a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096a6:	3401      	adds	r4, #1
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	f6ff aed8 	blt.w	800945e <__gethex+0x1d6>
 80096ae:	2701      	movs	r7, #1
 80096b0:	e7c7      	b.n	8009642 <__gethex+0x3ba>
 80096b2:	f016 061f 	ands.w	r6, r6, #31
 80096b6:	d0fa      	beq.n	80096ae <__gethex+0x426>
 80096b8:	449a      	add	sl, r3
 80096ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80096be:	f000 f9a1 	bl	8009a04 <__hi0bits>
 80096c2:	f1c6 0620 	rsb	r6, r6, #32
 80096c6:	42b0      	cmp	r0, r6
 80096c8:	dbe7      	blt.n	800969a <__gethex+0x412>
 80096ca:	e7f0      	b.n	80096ae <__gethex+0x426>

080096cc <L_shift>:
 80096cc:	f1c2 0208 	rsb	r2, r2, #8
 80096d0:	0092      	lsls	r2, r2, #2
 80096d2:	b570      	push	{r4, r5, r6, lr}
 80096d4:	f1c2 0620 	rsb	r6, r2, #32
 80096d8:	6843      	ldr	r3, [r0, #4]
 80096da:	6804      	ldr	r4, [r0, #0]
 80096dc:	fa03 f506 	lsl.w	r5, r3, r6
 80096e0:	432c      	orrs	r4, r5
 80096e2:	40d3      	lsrs	r3, r2
 80096e4:	6004      	str	r4, [r0, #0]
 80096e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096ea:	4288      	cmp	r0, r1
 80096ec:	d3f4      	bcc.n	80096d8 <L_shift+0xc>
 80096ee:	bd70      	pop	{r4, r5, r6, pc}

080096f0 <__match>:
 80096f0:	b530      	push	{r4, r5, lr}
 80096f2:	6803      	ldr	r3, [r0, #0]
 80096f4:	3301      	adds	r3, #1
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	b914      	cbnz	r4, 8009702 <__match+0x12>
 80096fc:	6003      	str	r3, [r0, #0]
 80096fe:	2001      	movs	r0, #1
 8009700:	bd30      	pop	{r4, r5, pc}
 8009702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009706:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800970a:	2d19      	cmp	r5, #25
 800970c:	bf98      	it	ls
 800970e:	3220      	addls	r2, #32
 8009710:	42a2      	cmp	r2, r4
 8009712:	d0f0      	beq.n	80096f6 <__match+0x6>
 8009714:	2000      	movs	r0, #0
 8009716:	e7f3      	b.n	8009700 <__match+0x10>

08009718 <__hexnan>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	2500      	movs	r5, #0
 800971e:	680b      	ldr	r3, [r1, #0]
 8009720:	4682      	mov	sl, r0
 8009722:	115f      	asrs	r7, r3, #5
 8009724:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009728:	f013 031f 	ands.w	r3, r3, #31
 800972c:	bf18      	it	ne
 800972e:	3704      	addne	r7, #4
 8009730:	1f3e      	subs	r6, r7, #4
 8009732:	4690      	mov	r8, r2
 8009734:	46b1      	mov	r9, r6
 8009736:	4634      	mov	r4, r6
 8009738:	46ab      	mov	fp, r5
 800973a:	b087      	sub	sp, #28
 800973c:	6801      	ldr	r1, [r0, #0]
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	f847 5c04 	str.w	r5, [r7, #-4]
 8009744:	9502      	str	r5, [sp, #8]
 8009746:	784a      	ldrb	r2, [r1, #1]
 8009748:	1c4b      	adds	r3, r1, #1
 800974a:	9303      	str	r3, [sp, #12]
 800974c:	b342      	cbz	r2, 80097a0 <__hexnan+0x88>
 800974e:	4610      	mov	r0, r2
 8009750:	9105      	str	r1, [sp, #20]
 8009752:	9204      	str	r2, [sp, #16]
 8009754:	f7ff fd83 	bl	800925e <__hexdig_fun>
 8009758:	2800      	cmp	r0, #0
 800975a:	d143      	bne.n	80097e4 <__hexnan+0xcc>
 800975c:	9a04      	ldr	r2, [sp, #16]
 800975e:	9905      	ldr	r1, [sp, #20]
 8009760:	2a20      	cmp	r2, #32
 8009762:	d818      	bhi.n	8009796 <__hexnan+0x7e>
 8009764:	9b02      	ldr	r3, [sp, #8]
 8009766:	459b      	cmp	fp, r3
 8009768:	dd13      	ble.n	8009792 <__hexnan+0x7a>
 800976a:	454c      	cmp	r4, r9
 800976c:	d206      	bcs.n	800977c <__hexnan+0x64>
 800976e:	2d07      	cmp	r5, #7
 8009770:	dc04      	bgt.n	800977c <__hexnan+0x64>
 8009772:	462a      	mov	r2, r5
 8009774:	4649      	mov	r1, r9
 8009776:	4620      	mov	r0, r4
 8009778:	f7ff ffa8 	bl	80096cc <L_shift>
 800977c:	4544      	cmp	r4, r8
 800977e:	d944      	bls.n	800980a <__hexnan+0xf2>
 8009780:	2300      	movs	r3, #0
 8009782:	f1a4 0904 	sub.w	r9, r4, #4
 8009786:	f844 3c04 	str.w	r3, [r4, #-4]
 800978a:	461d      	mov	r5, r3
 800978c:	464c      	mov	r4, r9
 800978e:	f8cd b008 	str.w	fp, [sp, #8]
 8009792:	9903      	ldr	r1, [sp, #12]
 8009794:	e7d7      	b.n	8009746 <__hexnan+0x2e>
 8009796:	2a29      	cmp	r2, #41	; 0x29
 8009798:	d14a      	bne.n	8009830 <__hexnan+0x118>
 800979a:	3102      	adds	r1, #2
 800979c:	f8ca 1000 	str.w	r1, [sl]
 80097a0:	f1bb 0f00 	cmp.w	fp, #0
 80097a4:	d044      	beq.n	8009830 <__hexnan+0x118>
 80097a6:	454c      	cmp	r4, r9
 80097a8:	d206      	bcs.n	80097b8 <__hexnan+0xa0>
 80097aa:	2d07      	cmp	r5, #7
 80097ac:	dc04      	bgt.n	80097b8 <__hexnan+0xa0>
 80097ae:	462a      	mov	r2, r5
 80097b0:	4649      	mov	r1, r9
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7ff ff8a 	bl	80096cc <L_shift>
 80097b8:	4544      	cmp	r4, r8
 80097ba:	d928      	bls.n	800980e <__hexnan+0xf6>
 80097bc:	4643      	mov	r3, r8
 80097be:	f854 2b04 	ldr.w	r2, [r4], #4
 80097c2:	42a6      	cmp	r6, r4
 80097c4:	f843 2b04 	str.w	r2, [r3], #4
 80097c8:	d2f9      	bcs.n	80097be <__hexnan+0xa6>
 80097ca:	2200      	movs	r2, #0
 80097cc:	f843 2b04 	str.w	r2, [r3], #4
 80097d0:	429e      	cmp	r6, r3
 80097d2:	d2fb      	bcs.n	80097cc <__hexnan+0xb4>
 80097d4:	6833      	ldr	r3, [r6, #0]
 80097d6:	b91b      	cbnz	r3, 80097e0 <__hexnan+0xc8>
 80097d8:	4546      	cmp	r6, r8
 80097da:	d127      	bne.n	800982c <__hexnan+0x114>
 80097dc:	2301      	movs	r3, #1
 80097de:	6033      	str	r3, [r6, #0]
 80097e0:	2005      	movs	r0, #5
 80097e2:	e026      	b.n	8009832 <__hexnan+0x11a>
 80097e4:	3501      	adds	r5, #1
 80097e6:	2d08      	cmp	r5, #8
 80097e8:	f10b 0b01 	add.w	fp, fp, #1
 80097ec:	dd06      	ble.n	80097fc <__hexnan+0xe4>
 80097ee:	4544      	cmp	r4, r8
 80097f0:	d9cf      	bls.n	8009792 <__hexnan+0x7a>
 80097f2:	2300      	movs	r3, #0
 80097f4:	2501      	movs	r5, #1
 80097f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80097fa:	3c04      	subs	r4, #4
 80097fc:	6822      	ldr	r2, [r4, #0]
 80097fe:	f000 000f 	and.w	r0, r0, #15
 8009802:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009806:	6020      	str	r0, [r4, #0]
 8009808:	e7c3      	b.n	8009792 <__hexnan+0x7a>
 800980a:	2508      	movs	r5, #8
 800980c:	e7c1      	b.n	8009792 <__hexnan+0x7a>
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0df      	beq.n	80097d4 <__hexnan+0xbc>
 8009814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009818:	f1c3 0320 	rsb	r3, r3, #32
 800981c:	fa22 f303 	lsr.w	r3, r2, r3
 8009820:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009824:	401a      	ands	r2, r3
 8009826:	f847 2c04 	str.w	r2, [r7, #-4]
 800982a:	e7d3      	b.n	80097d4 <__hexnan+0xbc>
 800982c:	3e04      	subs	r6, #4
 800982e:	e7d1      	b.n	80097d4 <__hexnan+0xbc>
 8009830:	2004      	movs	r0, #4
 8009832:	b007      	add	sp, #28
 8009834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009838 <__locale_ctype_ptr_l>:
 8009838:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800983c:	4770      	bx	lr

0800983e <__localeconv_l>:
 800983e:	30f0      	adds	r0, #240	; 0xf0
 8009840:	4770      	bx	lr

08009842 <__ascii_mbtowc>:
 8009842:	b082      	sub	sp, #8
 8009844:	b901      	cbnz	r1, 8009848 <__ascii_mbtowc+0x6>
 8009846:	a901      	add	r1, sp, #4
 8009848:	b142      	cbz	r2, 800985c <__ascii_mbtowc+0x1a>
 800984a:	b14b      	cbz	r3, 8009860 <__ascii_mbtowc+0x1e>
 800984c:	7813      	ldrb	r3, [r2, #0]
 800984e:	600b      	str	r3, [r1, #0]
 8009850:	7812      	ldrb	r2, [r2, #0]
 8009852:	1c10      	adds	r0, r2, #0
 8009854:	bf18      	it	ne
 8009856:	2001      	movne	r0, #1
 8009858:	b002      	add	sp, #8
 800985a:	4770      	bx	lr
 800985c:	4610      	mov	r0, r2
 800985e:	e7fb      	b.n	8009858 <__ascii_mbtowc+0x16>
 8009860:	f06f 0001 	mvn.w	r0, #1
 8009864:	e7f8      	b.n	8009858 <__ascii_mbtowc+0x16>

08009866 <memcpy>:
 8009866:	b510      	push	{r4, lr}
 8009868:	1e43      	subs	r3, r0, #1
 800986a:	440a      	add	r2, r1
 800986c:	4291      	cmp	r1, r2
 800986e:	d100      	bne.n	8009872 <memcpy+0xc>
 8009870:	bd10      	pop	{r4, pc}
 8009872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987a:	e7f7      	b.n	800986c <memcpy+0x6>

0800987c <_Balloc>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009880:	4604      	mov	r4, r0
 8009882:	460e      	mov	r6, r1
 8009884:	b93d      	cbnz	r5, 8009896 <_Balloc+0x1a>
 8009886:	2010      	movs	r0, #16
 8009888:	f000 ff50 	bl	800a72c <malloc>
 800988c:	6260      	str	r0, [r4, #36]	; 0x24
 800988e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009892:	6005      	str	r5, [r0, #0]
 8009894:	60c5      	str	r5, [r0, #12]
 8009896:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009898:	68eb      	ldr	r3, [r5, #12]
 800989a:	b183      	cbz	r3, 80098be <_Balloc+0x42>
 800989c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80098a4:	b9b8      	cbnz	r0, 80098d6 <_Balloc+0x5a>
 80098a6:	2101      	movs	r1, #1
 80098a8:	fa01 f506 	lsl.w	r5, r1, r6
 80098ac:	1d6a      	adds	r2, r5, #5
 80098ae:	0092      	lsls	r2, r2, #2
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fbdb 	bl	800a06c <_calloc_r>
 80098b6:	b160      	cbz	r0, 80098d2 <_Balloc+0x56>
 80098b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80098bc:	e00e      	b.n	80098dc <_Balloc+0x60>
 80098be:	2221      	movs	r2, #33	; 0x21
 80098c0:	2104      	movs	r1, #4
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fbd2 	bl	800a06c <_calloc_r>
 80098c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098ca:	60e8      	str	r0, [r5, #12]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1e4      	bne.n	800989c <_Balloc+0x20>
 80098d2:	2000      	movs	r0, #0
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	6802      	ldr	r2, [r0, #0]
 80098d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80098dc:	2300      	movs	r3, #0
 80098de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098e2:	e7f7      	b.n	80098d4 <_Balloc+0x58>

080098e4 <_Bfree>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80098e8:	4606      	mov	r6, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	b93c      	cbnz	r4, 80098fe <_Bfree+0x1a>
 80098ee:	2010      	movs	r0, #16
 80098f0:	f000 ff1c 	bl	800a72c <malloc>
 80098f4:	6270      	str	r0, [r6, #36]	; 0x24
 80098f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098fa:	6004      	str	r4, [r0, #0]
 80098fc:	60c4      	str	r4, [r0, #12]
 80098fe:	b13d      	cbz	r5, 8009910 <_Bfree+0x2c>
 8009900:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009902:	686a      	ldr	r2, [r5, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800990a:	6029      	str	r1, [r5, #0]
 800990c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009910:	bd70      	pop	{r4, r5, r6, pc}

08009912 <__multadd>:
 8009912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	461f      	mov	r7, r3
 8009918:	4606      	mov	r6, r0
 800991a:	460c      	mov	r4, r1
 800991c:	2300      	movs	r3, #0
 800991e:	690d      	ldr	r5, [r1, #16]
 8009920:	f101 0c14 	add.w	ip, r1, #20
 8009924:	f8dc 0000 	ldr.w	r0, [ip]
 8009928:	3301      	adds	r3, #1
 800992a:	b281      	uxth	r1, r0
 800992c:	fb02 7101 	mla	r1, r2, r1, r7
 8009930:	0c00      	lsrs	r0, r0, #16
 8009932:	0c0f      	lsrs	r7, r1, #16
 8009934:	fb02 7000 	mla	r0, r2, r0, r7
 8009938:	b289      	uxth	r1, r1
 800993a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800993e:	429d      	cmp	r5, r3
 8009940:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009944:	f84c 1b04 	str.w	r1, [ip], #4
 8009948:	dcec      	bgt.n	8009924 <__multadd+0x12>
 800994a:	b1d7      	cbz	r7, 8009982 <__multadd+0x70>
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	42ab      	cmp	r3, r5
 8009950:	dc12      	bgt.n	8009978 <__multadd+0x66>
 8009952:	6861      	ldr	r1, [r4, #4]
 8009954:	4630      	mov	r0, r6
 8009956:	3101      	adds	r1, #1
 8009958:	f7ff ff90 	bl	800987c <_Balloc>
 800995c:	4680      	mov	r8, r0
 800995e:	6922      	ldr	r2, [r4, #16]
 8009960:	f104 010c 	add.w	r1, r4, #12
 8009964:	3202      	adds	r2, #2
 8009966:	0092      	lsls	r2, r2, #2
 8009968:	300c      	adds	r0, #12
 800996a:	f7ff ff7c 	bl	8009866 <memcpy>
 800996e:	4621      	mov	r1, r4
 8009970:	4630      	mov	r0, r6
 8009972:	f7ff ffb7 	bl	80098e4 <_Bfree>
 8009976:	4644      	mov	r4, r8
 8009978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800997c:	3501      	adds	r5, #1
 800997e:	615f      	str	r7, [r3, #20]
 8009980:	6125      	str	r5, [r4, #16]
 8009982:	4620      	mov	r0, r4
 8009984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009988 <__s2b>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4615      	mov	r5, r2
 800998e:	2209      	movs	r2, #9
 8009990:	461f      	mov	r7, r3
 8009992:	3308      	adds	r3, #8
 8009994:	460c      	mov	r4, r1
 8009996:	fb93 f3f2 	sdiv	r3, r3, r2
 800999a:	4606      	mov	r6, r0
 800999c:	2201      	movs	r2, #1
 800999e:	2100      	movs	r1, #0
 80099a0:	429a      	cmp	r2, r3
 80099a2:	db20      	blt.n	80099e6 <__s2b+0x5e>
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7ff ff69 	bl	800987c <_Balloc>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	2d09      	cmp	r5, #9
 80099ae:	6143      	str	r3, [r0, #20]
 80099b0:	f04f 0301 	mov.w	r3, #1
 80099b4:	6103      	str	r3, [r0, #16]
 80099b6:	dd19      	ble.n	80099ec <__s2b+0x64>
 80099b8:	f104 0809 	add.w	r8, r4, #9
 80099bc:	46c1      	mov	r9, r8
 80099be:	442c      	add	r4, r5
 80099c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80099c4:	4601      	mov	r1, r0
 80099c6:	3b30      	subs	r3, #48	; 0x30
 80099c8:	220a      	movs	r2, #10
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ffa1 	bl	8009912 <__multadd>
 80099d0:	45a1      	cmp	r9, r4
 80099d2:	d1f5      	bne.n	80099c0 <__s2b+0x38>
 80099d4:	eb08 0405 	add.w	r4, r8, r5
 80099d8:	3c08      	subs	r4, #8
 80099da:	1b2d      	subs	r5, r5, r4
 80099dc:	1963      	adds	r3, r4, r5
 80099de:	42bb      	cmp	r3, r7
 80099e0:	db07      	blt.n	80099f2 <__s2b+0x6a>
 80099e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e6:	0052      	lsls	r2, r2, #1
 80099e8:	3101      	adds	r1, #1
 80099ea:	e7d9      	b.n	80099a0 <__s2b+0x18>
 80099ec:	340a      	adds	r4, #10
 80099ee:	2509      	movs	r5, #9
 80099f0:	e7f3      	b.n	80099da <__s2b+0x52>
 80099f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099f6:	4601      	mov	r1, r0
 80099f8:	3b30      	subs	r3, #48	; 0x30
 80099fa:	220a      	movs	r2, #10
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7ff ff88 	bl	8009912 <__multadd>
 8009a02:	e7eb      	b.n	80099dc <__s2b+0x54>

08009a04 <__hi0bits>:
 8009a04:	0c02      	lsrs	r2, r0, #16
 8009a06:	0412      	lsls	r2, r2, #16
 8009a08:	4603      	mov	r3, r0
 8009a0a:	b9b2      	cbnz	r2, 8009a3a <__hi0bits+0x36>
 8009a0c:	0403      	lsls	r3, r0, #16
 8009a0e:	2010      	movs	r0, #16
 8009a10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009a14:	bf04      	itt	eq
 8009a16:	021b      	lsleq	r3, r3, #8
 8009a18:	3008      	addeq	r0, #8
 8009a1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a1e:	bf04      	itt	eq
 8009a20:	011b      	lsleq	r3, r3, #4
 8009a22:	3004      	addeq	r0, #4
 8009a24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a28:	bf04      	itt	eq
 8009a2a:	009b      	lsleq	r3, r3, #2
 8009a2c:	3002      	addeq	r0, #2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	db06      	blt.n	8009a40 <__hi0bits+0x3c>
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	d503      	bpl.n	8009a3e <__hi0bits+0x3a>
 8009a36:	3001      	adds	r0, #1
 8009a38:	4770      	bx	lr
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	e7e8      	b.n	8009a10 <__hi0bits+0xc>
 8009a3e:	2020      	movs	r0, #32
 8009a40:	4770      	bx	lr

08009a42 <__lo0bits>:
 8009a42:	6803      	ldr	r3, [r0, #0]
 8009a44:	4601      	mov	r1, r0
 8009a46:	f013 0207 	ands.w	r2, r3, #7
 8009a4a:	d00b      	beq.n	8009a64 <__lo0bits+0x22>
 8009a4c:	07da      	lsls	r2, r3, #31
 8009a4e:	d423      	bmi.n	8009a98 <__lo0bits+0x56>
 8009a50:	0798      	lsls	r0, r3, #30
 8009a52:	bf49      	itett	mi
 8009a54:	085b      	lsrmi	r3, r3, #1
 8009a56:	089b      	lsrpl	r3, r3, #2
 8009a58:	2001      	movmi	r0, #1
 8009a5a:	600b      	strmi	r3, [r1, #0]
 8009a5c:	bf5c      	itt	pl
 8009a5e:	600b      	strpl	r3, [r1, #0]
 8009a60:	2002      	movpl	r0, #2
 8009a62:	4770      	bx	lr
 8009a64:	b298      	uxth	r0, r3
 8009a66:	b9a8      	cbnz	r0, 8009a94 <__lo0bits+0x52>
 8009a68:	2010      	movs	r0, #16
 8009a6a:	0c1b      	lsrs	r3, r3, #16
 8009a6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a70:	bf04      	itt	eq
 8009a72:	0a1b      	lsreq	r3, r3, #8
 8009a74:	3008      	addeq	r0, #8
 8009a76:	071a      	lsls	r2, r3, #28
 8009a78:	bf04      	itt	eq
 8009a7a:	091b      	lsreq	r3, r3, #4
 8009a7c:	3004      	addeq	r0, #4
 8009a7e:	079a      	lsls	r2, r3, #30
 8009a80:	bf04      	itt	eq
 8009a82:	089b      	lsreq	r3, r3, #2
 8009a84:	3002      	addeq	r0, #2
 8009a86:	07da      	lsls	r2, r3, #31
 8009a88:	d402      	bmi.n	8009a90 <__lo0bits+0x4e>
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	d006      	beq.n	8009a9c <__lo0bits+0x5a>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	600b      	str	r3, [r1, #0]
 8009a92:	4770      	bx	lr
 8009a94:	4610      	mov	r0, r2
 8009a96:	e7e9      	b.n	8009a6c <__lo0bits+0x2a>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4770      	bx	lr
 8009a9c:	2020      	movs	r0, #32
 8009a9e:	4770      	bx	lr

08009aa0 <__i2b>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	f7ff fee9 	bl	800987c <_Balloc>
 8009aaa:	2201      	movs	r2, #1
 8009aac:	6144      	str	r4, [r0, #20]
 8009aae:	6102      	str	r2, [r0, #16]
 8009ab0:	bd10      	pop	{r4, pc}

08009ab2 <__multiply>:
 8009ab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab6:	4614      	mov	r4, r2
 8009ab8:	690a      	ldr	r2, [r1, #16]
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	4688      	mov	r8, r1
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	bfbe      	ittt	lt
 8009ac2:	460b      	movlt	r3, r1
 8009ac4:	46a0      	movlt	r8, r4
 8009ac6:	461c      	movlt	r4, r3
 8009ac8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009acc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ad0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ad4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ad8:	eb07 0609 	add.w	r6, r7, r9
 8009adc:	42b3      	cmp	r3, r6
 8009ade:	bfb8      	it	lt
 8009ae0:	3101      	addlt	r1, #1
 8009ae2:	f7ff fecb 	bl	800987c <_Balloc>
 8009ae6:	f100 0514 	add.w	r5, r0, #20
 8009aea:	462b      	mov	r3, r5
 8009aec:	2200      	movs	r2, #0
 8009aee:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009af2:	4573      	cmp	r3, lr
 8009af4:	d316      	bcc.n	8009b24 <__multiply+0x72>
 8009af6:	f104 0214 	add.w	r2, r4, #20
 8009afa:	f108 0114 	add.w	r1, r8, #20
 8009afe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009b02:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	9b00      	ldr	r3, [sp, #0]
 8009b0a:	9201      	str	r2, [sp, #4]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d80c      	bhi.n	8009b2a <__multiply+0x78>
 8009b10:	2e00      	cmp	r6, #0
 8009b12:	dd03      	ble.n	8009b1c <__multiply+0x6a>
 8009b14:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d05d      	beq.n	8009bd8 <__multiply+0x126>
 8009b1c:	6106      	str	r6, [r0, #16]
 8009b1e:	b003      	add	sp, #12
 8009b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b24:	f843 2b04 	str.w	r2, [r3], #4
 8009b28:	e7e3      	b.n	8009af2 <__multiply+0x40>
 8009b2a:	f8b2 b000 	ldrh.w	fp, [r2]
 8009b2e:	f1bb 0f00 	cmp.w	fp, #0
 8009b32:	d023      	beq.n	8009b7c <__multiply+0xca>
 8009b34:	4689      	mov	r9, r1
 8009b36:	46ac      	mov	ip, r5
 8009b38:	f04f 0800 	mov.w	r8, #0
 8009b3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009b40:	f8dc a000 	ldr.w	sl, [ip]
 8009b44:	b2a3      	uxth	r3, r4
 8009b46:	fa1f fa8a 	uxth.w	sl, sl
 8009b4a:	fb0b a303 	mla	r3, fp, r3, sl
 8009b4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b52:	f8dc 4000 	ldr.w	r4, [ip]
 8009b56:	4443      	add	r3, r8
 8009b58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b5c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009b60:	46e2      	mov	sl, ip
 8009b62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b6c:	454f      	cmp	r7, r9
 8009b6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009b72:	f84a 3b04 	str.w	r3, [sl], #4
 8009b76:	d82b      	bhi.n	8009bd0 <__multiply+0x11e>
 8009b78:	f8cc 8004 	str.w	r8, [ip, #4]
 8009b7c:	9b01      	ldr	r3, [sp, #4]
 8009b7e:	3204      	adds	r2, #4
 8009b80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009b84:	f1ba 0f00 	cmp.w	sl, #0
 8009b88:	d020      	beq.n	8009bcc <__multiply+0x11a>
 8009b8a:	4689      	mov	r9, r1
 8009b8c:	46a8      	mov	r8, r5
 8009b8e:	f04f 0b00 	mov.w	fp, #0
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	f8b9 c000 	ldrh.w	ip, [r9]
 8009b98:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ba2:	46c4      	mov	ip, r8
 8009ba4:	445c      	add	r4, fp
 8009ba6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009baa:	f84c 3b04 	str.w	r3, [ip], #4
 8009bae:	f859 3b04 	ldr.w	r3, [r9], #4
 8009bb2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	fb0a b303 	mla	r3, sl, r3, fp
 8009bbc:	454f      	cmp	r7, r9
 8009bbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009bc2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009bc6:	d805      	bhi.n	8009bd4 <__multiply+0x122>
 8009bc8:	f8c8 3004 	str.w	r3, [r8, #4]
 8009bcc:	3504      	adds	r5, #4
 8009bce:	e79b      	b.n	8009b08 <__multiply+0x56>
 8009bd0:	46d4      	mov	ip, sl
 8009bd2:	e7b3      	b.n	8009b3c <__multiply+0x8a>
 8009bd4:	46e0      	mov	r8, ip
 8009bd6:	e7dd      	b.n	8009b94 <__multiply+0xe2>
 8009bd8:	3e01      	subs	r6, #1
 8009bda:	e799      	b.n	8009b10 <__multiply+0x5e>

08009bdc <__pow5mult>:
 8009bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be0:	4615      	mov	r5, r2
 8009be2:	f012 0203 	ands.w	r2, r2, #3
 8009be6:	4606      	mov	r6, r0
 8009be8:	460f      	mov	r7, r1
 8009bea:	d007      	beq.n	8009bfc <__pow5mult+0x20>
 8009bec:	4c21      	ldr	r4, [pc, #132]	; (8009c74 <__pow5mult+0x98>)
 8009bee:	3a01      	subs	r2, #1
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bf6:	f7ff fe8c 	bl	8009912 <__multadd>
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	10ad      	asrs	r5, r5, #2
 8009bfe:	d035      	beq.n	8009c6c <__pow5mult+0x90>
 8009c00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c02:	b93c      	cbnz	r4, 8009c14 <__pow5mult+0x38>
 8009c04:	2010      	movs	r0, #16
 8009c06:	f000 fd91 	bl	800a72c <malloc>
 8009c0a:	6270      	str	r0, [r6, #36]	; 0x24
 8009c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c10:	6004      	str	r4, [r0, #0]
 8009c12:	60c4      	str	r4, [r0, #12]
 8009c14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c1c:	b94c      	cbnz	r4, 8009c32 <__pow5mult+0x56>
 8009c1e:	f240 2171 	movw	r1, #625	; 0x271
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7ff ff3c 	bl	8009aa0 <__i2b>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c30:	6003      	str	r3, [r0, #0]
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	07eb      	lsls	r3, r5, #31
 8009c38:	d50a      	bpl.n	8009c50 <__pow5mult+0x74>
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f7ff ff37 	bl	8009ab2 <__multiply>
 8009c44:	4681      	mov	r9, r0
 8009c46:	4639      	mov	r1, r7
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7ff fe4b 	bl	80098e4 <_Bfree>
 8009c4e:	464f      	mov	r7, r9
 8009c50:	106d      	asrs	r5, r5, #1
 8009c52:	d00b      	beq.n	8009c6c <__pow5mult+0x90>
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	b938      	cbnz	r0, 8009c68 <__pow5mult+0x8c>
 8009c58:	4622      	mov	r2, r4
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7ff ff28 	bl	8009ab2 <__multiply>
 8009c62:	6020      	str	r0, [r4, #0]
 8009c64:	f8c0 8000 	str.w	r8, [r0]
 8009c68:	4604      	mov	r4, r0
 8009c6a:	e7e4      	b.n	8009c36 <__pow5mult+0x5a>
 8009c6c:	4638      	mov	r0, r7
 8009c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c72:	bf00      	nop
 8009c74:	0800aab8 	.word	0x0800aab8

08009c78 <__lshift>:
 8009c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7c:	460c      	mov	r4, r1
 8009c7e:	4607      	mov	r7, r0
 8009c80:	4616      	mov	r6, r2
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c88:	eb0a 0903 	add.w	r9, sl, r3
 8009c8c:	6849      	ldr	r1, [r1, #4]
 8009c8e:	68a3      	ldr	r3, [r4, #8]
 8009c90:	f109 0501 	add.w	r5, r9, #1
 8009c94:	42ab      	cmp	r3, r5
 8009c96:	db32      	blt.n	8009cfe <__lshift+0x86>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f7ff fdef 	bl	800987c <_Balloc>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	f100 0114 	add.w	r1, r0, #20
 8009ca8:	4553      	cmp	r3, sl
 8009caa:	db2b      	blt.n	8009d04 <__lshift+0x8c>
 8009cac:	6920      	ldr	r0, [r4, #16]
 8009cae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cb2:	f104 0314 	add.w	r3, r4, #20
 8009cb6:	f016 021f 	ands.w	r2, r6, #31
 8009cba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cc2:	d025      	beq.n	8009d10 <__lshift+0x98>
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	f1c2 0e20 	rsb	lr, r2, #32
 8009cca:	468a      	mov	sl, r1
 8009ccc:	681e      	ldr	r6, [r3, #0]
 8009cce:	4096      	lsls	r6, r2
 8009cd0:	4330      	orrs	r0, r6
 8009cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8009cd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8009cda:	459c      	cmp	ip, r3
 8009cdc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009ce0:	d814      	bhi.n	8009d0c <__lshift+0x94>
 8009ce2:	6048      	str	r0, [r1, #4]
 8009ce4:	b108      	cbz	r0, 8009cea <__lshift+0x72>
 8009ce6:	f109 0502 	add.w	r5, r9, #2
 8009cea:	3d01      	subs	r5, #1
 8009cec:	4638      	mov	r0, r7
 8009cee:	f8c8 5010 	str.w	r5, [r8, #16]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	f7ff fdf6 	bl	80098e4 <_Bfree>
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfe:	3101      	adds	r1, #1
 8009d00:	005b      	lsls	r3, r3, #1
 8009d02:	e7c7      	b.n	8009c94 <__lshift+0x1c>
 8009d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	e7cd      	b.n	8009ca8 <__lshift+0x30>
 8009d0c:	4651      	mov	r1, sl
 8009d0e:	e7dc      	b.n	8009cca <__lshift+0x52>
 8009d10:	3904      	subs	r1, #4
 8009d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d16:	459c      	cmp	ip, r3
 8009d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d1c:	d8f9      	bhi.n	8009d12 <__lshift+0x9a>
 8009d1e:	e7e4      	b.n	8009cea <__lshift+0x72>

08009d20 <__mcmp>:
 8009d20:	6903      	ldr	r3, [r0, #16]
 8009d22:	690a      	ldr	r2, [r1, #16]
 8009d24:	b530      	push	{r4, r5, lr}
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	d10c      	bne.n	8009d44 <__mcmp+0x24>
 8009d2a:	0092      	lsls	r2, r2, #2
 8009d2c:	3014      	adds	r0, #20
 8009d2e:	3114      	adds	r1, #20
 8009d30:	1884      	adds	r4, r0, r2
 8009d32:	4411      	add	r1, r2
 8009d34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d3c:	4295      	cmp	r5, r2
 8009d3e:	d003      	beq.n	8009d48 <__mcmp+0x28>
 8009d40:	d305      	bcc.n	8009d4e <__mcmp+0x2e>
 8009d42:	2301      	movs	r3, #1
 8009d44:	4618      	mov	r0, r3
 8009d46:	bd30      	pop	{r4, r5, pc}
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d3f3      	bcc.n	8009d34 <__mcmp+0x14>
 8009d4c:	e7fa      	b.n	8009d44 <__mcmp+0x24>
 8009d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d52:	e7f7      	b.n	8009d44 <__mcmp+0x24>

08009d54 <__mdiff>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	460d      	mov	r5, r1
 8009d5a:	4607      	mov	r7, r0
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4628      	mov	r0, r5
 8009d60:	4614      	mov	r4, r2
 8009d62:	f7ff ffdd 	bl	8009d20 <__mcmp>
 8009d66:	1e06      	subs	r6, r0, #0
 8009d68:	d108      	bne.n	8009d7c <__mdiff+0x28>
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	f7ff fd85 	bl	800987c <_Balloc>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	bfa4      	itt	ge
 8009d7e:	4623      	movge	r3, r4
 8009d80:	462c      	movge	r4, r5
 8009d82:	4638      	mov	r0, r7
 8009d84:	6861      	ldr	r1, [r4, #4]
 8009d86:	bfa6      	itte	ge
 8009d88:	461d      	movge	r5, r3
 8009d8a:	2600      	movge	r6, #0
 8009d8c:	2601      	movlt	r6, #1
 8009d8e:	f7ff fd75 	bl	800987c <_Balloc>
 8009d92:	f04f 0e00 	mov.w	lr, #0
 8009d96:	60c6      	str	r6, [r0, #12]
 8009d98:	692b      	ldr	r3, [r5, #16]
 8009d9a:	6926      	ldr	r6, [r4, #16]
 8009d9c:	f104 0214 	add.w	r2, r4, #20
 8009da0:	f105 0914 	add.w	r9, r5, #20
 8009da4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009da8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009dac:	f100 0114 	add.w	r1, r0, #20
 8009db0:	f852 ab04 	ldr.w	sl, [r2], #4
 8009db4:	f859 5b04 	ldr.w	r5, [r9], #4
 8009db8:	fa1f f38a 	uxth.w	r3, sl
 8009dbc:	4473      	add	r3, lr
 8009dbe:	b2ac      	uxth	r4, r5
 8009dc0:	1b1b      	subs	r3, r3, r4
 8009dc2:	0c2c      	lsrs	r4, r5, #16
 8009dc4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009dc8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009dd2:	45c8      	cmp	r8, r9
 8009dd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009dd8:	4694      	mov	ip, r2
 8009dda:	f841 4b04 	str.w	r4, [r1], #4
 8009dde:	d8e7      	bhi.n	8009db0 <__mdiff+0x5c>
 8009de0:	45bc      	cmp	ip, r7
 8009de2:	d304      	bcc.n	8009dee <__mdiff+0x9a>
 8009de4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009de8:	b183      	cbz	r3, 8009e0c <__mdiff+0xb8>
 8009dea:	6106      	str	r6, [r0, #16]
 8009dec:	e7c4      	b.n	8009d78 <__mdiff+0x24>
 8009dee:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009df2:	b2a2      	uxth	r2, r4
 8009df4:	4472      	add	r2, lr
 8009df6:	1413      	asrs	r3, r2, #16
 8009df8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e02:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009e06:	f841 2b04 	str.w	r2, [r1], #4
 8009e0a:	e7e9      	b.n	8009de0 <__mdiff+0x8c>
 8009e0c:	3e01      	subs	r6, #1
 8009e0e:	e7e9      	b.n	8009de4 <__mdiff+0x90>

08009e10 <__ulp>:
 8009e10:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <__ulp+0x44>)
 8009e12:	400b      	ands	r3, r1
 8009e14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dd02      	ble.n	8009e22 <__ulp+0x12>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4770      	bx	lr
 8009e22:	425b      	negs	r3, r3
 8009e24:	151b      	asrs	r3, r3, #20
 8009e26:	2b13      	cmp	r3, #19
 8009e28:	f04f 0000 	mov.w	r0, #0
 8009e2c:	f04f 0100 	mov.w	r1, #0
 8009e30:	dc04      	bgt.n	8009e3c <__ulp+0x2c>
 8009e32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e36:	fa42 f103 	asr.w	r1, r2, r3
 8009e3a:	4770      	bx	lr
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	3b14      	subs	r3, #20
 8009e40:	2b1e      	cmp	r3, #30
 8009e42:	bfce      	itee	gt
 8009e44:	4613      	movgt	r3, r2
 8009e46:	f1c3 031f 	rsble	r3, r3, #31
 8009e4a:	fa02 f303 	lslle.w	r3, r2, r3
 8009e4e:	4618      	mov	r0, r3
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	7ff00000 	.word	0x7ff00000

08009e58 <__b2d>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	6907      	ldr	r7, [r0, #16]
 8009e5e:	f100 0914 	add.w	r9, r0, #20
 8009e62:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009e66:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009e6a:	f1a7 0804 	sub.w	r8, r7, #4
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f7ff fdc8 	bl	8009a04 <__hi0bits>
 8009e74:	f1c0 0320 	rsb	r3, r0, #32
 8009e78:	280a      	cmp	r0, #10
 8009e7a:	600b      	str	r3, [r1, #0]
 8009e7c:	491e      	ldr	r1, [pc, #120]	; (8009ef8 <__b2d+0xa0>)
 8009e7e:	dc17      	bgt.n	8009eb0 <__b2d+0x58>
 8009e80:	45c1      	cmp	r9, r8
 8009e82:	bf28      	it	cs
 8009e84:	2200      	movcs	r2, #0
 8009e86:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e8a:	fa26 f30c 	lsr.w	r3, r6, ip
 8009e8e:	bf38      	it	cc
 8009e90:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009e94:	ea43 0501 	orr.w	r5, r3, r1
 8009e98:	f100 0315 	add.w	r3, r0, #21
 8009e9c:	fa06 f303 	lsl.w	r3, r6, r3
 8009ea0:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ea4:	ea43 0402 	orr.w	r4, r3, r2
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	4629      	mov	r1, r5
 8009eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb0:	45c1      	cmp	r9, r8
 8009eb2:	bf3a      	itte	cc
 8009eb4:	f1a7 0808 	subcc.w	r8, r7, #8
 8009eb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ebc:	2200      	movcs	r2, #0
 8009ebe:	f1b0 030b 	subs.w	r3, r0, #11
 8009ec2:	d015      	beq.n	8009ef0 <__b2d+0x98>
 8009ec4:	409e      	lsls	r6, r3
 8009ec6:	f1c3 0720 	rsb	r7, r3, #32
 8009eca:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009ece:	fa22 f107 	lsr.w	r1, r2, r7
 8009ed2:	45c8      	cmp	r8, r9
 8009ed4:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009ed8:	ea46 0501 	orr.w	r5, r6, r1
 8009edc:	bf94      	ite	ls
 8009ede:	2100      	movls	r1, #0
 8009ee0:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009ee4:	fa02 f003 	lsl.w	r0, r2, r3
 8009ee8:	40f9      	lsrs	r1, r7
 8009eea:	ea40 0401 	orr.w	r4, r0, r1
 8009eee:	e7db      	b.n	8009ea8 <__b2d+0x50>
 8009ef0:	ea46 0501 	orr.w	r5, r6, r1
 8009ef4:	4614      	mov	r4, r2
 8009ef6:	e7d7      	b.n	8009ea8 <__b2d+0x50>
 8009ef8:	3ff00000 	.word	0x3ff00000

08009efc <__d2b>:
 8009efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f00:	461c      	mov	r4, r3
 8009f02:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009f06:	2101      	movs	r1, #1
 8009f08:	4690      	mov	r8, r2
 8009f0a:	f7ff fcb7 	bl	800987c <_Balloc>
 8009f0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009f12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009f16:	4607      	mov	r7, r0
 8009f18:	bb34      	cbnz	r4, 8009f68 <__d2b+0x6c>
 8009f1a:	9201      	str	r2, [sp, #4]
 8009f1c:	f1b8 0200 	subs.w	r2, r8, #0
 8009f20:	d027      	beq.n	8009f72 <__d2b+0x76>
 8009f22:	a802      	add	r0, sp, #8
 8009f24:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009f28:	f7ff fd8b 	bl	8009a42 <__lo0bits>
 8009f2c:	9900      	ldr	r1, [sp, #0]
 8009f2e:	b1f0      	cbz	r0, 8009f6e <__d2b+0x72>
 8009f30:	9a01      	ldr	r2, [sp, #4]
 8009f32:	f1c0 0320 	rsb	r3, r0, #32
 8009f36:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3a:	430b      	orrs	r3, r1
 8009f3c:	40c2      	lsrs	r2, r0
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	9201      	str	r2, [sp, #4]
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	bf14      	ite	ne
 8009f48:	2102      	movne	r1, #2
 8009f4a:	2101      	moveq	r1, #1
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	6139      	str	r1, [r7, #16]
 8009f50:	b1c4      	cbz	r4, 8009f84 <__d2b+0x88>
 8009f52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009f56:	4404      	add	r4, r0
 8009f58:	6034      	str	r4, [r6, #0]
 8009f5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f5e:	6028      	str	r0, [r5, #0]
 8009f60:	4638      	mov	r0, r7
 8009f62:	b002      	add	sp, #8
 8009f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f6c:	e7d5      	b.n	8009f1a <__d2b+0x1e>
 8009f6e:	6179      	str	r1, [r7, #20]
 8009f70:	e7e7      	b.n	8009f42 <__d2b+0x46>
 8009f72:	a801      	add	r0, sp, #4
 8009f74:	f7ff fd65 	bl	8009a42 <__lo0bits>
 8009f78:	2101      	movs	r1, #1
 8009f7a:	9b01      	ldr	r3, [sp, #4]
 8009f7c:	6139      	str	r1, [r7, #16]
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	3020      	adds	r0, #32
 8009f82:	e7e5      	b.n	8009f50 <__d2b+0x54>
 8009f84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f8c:	6030      	str	r0, [r6, #0]
 8009f8e:	6918      	ldr	r0, [r3, #16]
 8009f90:	f7ff fd38 	bl	8009a04 <__hi0bits>
 8009f94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f98:	e7e1      	b.n	8009f5e <__d2b+0x62>

08009f9a <__ratio>:
 8009f9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9e:	4688      	mov	r8, r1
 8009fa0:	4669      	mov	r1, sp
 8009fa2:	4681      	mov	r9, r0
 8009fa4:	f7ff ff58 	bl	8009e58 <__b2d>
 8009fa8:	468b      	mov	fp, r1
 8009faa:	4606      	mov	r6, r0
 8009fac:	460f      	mov	r7, r1
 8009fae:	4640      	mov	r0, r8
 8009fb0:	a901      	add	r1, sp, #4
 8009fb2:	f7ff ff51 	bl	8009e58 <__b2d>
 8009fb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	eba3 0c02 	sub.w	ip, r3, r2
 8009fc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009fc8:	1a9b      	subs	r3, r3, r2
 8009fca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	bfd5      	itete	le
 8009fd2:	460a      	movle	r2, r1
 8009fd4:	463a      	movgt	r2, r7
 8009fd6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009fda:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009fde:	bfd8      	it	le
 8009fe0:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	4659      	mov	r1, fp
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7f6 fb9e 	bl	800072c <__aeabi_ddiv>
 8009ff0:	b003      	add	sp, #12
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ff6 <__copybits>:
 8009ff6:	3901      	subs	r1, #1
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	1149      	asrs	r1, r1, #5
 8009ffc:	6914      	ldr	r4, [r2, #16]
 8009ffe:	3101      	adds	r1, #1
 800a000:	f102 0314 	add.w	r3, r2, #20
 800a004:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	4602      	mov	r2, r0
 800a010:	d303      	bcc.n	800a01a <__copybits+0x24>
 800a012:	2300      	movs	r3, #0
 800a014:	428a      	cmp	r2, r1
 800a016:	d305      	bcc.n	800a024 <__copybits+0x2e>
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	f840 2b04 	str.w	r2, [r0], #4
 800a022:	e7f3      	b.n	800a00c <__copybits+0x16>
 800a024:	f842 3b04 	str.w	r3, [r2], #4
 800a028:	e7f4      	b.n	800a014 <__copybits+0x1e>

0800a02a <__any_on>:
 800a02a:	f100 0214 	add.w	r2, r0, #20
 800a02e:	6900      	ldr	r0, [r0, #16]
 800a030:	114b      	asrs	r3, r1, #5
 800a032:	4298      	cmp	r0, r3
 800a034:	b510      	push	{r4, lr}
 800a036:	db11      	blt.n	800a05c <__any_on+0x32>
 800a038:	dd0a      	ble.n	800a050 <__any_on+0x26>
 800a03a:	f011 011f 	ands.w	r1, r1, #31
 800a03e:	d007      	beq.n	800a050 <__any_on+0x26>
 800a040:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a044:	fa24 f001 	lsr.w	r0, r4, r1
 800a048:	fa00 f101 	lsl.w	r1, r0, r1
 800a04c:	428c      	cmp	r4, r1
 800a04e:	d10b      	bne.n	800a068 <__any_on+0x3e>
 800a050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a054:	4293      	cmp	r3, r2
 800a056:	d803      	bhi.n	800a060 <__any_on+0x36>
 800a058:	2000      	movs	r0, #0
 800a05a:	bd10      	pop	{r4, pc}
 800a05c:	4603      	mov	r3, r0
 800a05e:	e7f7      	b.n	800a050 <__any_on+0x26>
 800a060:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a064:	2900      	cmp	r1, #0
 800a066:	d0f5      	beq.n	800a054 <__any_on+0x2a>
 800a068:	2001      	movs	r0, #1
 800a06a:	e7f6      	b.n	800a05a <__any_on+0x30>

0800a06c <_calloc_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	fb02 f401 	mul.w	r4, r2, r1
 800a072:	4621      	mov	r1, r4
 800a074:	f000 f808 	bl	800a088 <_malloc_r>
 800a078:	4605      	mov	r5, r0
 800a07a:	b118      	cbz	r0, 800a084 <_calloc_r+0x18>
 800a07c:	4622      	mov	r2, r4
 800a07e:	2100      	movs	r1, #0
 800a080:	f7fe f996 	bl	80083b0 <memset>
 800a084:	4628      	mov	r0, r5
 800a086:	bd38      	pop	{r3, r4, r5, pc}

0800a088 <_malloc_r>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	1ccd      	adds	r5, r1, #3
 800a08c:	f025 0503 	bic.w	r5, r5, #3
 800a090:	3508      	adds	r5, #8
 800a092:	2d0c      	cmp	r5, #12
 800a094:	bf38      	it	cc
 800a096:	250c      	movcc	r5, #12
 800a098:	2d00      	cmp	r5, #0
 800a09a:	4606      	mov	r6, r0
 800a09c:	db01      	blt.n	800a0a2 <_malloc_r+0x1a>
 800a09e:	42a9      	cmp	r1, r5
 800a0a0:	d903      	bls.n	800a0aa <_malloc_r+0x22>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	6033      	str	r3, [r6, #0]
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	bd70      	pop	{r4, r5, r6, pc}
 800a0aa:	f000 fb6e 	bl	800a78a <__malloc_lock>
 800a0ae:	4a21      	ldr	r2, [pc, #132]	; (800a134 <_malloc_r+0xac>)
 800a0b0:	6814      	ldr	r4, [r2, #0]
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	b991      	cbnz	r1, 800a0dc <_malloc_r+0x54>
 800a0b6:	4c20      	ldr	r4, [pc, #128]	; (800a138 <_malloc_r+0xb0>)
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	b91b      	cbnz	r3, 800a0c4 <_malloc_r+0x3c>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 fb17 	bl	800a6f0 <_sbrk_r>
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 fb12 	bl	800a6f0 <_sbrk_r>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d124      	bne.n	800a11a <_malloc_r+0x92>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	6033      	str	r3, [r6, #0]
 800a0d6:	f000 fb59 	bl	800a78c <__malloc_unlock>
 800a0da:	e7e4      	b.n	800a0a6 <_malloc_r+0x1e>
 800a0dc:	680b      	ldr	r3, [r1, #0]
 800a0de:	1b5b      	subs	r3, r3, r5
 800a0e0:	d418      	bmi.n	800a114 <_malloc_r+0x8c>
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	d90f      	bls.n	800a106 <_malloc_r+0x7e>
 800a0e6:	600b      	str	r3, [r1, #0]
 800a0e8:	18cc      	adds	r4, r1, r3
 800a0ea:	50cd      	str	r5, [r1, r3]
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f000 fb4d 	bl	800a78c <__malloc_unlock>
 800a0f2:	f104 000b 	add.w	r0, r4, #11
 800a0f6:	1d23      	adds	r3, r4, #4
 800a0f8:	f020 0007 	bic.w	r0, r0, #7
 800a0fc:	1ac3      	subs	r3, r0, r3
 800a0fe:	d0d3      	beq.n	800a0a8 <_malloc_r+0x20>
 800a100:	425a      	negs	r2, r3
 800a102:	50e2      	str	r2, [r4, r3]
 800a104:	e7d0      	b.n	800a0a8 <_malloc_r+0x20>
 800a106:	684b      	ldr	r3, [r1, #4]
 800a108:	428c      	cmp	r4, r1
 800a10a:	bf16      	itet	ne
 800a10c:	6063      	strne	r3, [r4, #4]
 800a10e:	6013      	streq	r3, [r2, #0]
 800a110:	460c      	movne	r4, r1
 800a112:	e7eb      	b.n	800a0ec <_malloc_r+0x64>
 800a114:	460c      	mov	r4, r1
 800a116:	6849      	ldr	r1, [r1, #4]
 800a118:	e7cc      	b.n	800a0b4 <_malloc_r+0x2c>
 800a11a:	1cc4      	adds	r4, r0, #3
 800a11c:	f024 0403 	bic.w	r4, r4, #3
 800a120:	42a0      	cmp	r0, r4
 800a122:	d005      	beq.n	800a130 <_malloc_r+0xa8>
 800a124:	1a21      	subs	r1, r4, r0
 800a126:	4630      	mov	r0, r6
 800a128:	f000 fae2 	bl	800a6f0 <_sbrk_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	d0cf      	beq.n	800a0d0 <_malloc_r+0x48>
 800a130:	6025      	str	r5, [r4, #0]
 800a132:	e7db      	b.n	800a0ec <_malloc_r+0x64>
 800a134:	20000594 	.word	0x20000594
 800a138:	20000598 	.word	0x20000598

0800a13c <__ssputs_r>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	688e      	ldr	r6, [r1, #8]
 800a142:	4682      	mov	sl, r0
 800a144:	429e      	cmp	r6, r3
 800a146:	460c      	mov	r4, r1
 800a148:	4690      	mov	r8, r2
 800a14a:	4699      	mov	r9, r3
 800a14c:	d837      	bhi.n	800a1be <__ssputs_r+0x82>
 800a14e:	898a      	ldrh	r2, [r1, #12]
 800a150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a154:	d031      	beq.n	800a1ba <__ssputs_r+0x7e>
 800a156:	2302      	movs	r3, #2
 800a158:	6825      	ldr	r5, [r4, #0]
 800a15a:	6909      	ldr	r1, [r1, #16]
 800a15c:	1a6f      	subs	r7, r5, r1
 800a15e:	6965      	ldr	r5, [r4, #20]
 800a160:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a164:	fb95 f5f3 	sdiv	r5, r5, r3
 800a168:	f109 0301 	add.w	r3, r9, #1
 800a16c:	443b      	add	r3, r7
 800a16e:	429d      	cmp	r5, r3
 800a170:	bf38      	it	cc
 800a172:	461d      	movcc	r5, r3
 800a174:	0553      	lsls	r3, r2, #21
 800a176:	d530      	bpl.n	800a1da <__ssputs_r+0x9e>
 800a178:	4629      	mov	r1, r5
 800a17a:	f7ff ff85 	bl	800a088 <_malloc_r>
 800a17e:	4606      	mov	r6, r0
 800a180:	b950      	cbnz	r0, 800a198 <__ssputs_r+0x5c>
 800a182:	230c      	movs	r3, #12
 800a184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a188:	f8ca 3000 	str.w	r3, [sl]
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	463a      	mov	r2, r7
 800a19a:	6921      	ldr	r1, [r4, #16]
 800a19c:	f7ff fb63 	bl	8009866 <memcpy>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	6126      	str	r6, [r4, #16]
 800a1ae:	443e      	add	r6, r7
 800a1b0:	6026      	str	r6, [r4, #0]
 800a1b2:	464e      	mov	r6, r9
 800a1b4:	6165      	str	r5, [r4, #20]
 800a1b6:	1bed      	subs	r5, r5, r7
 800a1b8:	60a5      	str	r5, [r4, #8]
 800a1ba:	454e      	cmp	r6, r9
 800a1bc:	d900      	bls.n	800a1c0 <__ssputs_r+0x84>
 800a1be:	464e      	mov	r6, r9
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	4641      	mov	r1, r8
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	f000 fac7 	bl	800a758 <memmove>
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	1b9b      	subs	r3, r3, r6
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	441e      	add	r6, r3
 800a1d6:	6026      	str	r6, [r4, #0]
 800a1d8:	e7dc      	b.n	800a194 <__ssputs_r+0x58>
 800a1da:	462a      	mov	r2, r5
 800a1dc:	f000 fb24 	bl	800a828 <_realloc_r>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1e2      	bne.n	800a1ac <__ssputs_r+0x70>
 800a1e6:	6921      	ldr	r1, [r4, #16]
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	f000 fad1 	bl	800a790 <_free_r>
 800a1ee:	e7c8      	b.n	800a182 <__ssputs_r+0x46>

0800a1f0 <_svfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	461d      	mov	r5, r3
 800a1f6:	898b      	ldrh	r3, [r1, #12]
 800a1f8:	b09d      	sub	sp, #116	; 0x74
 800a1fa:	061f      	lsls	r7, r3, #24
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	4616      	mov	r6, r2
 800a202:	d50f      	bpl.n	800a224 <_svfiprintf_r+0x34>
 800a204:	690b      	ldr	r3, [r1, #16]
 800a206:	b96b      	cbnz	r3, 800a224 <_svfiprintf_r+0x34>
 800a208:	2140      	movs	r1, #64	; 0x40
 800a20a:	f7ff ff3d 	bl	800a088 <_malloc_r>
 800a20e:	6020      	str	r0, [r4, #0]
 800a210:	6120      	str	r0, [r4, #16]
 800a212:	b928      	cbnz	r0, 800a220 <_svfiprintf_r+0x30>
 800a214:	230c      	movs	r3, #12
 800a216:	f8c8 3000 	str.w	r3, [r8]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a21e:	e0c8      	b.n	800a3b2 <_svfiprintf_r+0x1c2>
 800a220:	2340      	movs	r3, #64	; 0x40
 800a222:	6163      	str	r3, [r4, #20]
 800a224:	2300      	movs	r3, #0
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	2320      	movs	r3, #32
 800a22a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a22e:	2330      	movs	r3, #48	; 0x30
 800a230:	f04f 0b01 	mov.w	fp, #1
 800a234:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a238:	9503      	str	r5, [sp, #12]
 800a23a:	4637      	mov	r7, r6
 800a23c:	463d      	mov	r5, r7
 800a23e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a242:	b10b      	cbz	r3, 800a248 <_svfiprintf_r+0x58>
 800a244:	2b25      	cmp	r3, #37	; 0x25
 800a246:	d13e      	bne.n	800a2c6 <_svfiprintf_r+0xd6>
 800a248:	ebb7 0a06 	subs.w	sl, r7, r6
 800a24c:	d00b      	beq.n	800a266 <_svfiprintf_r+0x76>
 800a24e:	4653      	mov	r3, sl
 800a250:	4632      	mov	r2, r6
 800a252:	4621      	mov	r1, r4
 800a254:	4640      	mov	r0, r8
 800a256:	f7ff ff71 	bl	800a13c <__ssputs_r>
 800a25a:	3001      	adds	r0, #1
 800a25c:	f000 80a4 	beq.w	800a3a8 <_svfiprintf_r+0x1b8>
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	4453      	add	r3, sl
 800a264:	9309      	str	r3, [sp, #36]	; 0x24
 800a266:	783b      	ldrb	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 809d 	beq.w	800a3a8 <_svfiprintf_r+0x1b8>
 800a26e:	2300      	movs	r3, #0
 800a270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a280:	931a      	str	r3, [sp, #104]	; 0x68
 800a282:	462f      	mov	r7, r5
 800a284:	2205      	movs	r2, #5
 800a286:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a28a:	4850      	ldr	r0, [pc, #320]	; (800a3cc <_svfiprintf_r+0x1dc>)
 800a28c:	f000 fa56 	bl	800a73c <memchr>
 800a290:	9b04      	ldr	r3, [sp, #16]
 800a292:	b9d0      	cbnz	r0, 800a2ca <_svfiprintf_r+0xda>
 800a294:	06d9      	lsls	r1, r3, #27
 800a296:	bf44      	itt	mi
 800a298:	2220      	movmi	r2, #32
 800a29a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a29e:	071a      	lsls	r2, r3, #28
 800a2a0:	bf44      	itt	mi
 800a2a2:	222b      	movmi	r2, #43	; 0x2b
 800a2a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2a8:	782a      	ldrb	r2, [r5, #0]
 800a2aa:	2a2a      	cmp	r2, #42	; 0x2a
 800a2ac:	d015      	beq.n	800a2da <_svfiprintf_r+0xea>
 800a2ae:	462f      	mov	r7, r5
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	250a      	movs	r5, #10
 800a2b4:	9a07      	ldr	r2, [sp, #28]
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2bc:	3b30      	subs	r3, #48	; 0x30
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d94d      	bls.n	800a35e <_svfiprintf_r+0x16e>
 800a2c2:	b1b8      	cbz	r0, 800a2f4 <_svfiprintf_r+0x104>
 800a2c4:	e00f      	b.n	800a2e6 <_svfiprintf_r+0xf6>
 800a2c6:	462f      	mov	r7, r5
 800a2c8:	e7b8      	b.n	800a23c <_svfiprintf_r+0x4c>
 800a2ca:	4a40      	ldr	r2, [pc, #256]	; (800a3cc <_svfiprintf_r+0x1dc>)
 800a2cc:	463d      	mov	r5, r7
 800a2ce:	1a80      	subs	r0, r0, r2
 800a2d0:	fa0b f000 	lsl.w	r0, fp, r0
 800a2d4:	4318      	orrs	r0, r3
 800a2d6:	9004      	str	r0, [sp, #16]
 800a2d8:	e7d3      	b.n	800a282 <_svfiprintf_r+0x92>
 800a2da:	9a03      	ldr	r2, [sp, #12]
 800a2dc:	1d11      	adds	r1, r2, #4
 800a2de:	6812      	ldr	r2, [r2, #0]
 800a2e0:	9103      	str	r1, [sp, #12]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	db01      	blt.n	800a2ea <_svfiprintf_r+0xfa>
 800a2e6:	9207      	str	r2, [sp, #28]
 800a2e8:	e004      	b.n	800a2f4 <_svfiprintf_r+0x104>
 800a2ea:	4252      	negs	r2, r2
 800a2ec:	f043 0302 	orr.w	r3, r3, #2
 800a2f0:	9207      	str	r2, [sp, #28]
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	783b      	ldrb	r3, [r7, #0]
 800a2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f8:	d10c      	bne.n	800a314 <_svfiprintf_r+0x124>
 800a2fa:	787b      	ldrb	r3, [r7, #1]
 800a2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fe:	d133      	bne.n	800a368 <_svfiprintf_r+0x178>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	3702      	adds	r7, #2
 800a304:	1d1a      	adds	r2, r3, #4
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	9203      	str	r2, [sp, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bfb8      	it	lt
 800a30e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	4d2e      	ldr	r5, [pc, #184]	; (800a3d0 <_svfiprintf_r+0x1e0>)
 800a316:	2203      	movs	r2, #3
 800a318:	7839      	ldrb	r1, [r7, #0]
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 fa0e 	bl	800a73c <memchr>
 800a320:	b138      	cbz	r0, 800a332 <_svfiprintf_r+0x142>
 800a322:	2340      	movs	r3, #64	; 0x40
 800a324:	1b40      	subs	r0, r0, r5
 800a326:	fa03 f000 	lsl.w	r0, r3, r0
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	3701      	adds	r7, #1
 800a32e:	4303      	orrs	r3, r0
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	7839      	ldrb	r1, [r7, #0]
 800a334:	2206      	movs	r2, #6
 800a336:	4827      	ldr	r0, [pc, #156]	; (800a3d4 <_svfiprintf_r+0x1e4>)
 800a338:	1c7e      	adds	r6, r7, #1
 800a33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a33e:	f000 f9fd 	bl	800a73c <memchr>
 800a342:	2800      	cmp	r0, #0
 800a344:	d038      	beq.n	800a3b8 <_svfiprintf_r+0x1c8>
 800a346:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <_svfiprintf_r+0x1e8>)
 800a348:	bb13      	cbnz	r3, 800a390 <_svfiprintf_r+0x1a0>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	3308      	adds	r3, #8
 800a354:	9303      	str	r3, [sp, #12]
 800a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a358:	444b      	add	r3, r9
 800a35a:	9309      	str	r3, [sp, #36]	; 0x24
 800a35c:	e76d      	b.n	800a23a <_svfiprintf_r+0x4a>
 800a35e:	fb05 3202 	mla	r2, r5, r2, r3
 800a362:	2001      	movs	r0, #1
 800a364:	460f      	mov	r7, r1
 800a366:	e7a6      	b.n	800a2b6 <_svfiprintf_r+0xc6>
 800a368:	2300      	movs	r3, #0
 800a36a:	250a      	movs	r5, #10
 800a36c:	4619      	mov	r1, r3
 800a36e:	3701      	adds	r7, #1
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	4638      	mov	r0, r7
 800a374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a378:	3a30      	subs	r2, #48	; 0x30
 800a37a:	2a09      	cmp	r2, #9
 800a37c:	d903      	bls.n	800a386 <_svfiprintf_r+0x196>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0c8      	beq.n	800a314 <_svfiprintf_r+0x124>
 800a382:	9105      	str	r1, [sp, #20]
 800a384:	e7c6      	b.n	800a314 <_svfiprintf_r+0x124>
 800a386:	fb05 2101 	mla	r1, r5, r1, r2
 800a38a:	2301      	movs	r3, #1
 800a38c:	4607      	mov	r7, r0
 800a38e:	e7f0      	b.n	800a372 <_svfiprintf_r+0x182>
 800a390:	ab03      	add	r3, sp, #12
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	4622      	mov	r2, r4
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <_svfiprintf_r+0x1ec>)
 800a398:	a904      	add	r1, sp, #16
 800a39a:	4640      	mov	r0, r8
 800a39c:	f3af 8000 	nop.w
 800a3a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	d1d6      	bne.n	800a356 <_svfiprintf_r+0x166>
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	065b      	lsls	r3, r3, #25
 800a3ac:	f53f af35 	bmi.w	800a21a <_svfiprintf_r+0x2a>
 800a3b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3b2:	b01d      	add	sp, #116	; 0x74
 800a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b8:	ab03      	add	r3, sp, #12
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <_svfiprintf_r+0x1ec>)
 800a3c0:	a904      	add	r1, sp, #16
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	f000 f882 	bl	800a4cc <_printf_i>
 800a3c8:	e7ea      	b.n	800a3a0 <_svfiprintf_r+0x1b0>
 800a3ca:	bf00      	nop
 800a3cc:	0800aac4 	.word	0x0800aac4
 800a3d0:	0800aaca 	.word	0x0800aaca
 800a3d4:	0800aace 	.word	0x0800aace
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	0800a13d 	.word	0x0800a13d

0800a3e0 <_printf_common>:
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	4691      	mov	r9, r2
 800a3e6:	461f      	mov	r7, r3
 800a3e8:	688a      	ldr	r2, [r1, #8]
 800a3ea:	690b      	ldr	r3, [r1, #16]
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bfb8      	it	lt
 800a3f2:	4613      	movlt	r3, r2
 800a3f4:	f8c9 3000 	str.w	r3, [r9]
 800a3f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a402:	b112      	cbz	r2, 800a40a <_printf_common+0x2a>
 800a404:	3301      	adds	r3, #1
 800a406:	f8c9 3000 	str.w	r3, [r9]
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	0699      	lsls	r1, r3, #26
 800a40e:	bf42      	ittt	mi
 800a410:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a414:	3302      	addmi	r3, #2
 800a416:	f8c9 3000 	strmi.w	r3, [r9]
 800a41a:	6825      	ldr	r5, [r4, #0]
 800a41c:	f015 0506 	ands.w	r5, r5, #6
 800a420:	d107      	bne.n	800a432 <_printf_common+0x52>
 800a422:	f104 0a19 	add.w	sl, r4, #25
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	f8d9 2000 	ldr.w	r2, [r9]
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	42ab      	cmp	r3, r5
 800a430:	dc29      	bgt.n	800a486 <_printf_common+0xa6>
 800a432:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a436:	6822      	ldr	r2, [r4, #0]
 800a438:	3300      	adds	r3, #0
 800a43a:	bf18      	it	ne
 800a43c:	2301      	movne	r3, #1
 800a43e:	0692      	lsls	r2, r2, #26
 800a440:	d42e      	bmi.n	800a4a0 <_printf_common+0xc0>
 800a442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a446:	4639      	mov	r1, r7
 800a448:	4630      	mov	r0, r6
 800a44a:	47c0      	blx	r8
 800a44c:	3001      	adds	r0, #1
 800a44e:	d021      	beq.n	800a494 <_printf_common+0xb4>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	68e5      	ldr	r5, [r4, #12]
 800a454:	f003 0306 	and.w	r3, r3, #6
 800a458:	2b04      	cmp	r3, #4
 800a45a:	bf18      	it	ne
 800a45c:	2500      	movne	r5, #0
 800a45e:	f8d9 2000 	ldr.w	r2, [r9]
 800a462:	f04f 0900 	mov.w	r9, #0
 800a466:	bf08      	it	eq
 800a468:	1aad      	subeq	r5, r5, r2
 800a46a:	68a3      	ldr	r3, [r4, #8]
 800a46c:	6922      	ldr	r2, [r4, #16]
 800a46e:	bf08      	it	eq
 800a470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a474:	4293      	cmp	r3, r2
 800a476:	bfc4      	itt	gt
 800a478:	1a9b      	subgt	r3, r3, r2
 800a47a:	18ed      	addgt	r5, r5, r3
 800a47c:	341a      	adds	r4, #26
 800a47e:	454d      	cmp	r5, r9
 800a480:	d11a      	bne.n	800a4b8 <_printf_common+0xd8>
 800a482:	2000      	movs	r0, #0
 800a484:	e008      	b.n	800a498 <_printf_common+0xb8>
 800a486:	2301      	movs	r3, #1
 800a488:	4652      	mov	r2, sl
 800a48a:	4639      	mov	r1, r7
 800a48c:	4630      	mov	r0, r6
 800a48e:	47c0      	blx	r8
 800a490:	3001      	adds	r0, #1
 800a492:	d103      	bne.n	800a49c <_printf_common+0xbc>
 800a494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49c:	3501      	adds	r5, #1
 800a49e:	e7c2      	b.n	800a426 <_printf_common+0x46>
 800a4a0:	2030      	movs	r0, #48	; 0x30
 800a4a2:	18e1      	adds	r1, r4, r3
 800a4a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4ae:	4422      	add	r2, r4
 800a4b0:	3302      	adds	r3, #2
 800a4b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4b6:	e7c4      	b.n	800a442 <_printf_common+0x62>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	4622      	mov	r2, r4
 800a4bc:	4639      	mov	r1, r7
 800a4be:	4630      	mov	r0, r6
 800a4c0:	47c0      	blx	r8
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	d0e6      	beq.n	800a494 <_printf_common+0xb4>
 800a4c6:	f109 0901 	add.w	r9, r9, #1
 800a4ca:	e7d8      	b.n	800a47e <_printf_common+0x9e>

0800a4cc <_printf_i>:
 800a4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	7e09      	ldrb	r1, [r1, #24]
 800a4d8:	b085      	sub	sp, #20
 800a4da:	296e      	cmp	r1, #110	; 0x6e
 800a4dc:	4617      	mov	r7, r2
 800a4de:	4606      	mov	r6, r0
 800a4e0:	4698      	mov	r8, r3
 800a4e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4e4:	f000 80b3 	beq.w	800a64e <_printf_i+0x182>
 800a4e8:	d822      	bhi.n	800a530 <_printf_i+0x64>
 800a4ea:	2963      	cmp	r1, #99	; 0x63
 800a4ec:	d036      	beq.n	800a55c <_printf_i+0x90>
 800a4ee:	d80a      	bhi.n	800a506 <_printf_i+0x3a>
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	f000 80b9 	beq.w	800a668 <_printf_i+0x19c>
 800a4f6:	2958      	cmp	r1, #88	; 0x58
 800a4f8:	f000 8083 	beq.w	800a602 <_printf_i+0x136>
 800a4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a500:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a504:	e032      	b.n	800a56c <_printf_i+0xa0>
 800a506:	2964      	cmp	r1, #100	; 0x64
 800a508:	d001      	beq.n	800a50e <_printf_i+0x42>
 800a50a:	2969      	cmp	r1, #105	; 0x69
 800a50c:	d1f6      	bne.n	800a4fc <_printf_i+0x30>
 800a50e:	6820      	ldr	r0, [r4, #0]
 800a510:	6813      	ldr	r3, [r2, #0]
 800a512:	0605      	lsls	r5, r0, #24
 800a514:	f103 0104 	add.w	r1, r3, #4
 800a518:	d52a      	bpl.n	800a570 <_printf_i+0xa4>
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6011      	str	r1, [r2, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	da03      	bge.n	800a52a <_printf_i+0x5e>
 800a522:	222d      	movs	r2, #45	; 0x2d
 800a524:	425b      	negs	r3, r3
 800a526:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a52a:	486f      	ldr	r0, [pc, #444]	; (800a6e8 <_printf_i+0x21c>)
 800a52c:	220a      	movs	r2, #10
 800a52e:	e039      	b.n	800a5a4 <_printf_i+0xd8>
 800a530:	2973      	cmp	r1, #115	; 0x73
 800a532:	f000 809d 	beq.w	800a670 <_printf_i+0x1a4>
 800a536:	d808      	bhi.n	800a54a <_printf_i+0x7e>
 800a538:	296f      	cmp	r1, #111	; 0x6f
 800a53a:	d020      	beq.n	800a57e <_printf_i+0xb2>
 800a53c:	2970      	cmp	r1, #112	; 0x70
 800a53e:	d1dd      	bne.n	800a4fc <_printf_i+0x30>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	f043 0320 	orr.w	r3, r3, #32
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	e003      	b.n	800a552 <_printf_i+0x86>
 800a54a:	2975      	cmp	r1, #117	; 0x75
 800a54c:	d017      	beq.n	800a57e <_printf_i+0xb2>
 800a54e:	2978      	cmp	r1, #120	; 0x78
 800a550:	d1d4      	bne.n	800a4fc <_printf_i+0x30>
 800a552:	2378      	movs	r3, #120	; 0x78
 800a554:	4865      	ldr	r0, [pc, #404]	; (800a6ec <_printf_i+0x220>)
 800a556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a55a:	e055      	b.n	800a608 <_printf_i+0x13c>
 800a55c:	6813      	ldr	r3, [r2, #0]
 800a55e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a562:	1d19      	adds	r1, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6011      	str	r1, [r2, #0]
 800a568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a56c:	2301      	movs	r3, #1
 800a56e:	e08c      	b.n	800a68a <_printf_i+0x1be>
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a576:	6011      	str	r1, [r2, #0]
 800a578:	bf18      	it	ne
 800a57a:	b21b      	sxthne	r3, r3
 800a57c:	e7cf      	b.n	800a51e <_printf_i+0x52>
 800a57e:	6813      	ldr	r3, [r2, #0]
 800a580:	6825      	ldr	r5, [r4, #0]
 800a582:	1d18      	adds	r0, r3, #4
 800a584:	6010      	str	r0, [r2, #0]
 800a586:	0628      	lsls	r0, r5, #24
 800a588:	d501      	bpl.n	800a58e <_printf_i+0xc2>
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	e002      	b.n	800a594 <_printf_i+0xc8>
 800a58e:	0668      	lsls	r0, r5, #25
 800a590:	d5fb      	bpl.n	800a58a <_printf_i+0xbe>
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	296f      	cmp	r1, #111	; 0x6f
 800a596:	bf14      	ite	ne
 800a598:	220a      	movne	r2, #10
 800a59a:	2208      	moveq	r2, #8
 800a59c:	4852      	ldr	r0, [pc, #328]	; (800a6e8 <_printf_i+0x21c>)
 800a59e:	2100      	movs	r1, #0
 800a5a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5a4:	6865      	ldr	r5, [r4, #4]
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	60a5      	str	r5, [r4, #8]
 800a5aa:	f2c0 8095 	blt.w	800a6d8 <_printf_i+0x20c>
 800a5ae:	6821      	ldr	r1, [r4, #0]
 800a5b0:	f021 0104 	bic.w	r1, r1, #4
 800a5b4:	6021      	str	r1, [r4, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d13d      	bne.n	800a636 <_printf_i+0x16a>
 800a5ba:	2d00      	cmp	r5, #0
 800a5bc:	f040 808e 	bne.w	800a6dc <_printf_i+0x210>
 800a5c0:	4665      	mov	r5, ip
 800a5c2:	2a08      	cmp	r2, #8
 800a5c4:	d10b      	bne.n	800a5de <_printf_i+0x112>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	07db      	lsls	r3, r3, #31
 800a5ca:	d508      	bpl.n	800a5de <_printf_i+0x112>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	6862      	ldr	r2, [r4, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	bfde      	ittt	le
 800a5d4:	2330      	movle	r3, #48	; 0x30
 800a5d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5de:	ebac 0305 	sub.w	r3, ip, r5
 800a5e2:	6123      	str	r3, [r4, #16]
 800a5e4:	f8cd 8000 	str.w	r8, [sp]
 800a5e8:	463b      	mov	r3, r7
 800a5ea:	aa03      	add	r2, sp, #12
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f7ff fef6 	bl	800a3e0 <_printf_common>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d14d      	bne.n	800a694 <_printf_i+0x1c8>
 800a5f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5fc:	b005      	add	sp, #20
 800a5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a602:	4839      	ldr	r0, [pc, #228]	; (800a6e8 <_printf_i+0x21c>)
 800a604:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a608:	6813      	ldr	r3, [r2, #0]
 800a60a:	6821      	ldr	r1, [r4, #0]
 800a60c:	1d1d      	adds	r5, r3, #4
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6015      	str	r5, [r2, #0]
 800a612:	060a      	lsls	r2, r1, #24
 800a614:	d50b      	bpl.n	800a62e <_printf_i+0x162>
 800a616:	07ca      	lsls	r2, r1, #31
 800a618:	bf44      	itt	mi
 800a61a:	f041 0120 	orrmi.w	r1, r1, #32
 800a61e:	6021      	strmi	r1, [r4, #0]
 800a620:	b91b      	cbnz	r3, 800a62a <_printf_i+0x15e>
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	f022 0220 	bic.w	r2, r2, #32
 800a628:	6022      	str	r2, [r4, #0]
 800a62a:	2210      	movs	r2, #16
 800a62c:	e7b7      	b.n	800a59e <_printf_i+0xd2>
 800a62e:	064d      	lsls	r5, r1, #25
 800a630:	bf48      	it	mi
 800a632:	b29b      	uxthmi	r3, r3
 800a634:	e7ef      	b.n	800a616 <_printf_i+0x14a>
 800a636:	4665      	mov	r5, ip
 800a638:	fbb3 f1f2 	udiv	r1, r3, r2
 800a63c:	fb02 3311 	mls	r3, r2, r1, r3
 800a640:	5cc3      	ldrb	r3, [r0, r3]
 800a642:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a646:	460b      	mov	r3, r1
 800a648:	2900      	cmp	r1, #0
 800a64a:	d1f5      	bne.n	800a638 <_printf_i+0x16c>
 800a64c:	e7b9      	b.n	800a5c2 <_printf_i+0xf6>
 800a64e:	6813      	ldr	r3, [r2, #0]
 800a650:	6825      	ldr	r5, [r4, #0]
 800a652:	1d18      	adds	r0, r3, #4
 800a654:	6961      	ldr	r1, [r4, #20]
 800a656:	6010      	str	r0, [r2, #0]
 800a658:	0628      	lsls	r0, r5, #24
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	d501      	bpl.n	800a662 <_printf_i+0x196>
 800a65e:	6019      	str	r1, [r3, #0]
 800a660:	e002      	b.n	800a668 <_printf_i+0x19c>
 800a662:	066a      	lsls	r2, r5, #25
 800a664:	d5fb      	bpl.n	800a65e <_printf_i+0x192>
 800a666:	8019      	strh	r1, [r3, #0]
 800a668:	2300      	movs	r3, #0
 800a66a:	4665      	mov	r5, ip
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	e7b9      	b.n	800a5e4 <_printf_i+0x118>
 800a670:	6813      	ldr	r3, [r2, #0]
 800a672:	1d19      	adds	r1, r3, #4
 800a674:	6011      	str	r1, [r2, #0]
 800a676:	681d      	ldr	r5, [r3, #0]
 800a678:	6862      	ldr	r2, [r4, #4]
 800a67a:	2100      	movs	r1, #0
 800a67c:	4628      	mov	r0, r5
 800a67e:	f000 f85d 	bl	800a73c <memchr>
 800a682:	b108      	cbz	r0, 800a688 <_printf_i+0x1bc>
 800a684:	1b40      	subs	r0, r0, r5
 800a686:	6060      	str	r0, [r4, #4]
 800a688:	6863      	ldr	r3, [r4, #4]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	2300      	movs	r3, #0
 800a68e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a692:	e7a7      	b.n	800a5e4 <_printf_i+0x118>
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	462a      	mov	r2, r5
 800a698:	4639      	mov	r1, r7
 800a69a:	4630      	mov	r0, r6
 800a69c:	47c0      	blx	r8
 800a69e:	3001      	adds	r0, #1
 800a6a0:	d0aa      	beq.n	800a5f8 <_printf_i+0x12c>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	079b      	lsls	r3, r3, #30
 800a6a6:	d413      	bmi.n	800a6d0 <_printf_i+0x204>
 800a6a8:	68e0      	ldr	r0, [r4, #12]
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	4298      	cmp	r0, r3
 800a6ae:	bfb8      	it	lt
 800a6b0:	4618      	movlt	r0, r3
 800a6b2:	e7a3      	b.n	800a5fc <_printf_i+0x130>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	464a      	mov	r2, r9
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	47c0      	blx	r8
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d09a      	beq.n	800a5f8 <_printf_i+0x12c>
 800a6c2:	3501      	adds	r5, #1
 800a6c4:	68e3      	ldr	r3, [r4, #12]
 800a6c6:	9a03      	ldr	r2, [sp, #12]
 800a6c8:	1a9b      	subs	r3, r3, r2
 800a6ca:	42ab      	cmp	r3, r5
 800a6cc:	dcf2      	bgt.n	800a6b4 <_printf_i+0x1e8>
 800a6ce:	e7eb      	b.n	800a6a8 <_printf_i+0x1dc>
 800a6d0:	2500      	movs	r5, #0
 800a6d2:	f104 0919 	add.w	r9, r4, #25
 800a6d6:	e7f5      	b.n	800a6c4 <_printf_i+0x1f8>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1ac      	bne.n	800a636 <_printf_i+0x16a>
 800a6dc:	7803      	ldrb	r3, [r0, #0]
 800a6de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6e6:	e76c      	b.n	800a5c2 <_printf_i+0xf6>
 800a6e8:	0800aad5 	.word	0x0800aad5
 800a6ec:	0800aae6 	.word	0x0800aae6

0800a6f0 <_sbrk_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	4c05      	ldr	r4, [pc, #20]	; (800a70c <_sbrk_r+0x1c>)
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	f7f7 fbfe 	bl	8001efc <_sbrk>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_sbrk_r+0x1a>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	b103      	cbz	r3, 800a70a <_sbrk_r+0x1a>
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20001cc4 	.word	0x20001cc4

0800a710 <__ascii_wctomb>:
 800a710:	b149      	cbz	r1, 800a726 <__ascii_wctomb+0x16>
 800a712:	2aff      	cmp	r2, #255	; 0xff
 800a714:	bf8b      	itete	hi
 800a716:	238a      	movhi	r3, #138	; 0x8a
 800a718:	700a      	strbls	r2, [r1, #0]
 800a71a:	6003      	strhi	r3, [r0, #0]
 800a71c:	2001      	movls	r0, #1
 800a71e:	bf88      	it	hi
 800a720:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a724:	4770      	bx	lr
 800a726:	4608      	mov	r0, r1
 800a728:	4770      	bx	lr
	...

0800a72c <malloc>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <malloc+0xc>)
 800a72e:	4601      	mov	r1, r0
 800a730:	6818      	ldr	r0, [r3, #0]
 800a732:	f7ff bca9 	b.w	800a088 <_malloc_r>
 800a736:	bf00      	nop
 800a738:	2000017c 	.word	0x2000017c

0800a73c <memchr>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	b2c9      	uxtb	r1, r1
 800a740:	4402      	add	r2, r0
 800a742:	4290      	cmp	r0, r2
 800a744:	4603      	mov	r3, r0
 800a746:	d101      	bne.n	800a74c <memchr+0x10>
 800a748:	2300      	movs	r3, #0
 800a74a:	e003      	b.n	800a754 <memchr+0x18>
 800a74c:	781c      	ldrb	r4, [r3, #0]
 800a74e:	3001      	adds	r0, #1
 800a750:	428c      	cmp	r4, r1
 800a752:	d1f6      	bne.n	800a742 <memchr+0x6>
 800a754:	4618      	mov	r0, r3
 800a756:	bd10      	pop	{r4, pc}

0800a758 <memmove>:
 800a758:	4288      	cmp	r0, r1
 800a75a:	b510      	push	{r4, lr}
 800a75c:	eb01 0302 	add.w	r3, r1, r2
 800a760:	d807      	bhi.n	800a772 <memmove+0x1a>
 800a762:	1e42      	subs	r2, r0, #1
 800a764:	4299      	cmp	r1, r3
 800a766:	d00a      	beq.n	800a77e <memmove+0x26>
 800a768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a770:	e7f8      	b.n	800a764 <memmove+0xc>
 800a772:	4283      	cmp	r3, r0
 800a774:	d9f5      	bls.n	800a762 <memmove+0xa>
 800a776:	1881      	adds	r1, r0, r2
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	42d3      	cmn	r3, r2
 800a77c:	d100      	bne.n	800a780 <memmove+0x28>
 800a77e:	bd10      	pop	{r4, pc}
 800a780:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a784:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a788:	e7f7      	b.n	800a77a <memmove+0x22>

0800a78a <__malloc_lock>:
 800a78a:	4770      	bx	lr

0800a78c <__malloc_unlock>:
 800a78c:	4770      	bx	lr
	...

0800a790 <_free_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4605      	mov	r5, r0
 800a794:	2900      	cmp	r1, #0
 800a796:	d043      	beq.n	800a820 <_free_r+0x90>
 800a798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a79c:	1f0c      	subs	r4, r1, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bfb8      	it	lt
 800a7a2:	18e4      	addlt	r4, r4, r3
 800a7a4:	f7ff fff1 	bl	800a78a <__malloc_lock>
 800a7a8:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <_free_r+0x94>)
 800a7aa:	6813      	ldr	r3, [r2, #0]
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	b933      	cbnz	r3, 800a7be <_free_r+0x2e>
 800a7b0:	6063      	str	r3, [r4, #4]
 800a7b2:	6014      	str	r4, [r2, #0]
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ba:	f7ff bfe7 	b.w	800a78c <__malloc_unlock>
 800a7be:	42a3      	cmp	r3, r4
 800a7c0:	d90b      	bls.n	800a7da <_free_r+0x4a>
 800a7c2:	6821      	ldr	r1, [r4, #0]
 800a7c4:	1862      	adds	r2, r4, r1
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	bf01      	itttt	eq
 800a7ca:	681a      	ldreq	r2, [r3, #0]
 800a7cc:	685b      	ldreq	r3, [r3, #4]
 800a7ce:	1852      	addeq	r2, r2, r1
 800a7d0:	6022      	streq	r2, [r4, #0]
 800a7d2:	6063      	str	r3, [r4, #4]
 800a7d4:	6004      	str	r4, [r0, #0]
 800a7d6:	e7ed      	b.n	800a7b4 <_free_r+0x24>
 800a7d8:	4613      	mov	r3, r2
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	b10a      	cbz	r2, 800a7e2 <_free_r+0x52>
 800a7de:	42a2      	cmp	r2, r4
 800a7e0:	d9fa      	bls.n	800a7d8 <_free_r+0x48>
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	1858      	adds	r0, r3, r1
 800a7e6:	42a0      	cmp	r0, r4
 800a7e8:	d10b      	bne.n	800a802 <_free_r+0x72>
 800a7ea:	6820      	ldr	r0, [r4, #0]
 800a7ec:	4401      	add	r1, r0
 800a7ee:	1858      	adds	r0, r3, r1
 800a7f0:	4282      	cmp	r2, r0
 800a7f2:	6019      	str	r1, [r3, #0]
 800a7f4:	d1de      	bne.n	800a7b4 <_free_r+0x24>
 800a7f6:	6810      	ldr	r0, [r2, #0]
 800a7f8:	6852      	ldr	r2, [r2, #4]
 800a7fa:	4401      	add	r1, r0
 800a7fc:	6019      	str	r1, [r3, #0]
 800a7fe:	605a      	str	r2, [r3, #4]
 800a800:	e7d8      	b.n	800a7b4 <_free_r+0x24>
 800a802:	d902      	bls.n	800a80a <_free_r+0x7a>
 800a804:	230c      	movs	r3, #12
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	e7d4      	b.n	800a7b4 <_free_r+0x24>
 800a80a:	6820      	ldr	r0, [r4, #0]
 800a80c:	1821      	adds	r1, r4, r0
 800a80e:	428a      	cmp	r2, r1
 800a810:	bf01      	itttt	eq
 800a812:	6811      	ldreq	r1, [r2, #0]
 800a814:	6852      	ldreq	r2, [r2, #4]
 800a816:	1809      	addeq	r1, r1, r0
 800a818:	6021      	streq	r1, [r4, #0]
 800a81a:	6062      	str	r2, [r4, #4]
 800a81c:	605c      	str	r4, [r3, #4]
 800a81e:	e7c9      	b.n	800a7b4 <_free_r+0x24>
 800a820:	bd38      	pop	{r3, r4, r5, pc}
 800a822:	bf00      	nop
 800a824:	20000594 	.word	0x20000594

0800a828 <_realloc_r>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	4607      	mov	r7, r0
 800a82c:	4614      	mov	r4, r2
 800a82e:	460e      	mov	r6, r1
 800a830:	b921      	cbnz	r1, 800a83c <_realloc_r+0x14>
 800a832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a836:	4611      	mov	r1, r2
 800a838:	f7ff bc26 	b.w	800a088 <_malloc_r>
 800a83c:	b922      	cbnz	r2, 800a848 <_realloc_r+0x20>
 800a83e:	f7ff ffa7 	bl	800a790 <_free_r>
 800a842:	4625      	mov	r5, r4
 800a844:	4628      	mov	r0, r5
 800a846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a848:	f000 f814 	bl	800a874 <_malloc_usable_size_r>
 800a84c:	42a0      	cmp	r0, r4
 800a84e:	d20f      	bcs.n	800a870 <_realloc_r+0x48>
 800a850:	4621      	mov	r1, r4
 800a852:	4638      	mov	r0, r7
 800a854:	f7ff fc18 	bl	800a088 <_malloc_r>
 800a858:	4605      	mov	r5, r0
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d0f2      	beq.n	800a844 <_realloc_r+0x1c>
 800a85e:	4631      	mov	r1, r6
 800a860:	4622      	mov	r2, r4
 800a862:	f7ff f800 	bl	8009866 <memcpy>
 800a866:	4631      	mov	r1, r6
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff ff91 	bl	800a790 <_free_r>
 800a86e:	e7e9      	b.n	800a844 <_realloc_r+0x1c>
 800a870:	4635      	mov	r5, r6
 800a872:	e7e7      	b.n	800a844 <_realloc_r+0x1c>

0800a874 <_malloc_usable_size_r>:
 800a874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a878:	1f18      	subs	r0, r3, #4
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	bfbc      	itt	lt
 800a87e:	580b      	ldrlt	r3, [r1, r0]
 800a880:	18c0      	addlt	r0, r0, r3
 800a882:	4770      	bx	lr

0800a884 <_init>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr

0800a890 <_fini>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr
