
JECCbotECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c8  080083c8  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  080083c8  080083c8  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083c8  080083c8  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  080083d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  2000034c  0800871c  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20001d4c  0800871c  00021d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b813  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a83  00000000  00000000  0003bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0003f610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  00040b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a31  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012a2b  00000000  00000000  0005a979  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079f01  00000000  00000000  0006d3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e72a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dfc  00000000  00000000  000e7320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000034c 	.word	0x2000034c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800816c 	.word	0x0800816c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000350 	.word	0x20000350
 8000148:	0800816c 	.word	0x0800816c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <apiInit>:
bool apiWriteables[API_MEMORY_SIZE];

bool apiLocked;

void apiInit()
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	e00c      	b.n	8000182 <apiInit+0x26>
	{
		apiMemory[i] = 0;
 8000168:	4a0c      	ldr	r2, [pc, #48]	; (800019c <apiInit+0x40>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2100      	movs	r1, #0
 800016e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		apiWriteables[i] = true;
 8000172:	4a0b      	ldr	r2, [pc, #44]	; (80001a0 <apiInit+0x44>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	2201      	movs	r2, #1
 800017a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000188:	dbee      	blt.n	8000168 <apiInit+0xc>
	}
	apiLocked = false;
 800018a:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <apiInit+0x48>)
 800018c:	2200      	movs	r2, #0
 800018e:	701a      	strb	r2, [r3, #0]
}
 8000190:	bf00      	nop
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200007d0 	.word	0x200007d0
 80001a0:	200005d0 	.word	0x200005d0
 80001a4:	200005cc 	.word	0x200005cc

080001a8 <apiDoInstruction>:

void apiDoInstruction(char *instruction, char *responseMessage)
{
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08c      	sub	sp, #48	; 0x30
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	466b      	mov	r3, sp
 80001b4:	461d      	mov	r5, r3
	apiLocked = true;
 80001b6:	4b60      	ldr	r3, [pc, #384]	; (8000338 <apiDoInstruction+0x190>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
	int len = strlen(instruction)+1;
 80001bc:	6878      	ldr	r0, [r7, #4]
 80001be:	f7ff ffc5 	bl	800014c <strlen>
 80001c2:	4603      	mov	r3, r0
 80001c4:	3301      	adds	r3, #1
 80001c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	char ins[len];
 80001c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80001ca:	1e43      	subs	r3, r0, #1
 80001cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80001ce:	4603      	mov	r3, r0
 80001d0:	4619      	mov	r1, r3
 80001d2:	f04f 0200 	mov.w	r2, #0
 80001d6:	f04f 0300 	mov.w	r3, #0
 80001da:	f04f 0400 	mov.w	r4, #0
 80001de:	00d4      	lsls	r4, r2, #3
 80001e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	4603      	mov	r3, r0
 80001e8:	4619      	mov	r1, r3
 80001ea:	f04f 0200 	mov.w	r2, #0
 80001ee:	f04f 0300 	mov.w	r3, #0
 80001f2:	f04f 0400 	mov.w	r4, #0
 80001f6:	00d4      	lsls	r4, r2, #3
 80001f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	4603      	mov	r3, r0
 8000200:	3307      	adds	r3, #7
 8000202:	08db      	lsrs	r3, r3, #3
 8000204:	00db      	lsls	r3, r3, #3
 8000206:	ebad 0d03 	sub.w	sp, sp, r3
 800020a:	466b      	mov	r3, sp
 800020c:	3300      	adds	r3, #0
 800020e:	627b      	str	r3, [r7, #36]	; 0x24
	strcpy(ins, instruction);
 8000210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000212:	6879      	ldr	r1, [r7, #4]
 8000214:	4618      	mov	r0, r3
 8000216:	f007 fadf 	bl	80077d8 <strcpy>

	if(':' == ins[0] && '\n' == ins[len - 2])
 800021a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b3a      	cmp	r3, #58	; 0x3a
 8000220:	d17d      	bne.n	800031e <apiDoInstruction+0x176>
 8000222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000224:	3b02      	subs	r3, #2
 8000226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000228:	5cd3      	ldrb	r3, [r2, r3]
 800022a:	2b0a      	cmp	r3, #10
 800022c:	d177      	bne.n	800031e <apiDoInstruction+0x176>
		uint8_t instructor;
		uint16_t address;



		strncpy(instructorStr, &ins[1], 2);
 800022e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000230:	1c59      	adds	r1, r3, #1
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2202      	movs	r2, #2
 8000238:	4618      	mov	r0, r3
 800023a:	f007 fae7 	bl	800780c <strncpy>
		instructorStr[2] = '\0';
 800023e:	2300      	movs	r3, #0
 8000240:	76bb      	strb	r3, [r7, #26]
		strncpy(addressStr, &ins[3], 4);
 8000242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000244:	1cd9      	adds	r1, r3, #3
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2204      	movs	r2, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f007 fadd 	bl	800780c <strncpy>
		addressStr[4] = '\0';
 8000252:	2300      	movs	r3, #0
 8000254:	753b      	strb	r3, [r7, #20]


		instructor = strtol(instructorStr, NULL, 16);
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2210      	movs	r2, #16
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f007 fb64 	bl	800792c <strtol>
 8000264:	4603      	mov	r3, r0
 8000266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		address = strtol(addressStr, NULL, 16);
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	2210      	movs	r2, #16
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f007 fb5a 	bl	800792c <strtol>
 8000278:	4603      	mov	r3, r0
 800027a:	843b      	strh	r3, [r7, #32]


		if(address < API_MEMORY_SIZE)
 800027c:	8c3b      	ldrh	r3, [r7, #32]
 800027e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000282:	d246      	bcs.n	8000312 <apiDoInstruction+0x16a>
		{
			if(API_INSTRUCTION_READ == instructor)
 8000284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000288:	2b02      	cmp	r3, #2
 800028a:	d10a      	bne.n	80002a2 <apiDoInstruction+0xfa>
			{
				sprintf(responseMessage, ":%04x%04x\n", address, apiMemory[address]);
 800028c:	8c39      	ldrh	r1, [r7, #32]
 800028e:	8c3b      	ldrh	r3, [r7, #32]
 8000290:	4a2a      	ldr	r2, [pc, #168]	; (800033c <apiDoInstruction+0x194>)
 8000292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000296:	460a      	mov	r2, r1
 8000298:	4929      	ldr	r1, [pc, #164]	; (8000340 <apiDoInstruction+0x198>)
 800029a:	6838      	ldr	r0, [r7, #0]
 800029c:	f007 fa7c 	bl	8007798 <siprintf>
	{
 80002a0:	e042      	b.n	8000328 <apiDoInstruction+0x180>
			}
			else if(API_INSTRUCTION_WRITE == instructor)
 80002a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80002a6:	2b04      	cmp	r3, #4
 80002a8:	d12d      	bne.n	8000306 <apiDoInstruction+0x15e>
			{
				if(apiWriteables[address])
 80002aa:	8c3b      	ldrh	r3, [r7, #32]
 80002ac:	4a25      	ldr	r2, [pc, #148]	; (8000344 <apiDoInstruction+0x19c>)
 80002ae:	5cd3      	ldrb	r3, [r2, r3]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d022      	beq.n	80002fa <apiDoInstruction+0x152>
				{
					char valueStr[5];
					uint16_t value;

					strncpy(valueStr, &ins[7], 4);
 80002b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b6:	1dd9      	adds	r1, r3, #7
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	2204      	movs	r2, #4
 80002be:	4618      	mov	r0, r3
 80002c0:	f007 faa4 	bl	800780c <strncpy>
					valueStr[4] = '\0';
 80002c4:	2300      	movs	r3, #0
 80002c6:	733b      	strb	r3, [r7, #12]

					value = strtol(valueStr, NULL, 16);
 80002c8:	f107 0308 	add.w	r3, r7, #8
 80002cc:	2210      	movs	r2, #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f007 fb2b 	bl	800792c <strtol>
 80002d6:	4603      	mov	r3, r0
 80002d8:	83fb      	strh	r3, [r7, #30]

					apiMemory[address] = value;
 80002da:	8c3b      	ldrh	r3, [r7, #32]
 80002dc:	4917      	ldr	r1, [pc, #92]	; (800033c <apiDoInstruction+0x194>)
 80002de:	8bfa      	ldrh	r2, [r7, #30]
 80002e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

					sprintf(responseMessage, ":%04x%04x\n", address, apiMemory[address]);
 80002e4:	8c39      	ldrh	r1, [r7, #32]
 80002e6:	8c3b      	ldrh	r3, [r7, #32]
 80002e8:	4a14      	ldr	r2, [pc, #80]	; (800033c <apiDoInstruction+0x194>)
 80002ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ee:	460a      	mov	r2, r1
 80002f0:	4913      	ldr	r1, [pc, #76]	; (8000340 <apiDoInstruction+0x198>)
 80002f2:	6838      	ldr	r0, [r7, #0]
 80002f4:	f007 fa50 	bl	8007798 <siprintf>
	{
 80002f8:	e016      	b.n	8000328 <apiDoInstruction+0x180>
				}
				else
				{
					sprintf(responseMessage, ":e%04x\n", API_ERROR_ACCESS_DENIED);
 80002fa:	2203      	movs	r2, #3
 80002fc:	4912      	ldr	r1, [pc, #72]	; (8000348 <apiDoInstruction+0x1a0>)
 80002fe:	6838      	ldr	r0, [r7, #0]
 8000300:	f007 fa4a 	bl	8007798 <siprintf>
	{
 8000304:	e010      	b.n	8000328 <apiDoInstruction+0x180>
				}
			}
			else
			{
				sprintf(responseMessage, ":e%04x\n", API_ERROR_WRONG_INSTRUCTOR);
 8000306:	2202      	movs	r2, #2
 8000308:	490f      	ldr	r1, [pc, #60]	; (8000348 <apiDoInstruction+0x1a0>)
 800030a:	6838      	ldr	r0, [r7, #0]
 800030c:	f007 fa44 	bl	8007798 <siprintf>
	{
 8000310:	e00a      	b.n	8000328 <apiDoInstruction+0x180>
			}
		}
		else
		{
			sprintf(responseMessage, ":e%04x\n", API_ERROR_INVALID_ADDRESS);
 8000312:	2201      	movs	r2, #1
 8000314:	490c      	ldr	r1, [pc, #48]	; (8000348 <apiDoInstruction+0x1a0>)
 8000316:	6838      	ldr	r0, [r7, #0]
 8000318:	f007 fa3e 	bl	8007798 <siprintf>
	{
 800031c:	e004      	b.n	8000328 <apiDoInstruction+0x180>
		}

	}
	else
	{
		sprintf(responseMessage, ":e%04x\n", API_ERROR_WRONG_FORMAT);
 800031e:	2200      	movs	r2, #0
 8000320:	4909      	ldr	r1, [pc, #36]	; (8000348 <apiDoInstruction+0x1a0>)
 8000322:	6838      	ldr	r0, [r7, #0]
 8000324:	f007 fa38 	bl	8007798 <siprintf>
	}
	apiLocked = false;
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <apiDoInstruction+0x190>)
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	46ad      	mov	sp, r5
}
 8000330:	bf00      	nop
 8000332:	3730      	adds	r7, #48	; 0x30
 8000334:	46bd      	mov	sp, r7
 8000336:	bdb0      	pop	{r4, r5, r7, pc}
 8000338:	200005cc 	.word	0x200005cc
 800033c:	200007d0 	.word	0x200007d0
 8000340:	08008184 	.word	0x08008184
 8000344:	200005d0 	.word	0x200005d0
 8000348:	08008190 	.word	0x08008190

0800034c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <HAL_UART_RxCpltCallback+0x44>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d102      	bne.n	8000366 <HAL_UART_RxCpltCallback+0x1a>
	{
		kvhDecode();
 8000360:	f000 fc64 	bl	8000c2c <kvhDecode>
	}
	else if(huart->Instance == huart3.Instance)
	{
		gpsDecode();
	}
}
 8000364:	e010      	b.n	8000388 <HAL_UART_RxCpltCallback+0x3c>
	else if(huart->Instance == huart2.Instance)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_UART_RxCpltCallback+0x48>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	429a      	cmp	r2, r3
 8000370:	d102      	bne.n	8000378 <HAL_UART_RxCpltCallback+0x2c>
		lidarDecode();
 8000372:	f000 fb29 	bl	80009c8 <lidarDecode>
}
 8000376:	e007      	b.n	8000388 <HAL_UART_RxCpltCallback+0x3c>
	else if(huart->Instance == huart3.Instance)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_UART_RxCpltCallback+0x4c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	429a      	cmp	r2, r3
 8000382:	d101      	bne.n	8000388 <HAL_UART_RxCpltCallback+0x3c>
		gpsDecode();
 8000384:	f000 fcc8 	bl	8000d18 <gpsDecode>
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000dbc 	.word	0x20000dbc
 8000394:	20000e04 	.word	0x20000e04
 8000398:	20000c14 	.word	0x20000c14

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f001 f80c 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f82c 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f000 fa04 	bl	80007b4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003ac:	f006 fd14 	bl	8006dd8 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80003b0:	f000 f9ac 	bl	800070c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80003b4:	f000 f87e 	bl	80004b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80003b8:	f000 f8aa 	bl	8000510 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003bc:	f000 f922 	bl	8000604 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80003c0:	f000 f97a 	bl	80006b8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80003c4:	f000 f9cc 	bl	8000760 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  apiInit();
 80003c8:	f7ff fec8 	bl	800015c <apiInit>

  powertrainInit();
 80003cc:	f000 fa5e 	bl	800088c <powertrainInit>

  lidarInit();
 80003d0:	f000 fad8 	bl	8000984 <lidarInit>

  kvhInit();
 80003d4:	f000 fbc6 	bl	8000b64 <kvhInit>

  gpsInit();
 80003d8:	f000 fc90 	bl	8000cfc <gpsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(API_STATE_JOYDRIVE == apiMemory[API_REG_STATE])
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <main+0x60>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d1fb      	bne.n	80003dc <main+0x40>
	  {
		  powertrainSetSpeeds(apiMemory[API_REG_PWMLEFT], apiMemory[API_REG_PWMRIGHT]);
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <main+0x60>)
 80003e6:	889b      	ldrh	r3, [r3, #4]
 80003e8:	b21a      	sxth	r2, r3
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <main+0x60>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	4619      	mov	r1, r3
 80003f2:	4610      	mov	r0, r2
 80003f4:	f000 fa80 	bl	80008f8 <powertrainSetSpeeds>
	  if(API_STATE_JOYDRIVE == apiMemory[API_REG_STATE])
 80003f8:	e7f0      	b.n	80003dc <main+0x40>
 80003fa:	bf00      	nop
 80003fc:	200007d0 	.word	0x200007d0

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b094      	sub	sp, #80	; 0x50
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f007 f9b9 	bl	8007786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043e:	2301      	movs	r3, #1
 8000440:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000442:	2302      	movs	r3, #2
 8000444:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800044a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000456:	4618      	mov	r0, r3
 8000458:	f002 fb34 	bl	8002ac4 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000462:	f000 fce5 	bl	8000e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 0314 	add.w	r3, r7, #20
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fd9e 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800048e:	f000 fccf 	bl	8000e30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000492:	2310      	movs	r3, #16
 8000494:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	4618      	mov	r0, r3
 800049e:	f002 ff2d 	bl	80032fc <HAL_RCCEx_PeriphCLKConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004a8:	f000 fcc2 	bl	8000e30 <Error_Handler>
  }
}
 80004ac:	bf00      	nop
 80004ae:	3750      	adds	r7, #80	; 0x50
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_I2C1_Init+0x50>)
 80004ba:	4a13      	ldr	r2, [pc, #76]	; (8000508 <MX_I2C1_Init+0x54>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_I2C1_Init+0x50>)
 80004c0:	4a12      	ldr	r2, [pc, #72]	; (800050c <MX_I2C1_Init+0x58>)
 80004c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_I2C1_Init+0x50>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_I2C1_Init+0x50>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_I2C1_Init+0x50>)
 80004d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MX_I2C1_Init+0x50>)
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_I2C1_Init+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <MX_I2C1_Init+0x50>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_I2C1_Init+0x50>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <MX_I2C1_Init+0x50>)
 80004f2:	f001 fadd 	bl	8001ab0 <HAL_I2C_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004fc:	f000 fc98 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000c54 	.word	0x20000c54
 8000508:	40005400 	.word	0x40005400
 800050c:	000186a0 	.word	0x000186a0

08000510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <MX_TIM3_Init+0xec>)
 8000534:	4a32      	ldr	r2, [pc, #200]	; (8000600 <MX_TIM3_Init+0xf0>)
 8000536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000538:	4b30      	ldr	r3, [pc, #192]	; (80005fc <MX_TIM3_Init+0xec>)
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <MX_TIM3_Init+0xec>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x7fff;
 8000544:	4b2d      	ldr	r3, [pc, #180]	; (80005fc <MX_TIM3_Init+0xec>)
 8000546:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800054a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_TIM3_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <MX_TIM3_Init+0xec>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000558:	4828      	ldr	r0, [pc, #160]	; (80005fc <MX_TIM3_Init+0xec>)
 800055a:	f002 ff85 	bl	8003468 <HAL_TIM_PWM_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000564:	f000 fc64 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4619      	mov	r1, r3
 8000576:	4821      	ldr	r0, [pc, #132]	; (80005fc <MX_TIM3_Init+0xec>)
 8000578:	f003 faa8 	bl	8003acc <HAL_TIMEx_MasterConfigSynchronization>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000582:	f000 fc55 	bl	8000e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000586:	2360      	movs	r3, #96	; 0x60
 8000588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <MX_TIM3_Init+0xec>)
 800059e:	f002 ffc1 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80005a8:	f000 fc42 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2204      	movs	r2, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <MX_TIM3_Init+0xec>)
 80005b4:	f002 ffb6 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80005be:	f000 fc37 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2208      	movs	r2, #8
 80005c6:	4619      	mov	r1, r3
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <MX_TIM3_Init+0xec>)
 80005ca:	f002 ffab 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80005d4:	f000 fc2c 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	220c      	movs	r2, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <MX_TIM3_Init+0xec>)
 80005e0:	f002 ffa0 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80005ea:	f000 fc21 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <MX_TIM3_Init+0xec>)
 80005f0:	f000 fcc6 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000d6c 	.word	0x20000d6c
 8000600:	40000400 	.word	0x40000400

08000604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_TIM4_Init+0xac>)
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <MX_TIM4_Init+0xb0>)
 800062a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_TIM4_Init+0xac>)
 800062e:	2200      	movs	r2, #0
 8000630:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_TIM4_Init+0xac>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_TIM4_Init+0xac>)
 800063a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800063e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_TIM4_Init+0xac>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_TIM4_Init+0xac>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800064c:	4818      	ldr	r0, [pc, #96]	; (80006b0 <MX_TIM4_Init+0xac>)
 800064e:	f002 ff0b 	bl	8003468 <HAL_TIM_PWM_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000658:	f000 fbea 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4619      	mov	r1, r3
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_TIM4_Init+0xac>)
 800066c:	f003 fa2e 	bl	8003acc <HAL_TIMEx_MasterConfigSynchronization>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000676:	f000 fbdb 	bl	8000e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067a:	2360      	movs	r3, #96	; 0x60
 800067c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 800067e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000682:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2208      	movs	r2, #8
 8000690:	4619      	mov	r1, r3
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <MX_TIM4_Init+0xac>)
 8000694:	f002 ff46 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800069e:	f000 fbc7 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <MX_TIM4_Init+0xac>)
 80006a4:	f000 fc6c 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 80006a8:	bf00      	nop
 80006aa:	3728      	adds	r7, #40	; 0x28
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000bd4 	.word	0x20000bd4
 80006b4:	40000800 	.word	0x40000800

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f003 fa30 	bl	8003b54 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 fb99 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000dbc 	.word	0x20000dbc
 8000708:	40013800 	.word	0x40013800

0800070c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART2_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x4c>)
 8000744:	f003 fa06 	bl	8003b54 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 fb6f 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000e04 	.word	0x20000e04
 800075c:	40004400 	.word	0x40004400

08000760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART3_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 800076c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART3_UART_Init+0x4c>)
 8000798:	f003 f9dc 	bl	8003b54 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 fb45 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000c14 	.word	0x20000c14
 80007b0:	40004800 	.word	0x40004800

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0310 	and.w	r3, r3, #16
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0xcc>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0xcc>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_GPIO_Init+0xcc>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <MX_GPIO_Init+0xcc>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_GPIO_Init+0xcc>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000830:	f001 f926 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INH34_Pin|INH12_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2130      	movs	r1, #48	; 0x30
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_GPIO_Init+0xd4>)
 800083a:	f001 f921 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ONBOARD_Pin */
  GPIO_InitStruct.Pin = LED_ONBOARD_Pin;
 800083e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_ONBOARD_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000858:	f000 ffb8 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : INH34_Pin INH12_Pin */
  GPIO_InitStruct.Pin = INH34_Pin|INH12_Pin;
 800085c:	2330      	movs	r3, #48	; 0x30
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000874:	f000 ffaa 	bl	80017cc <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	40011000 	.word	0x40011000
 8000888:	40010800 	.word	0x40010800

0800088c <powertrainInit>:

/* USER CODE BEGIN 4 */
void powertrainInit()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000890:	2100      	movs	r1, #0
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <powertrainInit+0x38>)
 8000894:	f002 fe14 	bl	80034c0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000898:	2104      	movs	r1, #4
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <powertrainInit+0x38>)
 800089c:	f002 fe10 	bl	80034c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80008a0:	2108      	movs	r1, #8
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <powertrainInit+0x38>)
 80008a4:	f002 fe0c 	bl	80034c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80008a8:	210c      	movs	r1, #12
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <powertrainInit+0x38>)
 80008ac:	f002 fe08 	bl	80034c0 <HAL_TIM_PWM_Start>

	powertrainEnableMotors(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f000 f809 	bl	80008c8 <powertrainEnableMotors>

	powertrainSetSpeeds(0, 0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 f81d 	bl	80008f8 <powertrainSetSpeeds>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000d6c 	.word	0x20000d6c

080008c8 <powertrainEnableMotors>:


void powertrainEnableMotors(int enableState)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(INH12_GPIO_Port, INH12_Pin, enableState);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	2120      	movs	r1, #32
 80008d8:	4806      	ldr	r0, [pc, #24]	; (80008f4 <powertrainEnableMotors+0x2c>)
 80008da:	f001 f8d1 	bl	8001a80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH34_GPIO_Port, INH34_Pin, enableState);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	2110      	movs	r1, #16
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <powertrainEnableMotors+0x2c>)
 80008e8:	f001 f8ca 	bl	8001a80 <HAL_GPIO_WritePin>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40010800 	.word	0x40010800

080008f8 <powertrainSetSpeeds>:

void powertrainSetSpeeds(int16_t left, int16_t right)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	80fb      	strh	r3, [r7, #6]
 8000904:	4613      	mov	r3, r2
 8000906:	80bb      	strh	r3, [r7, #4]
	if(left < 0)
 8000908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da0d      	bge.n	800092c <powertrainSetSpeeds+0x34>
	{
		left = -left;
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	425b      	negs	r3, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	80fb      	strh	r3, [r7, #6]
		htim3.Instance->CCR3 = 0;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <powertrainSetSpeeds+0x88>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2200      	movs	r2, #0
 800091e:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = left;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <powertrainSetSpeeds+0x88>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000928:	641a      	str	r2, [r3, #64]	; 0x40
 800092a:	e008      	b.n	800093e <powertrainSetSpeeds+0x46>
	}
	else
	{
		htim3.Instance->CCR3 = left;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <powertrainSetSpeeds+0x88>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000934:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <powertrainSetSpeeds+0x88>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2200      	movs	r2, #0
 800093c:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(right < 0)
 800093e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	da0d      	bge.n	8000962 <powertrainSetSpeeds+0x6a>
	{
		right = -right;
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	425b      	negs	r3, r3
 800094a:	b29b      	uxth	r3, r3
 800094c:	80bb      	strh	r3, [r7, #4]
		htim3.Instance->CCR1 = 0;
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <powertrainSetSpeeds+0x88>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = right;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <powertrainSetSpeeds+0x88>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800095e:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		htim3.Instance->CCR1 = right;
		htim3.Instance->CCR2 = 0;
	}
}
 8000960:	e008      	b.n	8000974 <powertrainSetSpeeds+0x7c>
		htim3.Instance->CCR1 = right;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <powertrainSetSpeeds+0x88>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <powertrainSetSpeeds+0x88>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000d6c 	.word	0x20000d6c

08000984 <lidarInit>:

void lidarInit()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	char lidarInitStr[2] = { 0xa5, 0x20 };
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <lidarInit+0x34>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	80bb      	strh	r3, [r7, #4]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000990:	2108      	movs	r1, #8
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <lidarInit+0x38>)
 8000994:	f002 fd94 	bl	80034c0 <HAL_TIM_PWM_Start>
	HAL_UART_Transmit(&huart2, lidarInitStr, 2, 1000);
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	2202      	movs	r2, #2
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <lidarInit+0x3c>)
 80009a2:	f003 f924 	bl	8003bee <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, lidarReceiveBuffer, 7);
 80009a6:	2207      	movs	r2, #7
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <lidarInit+0x40>)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <lidarInit+0x3c>)
 80009ac:	f003 f9b8 	bl	8003d20 <HAL_UART_Receive_IT>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08008198 	.word	0x08008198
 80009bc:	20000bd4 	.word	0x20000bd4
 80009c0:	20000e04 	.word	0x20000e04
 80009c4:	20000dfc 	.word	0x20000dfc

080009c8 <lidarDecode>:

void lidarDecode()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
	static int lidarState = LIDAR_STATE_INIT;

	int quality, s, sinv, c, angle, distance;

	if(lidarState == LIDAR_STATE_INIT)
 80009ce:	4b60      	ldr	r3, [pc, #384]	; (8000b50 <lidarDecode+0x188>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d12a      	bne.n	8000a2c <lidarDecode+0x64>
	{
		if(0xa5 == lidarReceiveBuffer[0] && 0x5a == lidarReceiveBuffer[1] && 0x05 == lidarReceiveBuffer[2] && 0x00 == lidarReceiveBuffer[3] && 0x00 == lidarReceiveBuffer[4] && 0x40 == lidarReceiveBuffer[5] && 0x81 == lidarReceiveBuffer[6])
 80009d6:	4b5f      	ldr	r3, [pc, #380]	; (8000b54 <lidarDecode+0x18c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2ba5      	cmp	r3, #165	; 0xa5
 80009dc:	d120      	bne.n	8000a20 <lidarDecode+0x58>
 80009de:	4b5d      	ldr	r3, [pc, #372]	; (8000b54 <lidarDecode+0x18c>)
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	2b5a      	cmp	r3, #90	; 0x5a
 80009e4:	d11c      	bne.n	8000a20 <lidarDecode+0x58>
 80009e6:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <lidarDecode+0x18c>)
 80009e8:	789b      	ldrb	r3, [r3, #2]
 80009ea:	2b05      	cmp	r3, #5
 80009ec:	d118      	bne.n	8000a20 <lidarDecode+0x58>
 80009ee:	4b59      	ldr	r3, [pc, #356]	; (8000b54 <lidarDecode+0x18c>)
 80009f0:	78db      	ldrb	r3, [r3, #3]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d114      	bne.n	8000a20 <lidarDecode+0x58>
 80009f6:	4b57      	ldr	r3, [pc, #348]	; (8000b54 <lidarDecode+0x18c>)
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <lidarDecode+0x58>
 80009fe:	4b55      	ldr	r3, [pc, #340]	; (8000b54 <lidarDecode+0x18c>)
 8000a00:	795b      	ldrb	r3, [r3, #5]
 8000a02:	2b40      	cmp	r3, #64	; 0x40
 8000a04:	d10c      	bne.n	8000a20 <lidarDecode+0x58>
 8000a06:	4b53      	ldr	r3, [pc, #332]	; (8000b54 <lidarDecode+0x18c>)
 8000a08:	799b      	ldrb	r3, [r3, #6]
 8000a0a:	2b81      	cmp	r3, #129	; 0x81
 8000a0c:	d108      	bne.n	8000a20 <lidarDecode+0x58>
		{
			lidarState = LIDAR_STATE_SCAN;
 8000a0e:	4b50      	ldr	r3, [pc, #320]	; (8000b50 <lidarDecode+0x188>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, lidarReceiveBuffer, 5);
 8000a14:	2205      	movs	r2, #5
 8000a16:	494f      	ldr	r1, [pc, #316]	; (8000b54 <lidarDecode+0x18c>)
 8000a18:	484f      	ldr	r0, [pc, #316]	; (8000b58 <lidarDecode+0x190>)
 8000a1a:	f003 f981 	bl	8003d20 <HAL_UART_Receive_IT>
 8000a1e:	e092      	b.n	8000b46 <lidarDecode+0x17e>
		}
		else
		{
			lidarState = LIDAR_STATE_INIT;
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <lidarDecode+0x188>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
			lidarInit();
 8000a26:	f7ff ffad 	bl	8000984 <lidarInit>
		{
			lidarState = LIDAR_STATE_INIT;
			lidarInit();
		}
	}
}
 8000a2a:	e08c      	b.n	8000b46 <lidarDecode+0x17e>
	else if(lidarState == LIDAR_STATE_SCAN)
 8000a2c:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <lidarDecode+0x188>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	f040 8088 	bne.w	8000b46 <lidarDecode+0x17e>
		s = lidarReceiveBuffer[0] & 0b00000001;
 8000a36:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <lidarDecode+0x18c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
		sinv = (lidarReceiveBuffer[0] & 0b00000010) >> 1;
 8000a40:	4b44      	ldr	r3, [pc, #272]	; (8000b54 <lidarDecode+0x18c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	105b      	asrs	r3, r3, #1
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
		quality = (lidarReceiveBuffer[0] & 0b11111100) >> 2;
 8000a4c:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <lidarDecode+0x18c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	60fb      	str	r3, [r7, #12]
		c = lidarReceiveBuffer[1] & 0b00000001;
 8000a56:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <lidarDecode+0x18c>)
 8000a58:	785b      	ldrb	r3, [r3, #1]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
		if(s == !sinv && c ==1)
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf0c      	ite	eq
 8000a66:	2301      	moveq	r3, #1
 8000a68:	2300      	movne	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d162      	bne.n	8000b3a <lidarDecode+0x172>
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d15f      	bne.n	8000b3a <lidarDecode+0x172>
			if(s == 1)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d114      	bne.n	8000aaa <lidarDecode+0xe2>
				for(int i = 0; i < 360; i++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
 8000a84:	e00d      	b.n	8000aa2 <lidarDecode+0xda>
					while(apiLocked){}
 8000a86:	bf00      	nop
 8000a88:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <lidarDecode+0x194>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1fb      	bne.n	8000a88 <lidarDecode+0xc0>
					apiMemory[API_BENCH_LIDAR_START + i]= 0;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	330f      	adds	r3, #15
 8000a94:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <lidarDecode+0x198>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0; i < 360; i++)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000aa8:	dbed      	blt.n	8000a86 <lidarDecode+0xbe>
			if(quality > 0)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd3e      	ble.n	8000b2e <lidarDecode+0x166>
				angle = lidarReceiveBuffer[2];
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <lidarDecode+0x18c>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	61fb      	str	r3, [r7, #28]
				angle = angle << 8;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	61fb      	str	r3, [r7, #28]
				int tmp = lidarReceiveBuffer[1] & 0b11111110;
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <lidarDecode+0x18c>)
 8000abe:	785b      	ldrb	r3, [r3, #1]
 8000ac0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8000ac4:	607b      	str	r3, [r7, #4]
				tmp = tmp >> 1;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	105b      	asrs	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
				angle += tmp;
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	61fb      	str	r3, [r7, #28]
				angle = angle / 64;
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da00      	bge.n	8000adc <lidarDecode+0x114>
 8000ada:	333f      	adds	r3, #63	; 0x3f
 8000adc:	119b      	asrs	r3, r3, #6
 8000ade:	61fb      	str	r3, [r7, #28]
				while(angle > 360)
 8000ae0:	e003      	b.n	8000aea <lidarDecode+0x122>
					angle -= 360;
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000ae8:	61fb      	str	r3, [r7, #28]
				while(angle > 360)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000af0:	dcf7      	bgt.n	8000ae2 <lidarDecode+0x11a>
				distance = lidarReceiveBuffer[4];
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <lidarDecode+0x18c>)
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	603b      	str	r3, [r7, #0]
				distance = distance << 8;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	603b      	str	r3, [r7, #0]
				distance += lidarReceiveBuffer[3];
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <lidarDecode+0x18c>)
 8000b00:	78db      	ldrb	r3, [r3, #3]
 8000b02:	461a      	mov	r2, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	603b      	str	r3, [r7, #0]
				distance = distance / 4;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da00      	bge.n	8000b12 <lidarDecode+0x14a>
 8000b10:	3303      	adds	r3, #3
 8000b12:	109b      	asrs	r3, r3, #2
 8000b14:	603b      	str	r3, [r7, #0]
				while(apiLocked){}
 8000b16:	bf00      	nop
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <lidarDecode+0x194>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1fb      	bne.n	8000b18 <lidarDecode+0x150>
				apiMemory[API_BENCH_LIDAR_START + angle] = distance;
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	330f      	adds	r3, #15
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	b291      	uxth	r1, r2
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <lidarDecode+0x198>)
 8000b2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HAL_UART_Receive_IT(&huart2, lidarReceiveBuffer, 5);
 8000b2e:	2205      	movs	r2, #5
 8000b30:	4908      	ldr	r1, [pc, #32]	; (8000b54 <lidarDecode+0x18c>)
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <lidarDecode+0x190>)
 8000b34:	f003 f8f4 	bl	8003d20 <HAL_UART_Receive_IT>
 8000b38:	e005      	b.n	8000b46 <lidarDecode+0x17e>
			lidarState = LIDAR_STATE_INIT;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <lidarDecode+0x188>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
			lidarInit();
 8000b40:	f7ff ff20 	bl	8000984 <lidarInit>
}
 8000b44:	e7ff      	b.n	8000b46 <lidarDecode+0x17e>
 8000b46:	bf00      	nop
 8000b48:	3720      	adds	r7, #32
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000368 	.word	0x20000368
 8000b54:	20000dfc 	.word	0x20000dfc
 8000b58:	20000e04 	.word	0x20000e04
 8000b5c:	200005cc 	.word	0x200005cc
 8000b60:	200007d0 	.word	0x200007d0

08000b64 <kvhInit>:

void kvhInit()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
	  char kvhInitStr[3] = { 's', '\r' };
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2100      	movs	r1, #0
 8000b70:	460a      	mov	r2, r1
 8000b72:	801a      	strh	r2, [r3, #0]
 8000b74:	460a      	mov	r2, r1
 8000b76:	709a      	strb	r2, [r3, #2]
 8000b78:	2373      	movs	r3, #115	; 0x73
 8000b7a:	773b      	strb	r3, [r7, #28]
 8000b7c:	230d      	movs	r3, #13
 8000b7e:	777b      	strb	r3, [r7, #29]
	  char kvhConfigNmeaStr[5] = { '=', 't' , ',', '0', '\r' };
 8000b80:	4a25      	ldr	r2, [pc, #148]	; (8000c18 <kvhInit+0xb4>)
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8a:	6018      	str	r0, [r3, #0]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	7019      	strb	r1, [r3, #0]
	  char kvhConfigSpeedStr[7] = { '=', 'r', ',' , '6', '0', '0', '\r' };
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <kvhInit+0xb8>)
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9a:	6018      	str	r0, [r3, #0]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	8019      	strh	r1, [r3, #0]
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	0c0a      	lsrs	r2, r1, #16
 8000ba4:	701a      	strb	r2, [r3, #0]
	  char kvhConfigUnitStr[5] = { '=', 'i' , ',', 'd', '\r' };
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <kvhInit+0xbc>)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bae:	6018      	str	r0, [r3, #0]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	7019      	strb	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1, kvhInitStr, 2, 1000);
 8000bb4:	f107 011c 	add.w	r1, r7, #28
 8000bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	4819      	ldr	r0, [pc, #100]	; (8000c24 <kvhInit+0xc0>)
 8000bc0:	f003 f815 	bl	8003bee <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f000 fc5b 	bl	8001480 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigNmeaStr, 5, 1000);
 8000bca:	f107 0114 	add.w	r1, r7, #20
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	4813      	ldr	r0, [pc, #76]	; (8000c24 <kvhInit+0xc0>)
 8000bd6:	f003 f80a 	bl	8003bee <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000bda:	2064      	movs	r0, #100	; 0x64
 8000bdc:	f000 fc50 	bl	8001480 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigUnitStr, 5, 1000);
 8000be0:	1d39      	adds	r1, r7, #4
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	2205      	movs	r2, #5
 8000be8:	480e      	ldr	r0, [pc, #56]	; (8000c24 <kvhInit+0xc0>)
 8000bea:	f003 f800 	bl	8003bee <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000bee:	2064      	movs	r0, #100	; 0x64
 8000bf0:	f000 fc46 	bl	8001480 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigSpeedStr, 7, 1000);
 8000bf4:	f107 010c 	add.w	r1, r7, #12
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <kvhInit+0xc0>)
 8000c00:	f002 fff5 	bl	8003bee <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1, &kvhReceiveChar, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <kvhInit+0xc4>)
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <kvhInit+0xc0>)
 8000c0a:	f003 f889 	bl	8003d20 <HAL_UART_Receive_IT>
}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	0800819c 	.word	0x0800819c
 8000c1c:	080081a4 	.word	0x080081a4
 8000c20:	080081ac 	.word	0x080081ac
 8000c24:	20000dbc 	.word	0x20000dbc
 8000c28:	20000bd0 	.word	0x20000bd0

08000c2c <kvhDecode>:

void kvhDecode()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	static int cursor = 0;
	static char nmeaString[20];

	if(kvhReceiveChar == '$')
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <kvhDecode+0xb0>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b24      	cmp	r3, #36	; 0x24
 8000c38:	d103      	bne.n	8000c42 <kvhDecode+0x16>
	{
		cursor = 0;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <kvhDecode+0xb4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e03c      	b.n	8000cbc <kvhDecode+0x90>
	}
	else if(kvhReceiveChar == '\r')
 8000c42:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <kvhDecode+0xb0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b0d      	cmp	r3, #13
 8000c48:	d133      	bne.n	8000cb2 <kvhDecode+0x86>
	{
		nmeaString[cursor] = '\0';
 8000c4a:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <kvhDecode+0xb4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a25      	ldr	r2, [pc, #148]	; (8000ce4 <kvhDecode+0xb8>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	54d1      	strb	r1, [r2, r3]
		if(strncmp("$HCHDT", nmeaString, 6) == 0)
 8000c54:	2206      	movs	r2, #6
 8000c56:	4923      	ldr	r1, [pc, #140]	; (8000ce4 <kvhDecode+0xb8>)
 8000c58:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <kvhDecode+0xbc>)
 8000c5a:	f006 fdc5 	bl	80077e8 <strncmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d12b      	bne.n	8000cbc <kvhDecode+0x90>
		{
			char headingStr[4];
			strncpy(headingStr, &nmeaString[7], 3);
 8000c64:	463b      	mov	r3, r7
 8000c66:	2203      	movs	r2, #3
 8000c68:	4920      	ldr	r1, [pc, #128]	; (8000cec <kvhDecode+0xc0>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 fdce 	bl	800780c <strncpy>
			headingStr[3] = '\0';
 8000c70:	2300      	movs	r3, #0
 8000c72:	70fb      	strb	r3, [r7, #3]
			//CDC_Transmit_FS(headingStr, 3);
			//CDC_Transmit_FS(nmeaString, ( cursor + 1 ));
			int heading = strtol(headingStr, NULL, 10);
 8000c74:	463b      	mov	r3, r7
 8000c76:	220a      	movs	r2, #10
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f006 fe56 	bl	800792c <strtol>
 8000c80:	6078      	str	r0, [r7, #4]
			if(heading > 180)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2bb4      	cmp	r3, #180	; 0xb4
 8000c86:	dd03      	ble.n	8000c90 <kvhDecode+0x64>
			{
				heading -= 360;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000c8e:	607b      	str	r3, [r7, #4]
			}
			while(apiLocked){}
 8000c90:	bf00      	nop
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <kvhDecode+0xc4>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1fb      	bne.n	8000c92 <kvhDecode+0x66>
			apiMemory[API_REG_HEADING_KVH] = strtol(headingStr, NULL, 10);
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f006 fe43 	bl	800792c <strtol>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <kvhDecode+0xc8>)
 8000cac:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
 8000cb0:	e004      	b.n	8000cbc <kvhDecode+0x90>
		}
	}
	else
	{
		cursor ++;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <kvhDecode+0xb4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <kvhDecode+0xb4>)
 8000cba:	6013      	str	r3, [r2, #0]
	}

	nmeaString[cursor] = kvhReceiveChar;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <kvhDecode+0xb4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <kvhDecode+0xb0>)
 8000cc2:	7811      	ldrb	r1, [r2, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <kvhDecode+0xb8>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Receive_IT(&huart1, &kvhReceiveChar, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4904      	ldr	r1, [pc, #16]	; (8000cdc <kvhDecode+0xb0>)
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <kvhDecode+0xcc>)
 8000cce:	f003 f827 	bl	8003d20 <HAL_UART_Receive_IT>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000bd0 	.word	0x20000bd0
 8000ce0:	2000036c 	.word	0x2000036c
 8000ce4:	20000370 	.word	0x20000370
 8000ce8:	080081b4 	.word	0x080081b4
 8000cec:	20000377 	.word	0x20000377
 8000cf0:	200005cc 	.word	0x200005cc
 8000cf4:	200007d0 	.word	0x200007d0
 8000cf8:	20000dbc 	.word	0x20000dbc

08000cfc <gpsInit>:

void gpsInit()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &gpsReceiveChar, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	4903      	ldr	r1, [pc, #12]	; (8000d10 <gpsInit+0x14>)
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <gpsInit+0x18>)
 8000d06:	f003 f80b 	bl	8003d20 <HAL_UART_Receive_IT>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000e03 	.word	0x20000e03
 8000d14:	20000c14 	.word	0x20000c14

08000d18 <gpsDecode>:

void gpsDecode()
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
	static int cursor = 0;
	static char nmeaString[20];

	if(kvhReceiveChar == '$')
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <gpsDecode+0xf0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b24      	cmp	r3, #36	; 0x24
 8000d24:	d103      	bne.n	8000d2e <gpsDecode+0x16>
	{
		cursor = 0;
 8000d26:	4b39      	ldr	r3, [pc, #228]	; (8000e0c <gpsDecode+0xf4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e05c      	b.n	8000de8 <gpsDecode+0xd0>
	}
	else if(kvhReceiveChar == '\n')
 8000d2e:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <gpsDecode+0xf0>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d153      	bne.n	8000dde <gpsDecode+0xc6>
	{
		nmeaString[cursor] = '\0';
 8000d36:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <gpsDecode+0xf4>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <gpsDecode+0xf8>)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	54d1      	strb	r1, [r2, r3]
		strcpy(nmeaString, "$GNRMC,174752.00,A,4900.06642,N,01249.68048,E,0.102,,110420,,,A*6E\n\0");
 8000d40:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <gpsDecode+0xf8>)
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <gpsDecode+0xfc>)
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	2344      	movs	r3, #68	; 0x44
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f006 fd10 	bl	8007770 <memcpy>
		if(strncmp("$GPRMC", nmeaString, 6) == 0 || strncmp("$GnRMC", nmeaString, 6) == 0)
 8000d50:	2206      	movs	r2, #6
 8000d52:	492f      	ldr	r1, [pc, #188]	; (8000e10 <gpsDecode+0xf8>)
 8000d54:	4830      	ldr	r0, [pc, #192]	; (8000e18 <gpsDecode+0x100>)
 8000d56:	f006 fd47 	bl	80077e8 <strncmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <gpsDecode+0x58>
 8000d60:	2206      	movs	r2, #6
 8000d62:	492b      	ldr	r1, [pc, #172]	; (8000e10 <gpsDecode+0xf8>)
 8000d64:	482d      	ldr	r0, [pc, #180]	; (8000e1c <gpsDecode+0x104>)
 8000d66:	f006 fd3f 	bl	80077e8 <strncmp>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d13b      	bne.n	8000de8 <gpsDecode+0xd0>
		{
			int fieldIndex=0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
			int charIndex=0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
//			char currentField[15];
//			char fields[13][15];

			for(int i=7; i<strlen(nmeaString); i++)
 8000d78:	2307      	movs	r3, #7
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	e027      	b.n	8000dce <gpsDecode+0xb6>
			{
			  char currentChar=nmeaString[i];
 8000d7e:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <gpsDecode+0xf8>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	70fb      	strb	r3, [r7, #3]
			  if(currentChar!=',')
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b2c      	cmp	r3, #44	; 0x2c
 8000d8c:	d008      	beq.n	8000da0 <gpsDecode+0x88>
			  {
			    currentField[charIndex]=currentChar;
 8000d8e:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <gpsDecode+0x108>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4413      	add	r3, r2
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	701a      	strb	r2, [r3, #0]
			    charIndex++;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	e013      	b.n	8000dc8 <gpsDecode+0xb0>
			  }
			  else
			  {
				currentField[charIndex] = '\0';
 8000da0:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <gpsDecode+0x108>)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
			    strcpy(fields[fieldIndex], currentField);
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4613      	mov	r3, r2
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	1a9b      	subs	r3, r3, r2
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <gpsDecode+0x10c>)
 8000db4:	4413      	add	r3, r2
 8000db6:	491a      	ldr	r1, [pc, #104]	; (8000e20 <gpsDecode+0x108>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 fd0d 	bl	80077d8 <strcpy>
			    charIndex = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
			    fieldIndex++;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
			for(int i=7; i<strlen(nmeaString); i++)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <gpsDecode+0xf8>)
 8000dd0:	f7ff f9bc 	bl	800014c <strlen>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8d0      	bhi.n	8000d7e <gpsDecode+0x66>
 8000ddc:	e004      	b.n	8000de8 <gpsDecode+0xd0>
//			gpsData.coordinate.longitude=lon;
		}
	}
	else
	{
		cursor ++;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <gpsDecode+0xf4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <gpsDecode+0xf4>)
 8000de6:	6013      	str	r3, [r2, #0]
	}

	nmeaString[cursor] = gpsReceiveChar;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <gpsDecode+0xf4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <gpsDecode+0x110>)
 8000dee:	7811      	ldrb	r1, [r2, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <gpsDecode+0xf8>)
 8000df2:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Receive_IT(&huart3, &gpsReceiveChar, 1);
 8000df4:	2201      	movs	r2, #1
 8000df6:	490c      	ldr	r1, [pc, #48]	; (8000e28 <gpsDecode+0x110>)
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <gpsDecode+0x114>)
 8000dfa:	f002 ff91 	bl	8003d20 <HAL_UART_Receive_IT>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000bd0 	.word	0x20000bd0
 8000e0c:	20000384 	.word	0x20000384
 8000e10:	20000388 	.word	0x20000388
 8000e14:	080081bc 	.word	0x080081bc
 8000e18:	08008204 	.word	0x08008204
 8000e1c:	0800820c 	.word	0x0800820c
 8000e20:	20000dac 	.word	0x20000dac
 8000e24:	20000ca8 	.word	0x20000ca8
 8000e28:	20000e03 	.word	0x20000e03
 8000e2c:	20000c14 	.word	0x20000c14

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x5c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_MspInit+0x60>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_MspInit+0x60>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_I2C_MspInit+0x70>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d123      	bne.n	8000f08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed8:	23c0      	movs	r3, #192	; 0xc0
 8000eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <HAL_I2C_MspInit+0x78>)
 8000eec:	f000 fc6e 	bl	80017cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000efa:	61d3      	str	r3, [r2, #28]
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HAL_TIM_PWM_MspInit+0x58>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10c      	bne.n	8000f48 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f46:	e010      	b.n	8000f6a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_TIM_PWM_MspInit+0x60>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10b      	bne.n	8000f6a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_TIM_PWM_MspInit+0x5c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40000400 	.word	0x40000400
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40000800 	.word	0x40000800

08000f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a2b      	ldr	r2, [pc, #172]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d130      	bne.n	8001002 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a29      	ldr	r2, [pc, #164]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a23      	ldr	r2, [pc, #140]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin;
 8000fd0:	23c0      	movs	r3, #192	; 0xc0
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481b      	ldr	r0, [pc, #108]	; (8001050 <HAL_TIM_MspPostInit+0xd0>)
 8000fe4:	f000 fbf2 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4816      	ldr	r0, [pc, #88]	; (8001054 <HAL_TIM_MspPostInit+0xd4>)
 8000ffc:	f000 fbe6 	bl	80017cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001000:	e01d      	b.n	800103e <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_TIM_MspPostInit+0xd8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d118      	bne.n	800103e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8001024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	4619      	mov	r1, r3
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <HAL_TIM_MspPostInit+0xd4>)
 800103a:	f000 fbc7 	bl	80017cc <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40000400 	.word	0x40000400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800
 8001054:	40010c00 	.word	0x40010c00
 8001058:	40000800 	.word	0x40000800

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0320 	add.w	r3, r7, #32
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <HAL_UART_MspInit+0x198>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d13a      	bne.n	80010f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a5d      	ldr	r2, [pc, #372]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a57      	ldr	r2, [pc, #348]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b55      	ldr	r3, [pc, #340]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = KVH_TX_Pin;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(KVH_TX_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4619      	mov	r1, r3
 80010c0:	484e      	ldr	r0, [pc, #312]	; (80011fc <HAL_UART_MspInit+0x1a0>)
 80010c2:	f000 fb83 	bl	80017cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KVH_RX_Pin;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(KVH_RX_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4619      	mov	r1, r3
 80010da:	4848      	ldr	r0, [pc, #288]	; (80011fc <HAL_UART_MspInit+0x1a0>)
 80010dc:	f000 fb76 	bl	80017cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2025      	movs	r0, #37	; 0x25
 80010e6:	f000 fac4 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ea:	2025      	movs	r0, #37	; 0x25
 80010ec:	f000 fadd 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f0:	e07c      	b.n	80011ec <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a42      	ldr	r2, [pc, #264]	; (8001200 <HAL_UART_MspInit+0x1a4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d138      	bne.n	800116e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	4b3e      	ldr	r3, [pc, #248]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	4a3d      	ldr	r2, [pc, #244]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	61d3      	str	r3, [r2, #28]
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 800112c:	2304      	movs	r3, #4
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4619      	mov	r1, r3
 800113e:	482f      	ldr	r0, [pc, #188]	; (80011fc <HAL_UART_MspInit+0x1a0>)
 8001140:	f000 fb44 	bl	80017cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	4619      	mov	r1, r3
 8001156:	4829      	ldr	r0, [pc, #164]	; (80011fc <HAL_UART_MspInit+0x1a0>)
 8001158:	f000 fb38 	bl	80017cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2026      	movs	r0, #38	; 0x26
 8001162:	f000 fa86 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001166:	2026      	movs	r0, #38	; 0x26
 8001168:	f000 fa9f 	bl	80016aa <HAL_NVIC_EnableIRQ>
}
 800116c:	e03e      	b.n	80011ec <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_UART_MspInit+0x1a8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d139      	bne.n	80011ec <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_UART_MspInit+0x19c>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <HAL_UART_MspInit+0x1ac>)
 80011be:	f000 fb05 	bl	80017cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80011c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <HAL_UART_MspInit+0x1ac>)
 80011d8:	f000 faf8 	bl	80017cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2027      	movs	r0, #39	; 0x27
 80011e2:	f000 fa46 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e6:	2027      	movs	r0, #39	; 0x27
 80011e8:	f000 fa5f 	bl	80016aa <HAL_NVIC_EnableIRQ>
}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40004400 	.word	0x40004400
 8001204:	40004800 	.word	0x40004800
 8001208:	40010c00 	.word	0x40010c00

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <HardFault_Handler+0x4>

0800121e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <BusFault_Handler+0x4>

0800122a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f8f6 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001266:	f000 fe52 	bl	8001f0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20001adc 	.word	0x20001adc

08001274 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USART1_IRQHandler+0x10>)
 800127a:	f002 fda5 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000dbc 	.word	0x20000dbc

08001288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
//	static int counter = 0;
//	dataFromLidar.len = 500;
//	uint8_t byte;
//	HAL_UART_Receive(&huart2, &byte, 1, 1000);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <USART2_IRQHandler+0x10>)
 800128e:	f002 fd9b 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000e04 	.word	0x20000e04

0800129c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART3_IRQHandler+0x10>)
 80012a2:	f002 fd91 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000c14 	.word	0x20000c14

080012b0 <_sbrk>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x50>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x16>
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <_sbrk+0x50>)
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <_sbrk+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <_sbrk+0x50>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <_sbrk+0x50>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	466a      	mov	r2, sp
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d907      	bls.n	80012ea <_sbrk+0x3a>
 80012da:	f006 fa1f 	bl	800771c <__errno>
 80012de:	4602      	mov	r2, r0
 80012e0:	230c      	movs	r3, #12
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	e006      	b.n	80012f8 <_sbrk+0x48>
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <_sbrk+0x50>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a03      	ldr	r2, [pc, #12]	; (8001300 <_sbrk+0x50>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000039c 	.word	0x2000039c
 8001304:	20001d50 	.word	0x20001d50

08001308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <SystemInit+0x5c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <SystemInit+0x5c>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <SystemInit+0x5c>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4911      	ldr	r1, [pc, #68]	; (8001364 <SystemInit+0x5c>)
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <SystemInit+0x60>)
 8001320:	4013      	ands	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <SystemInit+0x5c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <SystemInit+0x5c>)
 800132a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <SystemInit+0x5c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <SystemInit+0x5c>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SystemInit+0x5c>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <SystemInit+0x5c>)
 8001346:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800134a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SystemInit+0x5c>)
 800134e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001352:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <SystemInit+0x64>)
 8001356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135a:	609a      	str	r2, [r3, #8]
#endif 
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000
 8001368:	f8ff0000 	.word	0xf8ff0000
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <Reset_Handler>:
 8001370:	2100      	movs	r1, #0
 8001372:	e003      	b.n	800137c <LoopCopyDataInit>

08001374 <CopyDataInit>:
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <LoopFillZerobss+0x14>)
 8001376:	585b      	ldr	r3, [r3, r1]
 8001378:	5043      	str	r3, [r0, r1]
 800137a:	3104      	adds	r1, #4

0800137c <LoopCopyDataInit>:
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <LoopFillZerobss+0x18>)
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <LoopFillZerobss+0x1c>)
 8001380:	1842      	adds	r2, r0, r1
 8001382:	429a      	cmp	r2, r3
 8001384:	d3f6      	bcc.n	8001374 <CopyDataInit>
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <LoopFillZerobss+0x20>)
 8001388:	e002      	b.n	8001390 <LoopFillZerobss>

0800138a <FillZerobss>:
 800138a:	2300      	movs	r3, #0
 800138c:	f842 3b04 	str.w	r3, [r2], #4

08001390 <LoopFillZerobss>:
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <LoopFillZerobss+0x24>)
 8001392:	429a      	cmp	r2, r3
 8001394:	d3f9      	bcc.n	800138a <FillZerobss>
 8001396:	f7ff ffb7 	bl	8001308 <SystemInit>
 800139a:	f006 f9c5 	bl	8007728 <__libc_init_array>
 800139e:	f7fe fffd 	bl	800039c <main>
 80013a2:	4770      	bx	lr
 80013a4:	080083d0 	.word	0x080083d0
 80013a8:	20000000 	.word	0x20000000
 80013ac:	2000034c 	.word	0x2000034c
 80013b0:	2000034c 	.word	0x2000034c
 80013b4:	20001d4c 	.word	0x20001d4c

080013b8 <ADC1_2_IRQHandler>:
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f945 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fd30 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f95d 	bl	80016c6 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f000 f925 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000008 	.word	0x20000008
 8001468:	20000e44 	.word	0x20000e44

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000e44 	.word	0x20000e44

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_Delay+0x40>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000008 	.word	0x20000008

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <__NVIC_EnableIRQ+0x34>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800163c:	f7ff ff90 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff2d 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff42 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff90 	bl	80015b4 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5f 	bl	8001560 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff35 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d005      	beq.n	8001702 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2204      	movs	r2, #4
 80016fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e051      	b.n	80017a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 020e 	bic.w	r2, r2, #14
 8001710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_DMA_Abort_IT+0xd0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d029      	beq.n	8001780 <HAL_DMA_Abort_IT+0xa0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <HAL_DMA_Abort_IT+0xd4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d022      	beq.n	800177c <HAL_DMA_Abort_IT+0x9c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <HAL_DMA_Abort_IT+0xd8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d01a      	beq.n	8001776 <HAL_DMA_Abort_IT+0x96>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_DMA_Abort_IT+0xdc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d012      	beq.n	8001770 <HAL_DMA_Abort_IT+0x90>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_DMA_Abort_IT+0xe0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00a      	beq.n	800176a <HAL_DMA_Abort_IT+0x8a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_DMA_Abort_IT+0xe4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d102      	bne.n	8001764 <HAL_DMA_Abort_IT+0x84>
 800175e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001762:	e00e      	b.n	8001782 <HAL_DMA_Abort_IT+0xa2>
 8001764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001768:	e00b      	b.n	8001782 <HAL_DMA_Abort_IT+0xa2>
 800176a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176e:	e008      	b.n	8001782 <HAL_DMA_Abort_IT+0xa2>
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	e005      	b.n	8001782 <HAL_DMA_Abort_IT+0xa2>
 8001776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800177a:	e002      	b.n	8001782 <HAL_DMA_Abort_IT+0xa2>
 800177c:	2310      	movs	r3, #16
 800177e:	e000      	b.n	8001782 <HAL_DMA_Abort_IT+0xa2>
 8001780:	2301      	movs	r3, #1
 8001782:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_DMA_Abort_IT+0xe8>)
 8001784:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	4798      	blx	r3
    } 
  }
  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020008 	.word	0x40020008
 80017b4:	4002001c 	.word	0x4002001c
 80017b8:	40020030 	.word	0x40020030
 80017bc:	40020044 	.word	0x40020044
 80017c0:	40020058 	.word	0x40020058
 80017c4:	4002006c 	.word	0x4002006c
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e127      	b.n	8001a30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e0:	2201      	movs	r2, #1
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8116 	bne.w	8001a2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b12      	cmp	r3, #18
 8001804:	d034      	beq.n	8001870 <HAL_GPIO_Init+0xa4>
 8001806:	2b12      	cmp	r3, #18
 8001808:	d80d      	bhi.n	8001826 <HAL_GPIO_Init+0x5a>
 800180a:	2b02      	cmp	r3, #2
 800180c:	d02b      	beq.n	8001866 <HAL_GPIO_Init+0x9a>
 800180e:	2b02      	cmp	r3, #2
 8001810:	d804      	bhi.n	800181c <HAL_GPIO_Init+0x50>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d031      	beq.n	800187a <HAL_GPIO_Init+0xae>
 8001816:	2b01      	cmp	r3, #1
 8001818:	d01c      	beq.n	8001854 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800181a:	e048      	b.n	80018ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800181c:	2b03      	cmp	r3, #3
 800181e:	d043      	beq.n	80018a8 <HAL_GPIO_Init+0xdc>
 8001820:	2b11      	cmp	r3, #17
 8001822:	d01b      	beq.n	800185c <HAL_GPIO_Init+0x90>
          break;
 8001824:	e043      	b.n	80018ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001826:	4a89      	ldr	r2, [pc, #548]	; (8001a4c <HAL_GPIO_Init+0x280>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d026      	beq.n	800187a <HAL_GPIO_Init+0xae>
 800182c:	4a87      	ldr	r2, [pc, #540]	; (8001a4c <HAL_GPIO_Init+0x280>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d806      	bhi.n	8001840 <HAL_GPIO_Init+0x74>
 8001832:	4a87      	ldr	r2, [pc, #540]	; (8001a50 <HAL_GPIO_Init+0x284>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d020      	beq.n	800187a <HAL_GPIO_Init+0xae>
 8001838:	4a86      	ldr	r2, [pc, #536]	; (8001a54 <HAL_GPIO_Init+0x288>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01d      	beq.n	800187a <HAL_GPIO_Init+0xae>
          break;
 800183e:	e036      	b.n	80018ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001840:	4a85      	ldr	r2, [pc, #532]	; (8001a58 <HAL_GPIO_Init+0x28c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d019      	beq.n	800187a <HAL_GPIO_Init+0xae>
 8001846:	4a85      	ldr	r2, [pc, #532]	; (8001a5c <HAL_GPIO_Init+0x290>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d016      	beq.n	800187a <HAL_GPIO_Init+0xae>
 800184c:	4a84      	ldr	r2, [pc, #528]	; (8001a60 <HAL_GPIO_Init+0x294>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0xae>
          break;
 8001852:	e02c      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e028      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	3304      	adds	r3, #4
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e023      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	3308      	adds	r3, #8
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e01e      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	330c      	adds	r3, #12
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e019      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001882:	2304      	movs	r3, #4
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e012      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	611a      	str	r2, [r3, #16]
          break;
 800189a:	e008      	b.n	80018ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800189c:	2308      	movs	r3, #8
 800189e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	615a      	str	r2, [r3, #20]
          break;
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2bff      	cmp	r3, #255	; 0xff
 80018b2:	d801      	bhi.n	80018b8 <HAL_GPIO_Init+0xec>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	e001      	b.n	80018bc <HAL_GPIO_Init+0xf0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d802      	bhi.n	80018ca <HAL_GPIO_Init+0xfe>
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	e002      	b.n	80018d0 <HAL_GPIO_Init+0x104>
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	3b08      	subs	r3, #8
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	210f      	movs	r1, #15
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	401a      	ands	r2, r3
 80018e2:	6a39      	ldr	r1, [r7, #32]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	431a      	orrs	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8096 	beq.w	8001a2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fe:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_GPIO_Init+0x298>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_GPIO_Init+0x298>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b56      	ldr	r3, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x298>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001916:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <HAL_GPIO_Init+0x29c>)
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4b      	ldr	r2, [pc, #300]	; (8001a6c <HAL_GPIO_Init+0x2a0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x19e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4a      	ldr	r2, [pc, #296]	; (8001a70 <HAL_GPIO_Init+0x2a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x19a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <HAL_GPIO_Init+0x2a8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x196>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2ac>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x192>
 800195a:	2303      	movs	r3, #3
 800195c:	e006      	b.n	800196c <HAL_GPIO_Init+0x1a0>
 800195e:	2304      	movs	r3, #4
 8001960:	e004      	b.n	800196c <HAL_GPIO_Init+0x1a0>
 8001962:	2302      	movs	r3, #2
 8001964:	e002      	b.n	800196c <HAL_GPIO_Init+0x1a0>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_GPIO_Init+0x1a0>
 800196a:	2300      	movs	r3, #0
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	f002 0203 	and.w	r2, r2, #3
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	4093      	lsls	r3, r2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197c:	493a      	ldr	r1, [pc, #232]	; (8001a68 <HAL_GPIO_Init+0x29c>)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4938      	ldr	r1, [pc, #224]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4933      	ldr	r1, [pc, #204]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d006      	beq.n	80019cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	492e      	ldr	r1, [pc, #184]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
 80019ca:	e006      	b.n	80019da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4929      	ldr	r1, [pc, #164]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	4924      	ldr	r1, [pc, #144]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	491f      	ldr	r1, [pc, #124]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d006      	beq.n	8001a1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	491a      	ldr	r1, [pc, #104]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]
 8001a1a:	e006      	b.n	8001a2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f aed0 	bne.w	80017e0 <HAL_GPIO_Init+0x14>
  }
}
 8001a40:	bf00      	nop
 8001a42:	372c      	adds	r7, #44	; 0x2c
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10110000 	.word	0x10110000
 8001a54:	10120000 	.word	0x10120000
 8001a58:	10310000 	.word	0x10310000
 8001a5c:	10320000 	.word	0x10320000
 8001a60:	10220000 	.word	0x10220000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40011400 	.word	0x40011400
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a9c:	e003      	b.n	8001aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e10f      	b.n	8001ce2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff f9e2 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2224      	movs	r2, #36	; 0x24
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af4:	f001 fbbc 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a7b      	ldr	r2, [pc, #492]	; (8001cec <HAL_I2C_Init+0x23c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d807      	bhi.n	8001b14 <HAL_I2C_Init+0x64>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_I2C_Init+0x240>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e006      	b.n	8001b22 <HAL_I2C_Init+0x72>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_I2C_Init+0x244>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0db      	b.n	8001ce2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_I2C_Init+0x248>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a64      	ldr	r2, [pc, #400]	; (8001cec <HAL_I2C_Init+0x23c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d802      	bhi.n	8001b64 <HAL_I2C_Init+0xb4>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3301      	adds	r3, #1
 8001b62:	e009      	b.n	8001b78 <HAL_I2C_Init+0xc8>
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_I2C_Init+0x24c>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	3301      	adds	r3, #1
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4956      	ldr	r1, [pc, #344]	; (8001cec <HAL_I2C_Init+0x23c>)
 8001b94:	428b      	cmp	r3, r1
 8001b96:	d80d      	bhi.n	8001bb4 <HAL_I2C_Init+0x104>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e59      	subs	r1, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	bf38      	it	cc
 8001bb0:	2304      	movcc	r3, #4
 8001bb2:	e04f      	b.n	8001c54 <HAL_I2C_Init+0x1a4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <HAL_I2C_Init+0x130>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e012      	b.n	8001c06 <HAL_I2C_Init+0x156>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1e58      	subs	r0, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	0099      	lsls	r1, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Init+0x15e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e022      	b.n	8001c54 <HAL_I2C_Init+0x1a4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10e      	bne.n	8001c34 <HAL_I2C_Init+0x184>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e58      	subs	r0, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	440b      	add	r3, r1
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	e00f      	b.n	8001c54 <HAL_I2C_Init+0x1a4>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e58      	subs	r0, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	0099      	lsls	r1, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	6809      	ldr	r1, [r1, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6911      	ldr	r1, [r2, #16]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68d2      	ldr	r2, [r2, #12]
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	001e847f 	.word	0x001e847f
 8001cf4:	003d08ff 	.word	0x003d08ff
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af06      	add	r7, sp, #24
 8001d06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0d3      	b.n	8001eba <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f005 fa5a 	bl	80071e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 fbbe 	bl	80044ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	687e      	ldr	r6, [r7, #4]
 8001d46:	466d      	mov	r5, sp
 8001d48:	f106 0410 	add.w	r4, r6, #16
 8001d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	602b      	str	r3, [r5, #0]
 8001d54:	1d33      	adds	r3, r6, #4
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f002 fb87 	bl	800446c <USB_CoreInit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0a4      	b.n	8001eba <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fbbb 	bl	80044f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e035      	b.n	8001dee <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	015b      	lsls	r3, r3, #5
 8001d88:	4413      	add	r3, r2
 8001d8a:	3329      	adds	r3, #41	; 0x29
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	4413      	add	r3, r2
 8001d98:	3328      	adds	r3, #40	; 0x28
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	b291      	uxth	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	015b      	lsls	r3, r3, #5
 8001da8:	4413      	add	r3, r2
 8001daa:	3336      	adds	r3, #54	; 0x36
 8001dac:	460a      	mov	r2, r1
 8001dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	015b      	lsls	r3, r3, #5
 8001db6:	4413      	add	r3, r2
 8001db8:	332b      	adds	r3, #43	; 0x2b
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	015b      	lsls	r3, r3, #5
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3338      	adds	r3, #56	; 0x38
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	4413      	add	r3, r2
 8001dd4:	333c      	adds	r3, #60	; 0x3c
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	3302      	adds	r3, #2
 8001de0:	015b      	lsls	r3, r3, #5
 8001de2:	4413      	add	r3, r2
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	3301      	adds	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d3c4      	bcc.n	8001d82 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e031      	b.n	8001e62 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	015b      	lsls	r3, r3, #5
 8001e04:	4413      	add	r3, r2
 8001e06:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	015b      	lsls	r3, r3, #5
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	015b      	lsls	r3, r3, #5
 8001e24:	4413      	add	r3, r2
 8001e26:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	015b      	lsls	r3, r3, #5
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	015b      	lsls	r3, r3, #5
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	330a      	adds	r3, #10
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	4413      	add	r3, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d3c8      	bcc.n	8001dfe <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	687e      	ldr	r6, [r7, #4]
 8001e74:	466d      	mov	r5, sp
 8001e76:	f106 0410 	add.w	r4, r6, #16
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	1d33      	adds	r3, r6, #4
 8001e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f002 fb3f 	bl	800450a <USB_DevInit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00d      	b.n	8001eba <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fb7d 	bl	80055b2 <USB_DevDisconnect>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_Start+0x16>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e016      	b.n	8001f06 <HAL_PCD_Start+0x44>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f005 fbe3 	bl	80076ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f003 fb56 	bl	800559e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fac8 	bl	800448c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fb53 	bl	80055c6 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 faf3 	bl	8002518 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fb45 	bl	80055c6 <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f46:	d112      	bne.n	8001f6e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f005 f9b2 	bl	80072ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8de 	bl	800212a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fb27 	bl	80055c6 <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f82:	d10b      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fb10 	bl	80055c6 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb0:	d10b      	bne.n	8001fca <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 faf9 	bl	80055c6 <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fde:	d126      	bne.n	800202e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0208 	bic.w	r2, r2, #8
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f005 f993 	bl	800733c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002028:	b292      	uxth	r2, r2
 800202a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fac7 	bl	80055c6 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002042:	d13d      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0208 	orr.w	r2, r2, #8
 8002056:	b292      	uxth	r2, r2
 8002058:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002064:	b29a      	uxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206e:	b292      	uxth	r2, r2
 8002070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0204 	orr.w	r2, r2, #4
 8002086:	b292      	uxth	r2, r2
 8002088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fa98 	bl	80055c6 <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d10b      	bne.n	80020ba <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020b4:	b292      	uxth	r2, r2
 80020b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f005 f924 	bl	8007308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fa7e 	bl	80055c6 <USB_ReadInterrupts>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d10e      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e8:	b292      	uxth	r2, r2
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f005 f8dd 	bl	80072ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 fa64 	bl	80055c6 <USB_ReadInterrupts>
 80020fe:	4603      	mov	r3, r0
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002108:	d10b      	bne.n	8002122 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800211c:	b292      	uxth	r2, r2
 800211e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_PCD_SetAddress+0x1a>
 8002140:	2302      	movs	r3, #2
 8002142:	e013      	b.n	800216c <HAL_PCD_SetAddress+0x42>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fa0b 	bl	8005578 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4603      	mov	r3, r0
 8002184:	70fb      	strb	r3, [r7, #3]
 8002186:	460b      	mov	r3, r1
 8002188:	803b      	strh	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002192:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	da0b      	bge.n	80021b2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	015b      	lsls	r3, r3, #5
 80021a2:	3328      	adds	r3, #40	; 0x28
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	705a      	strb	r2, [r3, #1]
 80021b0:	e00b      	b.n	80021ca <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	015b      	lsls	r3, r3, #5
 80021ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021d6:	883a      	ldrh	r2, [r7, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	78ba      	ldrb	r2, [r7, #2]
 80021e0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021f4:	78bb      	ldrb	r3, [r7, #2]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d102      	bne.n	8002200 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002206:	2b01      	cmp	r3, #1
 8002208:	d101      	bne.n	800220e <HAL_PCD_EP_Open+0x9a>
 800220a:	2302      	movs	r3, #2
 800220c:	e00e      	b.n	800222c <HAL_PCD_EP_Open+0xb8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 f999 	bl	8004554 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800222a:	7afb      	ldrb	r3, [r7, #11]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002244:	2b00      	cmp	r3, #0
 8002246:	da0b      	bge.n	8002260 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	015b      	lsls	r3, r3, #5
 8002250:	3328      	adds	r3, #40	; 0x28
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	705a      	strb	r2, [r3, #1]
 800225e:	e00b      	b.n	8002278 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_PCD_EP_Close+0x5e>
 800228e:	2302      	movs	r3, #2
 8002290:	e00e      	b.n	80022b0 <HAL_PCD_EP_Close+0x7c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fc45 	bl	8004b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	460b      	mov	r3, r1
 80022c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	015b      	lsls	r3, r3, #5
 80022d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022fe:	7afb      	ldrb	r3, [r7, #11]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	2b00      	cmp	r3, #0
 8002306:	d106      	bne.n	8002316 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6979      	ldr	r1, [r7, #20]
 800230e:	4618      	mov	r0, r3
 8002310:	f002 fda4 	bl	8004e5c <USB_EPStartXfer>
 8002314:	e005      	b.n	8002322 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6979      	ldr	r1, [r7, #20]
 800231c:	4618      	mov	r0, r3
 800231e:	f002 fd9d 	bl	8004e5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	330a      	adds	r3, #10
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	681b      	ldr	r3, [r3, #0]
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	460b      	mov	r3, r1
 8002362:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002364:	7afb      	ldrb	r3, [r7, #11]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	3328      	adds	r3, #40	; 0x28
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2201      	movs	r2, #1
 800238a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	b2da      	uxtb	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fd57 	bl	8004e5c <USB_EPStartXfer>
 80023ae:	e005      	b.n	80023bc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fd50 	bl	8004e5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	460b      	mov	r3, r1
 80023d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 0207 	and.w	r2, r3, #7
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d901      	bls.n	80023e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e046      	b.n	8002472 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	da0b      	bge.n	8002404 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	3328      	adds	r3, #40	; 0x28
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	705a      	strb	r2, [r3, #1]
 8002402:	e009      	b.n	8002418 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	015b      	lsls	r3, r3, #5
 8002408:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_PCD_EP_SetStall+0x72>
 8002434:	2302      	movs	r3, #2
 8002436:	e01c      	b.n	8002472 <HAL_PCD_EP_SetStall+0xac>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 ffc0 	bl	80053cc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f003 f8be 	bl	80055e4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 020f 	and.w	r2, r3, #15
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	d901      	bls.n	8002498 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e03a      	b.n	800250e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800249c:	2b00      	cmp	r3, #0
 800249e:	da0b      	bge.n	80024b8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	015b      	lsls	r3, r3, #5
 80024a8:	3328      	adds	r3, #40	; 0x28
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	705a      	strb	r2, [r3, #1]
 80024b6:	e00b      	b.n	80024d0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	015b      	lsls	r3, r3, #5
 80024c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_PCD_EP_ClrStall+0x76>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e00e      	b.n	800250e <HAL_PCD_EP_ClrStall+0x94>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 ffa6 	bl	8005450 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002520:	e282      	b.n	8002a28 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800252a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002536:	7d7b      	ldrb	r3, [r7, #21]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8142 	bne.w	80027c2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800253e:	8afb      	ldrh	r3, [r7, #22]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d151      	bne.n	80025ec <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002558:	b29c      	uxth	r4, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002566:	b29b      	uxth	r3, r3
 8002568:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3328      	adds	r3, #40	; 0x28
 800256e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	3302      	adds	r3, #2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	441a      	add	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f004 fe67 	bl	8007280 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8234 	beq.w	8002a28 <PCD_EP_ISR_Handler+0x510>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 822f 	bne.w	8002a28 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	b292      	uxth	r2, r2
 80025de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025ea:	e21d      	b.n	8002a28 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025f2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025fc:	8a7b      	ldrh	r3, [r7, #18]
 80025fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002602:	2b00      	cmp	r3, #0
 8002604:	d033      	beq.n	800266e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	3306      	adds	r3, #6
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002644:	b29b      	uxth	r3, r3
 8002646:	f003 f81c 	bl	8005682 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29a      	uxth	r2, r3
 8002652:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002656:	4013      	ands	r3, r2
 8002658:	b29c      	uxth	r4, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002662:	b292      	uxth	r2, r2
 8002664:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f004 fde0 	bl	800722c <HAL_PCD_SetupStageCallback>
 800266c:	e1dc      	b.n	8002a28 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800266e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f280 81d8 	bge.w	8002a28 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002684:	4013      	ands	r3, r2
 8002686:	b29c      	uxth	r4, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002690:	b292      	uxth	r2, r2
 8002692:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269c:	b29b      	uxth	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	3306      	adds	r3, #6
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d019      	beq.n	80026fc <PCD_EP_ISR_Handler+0x1e4>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f002 ffce 	bl	8005682 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	441a      	add	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026f4:	2100      	movs	r1, #0
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f004 fdaa 	bl	8007250 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461c      	mov	r4, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	441c      	add	r4, r3
 800270e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002712:	461c      	mov	r4, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10e      	bne.n	800273a <PCD_EP_ISR_Handler+0x222>
 800271c:	8823      	ldrh	r3, [r4, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002724:	b29b      	uxth	r3, r3
 8002726:	8023      	strh	r3, [r4, #0]
 8002728:	8823      	ldrh	r3, [r4, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002734:	b29b      	uxth	r3, r3
 8002736:	8023      	strh	r3, [r4, #0]
 8002738:	e02d      	b.n	8002796 <PCD_EP_ISR_Handler+0x27e>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b3e      	cmp	r3, #62	; 0x3e
 8002740:	d812      	bhi.n	8002768 <PCD_EP_ISR_Handler+0x250>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <PCD_EP_ISR_Handler+0x244>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	3301      	adds	r3, #1
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	b29b      	uxth	r3, r3
 8002760:	029b      	lsls	r3, r3, #10
 8002762:	b29b      	uxth	r3, r3
 8002764:	8023      	strh	r3, [r4, #0]
 8002766:	e016      	b.n	8002796 <PCD_EP_ISR_Handler+0x27e>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b00      	cmp	r3, #0
 800277a:	d102      	bne.n	8002782 <PCD_EP_ISR_Handler+0x26a>
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	3b01      	subs	r3, #1
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	b29b      	uxth	r3, r3
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	b29b      	uxth	r3, r3
 800278a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002792:	b29b      	uxth	r3, r3
 8002794:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	b29c      	uxth	r4, r3
 80027a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80027ac:	b29c      	uxth	r4, r3
 80027ae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80027b2:	b29c      	uxth	r4, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4ba2      	ldr	r3, [pc, #648]	; (8002a44 <PCD_EP_ISR_Handler+0x52c>)
 80027ba:	4323      	orrs	r3, r4
 80027bc:	b29b      	uxth	r3, r3
 80027be:	8013      	strh	r3, [r2, #0]
 80027c0:	e132      	b.n	8002a28 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	7d7b      	ldrb	r3, [r7, #21]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f280 80d1 	bge.w	800297e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	7d7b      	ldrb	r3, [r7, #21]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027f0:	4013      	ands	r3, r2
 80027f2:	b29c      	uxth	r4, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	7d7b      	ldrb	r3, [r7, #21]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002804:	b292      	uxth	r2, r2
 8002806:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002808:	7d7b      	ldrb	r3, [r7, #21]
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	7b1b      	ldrb	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d121      	bne.n	8002862 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	3306      	adds	r3, #6
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002846:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d072      	beq.n	8002934 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6959      	ldr	r1, [r3, #20]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	88da      	ldrh	r2, [r3, #6]
 800285a:	8bfb      	ldrh	r3, [r7, #30]
 800285c:	f002 ff11 	bl	8005682 <USB_ReadPMA>
 8002860:	e068      	b.n	8002934 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d021      	beq.n	80028c0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	3302      	adds	r3, #2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80028a6:	8bfb      	ldrh	r3, [r7, #30]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02a      	beq.n	8002902 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6959      	ldr	r1, [r3, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	891a      	ldrh	r2, [r3, #8]
 80028b8:	8bfb      	ldrh	r3, [r7, #30]
 80028ba:	f002 fee2 	bl	8005682 <USB_ReadPMA>
 80028be:	e020      	b.n	8002902 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	3306      	adds	r3, #6
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80028ea:	8bfb      	ldrh	r3, [r7, #30]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6959      	ldr	r1, [r3, #20]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	895a      	ldrh	r2, [r3, #10]
 80028fc:	8bfb      	ldrh	r3, [r7, #30]
 80028fe:	f002 fec0 	bl	8005682 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	b29c      	uxth	r4, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <PCD_EP_ISR_Handler+0x530>)
 800292e:	4323      	orrs	r3, r4
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	8bfb      	ldrh	r3, [r7, #30]
 800293a:	441a      	add	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	8bfb      	ldrh	r3, [r7, #30]
 8002946:	441a      	add	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <PCD_EP_ISR_Handler+0x446>
 8002954:	8bfa      	ldrh	r2, [r7, #30]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d206      	bcs.n	800296c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f004 fc73 	bl	8007250 <HAL_PCD_DataOutStageCallback>
 800296a:	e008      	b.n	800297e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	7819      	ldrb	r1, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fc9d 	bl	80022b8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800297e:	8a7b      	ldrh	r3, [r7, #18]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d04f      	beq.n	8002a28 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002988:	7d7b      	ldrb	r3, [r7, #21]
 800298a:	015b      	lsls	r3, r3, #5
 800298c:	3328      	adds	r3, #40	; 0x28
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	7d7b      	ldrb	r3, [r7, #21]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ac:	b29c      	uxth	r4, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	7d7b      	ldrb	r3, [r7, #21]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80029be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	3302      	adds	r3, #2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	441a      	add	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f004 fc36 	bl	8007280 <HAL_PCD_DataInStageCallback>
 8002a14:	e008      	b.n	8002a28 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	7819      	ldrb	r1, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fc96 	bl	8002354 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f6ff ad74 	blt.w	8002522 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3724      	adds	r7, #36	; 0x24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	ffff8080 	.word	0xffff8080
 8002a48:	ffff80c0 	.word	0xffff80c0

08002a4c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	3328      	adds	r3, #40	; 0x28
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e006      	b.n	8002a8a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a7c:	897b      	ldrh	r3, [r7, #10]
 8002a7e:	015b      	lsls	r3, r3, #5
 8002a80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a8a:	893b      	ldrh	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	80da      	strh	r2, [r3, #6]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	371c      	adds	r7, #28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e26c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8087 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae4:	4b92      	ldr	r3, [pc, #584]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af0:	4b8f      	ldr	r3, [pc, #572]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d112      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5e>
 8002afc:	4b8c      	ldr	r3, [pc, #560]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d10b      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x12c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d168      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e246      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x76>
 8002b2c:	4b80      	ldr	r3, [pc, #512]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a7f      	ldr	r2, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x98>
 8002b42:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7a      	ldr	r2, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a77      	ldr	r2, [pc, #476]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0xbc>
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a71      	ldr	r2, [pc, #452]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6e      	ldr	r2, [pc, #440]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b80:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a67      	ldr	r2, [pc, #412]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fc64 	bl	800146c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fc60 	bl	800146c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e1fa      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xe4>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fc50 	bl	800146c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fc4c 	bl	800146c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1e6      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x10c>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x18c>
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x176>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1ba      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4939      	ldr	r1, [pc, #228]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e03a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fc05 	bl	800146c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fe fc01 	bl	800146c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e19b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4927      	ldr	r1, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fbe4 	bl	800146c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca8:	f7fe fbe0 	bl	800146c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e17a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d03a      	beq.n	8002d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fbc4 	bl	800146c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fbc0 	bl	800146c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e15a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 fada 	bl	80032c0 <RCC_Delay>
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7fe fbaa 	bl	800146c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe fba6 	bl	800146c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e140      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	42420000 	.word	0x42420000
 8002d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	4b9e      	ldr	r3, [pc, #632]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e9      	bne.n	8002d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a6 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b97      	ldr	r3, [pc, #604]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b94      	ldr	r3, [pc, #592]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a93      	ldr	r2, [pc, #588]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b8e      	ldr	r3, [pc, #568]	; (8002fbc <HAL_RCC_OscConfig+0x4f8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b8b      	ldr	r3, [pc, #556]	; (8002fbc <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a8a      	ldr	r2, [pc, #552]	; (8002fbc <HAL_RCC_OscConfig+0x4f8>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fb67 	bl	800146c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7fe fb63 	bl	800146c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	; 0x64
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0fd      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	4b81      	ldr	r3, [pc, #516]	; (8002fbc <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x312>
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a7a      	ldr	r2, [pc, #488]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	e02d      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x334>
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a72      	ldr	r2, [pc, #456]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	e01c      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x356>
 8002e00:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a6c      	ldr	r2, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002e1a:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a66      	ldr	r2, [pc, #408]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a63      	ldr	r2, [pc, #396]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fb17 	bl	800146c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe fb13 	bl	800146c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0ab      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ee      	beq.n	8002e42 <HAL_RCC_OscConfig+0x37e>
 8002e64:	e014      	b.n	8002e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe fb01 	bl	800146c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fafd 	bl	800146c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e095      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ee      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a47      	ldr	r2, [pc, #284]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 8081 	beq.w	8002fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eac:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d061      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d146      	bne.n	8002f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec0:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_OscConfig+0x4fc>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fad1 	bl	800146c <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe facd 	bl	800146c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e067      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef4:	d108      	bne.n	8002f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	492d      	ldr	r1, [pc, #180]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a19      	ldr	r1, [r3, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	4927      	ldr	r1, [pc, #156]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f20:	4b27      	ldr	r3, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x4fc>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe faa1 	bl	800146c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe fa9d 	bl	800146c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e037      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x46a>
 8002f4c:	e02f      	b.n	8002fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <HAL_RCC_OscConfig+0x4fc>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe fa8a 	bl	800146c <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7fe fa86 	bl	800146c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e020      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x498>
 8002f7a:	e018      	b.n	8002fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e013      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	42420060 	.word	0x42420060

08002fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0d0      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d910      	bls.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	4965      	ldr	r1, [pc, #404]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800302a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d040      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b41      	ldr	r3, [pc, #260]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e073      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3d      	ldr	r3, [pc, #244]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06b      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4936      	ldr	r1, [pc, #216]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe f9da 	bl	800146c <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe f9d6 	bl	800146c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e053      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b27      	ldr	r3, [pc, #156]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d210      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4922      	ldr	r1, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4601      	mov	r1, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	fa21 f303 	lsr.w	r3, r1, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1cc>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1d0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f938 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40022000 	.word	0x40022000
 8003188:	40021000 	.word	0x40021000
 800318c:	08008270 	.word	0x08008270
 8003190:	20000000 	.word	0x20000000
 8003194:	20000004 	.word	0x20000004

08003198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	b490      	push	{r4, r7}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031a0:	1d3c      	adds	r4, r7, #4
 80031a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_GetSysClockFreq+0xb4>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d003      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x46>
 80031d6:	e02d      	b.n	8003234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031da:	623b      	str	r3, [r7, #32]
      break;
 80031dc:	e02d      	b.n	800323a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	0c9b      	lsrs	r3, r3, #18
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031ea:	4413      	add	r3, r2
 80031ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c5b      	lsrs	r3, r3, #17
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800320a:	4413      	add	r3, r2
 800320c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003210:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003216:	fb02 f203 	mul.w	r2, r2, r3
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	e004      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	623b      	str	r3, [r7, #32]
      break;
 8003232:	e002      	b.n	800323a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003236:	623b      	str	r3, [r7, #32]
      break;
 8003238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323a:	6a3b      	ldr	r3, [r7, #32]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bc90      	pop	{r4, r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	08008214 	.word	0x08008214
 800324c:	08008224 	.word	0x08008224
 8003250:	40021000 	.word	0x40021000
 8003254:	007a1200 	.word	0x007a1200
 8003258:	003d0900 	.word	0x003d0900

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <HAL_RCC_GetHCLKFreq+0x10>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	20000000 	.word	0x20000000

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff2 	bl	800325c <HAL_RCC_GetHCLKFreq>
 8003278:	4601      	mov	r1, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4a03      	ldr	r2, [pc, #12]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	08008280 	.word	0x08008280

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffde 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a0:	4601      	mov	r1, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	0adb      	lsrs	r3, r3, #11
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4a03      	ldr	r2, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08008280 	.word	0x08008280

080032c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <RCC_Delay+0x34>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <RCC_Delay+0x38>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0a5b      	lsrs	r3, r3, #9
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	fb02 f303 	mul.w	r3, r2, r3
 80032da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032dc:	bf00      	nop
  }
  while (Delay --);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	60fa      	str	r2, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f9      	bne.n	80032dc <RCC_Delay+0x1c>
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000
 80032f8:	10624dd3 	.word	0x10624dd3

080032fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d07d      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b4c      	ldr	r3, [pc, #304]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	4a4b      	ldr	r2, [pc, #300]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	61d3      	str	r3, [r2, #28]
 8003334:	4b49      	ldr	r3, [pc, #292]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d118      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003350:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a42      	ldr	r2, [pc, #264]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335c:	f7fe f886 	bl	800146c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	e008      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fe f882 	bl	800146c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	; 0x64
 8003370:	d901      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e06d      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003382:	4b36      	ldr	r3, [pc, #216]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02e      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d027      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033b6:	4a29      	ldr	r2, [pc, #164]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d014      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe f851 	bl	800146c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe f84d 	bl	800146c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e036      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0ee      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f0:	4b1a      	ldr	r3, [pc, #104]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4917      	ldr	r1, [pc, #92]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003402:	7dfb      	ldrb	r3, [r7, #23]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003412:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	490b      	ldr	r1, [pc, #44]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800343e:	4b07      	ldr	r3, [pc, #28]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
 8003464:	42420440 	.word	0x42420440

08003468 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e01d      	b.n	80034b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fd44 	bl	8000f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 f902 	bl	80036b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fad6 	bl	8003a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a10      	ldr	r2, [pc, #64]	; (8003520 <HAL_TIM_PWM_Start+0x60>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d007      	beq.n	8003514 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00

08003524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800353a:	2302      	movs	r3, #2
 800353c:	e0b4      	b.n	80036a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	f200 809f 	bhi.w	8003694 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003591 	.word	0x08003591
 8003560:	08003695 	.word	0x08003695
 8003564:	08003695 	.word	0x08003695
 8003568:	08003695 	.word	0x08003695
 800356c:	080035d1 	.word	0x080035d1
 8003570:	08003695 	.word	0x08003695
 8003574:	08003695 	.word	0x08003695
 8003578:	08003695 	.word	0x08003695
 800357c:	08003613 	.word	0x08003613
 8003580:	08003695 	.word	0x08003695
 8003584:	08003695 	.word	0x08003695
 8003588:	08003695 	.word	0x08003695
 800358c:	08003653 	.word	0x08003653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f8ec 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
      break;
 80035ce:	e062      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f932 	bl	8003840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6999      	ldr	r1, [r3, #24]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]
      break;
 8003610:	e041      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f97b 	bl	8003914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0208 	orr.w	r2, r2, #8
 800362c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0204 	bic.w	r2, r2, #4
 800363c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69d9      	ldr	r1, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	61da      	str	r2, [r3, #28]
      break;
 8003650:	e021      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f9c5 	bl	80039e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800366c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69d9      	ldr	r1, [r3, #28]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	021a      	lsls	r2, r3, #8
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	61da      	str	r2, [r3, #28]
      break;
 8003692:	e000      	b.n	8003696 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003694:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <TIM_Base_SetConfig+0xb8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0x30>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0x30>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <TIM_Base_SetConfig+0xbc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0x30>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <TIM_Base_SetConfig+0xc0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <TIM_Base_SetConfig+0xb8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_Base_SetConfig+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d007      	beq.n	8003712 <TIM_Base_SetConfig+0x62>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <TIM_Base_SetConfig+0xbc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_Base_SetConfig+0x62>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <TIM_Base_SetConfig+0xc0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d108      	bne.n	8003724 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <TIM_Base_SetConfig+0xb8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d103      	bne.n	8003758 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	615a      	str	r2, [r3, #20]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40000400 	.word	0x40000400
 8003770:	40000800 	.word	0x40000800

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0303 	bic.w	r3, r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f023 0302 	bic.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <TIM_OC1_SetConfig+0xc8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0308 	bic.w	r3, r3, #8
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <TIM_OC1_SetConfig+0xc8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d111      	bne.n	8003816 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00

08003840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0210 	bic.w	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800386e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0320 	bic.w	r3, r3, #32
 800388a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <TIM_OC2_SetConfig+0xd0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10d      	bne.n	80038bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <TIM_OC2_SetConfig+0xd0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d113      	bne.n	80038ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40012c00 	.word	0x40012c00

08003914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800395c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	021b      	lsls	r3, r3, #8
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <TIM_OC3_SetConfig+0xd0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10d      	bne.n	800398e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800398c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <TIM_OC3_SetConfig+0xd0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d113      	bne.n	80039be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800399c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00

080039e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <TIM_OC4_SetConfig+0x98>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d109      	bne.n	8003a5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	40012c00 	.word	0x40012c00

08003a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 031f 	and.w	r3, r3, #31
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1a      	ldr	r2, [r3, #32]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a1a      	ldr	r2, [r3, #32]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e032      	b.n	8003b4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e03f      	b.n	8003be6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fa6e 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2224      	movs	r2, #36	; 0x24
 8003b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fb8d 	bl	80042b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b088      	sub	sp, #32
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 8083 	bne.w	8003d16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_UART_Transmit+0x2e>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e07b      	b.n	8003d18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Transmit+0x40>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e074      	b.n	8003d18 <HAL_UART_Transmit+0x12a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2221      	movs	r2, #33	; 0x21
 8003c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c44:	f7fd fc12 	bl	800146c <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c56:	e042      	b.n	8003cde <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6e:	d122      	bne.n	8003cb6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2200      	movs	r2, #0
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f9b2 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e046      	b.n	8003d18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	3302      	adds	r3, #2
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	e017      	b.n	8003cde <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	e013      	b.n	8003cde <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f98f 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e023      	b.n	8003d18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	60ba      	str	r2, [r7, #8]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1b7      	bne.n	8003c58 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2140      	movs	r1, #64	; 0x40
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f976 	bl	8003fe4 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e00a      	b.n	8003d18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d140      	bne.n	8003dbc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <HAL_UART_Receive_IT+0x26>
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e039      	b.n	8003dbe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_UART_Receive_IT+0x38>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e032      	b.n	8003dbe <HAL_UART_Receive_IT+0x9e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2222      	movs	r2, #34	; 0x22
 8003d7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d96:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0220 	orr.w	r2, r2, #32
 8003db6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x52>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9ce 	bl	80041b4 <UART_Receive_IT>
      return;
 8003e18:	e0cc      	b.n	8003fb4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80ab 	beq.w	8003f78 <HAL_UART_IRQHandler+0x1b0>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_UART_IRQHandler+0x70>
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80a0 	beq.w	8003f78 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_UART_IRQHandler+0x90>
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_UART_IRQHandler+0xb0>
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_UART_IRQHandler+0xd0>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_UART_IRQHandler+0xf0>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	f043 0208 	orr.w	r2, r3, #8
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d078      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <HAL_UART_IRQHandler+0x112>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f96d 	bl	80041b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d102      	bne.n	8003f02 <HAL_UART_IRQHandler+0x13a>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d031      	beq.n	8003f66 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8b8 	bl	8004078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d023      	beq.n	8003f5e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d013      	beq.n	8003f56 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <HAL_UART_IRQHandler+0x1f4>)
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fbd0 	bl	80016e0 <HAL_DMA_Abort_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f50:	4610      	mov	r0, r2
 8003f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e00e      	b.n	8003f74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f83b 	bl	8003fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00a      	b.n	8003f74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f837 	bl	8003fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e006      	b.n	8003f74 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f833 	bl	8003fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f72:	e01e      	b.n	8003fb2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	bf00      	nop
    return;
 8003f76:	e01c      	b.n	8003fb2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_UART_IRQHandler+0x1cc>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8a4 	bl	80040da <UART_Transmit_IT>
    return;
 8003f92:	e00f      	b.n	8003fb4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x1ec>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8eb 	bl	8004184 <UART_EndTransmit_IT>
    return;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003fb2:	bf00      	nop
  }
}
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	080040b3 	.word	0x080040b3

08003fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	e02c      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ffc:	d028      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d007      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x30>
 8004004:	f7fd fa32 	bl	800146c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	429a      	cmp	r2, r3
 8004012:	d21d      	bcs.n	8004050 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004022:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e00f      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d0c3      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800408e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff ff80 	bl	8003fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b21      	cmp	r3, #33	; 0x21
 80040ec:	d144      	bne.n	8004178 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d11a      	bne.n	800412e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800410c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d105      	bne.n	8004122 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	621a      	str	r2, [r3, #32]
 8004120:	e00e      	b.n	8004140 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	621a      	str	r2, [r3, #32]
 800412c:	e008      	b.n	8004140 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	1c59      	adds	r1, r3, #1
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6211      	str	r1, [r2, #32]
 8004138:	781a      	ldrb	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	4619      	mov	r1, r3
 800414e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10f      	bne.n	8004174 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff0b 	bl	8003fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b22      	cmp	r3, #34	; 0x22
 80041c6:	d171      	bne.n	80042ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d0:	d123      	bne.n	800421a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10e      	bne.n	80041fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
 80041fc:	e029      	b.n	8004252 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b29b      	uxth	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28
 8004218:	e01b      	b.n	8004252 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6858      	ldr	r0, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6291      	str	r1, [r2, #40]	; 0x28
 8004232:	b2c2      	uxtb	r2, r0
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e00c      	b.n	8004252 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	1c58      	adds	r0, r3, #1
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	6288      	str	r0, [r1, #40]	; 0x28
 800424a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29b      	uxth	r3, r3
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4619      	mov	r1, r3
 8004260:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004262:	2b00      	cmp	r3, #0
 8004264:	d120      	bne.n	80042a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0220 	bic.w	r2, r2, #32
 8004274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fc f854 	bl	800034c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e002      	b.n	80042ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042f2:	f023 030c 	bic.w	r3, r3, #12
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	68f9      	ldr	r1, [r7, #12]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a52      	ldr	r2, [pc, #328]	; (8004464 <UART_SetConfig+0x1ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d14e      	bne.n	80043be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004320:	f7fe ffba 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004324:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	4a4a      	ldr	r2, [pc, #296]	; (8004468 <UART_SetConfig+0x1b0>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	0119      	lsls	r1, r3, #4
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009a      	lsls	r2, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fbb2 f2f3 	udiv	r2, r2, r3
 800435c:	4b42      	ldr	r3, [pc, #264]	; (8004468 <UART_SetConfig+0x1b0>)
 800435e:	fba3 0302 	umull	r0, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2064      	movs	r0, #100	; 0x64
 8004366:	fb00 f303 	mul.w	r3, r0, r3
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	3332      	adds	r3, #50	; 0x32
 8004370:	4a3d      	ldr	r2, [pc, #244]	; (8004468 <UART_SetConfig+0x1b0>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437c:	4419      	add	r1, r3
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009a      	lsls	r2, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	fbb2 f2f3 	udiv	r2, r2, r3
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <UART_SetConfig+0x1b0>)
 8004396:	fba3 0302 	umull	r0, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2064      	movs	r0, #100	; 0x64
 800439e:	fb00 f303 	mul.w	r3, r0, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	3332      	adds	r3, #50	; 0x32
 80043a8:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <UART_SetConfig+0x1b0>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	440a      	add	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80043bc:	e04d      	b.n	800445a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80043be:	f7fe ff57 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 80043c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009a      	lsls	r2, r3, #2
 80043ce:	441a      	add	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	4a23      	ldr	r2, [pc, #140]	; (8004468 <UART_SetConfig+0x1b0>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	0119      	lsls	r1, r3, #4
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009a      	lsls	r2, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043fa:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <UART_SetConfig+0x1b0>)
 80043fc:	fba3 0302 	umull	r0, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2064      	movs	r0, #100	; 0x64
 8004404:	fb00 f303 	mul.w	r3, r0, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	; 0x32
 800440e:	4a16      	ldr	r2, [pc, #88]	; (8004468 <UART_SetConfig+0x1b0>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441a:	4419      	add	r1, r3
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009a      	lsls	r2, r3, #2
 8004426:	441a      	add	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <UART_SetConfig+0x1b0>)
 8004434:	fba3 0302 	umull	r0, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2064      	movs	r0, #100	; 0x64
 800443c:	fb00 f303 	mul.w	r3, r0, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <UART_SetConfig+0x1b0>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	440a      	add	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40013800 	.word	0x40013800
 8004468:	51eb851f 	.word	0x51eb851f

0800446c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800446c:	b084      	sub	sp, #16
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	f107 0014 	add.w	r0, r7, #20
 800447a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	b004      	add	sp, #16
 800448a:	4770      	bx	lr

0800448c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004494:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004498:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	89fb      	ldrh	r3, [r7, #14]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr

080044ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b085      	sub	sp, #20
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044c6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	b21a      	sxth	r2, r3
 80044d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	b21b      	sxth	r3, r3
 80044da:	4013      	ands	r3, r2
 80044dc:	b21b      	sxth	r3, r3
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800450a:	b084      	sub	sp, #16
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	f107 0014 	add.w	r0, r7, #20
 8004518:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ffa5 	bl	800448c <USB_EnableGlobalInt>

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800454e:	b004      	add	sp, #16
 8004550:	4770      	bx	lr
	...

08004554 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004554:	b490      	push	{r4, r7}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	78db      	ldrb	r3, [r3, #3]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d819      	bhi.n	80045b6 <USB_ActivateEndpoint+0x62>
 8004582:	a201      	add	r2, pc, #4	; (adr r2, 8004588 <USB_ActivateEndpoint+0x34>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004599 	.word	0x08004599
 800458c:	080045ad 	.word	0x080045ad
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045a3 	.word	0x080045a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004598:	89bb      	ldrh	r3, [r7, #12]
 800459a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800459e:	81bb      	strh	r3, [r7, #12]
      break;
 80045a0:	e00d      	b.n	80045be <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045a2:	89bb      	ldrh	r3, [r7, #12]
 80045a4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045a8:	81bb      	strh	r3, [r7, #12]
      break;
 80045aa:	e008      	b.n	80045be <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045ac:	89bb      	ldrh	r3, [r7, #12]
 80045ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b2:	81bb      	strh	r3, [r7, #12]
      break;
 80045b4:	e003      	b.n	80045be <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ba:	e000      	b.n	80045be <USB_ActivateEndpoint+0x6a>
      break;
 80045bc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	89bb      	ldrh	r3, [r7, #12]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b29c      	uxth	r4, r3
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	4b8a      	ldr	r3, [pc, #552]	; (8004834 <USB_ActivateEndpoint+0x2e0>)
 800460c:	4323      	orrs	r3, r4
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	7b1b      	ldrb	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 8112 	bne.w	8004840 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d067      	beq.n	80046f4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004624:	687c      	ldr	r4, [r7, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462c:	b29b      	uxth	r3, r3
 800462e:	441c      	add	r4, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	4423      	add	r3, r4
 8004638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463c:	461c      	mov	r4, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	88db      	ldrh	r3, [r3, #6]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	b29b      	uxth	r3, r3
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	b29b      	uxth	r3, r3
 800464a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29c      	uxth	r4, r3
 800465a:	4623      	mov	r3, r4
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d014      	beq.n	800468e <USB_ActivateEndpoint+0x13a>
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	b29b      	uxth	r3, r3
 8004672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	b29c      	uxth	r4, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <USB_ActivateEndpoint+0x2e4>)
 8004688:	4323      	orrs	r3, r4
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	78db      	ldrb	r3, [r3, #3]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d018      	beq.n	80046c8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ac:	b29c      	uxth	r4, r3
 80046ae:	f084 0320 	eor.w	r3, r4, #32
 80046b2:	b29c      	uxth	r4, r3
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <USB_ActivateEndpoint+0x2e0>)
 80046c0:	4323      	orrs	r3, r4
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	8013      	strh	r3, [r2, #0]
 80046c6:	e22b      	b.n	8004b20 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046de:	b29c      	uxth	r4, r3
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	4b52      	ldr	r3, [pc, #328]	; (8004834 <USB_ActivateEndpoint+0x2e0>)
 80046ec:	4323      	orrs	r3, r4
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]
 80046f2:	e215      	b.n	8004b20 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046f4:	687c      	ldr	r4, [r7, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	441c      	add	r4, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	4423      	add	r3, r4
 8004708:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800470c:	461c      	mov	r4, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	88db      	ldrh	r3, [r3, #6]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	b29b      	uxth	r3, r3
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	b29b      	uxth	r3, r3
 800471a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800471c:	687c      	ldr	r4, [r7, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004724:	b29b      	uxth	r3, r3
 8004726:	441c      	add	r4, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	4423      	add	r3, r4
 8004730:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004734:	461c      	mov	r4, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10e      	bne.n	800475c <USB_ActivateEndpoint+0x208>
 800473e:	8823      	ldrh	r3, [r4, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004746:	b29b      	uxth	r3, r3
 8004748:	8023      	strh	r3, [r4, #0]
 800474a:	8823      	ldrh	r3, [r4, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004756:	b29b      	uxth	r3, r3
 8004758:	8023      	strh	r3, [r4, #0]
 800475a:	e02d      	b.n	80047b8 <USB_ActivateEndpoint+0x264>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b3e      	cmp	r3, #62	; 0x3e
 8004762:	d812      	bhi.n	800478a <USB_ActivateEndpoint+0x236>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	085b      	lsrs	r3, r3, #1
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <USB_ActivateEndpoint+0x22a>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	3301      	adds	r3, #1
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	b29b      	uxth	r3, r3
 8004782:	029b      	lsls	r3, r3, #10
 8004784:	b29b      	uxth	r3, r3
 8004786:	8023      	strh	r3, [r4, #0]
 8004788:	e016      	b.n	80047b8 <USB_ActivateEndpoint+0x264>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <USB_ActivateEndpoint+0x250>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29c      	uxth	r4, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d014      	beq.n	80047fa <USB_ActivateEndpoint+0x2a6>
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	b29c      	uxth	r4, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <USB_ActivateEndpoint+0x2e8>)
 80047f4:	4323      	orrs	r3, r4
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	b29c      	uxth	r4, r3
 8004812:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004816:	b29c      	uxth	r4, r3
 8004818:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800481c:	b29c      	uxth	r4, r3
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	441a      	add	r2, r3
 8004828:	4b02      	ldr	r3, [pc, #8]	; (8004834 <USB_ActivateEndpoint+0x2e0>)
 800482a:	4323      	orrs	r3, r4
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]
 8004830:	e176      	b.n	8004b20 <USB_ActivateEndpoint+0x5cc>
 8004832:	bf00      	nop
 8004834:	ffff8080 	.word	0xffff8080
 8004838:	ffff80c0 	.word	0xffff80c0
 800483c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	b29c      	uxth	r4, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	4b96      	ldr	r3, [pc, #600]	; (8004abc <USB_ActivateEndpoint+0x568>)
 8004864:	4323      	orrs	r3, r4
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800486a:	687c      	ldr	r4, [r7, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004872:	b29b      	uxth	r3, r3
 8004874:	441c      	add	r4, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4423      	add	r3, r4
 800487e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004882:	461c      	mov	r4, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	891b      	ldrh	r3, [r3, #8]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	b29b      	uxth	r3, r3
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	8023      	strh	r3, [r4, #0]
 8004892:	687c      	ldr	r4, [r7, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489a:	b29b      	uxth	r3, r3
 800489c:	441c      	add	r4, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	4423      	add	r3, r4
 80048a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048aa:	461c      	mov	r4, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	895b      	ldrh	r3, [r3, #10]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8088 	bne.w	80049d4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	b29c      	uxth	r4, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d014      	beq.n	8004906 <USB_ActivateEndpoint+0x3b2>
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	b29c      	uxth	r4, r3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	4b70      	ldr	r3, [pc, #448]	; (8004ac0 <USB_ActivateEndpoint+0x56c>)
 8004900:	4323      	orrs	r3, r4
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29c      	uxth	r4, r3
 8004914:	4623      	mov	r3, r4
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d014      	beq.n	8004948 <USB_ActivateEndpoint+0x3f4>
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	b29c      	uxth	r4, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	4b60      	ldr	r3, [pc, #384]	; (8004ac4 <USB_ActivateEndpoint+0x570>)
 8004942:	4323      	orrs	r3, r4
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	b29c      	uxth	r4, r3
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	4b56      	ldr	r3, [pc, #344]	; (8004ac4 <USB_ActivateEndpoint+0x570>)
 800496c:	4323      	orrs	r3, r4
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004988:	b29c      	uxth	r4, r3
 800498a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800498e:	b29c      	uxth	r4, r3
 8004990:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004994:	b29c      	uxth	r4, r3
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	441a      	add	r2, r3
 80049a0:	4b49      	ldr	r3, [pc, #292]	; (8004ac8 <USB_ActivateEndpoint+0x574>)
 80049a2:	4323      	orrs	r3, r4
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049be:	b29c      	uxth	r4, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	441a      	add	r2, r3
 80049ca:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <USB_ActivateEndpoint+0x574>)
 80049cc:	4323      	orrs	r3, r4
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]
 80049d2:	e0a5      	b.n	8004b20 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29c      	uxth	r4, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d014      	beq.n	8004a16 <USB_ActivateEndpoint+0x4c2>
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	b29c      	uxth	r4, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <USB_ActivateEndpoint+0x56c>)
 8004a10:	4323      	orrs	r3, r4
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b29c      	uxth	r4, r3
 8004a24:	4623      	mov	r3, r4
 8004a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d014      	beq.n	8004a58 <USB_ActivateEndpoint+0x504>
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a44:	b29c      	uxth	r4, r3
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <USB_ActivateEndpoint+0x570>)
 8004a52:	4323      	orrs	r3, r4
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	b29c      	uxth	r4, r3
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <USB_ActivateEndpoint+0x56c>)
 8004a7c:	4323      	orrs	r3, r4
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	78db      	ldrb	r3, [r3, #3]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d020      	beq.n	8004acc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa0:	b29c      	uxth	r4, r3
 8004aa2:	f084 0320 	eor.w	r3, r4, #32
 8004aa6:	b29c      	uxth	r4, r3
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <USB_ActivateEndpoint+0x574>)
 8004ab4:	4323      	orrs	r3, r4
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	8013      	strh	r3, [r2, #0]
 8004aba:	e01c      	b.n	8004af6 <USB_ActivateEndpoint+0x5a2>
 8004abc:	ffff8180 	.word	0xffff8180
 8004ac0:	ffffc080 	.word	0xffffc080
 8004ac4:	ffff80c0 	.word	0xffff80c0
 8004ac8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	b29c      	uxth	r4, r3
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <USB_ActivateEndpoint+0x5d8>)
 8004af0:	4323      	orrs	r3, r4
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	b29c      	uxth	r4, r3
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <USB_ActivateEndpoint+0x5d8>)
 8004b1a:	4323      	orrs	r3, r4
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bc90      	pop	{r4, r7}
 8004b2a:	4770      	bx	lr
 8004b2c:	ffff8080 	.word	0xffff8080

08004b30 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b30:	b490      	push	{r4, r7}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	7b1b      	ldrb	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d171      	bne.n	8004c26 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	785b      	ldrb	r3, [r3, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d036      	beq.n	8004bb8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29c      	uxth	r4, r3
 8004b58:	4623      	mov	r3, r4
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d014      	beq.n	8004b8c <USB_DeactivateEndpoint+0x5c>
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	b29c      	uxth	r4, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	4b6b      	ldr	r3, [pc, #428]	; (8004d34 <USB_DeactivateEndpoint+0x204>)
 8004b86:	4323      	orrs	r3, r4
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba2:	b29c      	uxth	r4, r3
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <USB_DeactivateEndpoint+0x208>)
 8004bb0:	4323      	orrs	r3, r4
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]
 8004bb6:	e144      	b.n	8004e42 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29c      	uxth	r4, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d014      	beq.n	8004bfa <USB_DeactivateEndpoint+0xca>
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	b29c      	uxth	r4, r3
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	4b52      	ldr	r3, [pc, #328]	; (8004d3c <USB_DeactivateEndpoint+0x20c>)
 8004bf4:	4323      	orrs	r3, r4
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	b29c      	uxth	r4, r3
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	441a      	add	r2, r3
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <USB_DeactivateEndpoint+0x208>)
 8004c1e:	4323      	orrs	r3, r4
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8013      	strh	r3, [r2, #0]
 8004c24:	e10d      	b.n	8004e42 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 8088 	bne.w	8004d40 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29c      	uxth	r4, r3
 8004c3e:	4623      	mov	r3, r4
 8004c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d014      	beq.n	8004c72 <USB_DeactivateEndpoint+0x142>
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	b29c      	uxth	r4, r3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <USB_DeactivateEndpoint+0x20c>)
 8004c6c:	4323      	orrs	r3, r4
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29c      	uxth	r4, r3
 8004c80:	4623      	mov	r3, r4
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d014      	beq.n	8004cb4 <USB_DeactivateEndpoint+0x184>
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca0:	b29c      	uxth	r4, r3
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <USB_DeactivateEndpoint+0x204>)
 8004cae:	4323      	orrs	r3, r4
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	b29c      	uxth	r4, r3
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <USB_DeactivateEndpoint+0x204>)
 8004cd8:	4323      	orrs	r3, r4
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	b29c      	uxth	r4, r3
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <USB_DeactivateEndpoint+0x208>)
 8004d02:	4323      	orrs	r3, r4
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1e:	b29c      	uxth	r4, r3
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <USB_DeactivateEndpoint+0x208>)
 8004d2c:	4323      	orrs	r3, r4
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]
 8004d32:	e086      	b.n	8004e42 <USB_DeactivateEndpoint+0x312>
 8004d34:	ffff80c0 	.word	0xffff80c0
 8004d38:	ffff8080 	.word	0xffff8080
 8004d3c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29c      	uxth	r4, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d014      	beq.n	8004d82 <USB_DeactivateEndpoint+0x252>
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	b29c      	uxth	r4, r3
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <USB_DeactivateEndpoint+0x320>)
 8004d7c:	4323      	orrs	r3, r4
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29c      	uxth	r4, r3
 8004d90:	4623      	mov	r3, r4
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <USB_DeactivateEndpoint+0x294>
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	b29c      	uxth	r4, r3
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <USB_DeactivateEndpoint+0x324>)
 8004dbe:	4323      	orrs	r3, r4
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	b29c      	uxth	r4, r3
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <USB_DeactivateEndpoint+0x320>)
 8004de8:	4323      	orrs	r3, r4
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e04:	b29c      	uxth	r4, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <USB_DeactivateEndpoint+0x328>)
 8004e12:	4323      	orrs	r3, r4
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	b29c      	uxth	r4, r3
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <USB_DeactivateEndpoint+0x328>)
 8004e3c:	4323      	orrs	r3, r4
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc90      	pop	{r4, r7}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	ffffc080 	.word	0xffffc080
 8004e54:	ffff80c0 	.word	0xffff80c0
 8004e58:	ffff8080 	.word	0xffff8080

08004e5c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b08d      	sub	sp, #52	; 0x34
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	f040 8160 	bne.w	8005130 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d909      	bls.n	8004e90 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	619a      	str	r2, [r3, #24]
 8004e8e:	e005      	b.n	8004e9c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	7b1b      	ldrb	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d119      	bne.n	8004ed8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6959      	ldr	r1, [r3, #20]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	88da      	ldrh	r2, [r3, #6]
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fba2 	bl	80055fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eb6:	687c      	ldr	r4, [r7, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	441c      	add	r4, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4423      	add	r3, r4
 8004eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ece:	461c      	mov	r4, r3
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8023      	strh	r3, [r4, #0]
 8004ed6:	e10f      	b.n	80050f8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d065      	beq.n	8004fba <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eee:	687c      	ldr	r4, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d148      	bne.n	8004f8a <USB_EPStartXfer+0x12e>
 8004ef8:	687c      	ldr	r4, [r7, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	441c      	add	r4, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	4423      	add	r3, r4
 8004f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f10:	461c      	mov	r4, r3
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10e      	bne.n	8004f36 <USB_EPStartXfer+0xda>
 8004f18:	8823      	ldrh	r3, [r4, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8023      	strh	r3, [r4, #0]
 8004f24:	8823      	ldrh	r3, [r4, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8023      	strh	r3, [r4, #0]
 8004f34:	e03d      	b.n	8004fb2 <USB_EPStartXfer+0x156>
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3a:	d810      	bhi.n	8004f5e <USB_EPStartXfer+0x102>
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <USB_EPStartXfer+0xf6>
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	3301      	adds	r3, #1
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	029b      	lsls	r3, r3, #10
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	8023      	strh	r3, [r4, #0]
 8004f5c:	e029      	b.n	8004fb2 <USB_EPStartXfer+0x156>
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <USB_EPStartXfer+0x118>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	3b01      	subs	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8023      	strh	r3, [r4, #0]
 8004f88:	e013      	b.n	8004fb2 <USB_EPStartXfer+0x156>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10f      	bne.n	8004fb2 <USB_EPStartXfer+0x156>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	441c      	add	r4, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	4423      	add	r3, r4
 8004fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	895b      	ldrh	r3, [r3, #10]
 8004fb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fb8:	e063      	b.n	8005082 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d148      	bne.n	8005054 <USB_EPStartXfer+0x1f8>
 8004fc2:	687c      	ldr	r4, [r7, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	441c      	add	r4, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	4423      	add	r3, r4
 8004fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fda:	461c      	mov	r4, r3
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10e      	bne.n	8005000 <USB_EPStartXfer+0x1a4>
 8004fe2:	8823      	ldrh	r3, [r4, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8023      	strh	r3, [r4, #0]
 8004fee:	8823      	ldrh	r3, [r4, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8023      	strh	r3, [r4, #0]
 8004ffe:	e03d      	b.n	800507c <USB_EPStartXfer+0x220>
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	2b3e      	cmp	r3, #62	; 0x3e
 8005004:	d810      	bhi.n	8005028 <USB_EPStartXfer+0x1cc>
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <USB_EPStartXfer+0x1c0>
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	3301      	adds	r3, #1
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	b29b      	uxth	r3, r3
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	b29b      	uxth	r3, r3
 8005024:	8023      	strh	r3, [r4, #0]
 8005026:	e029      	b.n	800507c <USB_EPStartXfer+0x220>
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	623b      	str	r3, [r7, #32]
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	f003 031f 	and.w	r3, r3, #31
 8005034:	2b00      	cmp	r3, #0
 8005036:	d102      	bne.n	800503e <USB_EPStartXfer+0x1e2>
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	3b01      	subs	r3, #1
 800503c:	623b      	str	r3, [r7, #32]
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	b29b      	uxth	r3, r3
 8005042:	029b      	lsls	r3, r3, #10
 8005044:	b29b      	uxth	r3, r3
 8005046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504e:	b29b      	uxth	r3, r3
 8005050:	8023      	strh	r3, [r4, #0]
 8005052:	e013      	b.n	800507c <USB_EPStartXfer+0x220>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	785b      	ldrb	r3, [r3, #1]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10f      	bne.n	800507c <USB_EPStartXfer+0x220>
 800505c:	687c      	ldr	r4, [r7, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005064:	b29b      	uxth	r3, r3
 8005066:	441c      	add	r4, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	4423      	add	r3, r4
 8005070:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005074:	461c      	mov	r4, r3
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	b29b      	uxth	r3, r3
 800507a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	891b      	ldrh	r3, [r3, #8]
 8005080:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6959      	ldr	r1, [r3, #20]
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	b29b      	uxth	r3, r3
 800508a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fab4 	bl	80055fa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <USB_EPStartXfer+0x26a>
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	b29c      	uxth	r4, r3
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	4b9a      	ldr	r3, [pc, #616]	; (8005328 <USB_EPStartXfer+0x4cc>)
 80050be:	4323      	orrs	r3, r4
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
 80050c4:	e018      	b.n	80050f8 <USB_EPStartXfer+0x29c>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	785b      	ldrb	r3, [r3, #1]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d114      	bne.n	80050f8 <USB_EPStartXfer+0x29c>
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	b29c      	uxth	r4, r3
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	441a      	add	r2, r3
 80050f0:	4b8e      	ldr	r3, [pc, #568]	; (800532c <USB_EPStartXfer+0x4d0>)
 80050f2:	4323      	orrs	r3, r4
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510e:	b29c      	uxth	r4, r3
 8005110:	f084 0310 	eor.w	r3, r4, #16
 8005114:	b29c      	uxth	r4, r3
 8005116:	f084 0320 	eor.w	r3, r4, #32
 800511a:	b29c      	uxth	r4, r3
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	4b82      	ldr	r3, [pc, #520]	; (8005330 <USB_EPStartXfer+0x4d4>)
 8005128:	4323      	orrs	r3, r4
 800512a:	b29b      	uxth	r3, r3
 800512c:	8013      	strh	r3, [r2, #0]
 800512e:	e146      	b.n	80053be <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d909      	bls.n	8005150 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	1ad2      	subs	r2, r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	619a      	str	r2, [r3, #24]
 800514e:	e005      	b.n	800515c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2200      	movs	r2, #0
 800515a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	7b1b      	ldrb	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d148      	bne.n	80051f6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005164:	687c      	ldr	r4, [r7, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516c:	b29b      	uxth	r3, r3
 800516e:	441c      	add	r4, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4423      	add	r3, r4
 8005178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800517c:	461c      	mov	r4, r3
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10e      	bne.n	80051a2 <USB_EPStartXfer+0x346>
 8005184:	8823      	ldrh	r3, [r4, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800518c:	b29b      	uxth	r3, r3
 800518e:	8023      	strh	r3, [r4, #0]
 8005190:	8823      	ldrh	r3, [r4, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29b      	uxth	r3, r3
 800519e:	8023      	strh	r3, [r4, #0]
 80051a0:	e0f2      	b.n	8005388 <USB_EPStartXfer+0x52c>
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	2b3e      	cmp	r3, #62	; 0x3e
 80051a6:	d810      	bhi.n	80051ca <USB_EPStartXfer+0x36e>
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <USB_EPStartXfer+0x362>
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8023      	strh	r3, [r4, #0]
 80051c8:	e0de      	b.n	8005388 <USB_EPStartXfer+0x52c>
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d102      	bne.n	80051e0 <USB_EPStartXfer+0x384>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3b01      	subs	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	8023      	strh	r3, [r4, #0]
 80051f4:	e0c8      	b.n	8005388 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d148      	bne.n	8005290 <USB_EPStartXfer+0x434>
 80051fe:	687c      	ldr	r4, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	441c      	add	r4, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4423      	add	r3, r4
 8005212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005216:	461c      	mov	r4, r3
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10e      	bne.n	800523c <USB_EPStartXfer+0x3e0>
 800521e:	8823      	ldrh	r3, [r4, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005226:	b29b      	uxth	r3, r3
 8005228:	8023      	strh	r3, [r4, #0]
 800522a:	8823      	ldrh	r3, [r4, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005236:	b29b      	uxth	r3, r3
 8005238:	8023      	strh	r3, [r4, #0]
 800523a:	e03d      	b.n	80052b8 <USB_EPStartXfer+0x45c>
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b3e      	cmp	r3, #62	; 0x3e
 8005240:	d810      	bhi.n	8005264 <USB_EPStartXfer+0x408>
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <USB_EPStartXfer+0x3fc>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	3301      	adds	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	b29b      	uxth	r3, r3
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	b29b      	uxth	r3, r3
 8005260:	8023      	strh	r3, [r4, #0]
 8005262:	e029      	b.n	80052b8 <USB_EPStartXfer+0x45c>
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <USB_EPStartXfer+0x41e>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	3b01      	subs	r3, #1
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	b29b      	uxth	r3, r3
 800527e:	029b      	lsls	r3, r3, #10
 8005280:	b29b      	uxth	r3, r3
 8005282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528a:	b29b      	uxth	r3, r3
 800528c:	8023      	strh	r3, [r4, #0]
 800528e:	e013      	b.n	80052b8 <USB_EPStartXfer+0x45c>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10f      	bne.n	80052b8 <USB_EPStartXfer+0x45c>
 8005298:	687c      	ldr	r4, [r7, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	441c      	add	r4, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4423      	add	r3, r4
 80052ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b0:	461c      	mov	r4, r3
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8023      	strh	r3, [r4, #0]
 80052b8:	687c      	ldr	r4, [r7, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d14e      	bne.n	8005360 <USB_EPStartXfer+0x504>
 80052c2:	687c      	ldr	r4, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	441c      	add	r4, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	4423      	add	r3, r4
 80052d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052da:	461c      	mov	r4, r3
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10e      	bne.n	8005300 <USB_EPStartXfer+0x4a4>
 80052e2:	8823      	ldrh	r3, [r4, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8023      	strh	r3, [r4, #0]
 80052ee:	8823      	ldrh	r3, [r4, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8023      	strh	r3, [r4, #0]
 80052fe:	e043      	b.n	8005388 <USB_EPStartXfer+0x52c>
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b3e      	cmp	r3, #62	; 0x3e
 8005304:	d816      	bhi.n	8005334 <USB_EPStartXfer+0x4d8>
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <USB_EPStartXfer+0x4c0>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	3301      	adds	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	b29b      	uxth	r3, r3
 8005320:	029b      	lsls	r3, r3, #10
 8005322:	b29b      	uxth	r3, r3
 8005324:	8023      	strh	r3, [r4, #0]
 8005326:	e02f      	b.n	8005388 <USB_EPStartXfer+0x52c>
 8005328:	ffff80c0 	.word	0xffff80c0
 800532c:	ffffc080 	.word	0xffffc080
 8005330:	ffff8080 	.word	0xffff8080
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <USB_EPStartXfer+0x4ee>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3b01      	subs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	b29b      	uxth	r3, r3
 800534e:	029b      	lsls	r3, r3, #10
 8005350:	b29b      	uxth	r3, r3
 8005352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800535a:	b29b      	uxth	r3, r3
 800535c:	8023      	strh	r3, [r4, #0]
 800535e:	e013      	b.n	8005388 <USB_EPStartXfer+0x52c>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10f      	bne.n	8005388 <USB_EPStartXfer+0x52c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	441c      	add	r4, r3
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	4423      	add	r3, r4
 800537a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	b29a      	uxth	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	b29c      	uxth	r4, r3
 80053a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80053a4:	b29c      	uxth	r4, r3
 80053a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80053aa:	b29c      	uxth	r4, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <USB_EPStartXfer+0x56c>)
 80053b8:	4323      	orrs	r3, r4
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3734      	adds	r7, #52	; 0x34
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd90      	pop	{r4, r7, pc}
 80053c8:	ffff8080 	.word	0xffff8080

080053cc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053cc:	b490      	push	{r4, r7}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d018      	beq.n	8005410 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f4:	b29c      	uxth	r4, r3
 80053f6:	f084 0310 	eor.w	r3, r4, #16
 80053fa:	b29c      	uxth	r4, r3
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	4b11      	ldr	r3, [pc, #68]	; (800544c <USB_EPSetStall+0x80>)
 8005408:	4323      	orrs	r3, r4
 800540a:	b29b      	uxth	r3, r3
 800540c:	8013      	strh	r3, [r2, #0]
 800540e:	e017      	b.n	8005440 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	b29c      	uxth	r4, r3
 8005428:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800542c:	b29c      	uxth	r4, r3
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <USB_EPSetStall+0x80>)
 800543a:	4323      	orrs	r3, r4
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bc90      	pop	{r4, r7}
 800544a:	4770      	bx	lr
 800544c:	ffff8080 	.word	0xffff8080

08005450 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005450:	b490      	push	{r4, r7}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7b1b      	ldrb	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d17d      	bne.n	800555e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03d      	beq.n	80054e6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29c      	uxth	r4, r3
 8005478:	4623      	mov	r3, r4
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d014      	beq.n	80054ac <USB_EPClearStall+0x5c>
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005498:	b29c      	uxth	r4, r3
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	4b31      	ldr	r3, [pc, #196]	; (800556c <USB_EPClearStall+0x11c>)
 80054a6:	4323      	orrs	r3, r4
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	78db      	ldrb	r3, [r3, #3]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d054      	beq.n	800555e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	b29c      	uxth	r4, r3
 80054cc:	f084 0320 	eor.w	r3, r4, #32
 80054d0:	b29c      	uxth	r4, r3
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <USB_EPClearStall+0x120>)
 80054de:	4323      	orrs	r3, r4
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	8013      	strh	r3, [r2, #0]
 80054e4:	e03b      	b.n	800555e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29c      	uxth	r4, r3
 80054f4:	4623      	mov	r3, r4
 80054f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d014      	beq.n	8005528 <USB_EPClearStall+0xd8>
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	b29c      	uxth	r4, r3
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	441a      	add	r2, r3
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <USB_EPClearStall+0x124>)
 8005522:	4323      	orrs	r3, r4
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	b29c      	uxth	r4, r3
 8005540:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005544:	b29c      	uxth	r4, r3
 8005546:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800554a:	b29c      	uxth	r4, r3
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <USB_EPClearStall+0x120>)
 8005558:	4323      	orrs	r3, r4
 800555a:	b29b      	uxth	r3, r3
 800555c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bc90      	pop	{r4, r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	ffff80c0 	.word	0xffff80c0
 8005570:	ffff8080 	.word	0xffff8080
 8005574:	ffffc080 	.word	0xffffc080

08005578 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr

080055c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80055d8:	68fb      	ldr	r3, [r7, #12]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b08d      	sub	sp, #52	; 0x34
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	4611      	mov	r1, r2
 8005606:	461a      	mov	r2, r3
 8005608:	460b      	mov	r3, r1
 800560a:	80fb      	strh	r3, [r7, #6]
 800560c:	4613      	mov	r3, r2
 800560e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005610:	88bb      	ldrh	r3, [r7, #4]
 8005612:	3301      	adds	r3, #1
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	005a      	lsls	r2, r3, #1
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005632:	e01e      	b.n	8005672 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	3301      	adds	r3, #1
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	b29a      	uxth	r2, r3
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	3302      	adds	r3, #2
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	3302      	adds	r3, #2
 8005664:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	3301      	adds	r3, #1
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	3b01      	subs	r3, #1
 8005670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1dd      	bne.n	8005634 <USB_WritePMA+0x3a>
  }
}
 8005678:	bf00      	nop
 800567a:	3734      	adds	r7, #52	; 0x34
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005682:	b480      	push	{r7}
 8005684:	b08b      	sub	sp, #44	; 0x2c
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	4611      	mov	r1, r2
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	80fb      	strh	r3, [r7, #6]
 8005694:	4613      	mov	r3, r2
 8005696:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005698:	88bb      	ldrh	r3, [r7, #4]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	005a      	lsls	r2, r3, #1
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	e01b      	b.n	80056f4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	3302      	adds	r3, #2
 80056c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	0a1b      	lsrs	r3, r3, #8
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	3302      	adds	r3, #2
 80056ec:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	3b01      	subs	r3, #1
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e0      	bne.n	80056bc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80056fa:	88bb      	ldrh	r3, [r7, #4]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	701a      	strb	r2, [r3, #0]
  }
}
 8005716:	bf00      	nop
 8005718:	372c      	adds	r7, #44	; 0x2c
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7c1b      	ldrb	r3, [r3, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d115      	bne.n	8005764 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800573c:	2202      	movs	r2, #2
 800573e:	2181      	movs	r1, #129	; 0x81
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fe7e 	bl	8007442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800574c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005750:	2202      	movs	r2, #2
 8005752:	2101      	movs	r1, #1
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f001 fe74 	bl	8007442 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005762:	e012      	b.n	800578a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	2202      	movs	r2, #2
 8005768:	2181      	movs	r1, #129	; 0x81
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 fe69 	bl	8007442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	2202      	movs	r2, #2
 800577a:	2101      	movs	r1, #1
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 fe60 	bl	8007442 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800578a:	2308      	movs	r3, #8
 800578c:	2203      	movs	r2, #3
 800578e:	2182      	movs	r1, #130	; 0x82
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f001 fe56 	bl	8007442 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800579c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057a0:	f001 ff70 	bl	8007684 <USBD_static_malloc>
 80057a4:	4602      	mov	r2, r0
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
 80057ba:	e026      	b.n	800580a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7c1b      	ldrb	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057f0:	2101      	movs	r1, #1
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f001 ff0f 	bl	8007616 <USBD_LL_PrepareReceive>
 80057f8:	e007      	b.n	800580a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005800:	2340      	movs	r3, #64	; 0x40
 8005802:	2101      	movs	r1, #1
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 ff06 	bl	8007616 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005824:	2181      	movs	r1, #129	; 0x81
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fe31 	bl	800748e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005832:	2101      	movs	r1, #1
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 fe2a 	bl	800748e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005842:	2182      	movs	r1, #130	; 0x82
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fe22 	bl	800748e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00e      	beq.n	8005878 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586a:	4618      	mov	r0, r3
 800586c:	f001 ff16 	bl	800769c <USBD_static_free>
    pdev->pClassData = NULL;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005892:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d039      	beq.n	8005920 <USBD_CDC_Setup+0x9e>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d17c      	bne.n	80059aa <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	88db      	ldrh	r3, [r3, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d029      	beq.n	800590c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	da11      	bge.n	80058e6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80058ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	88d2      	ldrh	r2, [r2, #6]
 80058d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	88db      	ldrh	r3, [r3, #6]
 80058dc:	461a      	mov	r2, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f9f6 	bl	8006cd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80058e4:	e068      	b.n	80059b8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785a      	ldrb	r2, [r3, #1]
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	88db      	ldrh	r3, [r3, #6]
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80058fc:	6939      	ldr	r1, [r7, #16]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	88db      	ldrh	r3, [r3, #6]
 8005902:	461a      	mov	r2, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f001 fa11 	bl	8006d2c <USBD_CtlPrepareRx>
      break;
 800590a:	e055      	b.n	80059b8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	7850      	ldrb	r0, [r2, #1]
 8005918:	2200      	movs	r2, #0
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	4798      	blx	r3
      break;
 800591e:	e04b      	b.n	80059b8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b0a      	cmp	r3, #10
 8005926:	d017      	beq.n	8005958 <USBD_CDC_Setup+0xd6>
 8005928:	2b0b      	cmp	r3, #11
 800592a:	d029      	beq.n	8005980 <USBD_CDC_Setup+0xfe>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d133      	bne.n	8005998 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005936:	2b03      	cmp	r3, #3
 8005938:	d107      	bne.n	800594a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	2202      	movs	r2, #2
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f9c4 	bl	8006cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005948:	e02e      	b.n	80059a8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f955 	bl	8006bfc <USBD_CtlError>
            ret = USBD_FAIL;
 8005952:	2302      	movs	r3, #2
 8005954:	75fb      	strb	r3, [r7, #23]
          break;
 8005956:	e027      	b.n	80059a8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595e:	2b03      	cmp	r3, #3
 8005960:	d107      	bne.n	8005972 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005962:	f107 030f 	add.w	r3, r7, #15
 8005966:	2201      	movs	r2, #1
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 f9b0 	bl	8006cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005970:	e01a      	b.n	80059a8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 f941 	bl	8006bfc <USBD_CtlError>
            ret = USBD_FAIL;
 800597a:	2302      	movs	r3, #2
 800597c:	75fb      	strb	r3, [r7, #23]
          break;
 800597e:	e013      	b.n	80059a8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005986:	2b03      	cmp	r3, #3
 8005988:	d00d      	beq.n	80059a6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 f935 	bl	8006bfc <USBD_CtlError>
            ret = USBD_FAIL;
 8005992:	2302      	movs	r3, #2
 8005994:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005996:	e006      	b.n	80059a6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005998:	6839      	ldr	r1, [r7, #0]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 f92e 	bl	8006bfc <USBD_CtlError>
          ret = USBD_FAIL;
 80059a0:	2302      	movs	r3, #2
 80059a2:	75fb      	strb	r3, [r7, #23]
          break;
 80059a4:	e000      	b.n	80059a8 <USBD_CDC_Setup+0x126>
          break;
 80059a6:	bf00      	nop
      }
      break;
 80059a8:	e006      	b.n	80059b8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 f925 	bl	8006bfc <USBD_CtlError>
      ret = USBD_FAIL;
 80059b2:	2302      	movs	r3, #2
 80059b4:	75fb      	strb	r3, [r7, #23]
      break;
 80059b6:	bf00      	nop
  }

  return ret;
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059dc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d037      	beq.n	8005a58 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	331c      	adds	r3, #28
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d026      	beq.n	8005a4c <USBD_CDC_DataIn+0x8a>
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	331c      	adds	r3, #28
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	0152      	lsls	r2, r2, #5
 8005a16:	440a      	add	r2, r1
 8005a18:	3238      	adds	r2, #56	; 0x38
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a20:	fb02 f201 	mul.w	r2, r2, r1
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d110      	bne.n	8005a4c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	331c      	adds	r3, #28
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a3e:	78f9      	ldrb	r1, [r7, #3]
 8005a40:	2300      	movs	r3, #0
 8005a42:	2200      	movs	r2, #0
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 fdc3 	bl	80075d0 <USBD_LL_Transmit>
 8005a4a:	e003      	b.n	8005a54 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fdee 	bl	800765c <USBD_LL_GetRxDataSize>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4798      	blx	r3

    return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e000      	b.n	8005ab0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005aae:	2302      	movs	r3, #2
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d015      	beq.n	8005afe <USBD_CDC_EP0_RxReady+0x46>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ad8:	2bff      	cmp	r3, #255	; 0xff
 8005ada:	d010      	beq.n	8005afe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005aea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005af2:	b292      	uxth	r2, r2
 8005af4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	22ff      	movs	r2, #255	; 0xff
 8005afa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2243      	movs	r2, #67	; 0x43
 8005b14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005b16:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc80      	pop	{r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000094 	.word	0x20000094

08005b28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2243      	movs	r2, #67	; 0x43
 8005b34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005b36:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000050 	.word	0x20000050

08005b48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2243      	movs	r2, #67	; 0x43
 8005b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005b56:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	200000d8 	.word	0x200000d8

08005b68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	220a      	movs	r2, #10
 8005b74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b76:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000000c 	.word	0x2000000c

08005b88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005b92:	2302      	movs	r3, #2
 8005b94:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01c      	beq.n	8005c60 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d115      	bne.n	8005c5c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2181      	movs	r1, #129	; 0x81
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fcbc 	bl	80075d0 <USBD_LL_Transmit>

      return USBD_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e002      	b.n	8005c62 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d017      	beq.n	8005cb4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7c1b      	ldrb	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fcbc 	bl	8007616 <USBD_LL_PrepareReceive>
 8005c9e:	e007      	b.n	8005cb0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ca6:	2340      	movs	r3, #64	; 0x40
 8005ca8:	2101      	movs	r1, #1
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fcb3 	bl	8007616 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e01a      	b.n	8005d0c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	79fa      	ldrb	r2, [r7, #7]
 8005d02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f001 fb27 	bl	8007358 <USBD_LL_Init>

  return USBD_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d006      	beq.n	8005d36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	73fb      	strb	r3, [r7, #15]
 8005d34:	e001      	b.n	8005d3a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005d36:	2302      	movs	r3, #2
 8005d38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f001 fb5c 	bl	800740c <USBD_LL_Start>

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	78fa      	ldrb	r2, [r7, #3]
 8005d96:	4611      	mov	r1, r2
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3

  return USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fecb 	bl	8006b84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d00c      	beq.n	8005e2c <USBD_LL_SetupStage+0x56>
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d302      	bcc.n	8005e1c <USBD_LL_SetupStage+0x46>
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d010      	beq.n	8005e3c <USBD_LL_SetupStage+0x66>
 8005e1a:	e017      	b.n	8005e4c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f9cb 	bl	80061c0 <USBD_StdDevReq>
      break;
 8005e2a:	e01a      	b.n	8005e62 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa2d 	bl	8006294 <USBD_StdItfReq>
      break;
 8005e3a:	e012      	b.n	8005e62 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e42:	4619      	mov	r1, r3
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fa6b 	bl	8006320 <USBD_StdEPReq>
      break;
 8005e4a:	e00a      	b.n	8005e62 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	4619      	mov	r1, r3
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 fb36 	bl	80074cc <USBD_LL_StallEP>
      break;
 8005e60:	bf00      	nop
  }

  return USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	460b      	mov	r3, r1
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d14b      	bne.n	8005f18 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e86:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d134      	bne.n	8005efc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d919      	bls.n	8005ed2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d203      	bcs.n	8005ec0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	e002      	b.n	8005ec6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 ff4c 	bl	8006d68 <USBD_CtlContinueRx>
 8005ed0:	e038      	b.n	8005f44 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d105      	bne.n	8005ef4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 ff49 	bl	8006d8c <USBD_CtlSendStatus>
 8005efa:	e023      	b.n	8005f44 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d11e      	bne.n	8005f44 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005f0e:	2100      	movs	r1, #0
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f001 fadb 	bl	80074cc <USBD_LL_StallEP>
 8005f16:	e015      	b.n	8005f44 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00d      	beq.n	8005f40 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d108      	bne.n	8005f40 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	7afa      	ldrb	r2, [r7, #11]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	4798      	blx	r3
 8005f3e:	e001      	b.n	8005f44 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005f40:	2302      	movs	r3, #2
 8005f42:	e000      	b.n	8005f46 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	460b      	mov	r3, r1
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f5c:	7afb      	ldrb	r3, [r7, #11]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d17f      	bne.n	8006062 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3314      	adds	r3, #20
 8005f66:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d15c      	bne.n	800602c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d915      	bls.n	8005faa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 feb6 	bl	8006d08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f001 fb37 	bl	8007616 <USBD_LL_PrepareReceive>
 8005fa8:	e04e      	b.n	8006048 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	6912      	ldr	r2, [r2, #16]
 8005fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fb6:	fb02 f201 	mul.w	r2, r2, r1
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11c      	bne.n	8005ffa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d316      	bcc.n	8005ffa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d20f      	bcs.n	8005ffa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fe92 	bl	8006d08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fec:	2300      	movs	r3, #0
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 fb0f 	bl	8007616 <USBD_LL_PrepareReceive>
 8005ff8:	e026      	b.n	8006048 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800600c:	2b03      	cmp	r3, #3
 800600e:	d105      	bne.n	800601c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f001 fa54 	bl	80074cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fec4 	bl	8006db2 <USBD_CtlReceiveStatus>
 800602a:	e00d      	b.n	8006048 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006032:	2b04      	cmp	r3, #4
 8006034:	d004      	beq.n	8006040 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006040:	2180      	movs	r1, #128	; 0x80
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 fa42 	bl	80074cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800604e:	2b01      	cmp	r3, #1
 8006050:	d11d      	bne.n	800608e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff fe83 	bl	8005d5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006060:	e015      	b.n	800608e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006074:	2b03      	cmp	r3, #3
 8006076:	d108      	bne.n	800608a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	7afa      	ldrb	r2, [r7, #11]
 8006082:	4611      	mov	r1, r2
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	4798      	blx	r3
 8006088:	e001      	b.n	800608e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800608a:	2302      	movs	r3, #2
 800608c:	e000      	b.n	8006090 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 f9cb 	bl	8007442 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060bc:	2340      	movs	r3, #64	; 0x40
 80060be:	2200      	movs	r2, #0
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 f9bd 	bl	8007442 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2240      	movs	r2, #64	; 0x40
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6852      	ldr	r2, [r2, #4]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	4611      	mov	r1, r2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
  }

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2204      	movs	r2, #4
 8006150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616e:	2b04      	cmp	r3, #4
 8006170:	d105      	bne.n	800617e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	2b03      	cmp	r3, #3
 800619a:	d10b      	bne.n	80061b4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d004      	beq.n	80061e4 <USBD_StdDevReq+0x24>
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d002      	beq.n	80061e4 <USBD_StdDevReq+0x24>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <USBD_StdDevReq+0x34>
 80061e2:	e04c      	b.n	800627e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
      break;
 80061f2:	e049      	b.n	8006288 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	d83a      	bhi.n	8006272 <USBD_StdDevReq+0xb2>
 80061fc:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <USBD_StdDevReq+0x44>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006255 	.word	0x08006255
 8006208:	08006269 	.word	0x08006269
 800620c:	08006273 	.word	0x08006273
 8006210:	0800625f 	.word	0x0800625f
 8006214:	08006273 	.word	0x08006273
 8006218:	08006237 	.word	0x08006237
 800621c:	0800622d 	.word	0x0800622d
 8006220:	08006273 	.word	0x08006273
 8006224:	0800624b 	.word	0x0800624b
 8006228:	08006241 	.word	0x08006241
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9d4 	bl	80065dc <USBD_GetDescriptor>
          break;
 8006234:	e022      	b.n	800627c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fb37 	bl	80068ac <USBD_SetAddress>
          break;
 800623e:	e01d      	b.n	800627c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fb74 	bl	8006930 <USBD_SetConfig>
          break;
 8006248:	e018      	b.n	800627c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fbfd 	bl	8006a4c <USBD_GetConfig>
          break;
 8006252:	e013      	b.n	800627c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fc2c 	bl	8006ab4 <USBD_GetStatus>
          break;
 800625c:	e00e      	b.n	800627c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fc5a 	bl	8006b1a <USBD_SetFeature>
          break;
 8006266:	e009      	b.n	800627c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fc69 	bl	8006b42 <USBD_ClrFeature>
          break;
 8006270:	e004      	b.n	800627c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fcc1 	bl	8006bfc <USBD_CtlError>
          break;
 800627a:	bf00      	nop
      }
      break;
 800627c:	e004      	b.n	8006288 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fcbb 	bl	8006bfc <USBD_CtlError>
      break;
 8006286:	bf00      	nop
  }

  return ret;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d003      	beq.n	80062b6 <USBD_StdItfReq+0x22>
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d001      	beq.n	80062b6 <USBD_StdItfReq+0x22>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d12a      	bne.n	800630c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062bc:	3b01      	subs	r3, #1
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d81d      	bhi.n	80062fe <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	889b      	ldrh	r3, [r3, #4]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d813      	bhi.n	80062f4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	88db      	ldrh	r3, [r3, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d110      	bne.n	8006308 <USBD_StdItfReq+0x74>
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10d      	bne.n	8006308 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fd4d 	bl	8006d8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062f2:	e009      	b.n	8006308 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fc80 	bl	8006bfc <USBD_CtlError>
          break;
 80062fc:	e004      	b.n	8006308 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fc7b 	bl	8006bfc <USBD_CtlError>
          break;
 8006306:	e000      	b.n	800630a <USBD_StdItfReq+0x76>
          break;
 8006308:	bf00      	nop
      }
      break;
 800630a:	e004      	b.n	8006316 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fc74 	bl	8006bfc <USBD_CtlError>
      break;
 8006314:	bf00      	nop
  }

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	889b      	ldrh	r3, [r3, #4]
 8006332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800633c:	2b20      	cmp	r3, #32
 800633e:	d004      	beq.n	800634a <USBD_StdEPReq+0x2a>
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d002      	beq.n	800634a <USBD_StdEPReq+0x2a>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <USBD_StdEPReq+0x3a>
 8006348:	e13d      	b.n	80065c6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
      break;
 8006358:	e13a      	b.n	80065d0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006362:	2b20      	cmp	r3, #32
 8006364:	d10a      	bne.n	800637c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	e12a      	b.n	80065d2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d03e      	beq.n	8006402 <USBD_StdEPReq+0xe2>
 8006384:	2b03      	cmp	r3, #3
 8006386:	d002      	beq.n	800638e <USBD_StdEPReq+0x6e>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d070      	beq.n	800646e <USBD_StdEPReq+0x14e>
 800638c:	e115      	b.n	80065ba <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	2b02      	cmp	r3, #2
 8006396:	d002      	beq.n	800639e <USBD_StdEPReq+0x7e>
 8006398:	2b03      	cmp	r3, #3
 800639a:	d015      	beq.n	80063c8 <USBD_StdEPReq+0xa8>
 800639c:	e02b      	b.n	80063f6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00c      	beq.n	80063be <USBD_StdEPReq+0x9e>
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b80      	cmp	r3, #128	; 0x80
 80063a8:	d009      	beq.n	80063be <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 f88c 	bl	80074cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063b4:	2180      	movs	r1, #128	; 0x80
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f888 	bl	80074cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063bc:	e020      	b.n	8006400 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc1b 	bl	8006bfc <USBD_CtlError>
              break;
 80063c6:	e01b      	b.n	8006400 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	885b      	ldrh	r3, [r3, #2]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10e      	bne.n	80063ee <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <USBD_StdEPReq+0xce>
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b80      	cmp	r3, #128	; 0x80
 80063da:	d008      	beq.n	80063ee <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	88db      	ldrh	r3, [r3, #6]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 f86f 	bl	80074cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fccc 	bl	8006d8c <USBD_CtlSendStatus>

              break;
 80063f4:	e004      	b.n	8006400 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fbff 	bl	8006bfc <USBD_CtlError>
              break;
 80063fe:	bf00      	nop
          }
          break;
 8006400:	e0e0      	b.n	80065c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006408:	2b02      	cmp	r3, #2
 800640a:	d002      	beq.n	8006412 <USBD_StdEPReq+0xf2>
 800640c:	2b03      	cmp	r3, #3
 800640e:	d015      	beq.n	800643c <USBD_StdEPReq+0x11c>
 8006410:	e026      	b.n	8006460 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00c      	beq.n	8006432 <USBD_StdEPReq+0x112>
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b80      	cmp	r3, #128	; 0x80
 800641c:	d009      	beq.n	8006432 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f852 	bl	80074cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006428:	2180      	movs	r1, #128	; 0x80
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 f84e 	bl	80074cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006430:	e01c      	b.n	800646c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fbe1 	bl	8006bfc <USBD_CtlError>
              break;
 800643a:	e017      	b.n	800646c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	885b      	ldrh	r3, [r3, #2]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d112      	bne.n	800646a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 f859 	bl	800750a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc97 	bl	8006d8c <USBD_CtlSendStatus>
              }
              break;
 800645e:	e004      	b.n	800646a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fbca 	bl	8006bfc <USBD_CtlError>
              break;
 8006468:	e000      	b.n	800646c <USBD_StdEPReq+0x14c>
              break;
 800646a:	bf00      	nop
          }
          break;
 800646c:	e0aa      	b.n	80065c4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006474:	2b02      	cmp	r3, #2
 8006476:	d002      	beq.n	800647e <USBD_StdEPReq+0x15e>
 8006478:	2b03      	cmp	r3, #3
 800647a:	d032      	beq.n	80064e2 <USBD_StdEPReq+0x1c2>
 800647c:	e097      	b.n	80065ae <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <USBD_StdEPReq+0x174>
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d004      	beq.n	8006494 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fbb5 	bl	8006bfc <USBD_CtlError>
                break;
 8006492:	e091      	b.n	80065b8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006498:	2b00      	cmp	r3, #0
 800649a:	da0b      	bge.n	80064b4 <USBD_StdEPReq+0x194>
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	3310      	adds	r3, #16
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	4413      	add	r3, r2
 80064b0:	3304      	adds	r3, #4
 80064b2:	e00b      	b.n	80064cc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	3304      	adds	r3, #4
 80064cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2202      	movs	r2, #2
 80064d8:	4619      	mov	r1, r3
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fbf8 	bl	8006cd0 <USBD_CtlSendData>
              break;
 80064e0:	e06a      	b.n	80065b8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	da11      	bge.n	800650e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	f003 020f 	and.w	r2, r3, #15
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3318      	adds	r3, #24
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d117      	bne.n	8006534 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fb78 	bl	8006bfc <USBD_CtlError>
                  break;
 800650c:	e054      	b.n	80065b8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	440b      	add	r3, r1
 8006520:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb65 	bl	8006bfc <USBD_CtlError>
                  break;
 8006532:	e041      	b.n	80065b8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da0b      	bge.n	8006554 <USBD_StdEPReq+0x234>
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3310      	adds	r3, #16
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	4413      	add	r3, r2
 8006550:	3304      	adds	r3, #4
 8006552:	e00b      	b.n	800656c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4413      	add	r3, r2
 800656a:	3304      	adds	r3, #4
 800656c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <USBD_StdEPReq+0x25a>
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b80      	cmp	r3, #128	; 0x80
 8006578:	d103      	bne.n	8006582 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e00e      	b.n	80065a0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 ffde 	bl	8007548 <USBD_LL_IsStallEP>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e002      	b.n	80065a0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fb92 	bl	8006cd0 <USBD_CtlSendData>
              break;
 80065ac:	e004      	b.n	80065b8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb23 	bl	8006bfc <USBD_CtlError>
              break;
 80065b6:	bf00      	nop
          }
          break;
 80065b8:	e004      	b.n	80065c4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fb1d 	bl	8006bfc <USBD_CtlError>
          break;
 80065c2:	bf00      	nop
      }
      break;
 80065c4:	e004      	b.n	80065d0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fb17 	bl	8006bfc <USBD_CtlError>
      break;
 80065ce:	bf00      	nop
  }

  return ret;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	885b      	ldrh	r3, [r3, #2]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	f200 8128 	bhi.w	8006852 <USBD_GetDescriptor+0x276>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <USBD_GetDescriptor+0x2c>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	08006625 	.word	0x08006625
 800660c:	0800663d 	.word	0x0800663d
 8006610:	0800667d 	.word	0x0800667d
 8006614:	08006853 	.word	0x08006853
 8006618:	08006853 	.word	0x08006853
 800661c:	080067f3 	.word	0x080067f3
 8006620:	0800681f 	.word	0x0800681f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	7c12      	ldrb	r2, [r2, #16]
 8006630:	f107 0108 	add.w	r1, r7, #8
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
      break;
 800663a:	e112      	b.n	8006862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7c1b      	ldrb	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10d      	bne.n	8006660 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f107 0208 	add.w	r2, r7, #8
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	2202      	movs	r2, #2
 800665c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800665e:	e100      	b.n	8006862 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	f107 0208 	add.w	r2, r7, #8
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
 8006670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3301      	adds	r3, #1
 8006676:	2202      	movs	r2, #2
 8006678:	701a      	strb	r2, [r3, #0]
      break;
 800667a:	e0f2      	b.n	8006862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	885b      	ldrh	r3, [r3, #2]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b05      	cmp	r3, #5
 8006684:	f200 80ac 	bhi.w	80067e0 <USBD_GetDescriptor+0x204>
 8006688:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <USBD_GetDescriptor+0xb4>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066a9 	.word	0x080066a9
 8006694:	080066dd 	.word	0x080066dd
 8006698:	08006711 	.word	0x08006711
 800669c:	08006745 	.word	0x08006745
 80066a0:	08006779 	.word	0x08006779
 80066a4:	080067ad 	.word	0x080067ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7c12      	ldrb	r2, [r2, #16]
 80066c0:	f107 0108 	add.w	r1, r7, #8
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ca:	e091      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa94 	bl	8006bfc <USBD_CtlError>
            err++;
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	3301      	adds	r3, #1
 80066d8:	72fb      	strb	r3, [r7, #11]
          break;
 80066da:	e089      	b.n	80067f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7c12      	ldrb	r2, [r2, #16]
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fe:	e077      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa7a 	bl	8006bfc <USBD_CtlError>
            err++;
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	3301      	adds	r3, #1
 800670c:	72fb      	strb	r3, [r7, #11]
          break;
 800670e:	e06f      	b.n	80067f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006732:	e05d      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa60 	bl	8006bfc <USBD_CtlError>
            err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
          break;
 8006742:	e055      	b.n	80067f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	7c12      	ldrb	r2, [r2, #16]
 800675c:	f107 0108 	add.w	r1, r7, #8
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006766:	e043      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa46 	bl	8006bfc <USBD_CtlError>
            err++;
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	3301      	adds	r3, #1
 8006774:	72fb      	strb	r3, [r7, #11]
          break;
 8006776:	e03b      	b.n	80067f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00b      	beq.n	800679c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7c12      	ldrb	r2, [r2, #16]
 8006790:	f107 0108 	add.w	r1, r7, #8
 8006794:	4610      	mov	r0, r2
 8006796:	4798      	blx	r3
 8006798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800679a:	e029      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fa2c 	bl	8006bfc <USBD_CtlError>
            err++;
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	3301      	adds	r3, #1
 80067a8:	72fb      	strb	r3, [r7, #11]
          break;
 80067aa:	e021      	b.n	80067f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	7c12      	ldrb	r2, [r2, #16]
 80067c4:	f107 0108 	add.w	r1, r7, #8
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
 80067cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ce:	e00f      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa12 	bl	8006bfc <USBD_CtlError>
            err++;
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	3301      	adds	r3, #1
 80067dc:	72fb      	strb	r3, [r7, #11]
          break;
 80067de:	e007      	b.n	80067f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa0a 	bl	8006bfc <USBD_CtlError>
          err++;
 80067e8:	7afb      	ldrb	r3, [r7, #11]
 80067ea:	3301      	adds	r3, #1
 80067ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80067ee:	e038      	b.n	8006862 <USBD_GetDescriptor+0x286>
 80067f0:	e037      	b.n	8006862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7c1b      	ldrb	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	f107 0208 	add.w	r2, r7, #8
 8006806:	4610      	mov	r0, r2
 8006808:	4798      	blx	r3
 800680a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800680c:	e029      	b.n	8006862 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9f3 	bl	8006bfc <USBD_CtlError>
        err++;
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	3301      	adds	r3, #1
 800681a:	72fb      	strb	r3, [r7, #11]
      break;
 800681c:	e021      	b.n	8006862 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	7c1b      	ldrb	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10d      	bne.n	8006842 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f107 0208 	add.w	r2, r7, #8
 8006832:	4610      	mov	r0, r2
 8006834:	4798      	blx	r3
 8006836:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	2207      	movs	r2, #7
 800683e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006840:	e00f      	b.n	8006862 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f9d9 	bl	8006bfc <USBD_CtlError>
        err++;
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	3301      	adds	r3, #1
 800684e:	72fb      	strb	r3, [r7, #11]
      break;
 8006850:	e007      	b.n	8006862 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f9d1 	bl	8006bfc <USBD_CtlError>
      err++;
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	3301      	adds	r3, #1
 800685e:	72fb      	strb	r3, [r7, #11]
      break;
 8006860:	bf00      	nop
  }

  if (err != 0U)
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11c      	bne.n	80068a2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006868:	893b      	ldrh	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <USBD_GetDescriptor+0x2b6>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	88db      	ldrh	r3, [r3, #6]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00d      	beq.n	8006892 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	88da      	ldrh	r2, [r3, #6]
 800687a:	893b      	ldrh	r3, [r7, #8]
 800687c:	4293      	cmp	r3, r2
 800687e:	bf28      	it	cs
 8006880:	4613      	movcs	r3, r2
 8006882:	b29b      	uxth	r3, r3
 8006884:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006886:	893b      	ldrh	r3, [r7, #8]
 8006888:	461a      	mov	r2, r3
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fa1f 	bl	8006cd0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	88db      	ldrh	r3, [r3, #6]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa76 	bl	8006d8c <USBD_CtlSendStatus>
 80068a0:	e000      	b.n	80068a4 <USBD_GetDescriptor+0x2c8>
    return;
 80068a2:	bf00      	nop
    }
  }
}
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	889b      	ldrh	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d130      	bne.n	8006920 <USBD_SetAddress+0x74>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	88db      	ldrh	r3, [r3, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d12c      	bne.n	8006920 <USBD_SetAddress+0x74>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	885b      	ldrh	r3, [r3, #2]
 80068ca:	2b7f      	cmp	r3, #127	; 0x7f
 80068cc:	d828      	bhi.n	8006920 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	885b      	ldrh	r3, [r3, #2]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d104      	bne.n	80068ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f988 	bl	8006bfc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ec:	e01c      	b.n	8006928 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7bfa      	ldrb	r2, [r7, #15]
 80068f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fe49 	bl	8007592 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fa43 	bl	8006d8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006914:	e008      	b.n	8006928 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691e:	e003      	b.n	8006928 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f96a 	bl	8006bfc <USBD_CtlError>
  }
}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	885b      	ldrh	r3, [r3, #2]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	4b41      	ldr	r3, [pc, #260]	; (8006a48 <USBD_SetConfig+0x118>)
 8006942:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006944:	4b40      	ldr	r3, [pc, #256]	; (8006a48 <USBD_SetConfig+0x118>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d904      	bls.n	8006956 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800694c:	6839      	ldr	r1, [r7, #0]
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f954 	bl	8006bfc <USBD_CtlError>
 8006954:	e075      	b.n	8006a42 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	2b02      	cmp	r3, #2
 800695e:	d002      	beq.n	8006966 <USBD_SetConfig+0x36>
 8006960:	2b03      	cmp	r3, #3
 8006962:	d023      	beq.n	80069ac <USBD_SetConfig+0x7c>
 8006964:	e062      	b.n	8006a2c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006966:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <USBD_SetConfig+0x118>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01a      	beq.n	80069a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <USBD_SetConfig+0x118>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2203      	movs	r2, #3
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006980:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <USBD_SetConfig+0x118>)
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff f9f3 	bl	8005d72 <USBD_SetClassConfig>
 800698c:	4603      	mov	r3, r0
 800698e:	2b02      	cmp	r3, #2
 8006990:	d104      	bne.n	800699c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f931 	bl	8006bfc <USBD_CtlError>
            return;
 800699a:	e052      	b.n	8006a42 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f9f5 	bl	8006d8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069a2:	e04e      	b.n	8006a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f9f1 	bl	8006d8c <USBD_CtlSendStatus>
        break;
 80069aa:	e04a      	b.n	8006a42 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80069ac:	4b26      	ldr	r3, [pc, #152]	; (8006a48 <USBD_SetConfig+0x118>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d112      	bne.n	80069da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80069bc:	4b22      	ldr	r3, [pc, #136]	; (8006a48 <USBD_SetConfig+0x118>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069c6:	4b20      	ldr	r3, [pc, #128]	; (8006a48 <USBD_SetConfig+0x118>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff f9ef 	bl	8005db0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9da 	bl	8006d8c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80069d8:	e033      	b.n	8006a42 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80069da:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <USBD_SetConfig+0x118>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d01d      	beq.n	8006a24 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f9dd 	bl	8005db0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <USBD_SetConfig+0x118>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <USBD_SetConfig+0x118>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff f9b3 	bl	8005d72 <USBD_SetClassConfig>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d104      	bne.n	8006a1c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f8f1 	bl	8006bfc <USBD_CtlError>
            return;
 8006a1a:	e012      	b.n	8006a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f9b5 	bl	8006d8c <USBD_CtlSendStatus>
        break;
 8006a22:	e00e      	b.n	8006a42 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f9b1 	bl	8006d8c <USBD_CtlSendStatus>
        break;
 8006a2a:	e00a      	b.n	8006a42 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f8e4 	bl	8006bfc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <USBD_SetConfig+0x118>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff f9b8 	bl	8005db0 <USBD_ClrClassConfig>
        break;
 8006a40:	bf00      	nop
    }
  }
}
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	200003a0 	.word	0x200003a0

08006a4c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	88db      	ldrh	r3, [r3, #6]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d004      	beq.n	8006a68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8cb 	bl	8006bfc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a66:	e021      	b.n	8006aac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	db17      	blt.n	8006aa2 <USBD_GetConfig+0x56>
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	dd02      	ble.n	8006a7c <USBD_GetConfig+0x30>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d00b      	beq.n	8006a92 <USBD_GetConfig+0x46>
 8006a7a:	e012      	b.n	8006aa2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3308      	adds	r3, #8
 8006a86:	2201      	movs	r2, #1
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f920 	bl	8006cd0 <USBD_CtlSendData>
        break;
 8006a90:	e00c      	b.n	8006aac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f918 	bl	8006cd0 <USBD_CtlSendData>
        break;
 8006aa0:	e004      	b.n	8006aac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8a9 	bl	8006bfc <USBD_CtlError>
        break;
 8006aaa:	bf00      	nop
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d81e      	bhi.n	8006b08 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	88db      	ldrh	r3, [r3, #6]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d004      	beq.n	8006adc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f891 	bl	8006bfc <USBD_CtlError>
        break;
 8006ada:	e01a      	b.n	8006b12 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f043 0202 	orr.w	r2, r3, #2
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	330c      	adds	r3, #12
 8006afc:	2202      	movs	r2, #2
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8e5 	bl	8006cd0 <USBD_CtlSendData>
      break;
 8006b06:	e004      	b.n	8006b12 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f876 	bl	8006bfc <USBD_CtlError>
      break;
 8006b10:	bf00      	nop
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	885b      	ldrh	r3, [r3, #2]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d106      	bne.n	8006b3a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f929 	bl	8006d8c <USBD_CtlSendStatus>
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	3b01      	subs	r3, #1
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d80b      	bhi.n	8006b70 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d10c      	bne.n	8006b7a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f90f 	bl	8006d8c <USBD_CtlSendStatus>
      }
      break;
 8006b6e:	e004      	b.n	8006b7a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f842 	bl	8006bfc <USBD_CtlError>
      break;
 8006b78:	e000      	b.n	8006b7c <USBD_ClrFeature+0x3a>
      break;
 8006b7a:	bf00      	nop
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	785a      	ldrb	r2, [r3, #1]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	3303      	adds	r3, #3
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	3305      	adds	r3, #5
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	3306      	adds	r3, #6
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	3307      	adds	r3, #7
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	80da      	strh	r2, [r3, #6]

}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fc5f 	bl	80074cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc5b 	bl	80074cc <USBD_LL_StallEP>
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d032      	beq.n	8006c9a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f834 	bl	8006ca2 <USBD_GetLen>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	75fa      	strb	r2, [r7, #23]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4413      	add	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	75fa      	strb	r2, [r7, #23]
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	2203      	movs	r2, #3
 8006c68:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c6a:	e012      	b.n	8006c92 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	60fa      	str	r2, [r7, #12]
 8006c72:	7dfa      	ldrb	r2, [r7, #23]
 8006c74:	1c51      	adds	r1, r2, #1
 8006c76:	75f9      	strb	r1, [r7, #23]
 8006c78:	4611      	mov	r1, r2
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	75fa      	strb	r2, [r7, #23]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e8      	bne.n	8006c6c <USBD_GetString+0x4e>
    }
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006cae:	e005      	b.n	8006cbc <USBD_GetLen+0x1a>
  {
    len++;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1f5      	bne.n	8006cb0 <USBD_GetLen+0xe>
  }

  return len;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ce6:	88fa      	ldrh	r2, [r7, #6]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fc69 	bl	80075d0 <USBD_LL_Transmit>

  return USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fc57 	bl	80075d0 <USBD_LL_Transmit>

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2203      	movs	r2, #3
 8006d3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	2100      	movs	r1, #0
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fc5c 	bl	8007616 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fc4a 	bl	8007616 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2204      	movs	r2, #4
 8006d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2100      	movs	r1, #0
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fc14 	bl	80075d0 <USBD_LL_Transmit>

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc24 	bl	8007616 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4912      	ldr	r1, [pc, #72]	; (8006e28 <MX_USB_DEVICE_Init+0x50>)
 8006de0:	4812      	ldr	r0, [pc, #72]	; (8006e2c <MX_USB_DEVICE_Init+0x54>)
 8006de2:	f7fe ff6c 	bl	8005cbe <USBD_Init>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dec:	f7fa f820 	bl	8000e30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006df0:	490f      	ldr	r1, [pc, #60]	; (8006e30 <MX_USB_DEVICE_Init+0x58>)
 8006df2:	480e      	ldr	r0, [pc, #56]	; (8006e2c <MX_USB_DEVICE_Init+0x54>)
 8006df4:	f7fe ff8e 	bl	8005d14 <USBD_RegisterClass>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dfe:	f7fa f817 	bl	8000e30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e02:	490c      	ldr	r1, [pc, #48]	; (8006e34 <MX_USB_DEVICE_Init+0x5c>)
 8006e04:	4809      	ldr	r0, [pc, #36]	; (8006e2c <MX_USB_DEVICE_Init+0x54>)
 8006e06:	f7fe febf 	bl	8005b88 <USBD_CDC_RegisterInterface>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e10:	f7fa f80e 	bl	8000e30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e14:	4805      	ldr	r0, [pc, #20]	; (8006e2c <MX_USB_DEVICE_Init+0x54>)
 8006e16:	f7fe ff96 	bl	8005d46 <USBD_Start>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e20:	f7fa f806 	bl	8000e30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e24:	bf00      	nop
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	2000012c 	.word	0x2000012c
 8006e2c:	20000e48 	.word	0x20000e48
 8006e30:	20000018 	.word	0x20000018
 8006e34:	2000011c 	.word	0x2000011c

08006e38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4905      	ldr	r1, [pc, #20]	; (8006e54 <CDC_Init_FS+0x1c>)
 8006e40:	4805      	ldr	r0, [pc, #20]	; (8006e58 <CDC_Init_FS+0x20>)
 8006e42:	f7fe feb7 	bl	8005bb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e46:	4905      	ldr	r1, [pc, #20]	; (8006e5c <CDC_Init_FS+0x24>)
 8006e48:	4803      	ldr	r0, [pc, #12]	; (8006e58 <CDC_Init_FS+0x20>)
 8006e4a:	f7fe fecc 	bl	8005be6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200014f4 	.word	0x200014f4
 8006e58:	20000e48 	.word	0x20000e48
 8006e5c:	2000110c 	.word	0x2000110c

08006e60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bc80      	pop	{r7}
 8006e6c:	4770      	bx	lr
	...

08006e70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	6039      	str	r1, [r7, #0]
 8006e7a:	71fb      	strb	r3, [r7, #7]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	2b23      	cmp	r3, #35	; 0x23
 8006e84:	d84a      	bhi.n	8006f1c <CDC_Control_FS+0xac>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <CDC_Control_FS+0x1c>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006f1d 	.word	0x08006f1d
 8006e90:	08006f1d 	.word	0x08006f1d
 8006e94:	08006f1d 	.word	0x08006f1d
 8006e98:	08006f1d 	.word	0x08006f1d
 8006e9c:	08006f1d 	.word	0x08006f1d
 8006ea0:	08006f1d 	.word	0x08006f1d
 8006ea4:	08006f1d 	.word	0x08006f1d
 8006ea8:	08006f1d 	.word	0x08006f1d
 8006eac:	08006f1d 	.word	0x08006f1d
 8006eb0:	08006f1d 	.word	0x08006f1d
 8006eb4:	08006f1d 	.word	0x08006f1d
 8006eb8:	08006f1d 	.word	0x08006f1d
 8006ebc:	08006f1d 	.word	0x08006f1d
 8006ec0:	08006f1d 	.word	0x08006f1d
 8006ec4:	08006f1d 	.word	0x08006f1d
 8006ec8:	08006f1d 	.word	0x08006f1d
 8006ecc:	08006f1d 	.word	0x08006f1d
 8006ed0:	08006f1d 	.word	0x08006f1d
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f1d 	.word	0x08006f1d
 8006edc:	08006f1d 	.word	0x08006f1d
 8006ee0:	08006f1d 	.word	0x08006f1d
 8006ee4:	08006f1d 	.word	0x08006f1d
 8006ee8:	08006f1d 	.word	0x08006f1d
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f1d 	.word	0x08006f1d
 8006f00:	08006f1d 	.word	0x08006f1d
 8006f04:	08006f1d 	.word	0x08006f1d
 8006f08:	08006f1d 	.word	0x08006f1d
 8006f0c:	08006f1d 	.word	0x08006f1d
 8006f10:	08006f1d 	.word	0x08006f1d
 8006f14:	08006f1d 	.word	0x08006f1d
 8006f18:	08006f1d 	.word	0x08006f1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f1c:	bf00      	nop
  }

  return (USBD_OK);
 8006f1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop

08006f2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	char response[20];
	apiDoInstruction((char *)Buf, response);
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7f9 f933 	bl	80001a8 <apiDoInstruction>
	CDC_Transmit_FS((uint8_t *)response, strlen(response));
 8006f42:	f107 030c 	add.w	r3, r7, #12
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 f900 	bl	800014c <strlen>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	f107 030c 	add.w	r3, r7, #12
 8006f54:	4611      	mov	r1, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 f80e 	bl	8006f78 <CDC_Transmit_FS>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4805      	ldr	r0, [pc, #20]	; (8006f74 <CDC_Receive_FS+0x48>)
 8006f60:	f7fe fe41 	bl	8005be6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f64:	4803      	ldr	r0, [pc, #12]	; (8006f74 <CDC_Receive_FS+0x48>)
 8006f66:	f7fe fe80 	bl	8005c6a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000e48 	.word	0x20000e48

08006f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */


  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f88:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <CDC_Transmit_FS+0x48>)
 8006f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e00b      	b.n	8006fb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f9e:	887b      	ldrh	r3, [r7, #2]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4806      	ldr	r0, [pc, #24]	; (8006fc0 <CDC_Transmit_FS+0x48>)
 8006fa6:	f7fe fe05 	bl	8005bb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006faa:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <CDC_Transmit_FS+0x48>)
 8006fac:	f7fe fe2e 	bl	8005c0c <USBD_CDC_TransmitPacket>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000e48 	.word	0x20000e48

08006fc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2212      	movs	r2, #18
 8006fd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000148 	.word	0x20000148

08006fe8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ffa:	4b03      	ldr	r3, [pc, #12]	; (8007008 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	2000015c 	.word	0x2000015c

0800700c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4907      	ldr	r1, [pc, #28]	; (8007040 <USBD_FS_ProductStrDescriptor+0x34>)
 8007022:	4808      	ldr	r0, [pc, #32]	; (8007044 <USBD_FS_ProductStrDescriptor+0x38>)
 8007024:	f7ff fdfb 	bl	8006c1e <USBD_GetString>
 8007028:	e004      	b.n	8007034 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	4904      	ldr	r1, [pc, #16]	; (8007040 <USBD_FS_ProductStrDescriptor+0x34>)
 800702e:	4805      	ldr	r0, [pc, #20]	; (8007044 <USBD_FS_ProductStrDescriptor+0x38>)
 8007030:	f7ff fdf5 	bl	8006c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	200018dc 	.word	0x200018dc
 8007044:	08008228 	.word	0x08008228

08007048 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	6039      	str	r1, [r7, #0]
 8007052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	4904      	ldr	r1, [pc, #16]	; (8007068 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007058:	4804      	ldr	r0, [pc, #16]	; (800706c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800705a:	f7ff fde0 	bl	8006c1e <USBD_GetString>
  return USBD_StrDesc;
 800705e:	4b02      	ldr	r3, [pc, #8]	; (8007068 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200018dc 	.word	0x200018dc
 800706c:	08008240 	.word	0x08008240

08007070 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	6039      	str	r1, [r7, #0]
 800707a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	221a      	movs	r2, #26
 8007080:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007082:	f000 f843 	bl	800710c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007086:	4b02      	ldr	r3, [pc, #8]	; (8007090 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000160 	.word	0x20000160

08007094 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d105      	bne.n	80070b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	4907      	ldr	r1, [pc, #28]	; (80070c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070aa:	4808      	ldr	r0, [pc, #32]	; (80070cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070ac:	f7ff fdb7 	bl	8006c1e <USBD_GetString>
 80070b0:	e004      	b.n	80070bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070b6:	4805      	ldr	r0, [pc, #20]	; (80070cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80070b8:	f7ff fdb1 	bl	8006c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	200018dc 	.word	0x200018dc
 80070cc:	08008254 	.word	0x08008254

080070d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d105      	bne.n	80070ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4907      	ldr	r1, [pc, #28]	; (8007104 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070e6:	4808      	ldr	r0, [pc, #32]	; (8007108 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070e8:	f7ff fd99 	bl	8006c1e <USBD_GetString>
 80070ec:	e004      	b.n	80070f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	4904      	ldr	r1, [pc, #16]	; (8007104 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070f2:	4805      	ldr	r0, [pc, #20]	; (8007108 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070f4:	f7ff fd93 	bl	8006c1e <USBD_GetString>
  }
  return USBD_StrDesc;
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	200018dc 	.word	0x200018dc
 8007108:	08008260 	.word	0x08008260

0800710c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007112:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <Get_SerialNum+0x44>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007118:	4b0e      	ldr	r3, [pc, #56]	; (8007154 <Get_SerialNum+0x48>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <Get_SerialNum+0x4c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007132:	2208      	movs	r2, #8
 8007134:	4909      	ldr	r1, [pc, #36]	; (800715c <Get_SerialNum+0x50>)
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f814 	bl	8007164 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800713c:	2204      	movs	r2, #4
 800713e:	4908      	ldr	r1, [pc, #32]	; (8007160 <Get_SerialNum+0x54>)
 8007140:	68b8      	ldr	r0, [r7, #8]
 8007142:	f000 f80f 	bl	8007164 <IntToUnicode>
  }
}
 8007146:	bf00      	nop
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	1ffff7e8 	.word	0x1ffff7e8
 8007154:	1ffff7ec 	.word	0x1ffff7ec
 8007158:	1ffff7f0 	.word	0x1ffff7f0
 800715c:	20000162 	.word	0x20000162
 8007160:	20000172 	.word	0x20000172

08007164 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]
 800717a:	e027      	b.n	80071cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	0f1b      	lsrs	r3, r3, #28
 8007180:	2b09      	cmp	r3, #9
 8007182:	d80b      	bhi.n	800719c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	0f1b      	lsrs	r3, r3, #28
 8007188:	b2da      	uxtb	r2, r3
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4619      	mov	r1, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	440b      	add	r3, r1
 8007194:	3230      	adds	r2, #48	; 0x30
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	e00a      	b.n	80071b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	0f1b      	lsrs	r3, r3, #28
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4619      	mov	r1, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	440b      	add	r3, r1
 80071ac:	3237      	adds	r2, #55	; 0x37
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	3301      	adds	r3, #1
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	3301      	adds	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
 80071cc:	7dfa      	ldrb	r2, [r7, #23]
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d3d3      	bcc.n	800717c <IntToUnicode+0x18>
  }
}
 80071d4:	bf00      	nop
 80071d6:	371c      	adds	r7, #28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
	...

080071e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a0d      	ldr	r2, [pc, #52]	; (8007224 <HAL_PCD_MspInit+0x44>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d113      	bne.n	800721a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071f2:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_PCD_MspInit+0x48>)
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <HAL_PCD_MspInit+0x48>)
 80071f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071fc:	61d3      	str	r3, [r2, #28]
 80071fe:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <HAL_PCD_MspInit+0x48>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	2014      	movs	r0, #20
 8007210:	f7fa fa2f 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007214:	2014      	movs	r0, #20
 8007216:	f7fa fa48 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	40005c00 	.word	0x40005c00
 8007228:	40021000 	.word	0x40021000

0800722c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f7fe fdc7 	bl	8005dd6 <USBD_LL_SetupStage>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	015b      	lsls	r3, r3, #5
 8007268:	4413      	add	r3, r2
 800726a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	4619      	mov	r1, r3
 8007274:	f7fe fdfa 	bl	8005e6c <USBD_LL_DataOutStage>
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	015b      	lsls	r3, r3, #5
 8007298:	4413      	add	r3, r2
 800729a:	333c      	adds	r3, #60	; 0x3c
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	4619      	mov	r1, r3
 80072a2:	f7fe fe54 	bl	8005f4e <USBD_LL_DataInStage>
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe ff64 	bl	800618a <USBD_LL_SOF>
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072d2:	2301      	movs	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d001      	beq.n	80072e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80072de:	f7f9 fda7 	bl	8000e30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe ff14 	bl	800611a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe fecd 	bl	8006098 <USBD_LL_Reset>
}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe ff0e 	bl	8006138 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <HAL_PCD_SuspendCallback+0x30>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4a03      	ldr	r2, [pc, #12]	; (8007338 <HAL_PCD_SuspendCallback+0x30>)
 800732a:	f043 0306 	orr.w	r3, r3, #6
 800732e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	e000ed00 	.word	0xe000ed00

0800733c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe ff08 	bl	8006160 <USBD_LL_Resume>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007360:	4a28      	ldr	r2, [pc, #160]	; (8007404 <USBD_LL_Init+0xac>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a26      	ldr	r2, [pc, #152]	; (8007404 <USBD_LL_Init+0xac>)
 800736c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007370:	4b24      	ldr	r3, [pc, #144]	; (8007404 <USBD_LL_Init+0xac>)
 8007372:	4a25      	ldr	r2, [pc, #148]	; (8007408 <USBD_LL_Init+0xb0>)
 8007374:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007376:	4b23      	ldr	r3, [pc, #140]	; (8007404 <USBD_LL_Init+0xac>)
 8007378:	2208      	movs	r2, #8
 800737a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800737c:	4b21      	ldr	r3, [pc, #132]	; (8007404 <USBD_LL_Init+0xac>)
 800737e:	2202      	movs	r2, #2
 8007380:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007382:	4b20      	ldr	r3, [pc, #128]	; (8007404 <USBD_LL_Init+0xac>)
 8007384:	2200      	movs	r2, #0
 8007386:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007388:	4b1e      	ldr	r3, [pc, #120]	; (8007404 <USBD_LL_Init+0xac>)
 800738a:	2200      	movs	r2, #0
 800738c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800738e:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <USBD_LL_Init+0xac>)
 8007390:	2200      	movs	r2, #0
 8007392:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007394:	481b      	ldr	r0, [pc, #108]	; (8007404 <USBD_LL_Init+0xac>)
 8007396:	f7fa fcb3 	bl	8001d00 <HAL_PCD_Init>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80073a0:	f7f9 fd46 	bl	8000e30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073aa:	2318      	movs	r3, #24
 80073ac:	2200      	movs	r2, #0
 80073ae:	2100      	movs	r1, #0
 80073b0:	f7fb fb4c 	bl	8002a4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073ba:	2358      	movs	r3, #88	; 0x58
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	f7fb fb44 	bl	8002a4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073ca:	23c0      	movs	r3, #192	; 0xc0
 80073cc:	2200      	movs	r2, #0
 80073ce:	2181      	movs	r1, #129	; 0x81
 80073d0:	f7fb fb3c 	bl	8002a4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80073de:	2200      	movs	r2, #0
 80073e0:	2101      	movs	r1, #1
 80073e2:	f7fb fb33 	bl	8002a4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f0:	2200      	movs	r2, #0
 80073f2:	2182      	movs	r1, #130	; 0x82
 80073f4:	f7fb fb2a 	bl	8002a4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20001adc 	.word	0x20001adc
 8007408:	40005c00 	.word	0x40005c00

0800740c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007422:	4618      	mov	r0, r3
 8007424:	f7fa fd4d 	bl	8001ec2 <HAL_PCD_Start>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f948 	bl	80076c4 <USBD_Get_USB_Status>
 8007434:	4603      	mov	r3, r0
 8007436:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007438:	7bbb      	ldrb	r3, [r7, #14]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	4608      	mov	r0, r1
 800744c:	4611      	mov	r1, r2
 800744e:	461a      	mov	r2, r3
 8007450:	4603      	mov	r3, r0
 8007452:	70fb      	strb	r3, [r7, #3]
 8007454:	460b      	mov	r3, r1
 8007456:	70bb      	strb	r3, [r7, #2]
 8007458:	4613      	mov	r3, r2
 800745a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800746a:	78bb      	ldrb	r3, [r7, #2]
 800746c:	883a      	ldrh	r2, [r7, #0]
 800746e:	78f9      	ldrb	r1, [r7, #3]
 8007470:	f7fa fe80 	bl	8002174 <HAL_PCD_EP_Open>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f922 	bl	80076c4 <USBD_Get_USB_Status>
 8007480:	4603      	mov	r3, r0
 8007482:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007484:	7bbb      	ldrb	r3, [r7, #14]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fa fec1 	bl	8002234 <HAL_PCD_EP_Close>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f903 	bl	80076c4 <USBD_Get_USB_Status>
 80074be:	4603      	mov	r3, r0
 80074c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074e6:	78fa      	ldrb	r2, [r7, #3]
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fa ff6b 	bl	80023c6 <HAL_PCD_EP_SetStall>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f8e4 	bl	80076c4 <USBD_Get_USB_Status>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007500:	7bbb      	ldrb	r3, [r7, #14]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7fa ffa6 	bl	800247a <HAL_PCD_EP_ClrStall>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f8c5 	bl	80076c4 <USBD_Get_USB_Status>
 800753a:	4603      	mov	r3, r0
 800753c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800753e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800755a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800755c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007560:	2b00      	cmp	r3, #0
 8007562:	da08      	bge.n	8007576 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	015b      	lsls	r3, r3, #5
 800756e:	4413      	add	r3, r2
 8007570:	332a      	adds	r3, #42	; 0x2a
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	e008      	b.n	8007588 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	015b      	lsls	r3, r3, #5
 8007580:	4413      	add	r3, r2
 8007582:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007586:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fa fdba 	bl	800212a <HAL_PCD_SetAddress>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f881 	bl	80076c4 <USBD_Get_USB_Status>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	607a      	str	r2, [r7, #4]
 80075da:	461a      	mov	r2, r3
 80075dc:	460b      	mov	r3, r1
 80075de:	72fb      	strb	r3, [r7, #11]
 80075e0:	4613      	mov	r3, r2
 80075e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075f2:	893b      	ldrh	r3, [r7, #8]
 80075f4:	7af9      	ldrb	r1, [r7, #11]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	f7fa feac 	bl	8002354 <HAL_PCD_EP_Transmit>
 80075fc:	4603      	mov	r3, r0
 80075fe:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f85e 	bl	80076c4 <USBD_Get_USB_Status>
 8007608:	4603      	mov	r3, r0
 800760a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800760c:	7dbb      	ldrb	r3, [r7, #22]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	461a      	mov	r2, r3
 8007622:	460b      	mov	r3, r1
 8007624:	72fb      	strb	r3, [r7, #11]
 8007626:	4613      	mov	r3, r2
 8007628:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007638:	893b      	ldrh	r3, [r7, #8]
 800763a:	7af9      	ldrb	r1, [r7, #11]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	f7fa fe3b 	bl	80022b8 <HAL_PCD_EP_Receive>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 f83b 	bl	80076c4 <USBD_Get_USB_Status>
 800764e:	4603      	mov	r3, r0
 8007650:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007652:	7dbb      	ldrb	r3, [r7, #22]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800766e:	78fa      	ldrb	r2, [r7, #3]
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f7fa fe5a 	bl	800232c <HAL_PCD_EP_GetRxCount>
 8007678:	4603      	mov	r3, r0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <USBD_static_malloc+0x14>)
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	200003a4 	.word	0x200003a4

0800769c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]

}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076d2:	79fb      	ldrb	r3, [r7, #7]
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d817      	bhi.n	8007708 <USBD_Get_USB_Status+0x44>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <USBD_Get_USB_Status+0x1c>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	080076f7 	.word	0x080076f7
 80076e8:	080076fd 	.word	0x080076fd
 80076ec:	08007703 	.word	0x08007703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
    break;
 80076f4:	e00b      	b.n	800770e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076f6:	2302      	movs	r3, #2
 80076f8:	73fb      	strb	r3, [r7, #15]
    break;
 80076fa:	e008      	b.n	800770e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076fc:	2301      	movs	r3, #1
 80076fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007700:	e005      	b.n	800770e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007702:	2302      	movs	r3, #2
 8007704:	73fb      	strb	r3, [r7, #15]
    break;
 8007706:	e002      	b.n	800770e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007708:	2302      	movs	r3, #2
 800770a:	73fb      	strb	r3, [r7, #15]
    break;
 800770c:	bf00      	nop
  }
  return usb_status;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop

0800771c <__errno>:
 800771c:	4b01      	ldr	r3, [pc, #4]	; (8007724 <__errno+0x8>)
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	2000017c 	.word	0x2000017c

08007728 <__libc_init_array>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	2500      	movs	r5, #0
 800772c:	4e0c      	ldr	r6, [pc, #48]	; (8007760 <__libc_init_array+0x38>)
 800772e:	4c0d      	ldr	r4, [pc, #52]	; (8007764 <__libc_init_array+0x3c>)
 8007730:	1ba4      	subs	r4, r4, r6
 8007732:	10a4      	asrs	r4, r4, #2
 8007734:	42a5      	cmp	r5, r4
 8007736:	d109      	bne.n	800774c <__libc_init_array+0x24>
 8007738:	f000 fd18 	bl	800816c <_init>
 800773c:	2500      	movs	r5, #0
 800773e:	4e0a      	ldr	r6, [pc, #40]	; (8007768 <__libc_init_array+0x40>)
 8007740:	4c0a      	ldr	r4, [pc, #40]	; (800776c <__libc_init_array+0x44>)
 8007742:	1ba4      	subs	r4, r4, r6
 8007744:	10a4      	asrs	r4, r4, #2
 8007746:	42a5      	cmp	r5, r4
 8007748:	d105      	bne.n	8007756 <__libc_init_array+0x2e>
 800774a:	bd70      	pop	{r4, r5, r6, pc}
 800774c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007750:	4798      	blx	r3
 8007752:	3501      	adds	r5, #1
 8007754:	e7ee      	b.n	8007734 <__libc_init_array+0xc>
 8007756:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800775a:	4798      	blx	r3
 800775c:	3501      	adds	r5, #1
 800775e:	e7f2      	b.n	8007746 <__libc_init_array+0x1e>
 8007760:	080083c8 	.word	0x080083c8
 8007764:	080083c8 	.word	0x080083c8
 8007768:	080083c8 	.word	0x080083c8
 800776c:	080083cc 	.word	0x080083cc

08007770 <memcpy>:
 8007770:	b510      	push	{r4, lr}
 8007772:	1e43      	subs	r3, r0, #1
 8007774:	440a      	add	r2, r1
 8007776:	4291      	cmp	r1, r2
 8007778:	d100      	bne.n	800777c <memcpy+0xc>
 800777a:	bd10      	pop	{r4, pc}
 800777c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007784:	e7f7      	b.n	8007776 <memcpy+0x6>

08007786 <memset>:
 8007786:	4603      	mov	r3, r0
 8007788:	4402      	add	r2, r0
 800778a:	4293      	cmp	r3, r2
 800778c:	d100      	bne.n	8007790 <memset+0xa>
 800778e:	4770      	bx	lr
 8007790:	f803 1b01 	strb.w	r1, [r3], #1
 8007794:	e7f9      	b.n	800778a <memset+0x4>
	...

08007798 <siprintf>:
 8007798:	b40e      	push	{r1, r2, r3}
 800779a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800779e:	b500      	push	{lr}
 80077a0:	b09c      	sub	sp, #112	; 0x70
 80077a2:	ab1d      	add	r3, sp, #116	; 0x74
 80077a4:	9002      	str	r0, [sp, #8]
 80077a6:	9006      	str	r0, [sp, #24]
 80077a8:	9107      	str	r1, [sp, #28]
 80077aa:	9104      	str	r1, [sp, #16]
 80077ac:	4808      	ldr	r0, [pc, #32]	; (80077d0 <siprintf+0x38>)
 80077ae:	4909      	ldr	r1, [pc, #36]	; (80077d4 <siprintf+0x3c>)
 80077b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b4:	9105      	str	r1, [sp, #20]
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	a902      	add	r1, sp, #8
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	f000 f93c 	bl	8007a38 <_svfiprintf_r>
 80077c0:	2200      	movs	r2, #0
 80077c2:	9b02      	ldr	r3, [sp, #8]
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	b01c      	add	sp, #112	; 0x70
 80077c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077cc:	b003      	add	sp, #12
 80077ce:	4770      	bx	lr
 80077d0:	2000017c 	.word	0x2000017c
 80077d4:	ffff0208 	.word	0xffff0208

080077d8 <strcpy>:
 80077d8:	4603      	mov	r3, r0
 80077da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077de:	f803 2b01 	strb.w	r2, [r3], #1
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	d1f9      	bne.n	80077da <strcpy+0x2>
 80077e6:	4770      	bx	lr

080077e8 <strncmp>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	b16a      	cbz	r2, 8007808 <strncmp+0x20>
 80077ec:	3901      	subs	r1, #1
 80077ee:	1884      	adds	r4, r0, r2
 80077f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80077f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d103      	bne.n	8007804 <strncmp+0x1c>
 80077fc:	42a0      	cmp	r0, r4
 80077fe:	d001      	beq.n	8007804 <strncmp+0x1c>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1f5      	bne.n	80077f0 <strncmp+0x8>
 8007804:	1a98      	subs	r0, r3, r2
 8007806:	bd10      	pop	{r4, pc}
 8007808:	4610      	mov	r0, r2
 800780a:	e7fc      	b.n	8007806 <strncmp+0x1e>

0800780c <strncpy>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	3901      	subs	r1, #1
 8007812:	b902      	cbnz	r2, 8007816 <strncpy+0xa>
 8007814:	bd70      	pop	{r4, r5, r6, pc}
 8007816:	4623      	mov	r3, r4
 8007818:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800781c:	1e56      	subs	r6, r2, #1
 800781e:	f803 5b01 	strb.w	r5, [r3], #1
 8007822:	b92d      	cbnz	r5, 8007830 <strncpy+0x24>
 8007824:	4414      	add	r4, r2
 8007826:	42a3      	cmp	r3, r4
 8007828:	d0f4      	beq.n	8007814 <strncpy+0x8>
 800782a:	f803 5b01 	strb.w	r5, [r3], #1
 800782e:	e7fa      	b.n	8007826 <strncpy+0x1a>
 8007830:	461c      	mov	r4, r3
 8007832:	4632      	mov	r2, r6
 8007834:	e7ed      	b.n	8007812 <strncpy+0x6>

08007836 <_strtol_l.isra.0>:
 8007836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783a:	4680      	mov	r8, r0
 800783c:	4689      	mov	r9, r1
 800783e:	4692      	mov	sl, r2
 8007840:	461e      	mov	r6, r3
 8007842:	460f      	mov	r7, r1
 8007844:	463d      	mov	r5, r7
 8007846:	9808      	ldr	r0, [sp, #32]
 8007848:	f815 4b01 	ldrb.w	r4, [r5], #1
 800784c:	f000 f884 	bl	8007958 <__locale_ctype_ptr_l>
 8007850:	4420      	add	r0, r4
 8007852:	7843      	ldrb	r3, [r0, #1]
 8007854:	f013 0308 	ands.w	r3, r3, #8
 8007858:	d132      	bne.n	80078c0 <_strtol_l.isra.0+0x8a>
 800785a:	2c2d      	cmp	r4, #45	; 0x2d
 800785c:	d132      	bne.n	80078c4 <_strtol_l.isra.0+0x8e>
 800785e:	2201      	movs	r2, #1
 8007860:	787c      	ldrb	r4, [r7, #1]
 8007862:	1cbd      	adds	r5, r7, #2
 8007864:	2e00      	cmp	r6, #0
 8007866:	d05d      	beq.n	8007924 <_strtol_l.isra.0+0xee>
 8007868:	2e10      	cmp	r6, #16
 800786a:	d109      	bne.n	8007880 <_strtol_l.isra.0+0x4a>
 800786c:	2c30      	cmp	r4, #48	; 0x30
 800786e:	d107      	bne.n	8007880 <_strtol_l.isra.0+0x4a>
 8007870:	782b      	ldrb	r3, [r5, #0]
 8007872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007876:	2b58      	cmp	r3, #88	; 0x58
 8007878:	d14f      	bne.n	800791a <_strtol_l.isra.0+0xe4>
 800787a:	2610      	movs	r6, #16
 800787c:	786c      	ldrb	r4, [r5, #1]
 800787e:	3502      	adds	r5, #2
 8007880:	2a00      	cmp	r2, #0
 8007882:	bf14      	ite	ne
 8007884:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007888:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800788c:	2700      	movs	r7, #0
 800788e:	fbb1 fcf6 	udiv	ip, r1, r6
 8007892:	4638      	mov	r0, r7
 8007894:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007898:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800789c:	2b09      	cmp	r3, #9
 800789e:	d817      	bhi.n	80078d0 <_strtol_l.isra.0+0x9a>
 80078a0:	461c      	mov	r4, r3
 80078a2:	42a6      	cmp	r6, r4
 80078a4:	dd23      	ble.n	80078ee <_strtol_l.isra.0+0xb8>
 80078a6:	1c7b      	adds	r3, r7, #1
 80078a8:	d007      	beq.n	80078ba <_strtol_l.isra.0+0x84>
 80078aa:	4584      	cmp	ip, r0
 80078ac:	d31c      	bcc.n	80078e8 <_strtol_l.isra.0+0xb2>
 80078ae:	d101      	bne.n	80078b4 <_strtol_l.isra.0+0x7e>
 80078b0:	45a6      	cmp	lr, r4
 80078b2:	db19      	blt.n	80078e8 <_strtol_l.isra.0+0xb2>
 80078b4:	2701      	movs	r7, #1
 80078b6:	fb00 4006 	mla	r0, r0, r6, r4
 80078ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078be:	e7eb      	b.n	8007898 <_strtol_l.isra.0+0x62>
 80078c0:	462f      	mov	r7, r5
 80078c2:	e7bf      	b.n	8007844 <_strtol_l.isra.0+0xe>
 80078c4:	2c2b      	cmp	r4, #43	; 0x2b
 80078c6:	bf04      	itt	eq
 80078c8:	1cbd      	addeq	r5, r7, #2
 80078ca:	787c      	ldrbeq	r4, [r7, #1]
 80078cc:	461a      	mov	r2, r3
 80078ce:	e7c9      	b.n	8007864 <_strtol_l.isra.0+0x2e>
 80078d0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80078d4:	2b19      	cmp	r3, #25
 80078d6:	d801      	bhi.n	80078dc <_strtol_l.isra.0+0xa6>
 80078d8:	3c37      	subs	r4, #55	; 0x37
 80078da:	e7e2      	b.n	80078a2 <_strtol_l.isra.0+0x6c>
 80078dc:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80078e0:	2b19      	cmp	r3, #25
 80078e2:	d804      	bhi.n	80078ee <_strtol_l.isra.0+0xb8>
 80078e4:	3c57      	subs	r4, #87	; 0x57
 80078e6:	e7dc      	b.n	80078a2 <_strtol_l.isra.0+0x6c>
 80078e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80078ec:	e7e5      	b.n	80078ba <_strtol_l.isra.0+0x84>
 80078ee:	1c7b      	adds	r3, r7, #1
 80078f0:	d108      	bne.n	8007904 <_strtol_l.isra.0+0xce>
 80078f2:	2322      	movs	r3, #34	; 0x22
 80078f4:	4608      	mov	r0, r1
 80078f6:	f8c8 3000 	str.w	r3, [r8]
 80078fa:	f1ba 0f00 	cmp.w	sl, #0
 80078fe:	d107      	bne.n	8007910 <_strtol_l.isra.0+0xda>
 8007900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007904:	b102      	cbz	r2, 8007908 <_strtol_l.isra.0+0xd2>
 8007906:	4240      	negs	r0, r0
 8007908:	f1ba 0f00 	cmp.w	sl, #0
 800790c:	d0f8      	beq.n	8007900 <_strtol_l.isra.0+0xca>
 800790e:	b10f      	cbz	r7, 8007914 <_strtol_l.isra.0+0xde>
 8007910:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007914:	f8ca 9000 	str.w	r9, [sl]
 8007918:	e7f2      	b.n	8007900 <_strtol_l.isra.0+0xca>
 800791a:	2430      	movs	r4, #48	; 0x30
 800791c:	2e00      	cmp	r6, #0
 800791e:	d1af      	bne.n	8007880 <_strtol_l.isra.0+0x4a>
 8007920:	2608      	movs	r6, #8
 8007922:	e7ad      	b.n	8007880 <_strtol_l.isra.0+0x4a>
 8007924:	2c30      	cmp	r4, #48	; 0x30
 8007926:	d0a3      	beq.n	8007870 <_strtol_l.isra.0+0x3a>
 8007928:	260a      	movs	r6, #10
 800792a:	e7a9      	b.n	8007880 <_strtol_l.isra.0+0x4a>

0800792c <strtol>:
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <strtol+0x24>)
 800792e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007930:	681c      	ldr	r4, [r3, #0]
 8007932:	4d08      	ldr	r5, [pc, #32]	; (8007954 <strtol+0x28>)
 8007934:	6a23      	ldr	r3, [r4, #32]
 8007936:	2b00      	cmp	r3, #0
 8007938:	bf08      	it	eq
 800793a:	462b      	moveq	r3, r5
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4613      	mov	r3, r2
 8007940:	460a      	mov	r2, r1
 8007942:	4601      	mov	r1, r0
 8007944:	4620      	mov	r0, r4
 8007946:	f7ff ff76 	bl	8007836 <_strtol_l.isra.0>
 800794a:	b003      	add	sp, #12
 800794c:	bd30      	pop	{r4, r5, pc}
 800794e:	bf00      	nop
 8007950:	2000017c 	.word	0x2000017c
 8007954:	200001e0 	.word	0x200001e0

08007958 <__locale_ctype_ptr_l>:
 8007958:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800795c:	4770      	bx	lr

0800795e <__ascii_mbtowc>:
 800795e:	b082      	sub	sp, #8
 8007960:	b901      	cbnz	r1, 8007964 <__ascii_mbtowc+0x6>
 8007962:	a901      	add	r1, sp, #4
 8007964:	b142      	cbz	r2, 8007978 <__ascii_mbtowc+0x1a>
 8007966:	b14b      	cbz	r3, 800797c <__ascii_mbtowc+0x1e>
 8007968:	7813      	ldrb	r3, [r2, #0]
 800796a:	600b      	str	r3, [r1, #0]
 800796c:	7812      	ldrb	r2, [r2, #0]
 800796e:	1c10      	adds	r0, r2, #0
 8007970:	bf18      	it	ne
 8007972:	2001      	movne	r0, #1
 8007974:	b002      	add	sp, #8
 8007976:	4770      	bx	lr
 8007978:	4610      	mov	r0, r2
 800797a:	e7fb      	b.n	8007974 <__ascii_mbtowc+0x16>
 800797c:	f06f 0001 	mvn.w	r0, #1
 8007980:	e7f8      	b.n	8007974 <__ascii_mbtowc+0x16>

08007982 <__ssputs_r>:
 8007982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007986:	688e      	ldr	r6, [r1, #8]
 8007988:	4682      	mov	sl, r0
 800798a:	429e      	cmp	r6, r3
 800798c:	460c      	mov	r4, r1
 800798e:	4690      	mov	r8, r2
 8007990:	4699      	mov	r9, r3
 8007992:	d837      	bhi.n	8007a04 <__ssputs_r+0x82>
 8007994:	898a      	ldrh	r2, [r1, #12]
 8007996:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800799a:	d031      	beq.n	8007a00 <__ssputs_r+0x7e>
 800799c:	2302      	movs	r3, #2
 800799e:	6825      	ldr	r5, [r4, #0]
 80079a0:	6909      	ldr	r1, [r1, #16]
 80079a2:	1a6f      	subs	r7, r5, r1
 80079a4:	6965      	ldr	r5, [r4, #20]
 80079a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079aa:	fb95 f5f3 	sdiv	r5, r5, r3
 80079ae:	f109 0301 	add.w	r3, r9, #1
 80079b2:	443b      	add	r3, r7
 80079b4:	429d      	cmp	r5, r3
 80079b6:	bf38      	it	cc
 80079b8:	461d      	movcc	r5, r3
 80079ba:	0553      	lsls	r3, r2, #21
 80079bc:	d530      	bpl.n	8007a20 <__ssputs_r+0x9e>
 80079be:	4629      	mov	r1, r5
 80079c0:	f000 fb3a 	bl	8008038 <_malloc_r>
 80079c4:	4606      	mov	r6, r0
 80079c6:	b950      	cbnz	r0, 80079de <__ssputs_r+0x5c>
 80079c8:	230c      	movs	r3, #12
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ce:	f8ca 3000 	str.w	r3, [sl]
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079de:	463a      	mov	r2, r7
 80079e0:	6921      	ldr	r1, [r4, #16]
 80079e2:	f7ff fec5 	bl	8007770 <memcpy>
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	6126      	str	r6, [r4, #16]
 80079f4:	443e      	add	r6, r7
 80079f6:	6026      	str	r6, [r4, #0]
 80079f8:	464e      	mov	r6, r9
 80079fa:	6165      	str	r5, [r4, #20]
 80079fc:	1bed      	subs	r5, r5, r7
 80079fe:	60a5      	str	r5, [r4, #8]
 8007a00:	454e      	cmp	r6, r9
 8007a02:	d900      	bls.n	8007a06 <__ssputs_r+0x84>
 8007a04:	464e      	mov	r6, r9
 8007a06:	4632      	mov	r2, r6
 8007a08:	4641      	mov	r1, r8
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	f000 faaf 	bl	8007f6e <memmove>
 8007a10:	68a3      	ldr	r3, [r4, #8]
 8007a12:	2000      	movs	r0, #0
 8007a14:	1b9b      	subs	r3, r3, r6
 8007a16:	60a3      	str	r3, [r4, #8]
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	441e      	add	r6, r3
 8007a1c:	6026      	str	r6, [r4, #0]
 8007a1e:	e7dc      	b.n	80079da <__ssputs_r+0x58>
 8007a20:	462a      	mov	r2, r5
 8007a22:	f000 fb63 	bl	80080ec <_realloc_r>
 8007a26:	4606      	mov	r6, r0
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d1e2      	bne.n	80079f2 <__ssputs_r+0x70>
 8007a2c:	6921      	ldr	r1, [r4, #16]
 8007a2e:	4650      	mov	r0, sl
 8007a30:	f000 fab6 	bl	8007fa0 <_free_r>
 8007a34:	e7c8      	b.n	80079c8 <__ssputs_r+0x46>
	...

08007a38 <_svfiprintf_r>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	461d      	mov	r5, r3
 8007a3e:	898b      	ldrh	r3, [r1, #12]
 8007a40:	b09d      	sub	sp, #116	; 0x74
 8007a42:	061f      	lsls	r7, r3, #24
 8007a44:	4680      	mov	r8, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	4616      	mov	r6, r2
 8007a4a:	d50f      	bpl.n	8007a6c <_svfiprintf_r+0x34>
 8007a4c:	690b      	ldr	r3, [r1, #16]
 8007a4e:	b96b      	cbnz	r3, 8007a6c <_svfiprintf_r+0x34>
 8007a50:	2140      	movs	r1, #64	; 0x40
 8007a52:	f000 faf1 	bl	8008038 <_malloc_r>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	6120      	str	r0, [r4, #16]
 8007a5a:	b928      	cbnz	r0, 8007a68 <_svfiprintf_r+0x30>
 8007a5c:	230c      	movs	r3, #12
 8007a5e:	f8c8 3000 	str.w	r3, [r8]
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a66:	e0c8      	b.n	8007bfa <_svfiprintf_r+0x1c2>
 8007a68:	2340      	movs	r3, #64	; 0x40
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a70:	2320      	movs	r3, #32
 8007a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a76:	2330      	movs	r3, #48	; 0x30
 8007a78:	f04f 0b01 	mov.w	fp, #1
 8007a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a80:	9503      	str	r5, [sp, #12]
 8007a82:	4637      	mov	r7, r6
 8007a84:	463d      	mov	r5, r7
 8007a86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a8a:	b10b      	cbz	r3, 8007a90 <_svfiprintf_r+0x58>
 8007a8c:	2b25      	cmp	r3, #37	; 0x25
 8007a8e:	d13e      	bne.n	8007b0e <_svfiprintf_r+0xd6>
 8007a90:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a94:	d00b      	beq.n	8007aae <_svfiprintf_r+0x76>
 8007a96:	4653      	mov	r3, sl
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	f7ff ff70 	bl	8007982 <__ssputs_r>
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f000 80a4 	beq.w	8007bf0 <_svfiprintf_r+0x1b8>
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	4453      	add	r3, sl
 8007aac:	9309      	str	r3, [sp, #36]	; 0x24
 8007aae:	783b      	ldrb	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 809d 	beq.w	8007bf0 <_svfiprintf_r+0x1b8>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8007aca:	462f      	mov	r7, r5
 8007acc:	2205      	movs	r2, #5
 8007ace:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ad2:	4850      	ldr	r0, [pc, #320]	; (8007c14 <_svfiprintf_r+0x1dc>)
 8007ad4:	f000 fa3d 	bl	8007f52 <memchr>
 8007ad8:	9b04      	ldr	r3, [sp, #16]
 8007ada:	b9d0      	cbnz	r0, 8007b12 <_svfiprintf_r+0xda>
 8007adc:	06d9      	lsls	r1, r3, #27
 8007ade:	bf44      	itt	mi
 8007ae0:	2220      	movmi	r2, #32
 8007ae2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ae6:	071a      	lsls	r2, r3, #28
 8007ae8:	bf44      	itt	mi
 8007aea:	222b      	movmi	r2, #43	; 0x2b
 8007aec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007af0:	782a      	ldrb	r2, [r5, #0]
 8007af2:	2a2a      	cmp	r2, #42	; 0x2a
 8007af4:	d015      	beq.n	8007b22 <_svfiprintf_r+0xea>
 8007af6:	462f      	mov	r7, r5
 8007af8:	2000      	movs	r0, #0
 8007afa:	250a      	movs	r5, #10
 8007afc:	9a07      	ldr	r2, [sp, #28]
 8007afe:	4639      	mov	r1, r7
 8007b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b04:	3b30      	subs	r3, #48	; 0x30
 8007b06:	2b09      	cmp	r3, #9
 8007b08:	d94d      	bls.n	8007ba6 <_svfiprintf_r+0x16e>
 8007b0a:	b1b8      	cbz	r0, 8007b3c <_svfiprintf_r+0x104>
 8007b0c:	e00f      	b.n	8007b2e <_svfiprintf_r+0xf6>
 8007b0e:	462f      	mov	r7, r5
 8007b10:	e7b8      	b.n	8007a84 <_svfiprintf_r+0x4c>
 8007b12:	4a40      	ldr	r2, [pc, #256]	; (8007c14 <_svfiprintf_r+0x1dc>)
 8007b14:	463d      	mov	r5, r7
 8007b16:	1a80      	subs	r0, r0, r2
 8007b18:	fa0b f000 	lsl.w	r0, fp, r0
 8007b1c:	4318      	orrs	r0, r3
 8007b1e:	9004      	str	r0, [sp, #16]
 8007b20:	e7d3      	b.n	8007aca <_svfiprintf_r+0x92>
 8007b22:	9a03      	ldr	r2, [sp, #12]
 8007b24:	1d11      	adds	r1, r2, #4
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	9103      	str	r1, [sp, #12]
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	db01      	blt.n	8007b32 <_svfiprintf_r+0xfa>
 8007b2e:	9207      	str	r2, [sp, #28]
 8007b30:	e004      	b.n	8007b3c <_svfiprintf_r+0x104>
 8007b32:	4252      	negs	r2, r2
 8007b34:	f043 0302 	orr.w	r3, r3, #2
 8007b38:	9207      	str	r2, [sp, #28]
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	783b      	ldrb	r3, [r7, #0]
 8007b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007b40:	d10c      	bne.n	8007b5c <_svfiprintf_r+0x124>
 8007b42:	787b      	ldrb	r3, [r7, #1]
 8007b44:	2b2a      	cmp	r3, #42	; 0x2a
 8007b46:	d133      	bne.n	8007bb0 <_svfiprintf_r+0x178>
 8007b48:	9b03      	ldr	r3, [sp, #12]
 8007b4a:	3702      	adds	r7, #2
 8007b4c:	1d1a      	adds	r2, r3, #4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	9203      	str	r2, [sp, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfb8      	it	lt
 8007b56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	4d2e      	ldr	r5, [pc, #184]	; (8007c18 <_svfiprintf_r+0x1e0>)
 8007b5e:	2203      	movs	r2, #3
 8007b60:	7839      	ldrb	r1, [r7, #0]
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f9f5 	bl	8007f52 <memchr>
 8007b68:	b138      	cbz	r0, 8007b7a <_svfiprintf_r+0x142>
 8007b6a:	2340      	movs	r3, #64	; 0x40
 8007b6c:	1b40      	subs	r0, r0, r5
 8007b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	3701      	adds	r7, #1
 8007b76:	4303      	orrs	r3, r0
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	7839      	ldrb	r1, [r7, #0]
 8007b7c:	2206      	movs	r2, #6
 8007b7e:	4827      	ldr	r0, [pc, #156]	; (8007c1c <_svfiprintf_r+0x1e4>)
 8007b80:	1c7e      	adds	r6, r7, #1
 8007b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b86:	f000 f9e4 	bl	8007f52 <memchr>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d038      	beq.n	8007c00 <_svfiprintf_r+0x1c8>
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <_svfiprintf_r+0x1e8>)
 8007b90:	bb13      	cbnz	r3, 8007bd8 <_svfiprintf_r+0x1a0>
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	3307      	adds	r3, #7
 8007b96:	f023 0307 	bic.w	r3, r3, #7
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba0:	444b      	add	r3, r9
 8007ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba4:	e76d      	b.n	8007a82 <_svfiprintf_r+0x4a>
 8007ba6:	fb05 3202 	mla	r2, r5, r2, r3
 8007baa:	2001      	movs	r0, #1
 8007bac:	460f      	mov	r7, r1
 8007bae:	e7a6      	b.n	8007afe <_svfiprintf_r+0xc6>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	250a      	movs	r5, #10
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	3701      	adds	r7, #1
 8007bb8:	9305      	str	r3, [sp, #20]
 8007bba:	4638      	mov	r0, r7
 8007bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bc0:	3a30      	subs	r2, #48	; 0x30
 8007bc2:	2a09      	cmp	r2, #9
 8007bc4:	d903      	bls.n	8007bce <_svfiprintf_r+0x196>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0c8      	beq.n	8007b5c <_svfiprintf_r+0x124>
 8007bca:	9105      	str	r1, [sp, #20]
 8007bcc:	e7c6      	b.n	8007b5c <_svfiprintf_r+0x124>
 8007bce:	fb05 2101 	mla	r1, r5, r1, r2
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	e7f0      	b.n	8007bba <_svfiprintf_r+0x182>
 8007bd8:	ab03      	add	r3, sp, #12
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <_svfiprintf_r+0x1ec>)
 8007be0:	a904      	add	r1, sp, #16
 8007be2:	4640      	mov	r0, r8
 8007be4:	f3af 8000 	nop.w
 8007be8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007bec:	4681      	mov	r9, r0
 8007bee:	d1d6      	bne.n	8007b9e <_svfiprintf_r+0x166>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	065b      	lsls	r3, r3, #25
 8007bf4:	f53f af35 	bmi.w	8007a62 <_svfiprintf_r+0x2a>
 8007bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bfa:	b01d      	add	sp, #116	; 0x74
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	ab03      	add	r3, sp, #12
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	4622      	mov	r2, r4
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <_svfiprintf_r+0x1ec>)
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f000 f882 	bl	8007d14 <_printf_i>
 8007c10:	e7ea      	b.n	8007be8 <_svfiprintf_r+0x1b0>
 8007c12:	bf00      	nop
 8007c14:	08008292 	.word	0x08008292
 8007c18:	08008298 	.word	0x08008298
 8007c1c:	0800829c 	.word	0x0800829c
 8007c20:	00000000 	.word	0x00000000
 8007c24:	08007983 	.word	0x08007983

08007c28 <_printf_common>:
 8007c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	4691      	mov	r9, r2
 8007c2e:	461f      	mov	r7, r3
 8007c30:	688a      	ldr	r2, [r1, #8]
 8007c32:	690b      	ldr	r3, [r1, #16]
 8007c34:	4606      	mov	r6, r0
 8007c36:	4293      	cmp	r3, r2
 8007c38:	bfb8      	it	lt
 8007c3a:	4613      	movlt	r3, r2
 8007c3c:	f8c9 3000 	str.w	r3, [r9]
 8007c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c44:	460c      	mov	r4, r1
 8007c46:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c4a:	b112      	cbz	r2, 8007c52 <_printf_common+0x2a>
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	f8c9 3000 	str.w	r3, [r9]
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	0699      	lsls	r1, r3, #26
 8007c56:	bf42      	ittt	mi
 8007c58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c5c:	3302      	addmi	r3, #2
 8007c5e:	f8c9 3000 	strmi.w	r3, [r9]
 8007c62:	6825      	ldr	r5, [r4, #0]
 8007c64:	f015 0506 	ands.w	r5, r5, #6
 8007c68:	d107      	bne.n	8007c7a <_printf_common+0x52>
 8007c6a:	f104 0a19 	add.w	sl, r4, #25
 8007c6e:	68e3      	ldr	r3, [r4, #12]
 8007c70:	f8d9 2000 	ldr.w	r2, [r9]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	dc29      	bgt.n	8007cce <_printf_common+0xa6>
 8007c7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c7e:	6822      	ldr	r2, [r4, #0]
 8007c80:	3300      	adds	r3, #0
 8007c82:	bf18      	it	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	0692      	lsls	r2, r2, #26
 8007c88:	d42e      	bmi.n	8007ce8 <_printf_common+0xc0>
 8007c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4630      	mov	r0, r6
 8007c92:	47c0      	blx	r8
 8007c94:	3001      	adds	r0, #1
 8007c96:	d021      	beq.n	8007cdc <_printf_common+0xb4>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	68e5      	ldr	r5, [r4, #12]
 8007c9c:	f003 0306 	and.w	r3, r3, #6
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	bf18      	it	ne
 8007ca4:	2500      	movne	r5, #0
 8007ca6:	f8d9 2000 	ldr.w	r2, [r9]
 8007caa:	f04f 0900 	mov.w	r9, #0
 8007cae:	bf08      	it	eq
 8007cb0:	1aad      	subeq	r5, r5, r2
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	6922      	ldr	r2, [r4, #16]
 8007cb6:	bf08      	it	eq
 8007cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	bfc4      	itt	gt
 8007cc0:	1a9b      	subgt	r3, r3, r2
 8007cc2:	18ed      	addgt	r5, r5, r3
 8007cc4:	341a      	adds	r4, #26
 8007cc6:	454d      	cmp	r5, r9
 8007cc8:	d11a      	bne.n	8007d00 <_printf_common+0xd8>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e008      	b.n	8007ce0 <_printf_common+0xb8>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4652      	mov	r2, sl
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	47c0      	blx	r8
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d103      	bne.n	8007ce4 <_printf_common+0xbc>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	e7c2      	b.n	8007c6e <_printf_common+0x46>
 8007ce8:	2030      	movs	r0, #48	; 0x30
 8007cea:	18e1      	adds	r1, r4, r3
 8007cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cf6:	4422      	add	r2, r4
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cfe:	e7c4      	b.n	8007c8a <_printf_common+0x62>
 8007d00:	2301      	movs	r3, #1
 8007d02:	4622      	mov	r2, r4
 8007d04:	4639      	mov	r1, r7
 8007d06:	4630      	mov	r0, r6
 8007d08:	47c0      	blx	r8
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d0e6      	beq.n	8007cdc <_printf_common+0xb4>
 8007d0e:	f109 0901 	add.w	r9, r9, #1
 8007d12:	e7d8      	b.n	8007cc6 <_printf_common+0x9e>

08007d14 <_printf_i>:
 8007d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	7e09      	ldrb	r1, [r1, #24]
 8007d20:	b085      	sub	sp, #20
 8007d22:	296e      	cmp	r1, #110	; 0x6e
 8007d24:	4617      	mov	r7, r2
 8007d26:	4606      	mov	r6, r0
 8007d28:	4698      	mov	r8, r3
 8007d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d2c:	f000 80b3 	beq.w	8007e96 <_printf_i+0x182>
 8007d30:	d822      	bhi.n	8007d78 <_printf_i+0x64>
 8007d32:	2963      	cmp	r1, #99	; 0x63
 8007d34:	d036      	beq.n	8007da4 <_printf_i+0x90>
 8007d36:	d80a      	bhi.n	8007d4e <_printf_i+0x3a>
 8007d38:	2900      	cmp	r1, #0
 8007d3a:	f000 80b9 	beq.w	8007eb0 <_printf_i+0x19c>
 8007d3e:	2958      	cmp	r1, #88	; 0x58
 8007d40:	f000 8083 	beq.w	8007e4a <_printf_i+0x136>
 8007d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d4c:	e032      	b.n	8007db4 <_printf_i+0xa0>
 8007d4e:	2964      	cmp	r1, #100	; 0x64
 8007d50:	d001      	beq.n	8007d56 <_printf_i+0x42>
 8007d52:	2969      	cmp	r1, #105	; 0x69
 8007d54:	d1f6      	bne.n	8007d44 <_printf_i+0x30>
 8007d56:	6820      	ldr	r0, [r4, #0]
 8007d58:	6813      	ldr	r3, [r2, #0]
 8007d5a:	0605      	lsls	r5, r0, #24
 8007d5c:	f103 0104 	add.w	r1, r3, #4
 8007d60:	d52a      	bpl.n	8007db8 <_printf_i+0xa4>
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da03      	bge.n	8007d72 <_printf_i+0x5e>
 8007d6a:	222d      	movs	r2, #45	; 0x2d
 8007d6c:	425b      	negs	r3, r3
 8007d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d72:	486f      	ldr	r0, [pc, #444]	; (8007f30 <_printf_i+0x21c>)
 8007d74:	220a      	movs	r2, #10
 8007d76:	e039      	b.n	8007dec <_printf_i+0xd8>
 8007d78:	2973      	cmp	r1, #115	; 0x73
 8007d7a:	f000 809d 	beq.w	8007eb8 <_printf_i+0x1a4>
 8007d7e:	d808      	bhi.n	8007d92 <_printf_i+0x7e>
 8007d80:	296f      	cmp	r1, #111	; 0x6f
 8007d82:	d020      	beq.n	8007dc6 <_printf_i+0xb2>
 8007d84:	2970      	cmp	r1, #112	; 0x70
 8007d86:	d1dd      	bne.n	8007d44 <_printf_i+0x30>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	f043 0320 	orr.w	r3, r3, #32
 8007d8e:	6023      	str	r3, [r4, #0]
 8007d90:	e003      	b.n	8007d9a <_printf_i+0x86>
 8007d92:	2975      	cmp	r1, #117	; 0x75
 8007d94:	d017      	beq.n	8007dc6 <_printf_i+0xb2>
 8007d96:	2978      	cmp	r1, #120	; 0x78
 8007d98:	d1d4      	bne.n	8007d44 <_printf_i+0x30>
 8007d9a:	2378      	movs	r3, #120	; 0x78
 8007d9c:	4865      	ldr	r0, [pc, #404]	; (8007f34 <_printf_i+0x220>)
 8007d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007da2:	e055      	b.n	8007e50 <_printf_i+0x13c>
 8007da4:	6813      	ldr	r3, [r2, #0]
 8007da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007daa:	1d19      	adds	r1, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6011      	str	r1, [r2, #0]
 8007db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007db4:	2301      	movs	r3, #1
 8007db6:	e08c      	b.n	8007ed2 <_printf_i+0x1be>
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dbe:	6011      	str	r1, [r2, #0]
 8007dc0:	bf18      	it	ne
 8007dc2:	b21b      	sxthne	r3, r3
 8007dc4:	e7cf      	b.n	8007d66 <_printf_i+0x52>
 8007dc6:	6813      	ldr	r3, [r2, #0]
 8007dc8:	6825      	ldr	r5, [r4, #0]
 8007dca:	1d18      	adds	r0, r3, #4
 8007dcc:	6010      	str	r0, [r2, #0]
 8007dce:	0628      	lsls	r0, r5, #24
 8007dd0:	d501      	bpl.n	8007dd6 <_printf_i+0xc2>
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	e002      	b.n	8007ddc <_printf_i+0xc8>
 8007dd6:	0668      	lsls	r0, r5, #25
 8007dd8:	d5fb      	bpl.n	8007dd2 <_printf_i+0xbe>
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	296f      	cmp	r1, #111	; 0x6f
 8007dde:	bf14      	ite	ne
 8007de0:	220a      	movne	r2, #10
 8007de2:	2208      	moveq	r2, #8
 8007de4:	4852      	ldr	r0, [pc, #328]	; (8007f30 <_printf_i+0x21c>)
 8007de6:	2100      	movs	r1, #0
 8007de8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dec:	6865      	ldr	r5, [r4, #4]
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	60a5      	str	r5, [r4, #8]
 8007df2:	f2c0 8095 	blt.w	8007f20 <_printf_i+0x20c>
 8007df6:	6821      	ldr	r1, [r4, #0]
 8007df8:	f021 0104 	bic.w	r1, r1, #4
 8007dfc:	6021      	str	r1, [r4, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d13d      	bne.n	8007e7e <_printf_i+0x16a>
 8007e02:	2d00      	cmp	r5, #0
 8007e04:	f040 808e 	bne.w	8007f24 <_printf_i+0x210>
 8007e08:	4665      	mov	r5, ip
 8007e0a:	2a08      	cmp	r2, #8
 8007e0c:	d10b      	bne.n	8007e26 <_printf_i+0x112>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	07db      	lsls	r3, r3, #31
 8007e12:	d508      	bpl.n	8007e26 <_printf_i+0x112>
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	6862      	ldr	r2, [r4, #4]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	bfde      	ittt	le
 8007e1c:	2330      	movle	r3, #48	; 0x30
 8007e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e26:	ebac 0305 	sub.w	r3, ip, r5
 8007e2a:	6123      	str	r3, [r4, #16]
 8007e2c:	f8cd 8000 	str.w	r8, [sp]
 8007e30:	463b      	mov	r3, r7
 8007e32:	aa03      	add	r2, sp, #12
 8007e34:	4621      	mov	r1, r4
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff fef6 	bl	8007c28 <_printf_common>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d14d      	bne.n	8007edc <_printf_i+0x1c8>
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e44:	b005      	add	sp, #20
 8007e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e4a:	4839      	ldr	r0, [pc, #228]	; (8007f30 <_printf_i+0x21c>)
 8007e4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e50:	6813      	ldr	r3, [r2, #0]
 8007e52:	6821      	ldr	r1, [r4, #0]
 8007e54:	1d1d      	adds	r5, r3, #4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6015      	str	r5, [r2, #0]
 8007e5a:	060a      	lsls	r2, r1, #24
 8007e5c:	d50b      	bpl.n	8007e76 <_printf_i+0x162>
 8007e5e:	07ca      	lsls	r2, r1, #31
 8007e60:	bf44      	itt	mi
 8007e62:	f041 0120 	orrmi.w	r1, r1, #32
 8007e66:	6021      	strmi	r1, [r4, #0]
 8007e68:	b91b      	cbnz	r3, 8007e72 <_printf_i+0x15e>
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	f022 0220 	bic.w	r2, r2, #32
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	2210      	movs	r2, #16
 8007e74:	e7b7      	b.n	8007de6 <_printf_i+0xd2>
 8007e76:	064d      	lsls	r5, r1, #25
 8007e78:	bf48      	it	mi
 8007e7a:	b29b      	uxthmi	r3, r3
 8007e7c:	e7ef      	b.n	8007e5e <_printf_i+0x14a>
 8007e7e:	4665      	mov	r5, ip
 8007e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e84:	fb02 3311 	mls	r3, r2, r1, r3
 8007e88:	5cc3      	ldrb	r3, [r0, r3]
 8007e8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e8e:	460b      	mov	r3, r1
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d1f5      	bne.n	8007e80 <_printf_i+0x16c>
 8007e94:	e7b9      	b.n	8007e0a <_printf_i+0xf6>
 8007e96:	6813      	ldr	r3, [r2, #0]
 8007e98:	6825      	ldr	r5, [r4, #0]
 8007e9a:	1d18      	adds	r0, r3, #4
 8007e9c:	6961      	ldr	r1, [r4, #20]
 8007e9e:	6010      	str	r0, [r2, #0]
 8007ea0:	0628      	lsls	r0, r5, #24
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	d501      	bpl.n	8007eaa <_printf_i+0x196>
 8007ea6:	6019      	str	r1, [r3, #0]
 8007ea8:	e002      	b.n	8007eb0 <_printf_i+0x19c>
 8007eaa:	066a      	lsls	r2, r5, #25
 8007eac:	d5fb      	bpl.n	8007ea6 <_printf_i+0x192>
 8007eae:	8019      	strh	r1, [r3, #0]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4665      	mov	r5, ip
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	e7b9      	b.n	8007e2c <_printf_i+0x118>
 8007eb8:	6813      	ldr	r3, [r2, #0]
 8007eba:	1d19      	adds	r1, r3, #4
 8007ebc:	6011      	str	r1, [r2, #0]
 8007ebe:	681d      	ldr	r5, [r3, #0]
 8007ec0:	6862      	ldr	r2, [r4, #4]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f844 	bl	8007f52 <memchr>
 8007eca:	b108      	cbz	r0, 8007ed0 <_printf_i+0x1bc>
 8007ecc:	1b40      	subs	r0, r0, r5
 8007ece:	6060      	str	r0, [r4, #4]
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eda:	e7a7      	b.n	8007e2c <_printf_i+0x118>
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	462a      	mov	r2, r5
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	47c0      	blx	r8
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	d0aa      	beq.n	8007e40 <_printf_i+0x12c>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	079b      	lsls	r3, r3, #30
 8007eee:	d413      	bmi.n	8007f18 <_printf_i+0x204>
 8007ef0:	68e0      	ldr	r0, [r4, #12]
 8007ef2:	9b03      	ldr	r3, [sp, #12]
 8007ef4:	4298      	cmp	r0, r3
 8007ef6:	bfb8      	it	lt
 8007ef8:	4618      	movlt	r0, r3
 8007efa:	e7a3      	b.n	8007e44 <_printf_i+0x130>
 8007efc:	2301      	movs	r3, #1
 8007efe:	464a      	mov	r2, r9
 8007f00:	4639      	mov	r1, r7
 8007f02:	4630      	mov	r0, r6
 8007f04:	47c0      	blx	r8
 8007f06:	3001      	adds	r0, #1
 8007f08:	d09a      	beq.n	8007e40 <_printf_i+0x12c>
 8007f0a:	3501      	adds	r5, #1
 8007f0c:	68e3      	ldr	r3, [r4, #12]
 8007f0e:	9a03      	ldr	r2, [sp, #12]
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	42ab      	cmp	r3, r5
 8007f14:	dcf2      	bgt.n	8007efc <_printf_i+0x1e8>
 8007f16:	e7eb      	b.n	8007ef0 <_printf_i+0x1dc>
 8007f18:	2500      	movs	r5, #0
 8007f1a:	f104 0919 	add.w	r9, r4, #25
 8007f1e:	e7f5      	b.n	8007f0c <_printf_i+0x1f8>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1ac      	bne.n	8007e7e <_printf_i+0x16a>
 8007f24:	7803      	ldrb	r3, [r0, #0]
 8007f26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f2e:	e76c      	b.n	8007e0a <_printf_i+0xf6>
 8007f30:	080082a3 	.word	0x080082a3
 8007f34:	080082b4 	.word	0x080082b4

08007f38 <__ascii_wctomb>:
 8007f38:	b149      	cbz	r1, 8007f4e <__ascii_wctomb+0x16>
 8007f3a:	2aff      	cmp	r2, #255	; 0xff
 8007f3c:	bf8b      	itete	hi
 8007f3e:	238a      	movhi	r3, #138	; 0x8a
 8007f40:	700a      	strbls	r2, [r1, #0]
 8007f42:	6003      	strhi	r3, [r0, #0]
 8007f44:	2001      	movls	r0, #1
 8007f46:	bf88      	it	hi
 8007f48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007f4c:	4770      	bx	lr
 8007f4e:	4608      	mov	r0, r1
 8007f50:	4770      	bx	lr

08007f52 <memchr>:
 8007f52:	b510      	push	{r4, lr}
 8007f54:	b2c9      	uxtb	r1, r1
 8007f56:	4402      	add	r2, r0
 8007f58:	4290      	cmp	r0, r2
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	d101      	bne.n	8007f62 <memchr+0x10>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e003      	b.n	8007f6a <memchr+0x18>
 8007f62:	781c      	ldrb	r4, [r3, #0]
 8007f64:	3001      	adds	r0, #1
 8007f66:	428c      	cmp	r4, r1
 8007f68:	d1f6      	bne.n	8007f58 <memchr+0x6>
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	bd10      	pop	{r4, pc}

08007f6e <memmove>:
 8007f6e:	4288      	cmp	r0, r1
 8007f70:	b510      	push	{r4, lr}
 8007f72:	eb01 0302 	add.w	r3, r1, r2
 8007f76:	d807      	bhi.n	8007f88 <memmove+0x1a>
 8007f78:	1e42      	subs	r2, r0, #1
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	d00a      	beq.n	8007f94 <memmove+0x26>
 8007f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007f86:	e7f8      	b.n	8007f7a <memmove+0xc>
 8007f88:	4283      	cmp	r3, r0
 8007f8a:	d9f5      	bls.n	8007f78 <memmove+0xa>
 8007f8c:	1881      	adds	r1, r0, r2
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	42d3      	cmn	r3, r2
 8007f92:	d100      	bne.n	8007f96 <memmove+0x28>
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f9e:	e7f7      	b.n	8007f90 <memmove+0x22>

08007fa0 <_free_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d043      	beq.n	8008030 <_free_r+0x90>
 8007fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fac:	1f0c      	subs	r4, r1, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb8      	it	lt
 8007fb2:	18e4      	addlt	r4, r4, r3
 8007fb4:	f000 f8d0 	bl	8008158 <__malloc_lock>
 8007fb8:	4a1e      	ldr	r2, [pc, #120]	; (8008034 <_free_r+0x94>)
 8007fba:	6813      	ldr	r3, [r2, #0]
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	b933      	cbnz	r3, 8007fce <_free_r+0x2e>
 8007fc0:	6063      	str	r3, [r4, #4]
 8007fc2:	6014      	str	r4, [r2, #0]
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fca:	f000 b8c6 	b.w	800815a <__malloc_unlock>
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	d90b      	bls.n	8007fea <_free_r+0x4a>
 8007fd2:	6821      	ldr	r1, [r4, #0]
 8007fd4:	1862      	adds	r2, r4, r1
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bf01      	itttt	eq
 8007fda:	681a      	ldreq	r2, [r3, #0]
 8007fdc:	685b      	ldreq	r3, [r3, #4]
 8007fde:	1852      	addeq	r2, r2, r1
 8007fe0:	6022      	streq	r2, [r4, #0]
 8007fe2:	6063      	str	r3, [r4, #4]
 8007fe4:	6004      	str	r4, [r0, #0]
 8007fe6:	e7ed      	b.n	8007fc4 <_free_r+0x24>
 8007fe8:	4613      	mov	r3, r2
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	b10a      	cbz	r2, 8007ff2 <_free_r+0x52>
 8007fee:	42a2      	cmp	r2, r4
 8007ff0:	d9fa      	bls.n	8007fe8 <_free_r+0x48>
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	1858      	adds	r0, r3, r1
 8007ff6:	42a0      	cmp	r0, r4
 8007ff8:	d10b      	bne.n	8008012 <_free_r+0x72>
 8007ffa:	6820      	ldr	r0, [r4, #0]
 8007ffc:	4401      	add	r1, r0
 8007ffe:	1858      	adds	r0, r3, r1
 8008000:	4282      	cmp	r2, r0
 8008002:	6019      	str	r1, [r3, #0]
 8008004:	d1de      	bne.n	8007fc4 <_free_r+0x24>
 8008006:	6810      	ldr	r0, [r2, #0]
 8008008:	6852      	ldr	r2, [r2, #4]
 800800a:	4401      	add	r1, r0
 800800c:	6019      	str	r1, [r3, #0]
 800800e:	605a      	str	r2, [r3, #4]
 8008010:	e7d8      	b.n	8007fc4 <_free_r+0x24>
 8008012:	d902      	bls.n	800801a <_free_r+0x7a>
 8008014:	230c      	movs	r3, #12
 8008016:	602b      	str	r3, [r5, #0]
 8008018:	e7d4      	b.n	8007fc4 <_free_r+0x24>
 800801a:	6820      	ldr	r0, [r4, #0]
 800801c:	1821      	adds	r1, r4, r0
 800801e:	428a      	cmp	r2, r1
 8008020:	bf01      	itttt	eq
 8008022:	6811      	ldreq	r1, [r2, #0]
 8008024:	6852      	ldreq	r2, [r2, #4]
 8008026:	1809      	addeq	r1, r1, r0
 8008028:	6021      	streq	r1, [r4, #0]
 800802a:	6062      	str	r2, [r4, #4]
 800802c:	605c      	str	r4, [r3, #4]
 800802e:	e7c9      	b.n	8007fc4 <_free_r+0x24>
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	bf00      	nop
 8008034:	200005c4 	.word	0x200005c4

08008038 <_malloc_r>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	1ccd      	adds	r5, r1, #3
 800803c:	f025 0503 	bic.w	r5, r5, #3
 8008040:	3508      	adds	r5, #8
 8008042:	2d0c      	cmp	r5, #12
 8008044:	bf38      	it	cc
 8008046:	250c      	movcc	r5, #12
 8008048:	2d00      	cmp	r5, #0
 800804a:	4606      	mov	r6, r0
 800804c:	db01      	blt.n	8008052 <_malloc_r+0x1a>
 800804e:	42a9      	cmp	r1, r5
 8008050:	d903      	bls.n	800805a <_malloc_r+0x22>
 8008052:	230c      	movs	r3, #12
 8008054:	6033      	str	r3, [r6, #0]
 8008056:	2000      	movs	r0, #0
 8008058:	bd70      	pop	{r4, r5, r6, pc}
 800805a:	f000 f87d 	bl	8008158 <__malloc_lock>
 800805e:	4a21      	ldr	r2, [pc, #132]	; (80080e4 <_malloc_r+0xac>)
 8008060:	6814      	ldr	r4, [r2, #0]
 8008062:	4621      	mov	r1, r4
 8008064:	b991      	cbnz	r1, 800808c <_malloc_r+0x54>
 8008066:	4c20      	ldr	r4, [pc, #128]	; (80080e8 <_malloc_r+0xb0>)
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	b91b      	cbnz	r3, 8008074 <_malloc_r+0x3c>
 800806c:	4630      	mov	r0, r6
 800806e:	f000 f863 	bl	8008138 <_sbrk_r>
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	4629      	mov	r1, r5
 8008076:	4630      	mov	r0, r6
 8008078:	f000 f85e 	bl	8008138 <_sbrk_r>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d124      	bne.n	80080ca <_malloc_r+0x92>
 8008080:	230c      	movs	r3, #12
 8008082:	4630      	mov	r0, r6
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	f000 f868 	bl	800815a <__malloc_unlock>
 800808a:	e7e4      	b.n	8008056 <_malloc_r+0x1e>
 800808c:	680b      	ldr	r3, [r1, #0]
 800808e:	1b5b      	subs	r3, r3, r5
 8008090:	d418      	bmi.n	80080c4 <_malloc_r+0x8c>
 8008092:	2b0b      	cmp	r3, #11
 8008094:	d90f      	bls.n	80080b6 <_malloc_r+0x7e>
 8008096:	600b      	str	r3, [r1, #0]
 8008098:	18cc      	adds	r4, r1, r3
 800809a:	50cd      	str	r5, [r1, r3]
 800809c:	4630      	mov	r0, r6
 800809e:	f000 f85c 	bl	800815a <__malloc_unlock>
 80080a2:	f104 000b 	add.w	r0, r4, #11
 80080a6:	1d23      	adds	r3, r4, #4
 80080a8:	f020 0007 	bic.w	r0, r0, #7
 80080ac:	1ac3      	subs	r3, r0, r3
 80080ae:	d0d3      	beq.n	8008058 <_malloc_r+0x20>
 80080b0:	425a      	negs	r2, r3
 80080b2:	50e2      	str	r2, [r4, r3]
 80080b4:	e7d0      	b.n	8008058 <_malloc_r+0x20>
 80080b6:	684b      	ldr	r3, [r1, #4]
 80080b8:	428c      	cmp	r4, r1
 80080ba:	bf16      	itet	ne
 80080bc:	6063      	strne	r3, [r4, #4]
 80080be:	6013      	streq	r3, [r2, #0]
 80080c0:	460c      	movne	r4, r1
 80080c2:	e7eb      	b.n	800809c <_malloc_r+0x64>
 80080c4:	460c      	mov	r4, r1
 80080c6:	6849      	ldr	r1, [r1, #4]
 80080c8:	e7cc      	b.n	8008064 <_malloc_r+0x2c>
 80080ca:	1cc4      	adds	r4, r0, #3
 80080cc:	f024 0403 	bic.w	r4, r4, #3
 80080d0:	42a0      	cmp	r0, r4
 80080d2:	d005      	beq.n	80080e0 <_malloc_r+0xa8>
 80080d4:	1a21      	subs	r1, r4, r0
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 f82e 	bl	8008138 <_sbrk_r>
 80080dc:	3001      	adds	r0, #1
 80080de:	d0cf      	beq.n	8008080 <_malloc_r+0x48>
 80080e0:	6025      	str	r5, [r4, #0]
 80080e2:	e7db      	b.n	800809c <_malloc_r+0x64>
 80080e4:	200005c4 	.word	0x200005c4
 80080e8:	200005c8 	.word	0x200005c8

080080ec <_realloc_r>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	4607      	mov	r7, r0
 80080f0:	4614      	mov	r4, r2
 80080f2:	460e      	mov	r6, r1
 80080f4:	b921      	cbnz	r1, 8008100 <_realloc_r+0x14>
 80080f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080fa:	4611      	mov	r1, r2
 80080fc:	f7ff bf9c 	b.w	8008038 <_malloc_r>
 8008100:	b922      	cbnz	r2, 800810c <_realloc_r+0x20>
 8008102:	f7ff ff4d 	bl	8007fa0 <_free_r>
 8008106:	4625      	mov	r5, r4
 8008108:	4628      	mov	r0, r5
 800810a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800810c:	f000 f826 	bl	800815c <_malloc_usable_size_r>
 8008110:	42a0      	cmp	r0, r4
 8008112:	d20f      	bcs.n	8008134 <_realloc_r+0x48>
 8008114:	4621      	mov	r1, r4
 8008116:	4638      	mov	r0, r7
 8008118:	f7ff ff8e 	bl	8008038 <_malloc_r>
 800811c:	4605      	mov	r5, r0
 800811e:	2800      	cmp	r0, #0
 8008120:	d0f2      	beq.n	8008108 <_realloc_r+0x1c>
 8008122:	4631      	mov	r1, r6
 8008124:	4622      	mov	r2, r4
 8008126:	f7ff fb23 	bl	8007770 <memcpy>
 800812a:	4631      	mov	r1, r6
 800812c:	4638      	mov	r0, r7
 800812e:	f7ff ff37 	bl	8007fa0 <_free_r>
 8008132:	e7e9      	b.n	8008108 <_realloc_r+0x1c>
 8008134:	4635      	mov	r5, r6
 8008136:	e7e7      	b.n	8008108 <_realloc_r+0x1c>

08008138 <_sbrk_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	2300      	movs	r3, #0
 800813c:	4c05      	ldr	r4, [pc, #20]	; (8008154 <_sbrk_r+0x1c>)
 800813e:	4605      	mov	r5, r0
 8008140:	4608      	mov	r0, r1
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	f7f9 f8b4 	bl	80012b0 <_sbrk>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_sbrk_r+0x1a>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	b103      	cbz	r3, 8008152 <_sbrk_r+0x1a>
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20001d48 	.word	0x20001d48

08008158 <__malloc_lock>:
 8008158:	4770      	bx	lr

0800815a <__malloc_unlock>:
 800815a:	4770      	bx	lr

0800815c <_malloc_usable_size_r>:
 800815c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008160:	1f18      	subs	r0, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	bfbc      	itt	lt
 8008166:	580b      	ldrlt	r3, [r1, r0]
 8008168:	18c0      	addlt	r0, r0, r3
 800816a:	4770      	bx	lr

0800816c <_init>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	bf00      	nop
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr

08008178 <_fini>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr
