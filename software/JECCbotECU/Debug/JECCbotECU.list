
JECCbotECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a684  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800a798  0800a798  0001a798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaf0  0800aaf0  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aaf0  0800aaf0  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aaf0  0800aaf0  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf0  0800aaf0  0001aaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaf4  0800aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800aaf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001888  2000034c  0800ae44  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20001bd4  0800ae44  00021bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c8e9  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003cb8  00000000  00000000  0003cc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  00040918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  00041ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d13  00000000  00000000  00043348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001313d  00000000  00000000  0005c05b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a008  00000000  00000000  0006f198  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e91a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  000e921c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a77c 	.word	0x0800a77c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800a77c 	.word	0x0800a77c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <apiInit>:
bool apiLocked;

ApiInstruction apiInstruction;

void apiInit()
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e00c      	b.n	8000b62 <apiInit+0x26>
	{
		apiMemory[i] = 0;
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <apiInit+0x44>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		apiWriteables[i] = true;
 8000b52:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <apiInit+0x48>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < API_MEMORY_SIZE; i++)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b68:	dbee      	blt.n	8000b48 <apiInit+0xc>
	}

	apiInstruction.set = false;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <apiInit+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
	apiLocked = false;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <apiInit+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	20000764 	.word	0x20000764
 8000b84:	200005a0 	.word	0x200005a0
 8000b88:	20000730 	.word	0x20000730
 8000b8c:	2000059c 	.word	0x2000059c

08000b90 <apiSetInstruction>:

void apiSetInstruction(char *instruction)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	apiInstruction.commandLen = strlen(instruction)+1;
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fad9 	bl	8000150 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <apiSetInstruction+0x34>)
 8000ba6:	619a      	str	r2, [r3, #24]
	strncpy(apiInstruction.command, instruction, apiInstruction.commandLen);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <apiSetInstruction+0x34>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	461a      	mov	r2, r3
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <apiSetInstruction+0x38>)
 8000bb2:	f007 fbb9 	bl	8008328 <strncpy>
	apiInstruction.set = true;
 8000bb6:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <apiSetInstruction+0x34>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000730 	.word	0x20000730
 8000bc8:	20000731 	.word	0x20000731

08000bcc <apiUpdate>:

ApiInstruction apiUpdate()
{
 8000bcc:	b5b0      	push	{r4, r5, r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	apiInstruction.responseLen = 0;
 8000bd4:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <apiUpdate+0x174>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	631a      	str	r2, [r3, #48]	; 0x30

		if(apiInstruction.set)
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <apiUpdate+0x174>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 809a 	beq.w	8000d18 <apiUpdate+0x14c>
		{
			if(':' == apiInstruction.command[0] && '\n' == apiInstruction.command[apiInstruction.commandLen - 2])
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <apiUpdate+0x174>)
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	2b3a      	cmp	r3, #58	; 0x3a
 8000bea:	f040 808d 	bne.w	8000d08 <apiUpdate+0x13c>
 8000bee:	4b54      	ldr	r3, [pc, #336]	; (8000d40 <apiUpdate+0x174>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	3b02      	subs	r3, #2
 8000bf4:	4a52      	ldr	r2, [pc, #328]	; (8000d40 <apiUpdate+0x174>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	f040 8084 	bne.w	8000d08 <apiUpdate+0x13c>
				char addressStr[5];

				uint8_t instructor;
				uint16_t address;

				strncpy(instructorStr, &apiInstruction.command[1], 2);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	2202      	movs	r2, #2
 8000c06:	494f      	ldr	r1, [pc, #316]	; (8000d44 <apiUpdate+0x178>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 fb8d 	bl	8008328 <strncpy>
				instructorStr[2] = '\0';
 8000c0e:	2300      	movs	r3, #0
 8000c10:	77bb      	strb	r3, [r7, #30]
				strncpy(addressStr, &apiInstruction.command[3], 4);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2204      	movs	r2, #4
 8000c18:	494b      	ldr	r1, [pc, #300]	; (8000d48 <apiUpdate+0x17c>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 fb84 	bl	8008328 <strncpy>
				addressStr[4] = '\0';
 8000c20:	2300      	movs	r3, #0
 8000c22:	763b      	strb	r3, [r7, #24]


				instructor = strtol(instructorStr, NULL, 16);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2210      	movs	r2, #16
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f008 fa41 	bl	80090b4 <strtol>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				address = strtol(addressStr, NULL, 16);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2210      	movs	r2, #16
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f008 fa37 	bl	80090b4 <strtol>
 8000c46:	4603      	mov	r3, r0
 8000c48:	84bb      	strh	r3, [r7, #36]	; 0x24


				if(address < API_MEMORY_SIZE)
 8000c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c4c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c50:	d251      	bcs.n	8000cf6 <apiUpdate+0x12a>
				{
//					while(apiLocked){}
//					apiLocked = true;
					if(API_INSTRUCTION_READ == instructor)
 8000c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d10d      	bne.n	8000c76 <apiUpdate+0xaa>
					{
						apiInstruction.responseLen = sprintf(apiInstruction.response, "%04x%04x\n", address, apiMemory[address]);
 8000c5a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c5e:	4a3b      	ldr	r2, [pc, #236]	; (8000d4c <apiUpdate+0x180>)
 8000c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c64:	460a      	mov	r2, r1
 8000c66:	493a      	ldr	r1, [pc, #232]	; (8000d50 <apiUpdate+0x184>)
 8000c68:	483a      	ldr	r0, [pc, #232]	; (8000d54 <apiUpdate+0x188>)
 8000c6a:	f007 fb23 	bl	80082b4 <siprintf>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <apiUpdate+0x174>)
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000c74:	e050      	b.n	8000d18 <apiUpdate+0x14c>
					}
					else if(API_INSTRUCTION_WRITE == instructor)
 8000c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	d132      	bne.n	8000ce4 <apiUpdate+0x118>
					{
						if(apiWriteables[address])
 8000c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c80:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <apiUpdate+0x18c>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d024      	beq.n	8000cd2 <apiUpdate+0x106>
						{
							char valueStr[5];
							uint16_t value;

							strncpy(valueStr, &apiInstruction.command[7], 4);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4933      	ldr	r1, [pc, #204]	; (8000d5c <apiUpdate+0x190>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f007 fb49 	bl	8008328 <strncpy>
							valueStr[4] = '\0';
 8000c96:	2300      	movs	r3, #0
 8000c98:	743b      	strb	r3, [r7, #16]

							value = strtol(valueStr, NULL, 16);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f008 fa06 	bl	80090b4 <strtol>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	847b      	strh	r3, [r7, #34]	; 0x22

							apiMemory[address] = value;
 8000cac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cae:	4927      	ldr	r1, [pc, #156]	; (8000d4c <apiUpdate+0x180>)
 8000cb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000cb2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

							apiInstruction.responseLen = sprintf(apiInstruction.response, "%04x%04x\n", address, apiMemory[address]);
 8000cb6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cba:	4a24      	ldr	r2, [pc, #144]	; (8000d4c <apiUpdate+0x180>)
 8000cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	4923      	ldr	r1, [pc, #140]	; (8000d50 <apiUpdate+0x184>)
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <apiUpdate+0x188>)
 8000cc6:	f007 faf5 	bl	80082b4 <siprintf>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <apiUpdate+0x174>)
 8000cce:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000cd0:	e022      	b.n	8000d18 <apiUpdate+0x14c>
						}
						else
						{
							apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_ACCESS_DENIED);
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4922      	ldr	r1, [pc, #136]	; (8000d60 <apiUpdate+0x194>)
 8000cd6:	481f      	ldr	r0, [pc, #124]	; (8000d54 <apiUpdate+0x188>)
 8000cd8:	f007 faec 	bl	80082b4 <siprintf>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <apiUpdate+0x174>)
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000ce2:	e019      	b.n	8000d18 <apiUpdate+0x14c>
						}
					}
					else
					{
						apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_WRONG_INSTRUCTOR);
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	491e      	ldr	r1, [pc, #120]	; (8000d60 <apiUpdate+0x194>)
 8000ce8:	481a      	ldr	r0, [pc, #104]	; (8000d54 <apiUpdate+0x188>)
 8000cea:	f007 fae3 	bl	80082b4 <siprintf>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <apiUpdate+0x174>)
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000cf4:	e010      	b.n	8000d18 <apiUpdate+0x14c>
					}
//					apiLocked = false;
				}
				else
				{
					apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_INVALID_ADDRESS);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4919      	ldr	r1, [pc, #100]	; (8000d60 <apiUpdate+0x194>)
 8000cfa:	4816      	ldr	r0, [pc, #88]	; (8000d54 <apiUpdate+0x188>)
 8000cfc:	f007 fada 	bl	80082b4 <siprintf>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <apiUpdate+0x174>)
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
			{
 8000d06:	e007      	b.n	8000d18 <apiUpdate+0x14c>
				}

			}
			else
			{
				apiInstruction.responseLen = sprintf(apiInstruction.response, "e%04x\n", API_ERROR_WRONG_FORMAT);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4915      	ldr	r1, [pc, #84]	; (8000d60 <apiUpdate+0x194>)
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <apiUpdate+0x188>)
 8000d0e:	f007 fad1 	bl	80082b4 <siprintf>
 8000d12:	4602      	mov	r2, r0
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <apiUpdate+0x174>)
 8000d16:	631a      	str	r2, [r3, #48]	; 0x30
			}
		}


	apiInstruction.set = false;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <apiUpdate+0x174>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

	return apiInstruction;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <apiUpdate+0x174>)
 8000d22:	461c      	mov	r4, r3
 8000d24:	4615      	mov	r5, r2
 8000d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	6023      	str	r3, [r4, #0]
}
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000730 	.word	0x20000730
 8000d44:	20000732 	.word	0x20000732
 8000d48:	20000734 	.word	0x20000734
 8000d4c:	20000764 	.word	0x20000764
 8000d50:	0800a798 	.word	0x0800a798
 8000d54:	2000074c 	.word	0x2000074c
 8000d58:	200005a0 	.word	0x200005a0
 8000d5c:	20000738 	.word	0x20000738
 8000d60:	0800a7a4 	.word	0x0800a7a4

08000d64 <isApiAddressValid>:

bool isApiAddressValid(int address)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if(address > 0 && address < API_MEMORY_SIZE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dd05      	ble.n	8000d7e <isApiAddressValid+0x1a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d78:	da01      	bge.n	8000d7e <isApiAddressValid+0x1a>
	{
		return true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <isApiAddressValid+0x1c>
	}
	else
	{
		return false;
 8000d7e:	2300      	movs	r3, #0
	}
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
	...

08000d8c <apiWrite16>:

bool apiWrite16(int address, int16_t value)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
	if(isApiAddressValid(address))
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffe3 	bl	8000d64 <isApiAddressValid>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d007      	beq.n	8000db4 <apiWrite16+0x28>
	{
		memcpy(&apiMemory[address], &value, 2);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <apiWrite16+0x34>)
 8000daa:	4413      	add	r3, r2
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	801a      	strh	r2, [r3, #0]
		return true;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <apiWrite16+0x2a>
	}
	else
	{
		return false;
 8000db4:	2300      	movs	r3, #0
	}
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000764 	.word	0x20000764

08000dc4 <apiWrite32>:

	return val;
}

bool apiWrite32(int address, int32_t value)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	if(isApiAddressValid(address))
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffc8 	bl	8000d64 <isApiAddressValid>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <apiWrite32+0x26>
	{
		memcpy(&apiMemory[address], &value, 4);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <apiWrite32+0x30>)
 8000de0:	4413      	add	r3, r2
 8000de2:	683a      	ldr	r2, [r7, #0]
 8000de4:	601a      	str	r2, [r3, #0]
		return true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <apiWrite32+0x28>
	}
	else
	{
		return false;
 8000dea:	2300      	movs	r3, #0
	}
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000764 	.word	0x20000764

08000df8 <apiWriteFloat>:
	return val;
}


bool apiWriteFloat(int address, float value)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	if(isApiAddressValid(address))
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffae 	bl	8000d64 <isApiAddressValid>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d007      	beq.n	8000e1e <apiWriteFloat+0x26>
	{
		memcpy(&apiMemory[address], &value, 4);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <apiWriteFloat+0x30>)
 8000e14:	4413      	add	r3, r2
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	601a      	str	r2, [r3, #0]
		return true;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <apiWriteFloat+0x28>
	}
	else
	{
		return false;
 8000e1e:	2300      	movs	r3, #0
	}
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000764 	.word	0x20000764

08000e2c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_UART_RxCpltCallback+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d102      	bne.n	8000e46 <HAL_UART_RxCpltCallback+0x1a>
	{
		kvhFetch();
 8000e40:	f000 fb62 	bl	8001508 <kvhFetch>
	}
	else if(huart->Instance == huart3.Instance)
	{
		gpsFetch();
	}
}
 8000e44:	e00d      	b.n	8000e62 <HAL_UART_RxCpltCallback+0x36>
	else if(huart->Instance == huart2.Instance)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_UART_RxCpltCallback+0x44>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d007      	beq.n	8000e62 <HAL_UART_RxCpltCallback+0x36>
	else if(huart->Instance == huart3.Instance)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_UART_RxCpltCallback+0x48>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d101      	bne.n	8000e62 <HAL_UART_RxCpltCallback+0x36>
		gpsFetch();
 8000e5e:	f000 fbaf 	bl	80015c0 <gpsFetch>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000bec 	.word	0x20000bec
 8000e70:	20000c8c 	.word	0x20000c8c
 8000e74:	20000ac4 	.word	0x20000ac4

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f001 f83d 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f839 	bl	8000ef8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fa11 	bl	80012ac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000e8a:	f006 fd45 	bl	8007918 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000e8e:	f000 f9b9 	bl	8001204 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e92:	f000 f88b 	bl	8000fac <MX_I2C1_Init>
  MX_TIM3_Init();
 8000e96:	f000 f8b7 	bl	8001008 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e9a:	f000 f92f 	bl	80010fc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000e9e:	f000 f987 	bl	80011b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ea2:	f000 f9d9 	bl	8001258 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  apiInit();
 8000ea6:	f7ff fe49 	bl	8000b3c <apiInit>

  powertrainInit();
 8000eaa:	f000 fa49 	bl	8001340 <powertrainInit>

  kvhInit();
 8000eae:	f000 fac3 	bl	8001438 <kvhInit>

  gpsInit();
 8000eb2:	f000 fb73 	bl	800159c <gpsInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  insertSensordataToApi();
 8000eb6:	f000 fbcf 	bl	8001658 <insertSensordataToApi>

	  ApiInstruction ins = apiUpdate();
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe85 	bl	8000bcc <apiUpdate>
	  if(ins.responseLen > 0)
 8000ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dd06      	ble.n	8000ed6 <main+0x5e>
	  {
		  CDC_Transmit_FS(ins.response, ins.responseLen);
 8000ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	331c      	adds	r3, #28
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f006 fde7 	bl	8007aa4 <CDC_Transmit_FS>
	  }

	  if(API_STATE_JOYDRIVE == apiMemory[API_REG_STATE])
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <main+0x7c>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1eb      	bne.n	8000eb6 <main+0x3e>
	  {
		  powertrainSetSpeeds(apiMemory[API_REG_PWMLEFT], apiMemory[API_REG_PWMRIGHT]);
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <main+0x7c>)
 8000ee0:	889b      	ldrh	r3, [r3, #4]
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <main+0x7c>)
 8000ee6:	891b      	ldrh	r3, [r3, #8]
 8000ee8:	b21b      	sxth	r3, r3
 8000eea:	4619      	mov	r1, r3
 8000eec:	4610      	mov	r0, r2
 8000eee:	f000 fa5d 	bl	80013ac <powertrainSetSpeeds>
  {
 8000ef2:	e7e0      	b.n	8000eb6 <main+0x3e>
 8000ef4:	20000764 	.word	0x20000764

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	; 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f02:	2228      	movs	r2, #40	; 0x28
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f007 f9cc 	bl	80082a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f36:	2301      	movs	r3, #1
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fb58 	bl	8003604 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f5a:	f000 fb85 	bl	8001668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 fdc2 	bl	8003b04 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f86:	f000 fb6f 	bl	8001668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 ff51 	bl	8003e3c <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fa0:	f000 fb62 	bl	8001668 <Error_Handler>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3750      	adds	r7, #80	; 0x50
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <MX_I2C1_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_I2C1_Init+0x58>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <MX_I2C1_Init+0x50>)
 8000fea:	f001 fb01 	bl	80025f0 <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 fb38 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000b04 	.word	0x20000b04
 8001000:	40005400 	.word	0x40005400
 8001004:	000186a0 	.word	0x000186a0

08001008 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <MX_TIM3_Init+0xec>)
 800102c:	4a32      	ldr	r2, [pc, #200]	; (80010f8 <MX_TIM3_Init+0xf0>)
 800102e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001030:	4b30      	ldr	r3, [pc, #192]	; (80010f4 <MX_TIM3_Init+0xec>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <MX_TIM3_Init+0xec>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x7fff;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <MX_TIM3_Init+0xec>)
 800103e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001042:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <MX_TIM3_Init+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <MX_TIM3_Init+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001050:	4828      	ldr	r0, [pc, #160]	; (80010f4 <MX_TIM3_Init+0xec>)
 8001052:	f002 ffa9 	bl	8003fa8 <HAL_TIM_PWM_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800105c:	f000 fb04 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4619      	mov	r1, r3
 800106e:	4821      	ldr	r0, [pc, #132]	; (80010f4 <MX_TIM3_Init+0xec>)
 8001070:	f003 facc 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800107a:	f000 faf5 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107e:	2360      	movs	r3, #96	; 0x60
 8001080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	4817      	ldr	r0, [pc, #92]	; (80010f4 <MX_TIM3_Init+0xec>)
 8001096:	f002 ffe5 	bl	8004064 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80010a0:	f000 fae2 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2204      	movs	r2, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <MX_TIM3_Init+0xec>)
 80010ac:	f002 ffda 	bl	8004064 <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010b6:	f000 fad7 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2208      	movs	r2, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM3_Init+0xec>)
 80010c2:	f002 ffcf 	bl	8004064 <HAL_TIM_PWM_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80010cc:	f000 facc 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	220c      	movs	r2, #12
 80010d4:	4619      	mov	r1, r3
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <MX_TIM3_Init+0xec>)
 80010d8:	f002 ffc4 	bl	8004064 <HAL_TIM_PWM_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80010e2:	f000 fac1 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010e6:	4803      	ldr	r0, [pc, #12]	; (80010f4 <MX_TIM3_Init+0xec>)
 80010e8:	f000 fcea 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000b58 	.word	0x20000b58
 80010f8:	40000400 	.word	0x40000400

080010fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	615a      	str	r2, [r3, #20]
 800111c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_TIM4_Init+0xac>)
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <MX_TIM4_Init+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_TIM4_Init+0xac>)
 8001126:	2200      	movs	r2, #0
 8001128:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_TIM4_Init+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_TIM4_Init+0xac>)
 8001132:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001136:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_TIM4_Init+0xac>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_TIM4_Init+0xac>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001144:	4818      	ldr	r0, [pc, #96]	; (80011a8 <MX_TIM4_Init+0xac>)
 8001146:	f002 ff2f 	bl	8003fa8 <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 fa8a 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	; (80011a8 <MX_TIM4_Init+0xac>)
 8001164:	f003 fa52 	bl	800460c <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800116e:	f000 fa7b 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	; 0x60
 8001174:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1800;
 8001176:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800117a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2208      	movs	r2, #8
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM4_Init+0xac>)
 800118c:	f002 ff6a 	bl	8004064 <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001196:	f000 fa67 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM4_Init+0xac>)
 800119c:	f000 fc90 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000a84 	.word	0x20000a84
 80011ac:	40000800 	.word	0x40000800

080011b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_USART1_UART_Init+0x50>)
 80011b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011bc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80011c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_USART1_UART_Init+0x4c>)
 80011e8:	f003 fa54 	bl	8004694 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011f2:	f000 fa39 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000bec 	.word	0x20000bec
 8001200:	40013800 	.word	0x40013800

08001204 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_USART2_UART_Init+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART2_UART_Init+0x4c>)
 800123c:	f003 fa2a 	bl	8004694 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001246:	f000 fa0f 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000c8c 	.word	0x20000c8c
 8001254:	40004400 	.word	0x40004400

08001258 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART3_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001264:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001268:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART3_UART_Init+0x4c>)
 8001290:	f003 fa00 	bl	8004694 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f9e5 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000ac4 	.word	0x20000ac4
 80012a8:	40004800 	.word	0x40004800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_GPIO_Init+0x8c>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INH34_Pin|INH12_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2130      	movs	r1, #48	; 0x30
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_GPIO_Init+0x90>)
 800130e:	f001 f957 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INH34_Pin INH12_Pin */
  GPIO_InitStruct.Pin = INH34_Pin|INH12_Pin;
 8001312:	2330      	movs	r3, #48	; 0x30
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2302      	movs	r3, #2
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_GPIO_Init+0x90>)
 800132a:	f000 ffef 	bl	800230c <HAL_GPIO_Init>

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	40010800 	.word	0x40010800

08001340 <powertrainInit>:

/* USER CODE BEGIN 4 */
void powertrainInit()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001344:	2100      	movs	r1, #0
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <powertrainInit+0x38>)
 8001348:	f002 fe5a 	bl	8004000 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800134c:	2104      	movs	r1, #4
 800134e:	480a      	ldr	r0, [pc, #40]	; (8001378 <powertrainInit+0x38>)
 8001350:	f002 fe56 	bl	8004000 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001354:	2108      	movs	r1, #8
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <powertrainInit+0x38>)
 8001358:	f002 fe52 	bl	8004000 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800135c:	210c      	movs	r1, #12
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <powertrainInit+0x38>)
 8001360:	f002 fe4e 	bl	8004000 <HAL_TIM_PWM_Start>

	powertrainEnableMotors(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f000 f809 	bl	800137c <powertrainEnableMotors>

	powertrainSetSpeeds(0, 0);
 800136a:	2100      	movs	r1, #0
 800136c:	2000      	movs	r0, #0
 800136e:	f000 f81d 	bl	80013ac <powertrainSetSpeeds>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000b58 	.word	0x20000b58

0800137c <powertrainEnableMotors>:


void powertrainEnableMotors(int enableState)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(INH12_GPIO_Port, INH12_Pin, enableState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	2120      	movs	r1, #32
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <powertrainEnableMotors+0x2c>)
 800138e:	f001 f917 	bl	80025c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH34_GPIO_Port, INH34_Pin, enableState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	2110      	movs	r1, #16
 800139a:	4803      	ldr	r0, [pc, #12]	; (80013a8 <powertrainEnableMotors+0x2c>)
 800139c:	f001 f910 	bl	80025c0 <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010800 	.word	0x40010800

080013ac <powertrainSetSpeeds>:

void powertrainSetSpeeds(int16_t left, int16_t right)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	460a      	mov	r2, r1
 80013b6:	80fb      	strh	r3, [r7, #6]
 80013b8:	4613      	mov	r3, r2
 80013ba:	80bb      	strh	r3, [r7, #4]
	if(left < 0)
 80013bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da0d      	bge.n	80013e0 <powertrainSetSpeeds+0x34>
	{
		left = -left;
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	425b      	negs	r3, r3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	80fb      	strh	r3, [r7, #6]
		htim3.Instance->CCR3 = 0;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <powertrainSetSpeeds+0x88>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = left;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <powertrainSetSpeeds+0x88>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
 80013de:	e008      	b.n	80013f2 <powertrainSetSpeeds+0x46>
	}
	else
	{
		htim3.Instance->CCR3 = left;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <powertrainSetSpeeds+0x88>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013e8:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <powertrainSetSpeeds+0x88>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if(right < 0)
 80013f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	da0d      	bge.n	8001416 <powertrainSetSpeeds+0x6a>
	{
		right = -right;
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	425b      	negs	r3, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	80bb      	strh	r3, [r7, #4]
		htim3.Instance->CCR1 = 0;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <powertrainSetSpeeds+0x88>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = right;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <powertrainSetSpeeds+0x88>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
	else
	{
		htim3.Instance->CCR1 = right;
		htim3.Instance->CCR2 = 0;
	}
}
 8001414:	e008      	b.n	8001428 <powertrainSetSpeeds+0x7c>
		htim3.Instance->CCR1 = right;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <powertrainSetSpeeds+0x88>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <powertrainSetSpeeds+0x88>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000b58 	.word	0x20000b58

08001438 <kvhInit>:

void kvhInit()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
	  char kvhInitStr[3] = { 's', '\r' };
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2100      	movs	r1, #0
 8001444:	460a      	mov	r2, r1
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	460a      	mov	r2, r1
 800144a:	709a      	strb	r2, [r3, #2]
 800144c:	2373      	movs	r3, #115	; 0x73
 800144e:	773b      	strb	r3, [r7, #28]
 8001450:	230d      	movs	r3, #13
 8001452:	777b      	strb	r3, [r7, #29]
	  char kvhConfigNmeaStr[5] = { '=', 't' , ',', '0', '\r' };
 8001454:	4a27      	ldr	r2, [pc, #156]	; (80014f4 <kvhInit+0xbc>)
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800145e:	6018      	str	r0, [r3, #0]
 8001460:	3304      	adds	r3, #4
 8001462:	7019      	strb	r1, [r3, #0]
	  char kvhConfigSpeedStr[7] = { '=', 'r', ',' , '6', '0', '0', '\r' };
 8001464:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <kvhInit+0xc0>)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800146e:	6018      	str	r0, [r3, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	8019      	strh	r1, [r3, #0]
 8001474:	3302      	adds	r3, #2
 8001476:	0c0a      	lsrs	r2, r1, #16
 8001478:	701a      	strb	r2, [r3, #0]
	  char kvhConfigUnitStr[5] = { '=', 'i' , ',', 'd', '\r' };
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <kvhInit+0xc4>)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001482:	6018      	str	r0, [r3, #0]
 8001484:	3304      	adds	r3, #4
 8001486:	7019      	strb	r1, [r3, #0]
	  HAL_UART_Transmit(&huart1, kvhInitStr, 2, 1000);
 8001488:	f107 011c 	add.w	r1, r7, #28
 800148c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001490:	2202      	movs	r2, #2
 8001492:	481b      	ldr	r0, [pc, #108]	; (8001500 <kvhInit+0xc8>)
 8001494:	f003 f94b 	bl	800472e <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001498:	2064      	movs	r0, #100	; 0x64
 800149a:	f000 fd91 	bl	8001fc0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigNmeaStr, 5, 1000);
 800149e:	f107 0114 	add.w	r1, r7, #20
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	2205      	movs	r2, #5
 80014a8:	4815      	ldr	r0, [pc, #84]	; (8001500 <kvhInit+0xc8>)
 80014aa:	f003 f940 	bl	800472e <HAL_UART_Transmit>
	  HAL_Delay(100);
 80014ae:	2064      	movs	r0, #100	; 0x64
 80014b0:	f000 fd86 	bl	8001fc0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigUnitStr, 5, 1000);
 80014b4:	1d39      	adds	r1, r7, #4
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	2205      	movs	r2, #5
 80014bc:	4810      	ldr	r0, [pc, #64]	; (8001500 <kvhInit+0xc8>)
 80014be:	f003 f936 	bl	800472e <HAL_UART_Transmit>
	  HAL_Delay(100);
 80014c2:	2064      	movs	r0, #100	; 0x64
 80014c4:	f000 fd7c 	bl	8001fc0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, kvhConfigSpeedStr, 7, 1000);
 80014c8:	f107 010c 	add.w	r1, r7, #12
 80014cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d0:	2207      	movs	r2, #7
 80014d2:	480b      	ldr	r0, [pc, #44]	; (8001500 <kvhInit+0xc8>)
 80014d4:	f003 f92b 	bl	800472e <HAL_UART_Transmit>

	  kvhString.available = false;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <kvhInit+0xcc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	  HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <kvhInit+0xcc>)
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <kvhInit+0xc8>)
 80014e6:	f003 f9bb 	bl	8004860 <HAL_UART_Receive_IT>
}
 80014ea:	bf00      	nop
 80014ec:	3720      	adds	r7, #32
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	0800a7ac 	.word	0x0800a7ac
 80014f8:	0800a7b4 	.word	0x0800a7b4
 80014fc:	0800a7bc 	.word	0x0800a7bc
 8001500:	20000bec 	.word	0x20000bec
 8001504:	20000c38 	.word	0x20000c38

08001508 <kvhFetch>:

void kvhFetch()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	static bool startFound = false;

	if('$' == kvhString.nmeaStr[0])
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <kvhFetch+0x4c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b24      	cmp	r3, #36	; 0x24
 8001512:	d114      	bne.n	800153e <kvhFetch+0x36>
	{
		if(startFound)
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <kvhFetch+0x50>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d007      	beq.n	800152c <kvhFetch+0x24>
		{
			startFound = false;
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <kvhFetch+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
			kvhString.available = true;
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <kvhFetch+0x4c>)
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	else
	{
		startFound = false;
		HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
	}
}
 800152a:	e010      	b.n	800154e <kvhFetch+0x46>
			startFound = true;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <kvhFetch+0x50>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &kvhString.nmeaStr[1], NMEA_HCHDT_LEN - 1);
 8001532:	2212      	movs	r2, #18
 8001534:	4909      	ldr	r1, [pc, #36]	; (800155c <kvhFetch+0x54>)
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <kvhFetch+0x58>)
 8001538:	f003 f992 	bl	8004860 <HAL_UART_Receive_IT>
}
 800153c:	e007      	b.n	800154e <kvhFetch+0x46>
		startFound = false;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <kvhFetch+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	4903      	ldr	r1, [pc, #12]	; (8001554 <kvhFetch+0x4c>)
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <kvhFetch+0x58>)
 800154a:	f003 f989 	bl	8004860 <HAL_UART_Receive_IT>
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000c38 	.word	0x20000c38
 8001558:	20000368 	.word	0x20000368
 800155c:	20000c39 	.word	0x20000c39
 8001560:	20000bec 	.word	0x20000bec

08001564 <kvhDecode>:

void kvhDecode()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	if(kvhString.available)
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <kvhDecode+0x30>)
 800156a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00e      	beq.n	8001590 <kvhDecode+0x2c>
	{
		kvhString.available = false;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <kvhDecode+0x30>)
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		kvhString.nmeaStr[NMEA_HCHDT_LEN] = '\0';
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <kvhDecode+0x30>)
 800157c:	2200      	movs	r2, #0
 800157e:	74da      	strb	r2, [r3, #19]
		nmeaDecodeToApi(&kvhString);
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <kvhDecode+0x30>)
 8001582:	f000 f877 	bl	8001674 <nmeaDecodeToApi>
		HAL_UART_Receive_IT(&huart1, kvhString.nmeaStr, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	4902      	ldr	r1, [pc, #8]	; (8001594 <kvhDecode+0x30>)
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <kvhDecode+0x34>)
 800158c:	f003 f968 	bl	8004860 <HAL_UART_Receive_IT>
	}
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000c38 	.word	0x20000c38
 8001598:	20000bec 	.word	0x20000bec

0800159c <gpsInit>:

void gpsInit()
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
		gpsString.available = false;
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <gpsInit+0x1c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	4903      	ldr	r1, [pc, #12]	; (80015b8 <gpsInit+0x1c>)
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <gpsInit+0x20>)
 80015ae:	f003 f957 	bl	8004860 <HAL_UART_Receive_IT>
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000b98 	.word	0x20000b98
 80015bc:	20000ac4 	.word	0x20000ac4

080015c0 <gpsFetch>:

void gpsFetch()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	static bool startFound = false;

	if('$' == gpsString.nmeaStr[0])
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <gpsFetch+0x4c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b24      	cmp	r3, #36	; 0x24
 80015ca:	d114      	bne.n	80015f6 <gpsFetch+0x36>
	{
		if(startFound)
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <gpsFetch+0x50>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <gpsFetch+0x24>
		{
			startFound = false;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <gpsFetch+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
			gpsString.available = true;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <gpsFetch+0x4c>)
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	else
	{
		startFound = false;
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
	}
}
 80015e2:	e010      	b.n	8001606 <gpsFetch+0x46>
			startFound = true;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <gpsFetch+0x50>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, &gpsString.nmeaStr[1], NMEA_GPRMC_LEN - 1);
 80015ea:	2247      	movs	r2, #71	; 0x47
 80015ec:	4909      	ldr	r1, [pc, #36]	; (8001614 <gpsFetch+0x54>)
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <gpsFetch+0x58>)
 80015f0:	f003 f936 	bl	8004860 <HAL_UART_Receive_IT>
}
 80015f4:	e007      	b.n	8001606 <gpsFetch+0x46>
		startFound = false;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <gpsFetch+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	4903      	ldr	r1, [pc, #12]	; (800160c <gpsFetch+0x4c>)
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <gpsFetch+0x58>)
 8001602:	f003 f92d 	bl	8004860 <HAL_UART_Receive_IT>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000b98 	.word	0x20000b98
 8001610:	20000369 	.word	0x20000369
 8001614:	20000b99 	.word	0x20000b99
 8001618:	20000ac4 	.word	0x20000ac4

0800161c <gpsDecode>:

void gpsDecode()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	if(gpsString.available)
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <gpsDecode+0x34>)
 8001622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00f      	beq.n	800164a <gpsDecode+0x2e>
	{
		gpsString.available = false;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <gpsDecode+0x34>)
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		gpsString.nmeaStr[NMEA_GPRMC_LEN] = '\0';
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <gpsDecode+0x34>)
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		nmeaDecodeToApi(&gpsString);
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <gpsDecode+0x34>)
 800163c:	f000 f81a 	bl	8001674 <nmeaDecodeToApi>
		HAL_UART_Receive_IT(&huart3, gpsString.nmeaStr, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	4903      	ldr	r1, [pc, #12]	; (8001650 <gpsDecode+0x34>)
 8001644:	4803      	ldr	r0, [pc, #12]	; (8001654 <gpsDecode+0x38>)
 8001646:	f003 f90b 	bl	8004860 <HAL_UART_Receive_IT>
	}
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000b98 	.word	0x20000b98
 8001654:	20000ac4 	.word	0x20000ac4

08001658 <insertSensordataToApi>:

void insertSensordataToApi()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	kvhDecode();
 800165c:	f7ff ff82 	bl	8001564 <kvhDecode>
	gpsDecode();
 8001660:	f7ff ffdc 	bl	800161c <gpsDecode>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <nmeaDecodeToApi>:
 *      Author: jonas
 */
#include "nmeaUtils.h"

void nmeaDecodeToApi(NmeaString *nmeaString)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(strncmp("$HCHDT", nmeaString->nmeaStr, 6) == 0)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2206      	movs	r2, #6
 8001680:	4619      	mov	r1, r3
 8001682:	4811      	ldr	r0, [pc, #68]	; (80016c8 <nmeaDecodeToApi+0x54>)
 8001684:	f006 fe3e 	bl	8008304 <strncmp>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d103      	bne.n	8001696 <nmeaDecodeToApi+0x22>
	{
		hchdtToApi(nmeaString);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f820 	bl	80016d4 <hchdtToApi>
	}
	else if(strncmp("$GNRMC", nmeaString->nmeaStr, 6) == 0 || strncmp("$GPRMC", nmeaString->nmeaStr, 6) == 0)
	{
		rmcToApi(nmeaString);
	}
}
 8001694:	e014      	b.n	80016c0 <nmeaDecodeToApi+0x4c>
	else if(strncmp("$GNRMC", nmeaString->nmeaStr, 6) == 0 || strncmp("$GPRMC", nmeaString->nmeaStr, 6) == 0)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2206      	movs	r2, #6
 800169a:	4619      	mov	r1, r3
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <nmeaDecodeToApi+0x58>)
 800169e:	f006 fe31 	bl	8008304 <strncmp>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <nmeaDecodeToApi+0x46>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2206      	movs	r2, #6
 80016ac:	4619      	mov	r1, r3
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <nmeaDecodeToApi+0x5c>)
 80016b0:	f006 fe28 	bl	8008304 <strncmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <nmeaDecodeToApi+0x4c>
		rmcToApi(nmeaString);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f832 	bl	8001724 <rmcToApi>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	0800a7c4 	.word	0x0800a7c4
 80016cc:	0800a7cc 	.word	0x0800a7cc
 80016d0:	0800a7d4 	.word	0x0800a7d4

080016d4 <hchdtToApi>:

void hchdtToApi(NmeaString *nmeaString)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	char headingStr[4];
	strncpy(headingStr, &nmeaString->nmeaStr[7], 3);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	1dd9      	adds	r1, r3, #7
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2203      	movs	r2, #3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 fe1e 	bl	8008328 <strncpy>
	headingStr[3] = '\0';
 80016ec:	2300      	movs	r3, #0
 80016ee:	72fb      	strb	r3, [r7, #11]

	int heading = strtol(headingStr, NULL, 10);
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	220a      	movs	r2, #10
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f007 fcdb 	bl	80090b4 <strtol>
 80016fe:	60f8      	str	r0, [r7, #12]
	if(heading > 180)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2bb4      	cmp	r3, #180	; 0xb4
 8001704:	dd03      	ble.n	800170e <hchdtToApi+0x3a>
	{
		heading -= 360;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800170c:	60fb      	str	r3, [r7, #12]
	}

	apiWrite16(API_REG_HEADING_KVH, heading);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4619      	mov	r1, r3
 8001714:	f44f 70bc 	mov.w	r0, #376	; 0x178
 8001718:	f7ff fb38 	bl	8000d8c <apiWrite16>
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <rmcToApi>:

void rmcToApi(NmeaString *nmeaString)
{
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b0c6      	sub	sp, #280	; 0x118
 8001728:	af00      	add	r7, sp, #0
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	6018      	str	r0, [r3, #0]
	int fieldIndex=0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int charIndex=0;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	char fields[13][15];
	char currentField[15];

	float lat, lon;

	for(int i=7; i<strlen(nmeaString->nmeaStr); i++)
 800173a:	2307      	movs	r3, #7
 800173c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001740:	e03f      	b.n	80017c2 <rmcToApi+0x9e>
	{
	  char currentChar=nmeaString->nmeaStr[i];
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	  if(currentChar!=',')
 8001752:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001756:	2b2c      	cmp	r3, #44	; 0x2c
 8001758:	d00d      	beq.n	8001776 <rmcToApi+0x52>
	  {
	    currentField[charIndex]=currentChar;
 800175a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800175e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001762:	4413      	add	r3, r2
 8001764:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 8001768:	701a      	strb	r2, [r3, #0]
	    charIndex++;
 800176a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001774:	e020      	b.n	80017b8 <rmcToApi+0x94>
	  }
	  else
	  {
		currentField[charIndex] = '\0';
 8001776:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800177a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
	    strcpy(fields[fieldIndex], currentField);
 8001784:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001788:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	440b      	add	r3, r1
 8001794:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f006 fdaa 	bl	80082f4 <strcpy>
	    charIndex = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	    fieldIndex++;
 80017a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017aa:	3301      	adds	r3, #1
 80017ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	    if(fieldIndex > 5)
 80017b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	dc0f      	bgt.n	80017d8 <rmcToApi+0xb4>
	for(int i=7; i<strlen(nmeaString->nmeaStr); i++)
 80017b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017bc:	3301      	adds	r3, #1
 80017be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fcc2 	bl	8000150 <strlen>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d8b5      	bhi.n	8001742 <rmcToApi+0x1e>
 80017d6:	e000      	b.n	80017da <rmcToApi+0xb6>
	    {
	    	break;
 80017d8:	bf00      	nop
	}

	//decode time -> fieldIndex 0
	char timeStr[7];
	uint32_t time;
	strncpy(timeStr, fields[0], 6);
 80017da:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	2206      	movs	r2, #6
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 fd9f 	bl	8008328 <strncpy>
	timeStr[6] = '\0';
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	time = strtol(timeStr, NULL, 10);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	220a      	movs	r2, #10
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f007 fc5b 	bl	80090b4 <strtol>
 80017fe:	4603      	mov	r3, r0
 8001800:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	time += NMEA_TIME_OFFSET * 10000;
 8001804:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001808:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800180c:	3320      	adds	r3, #32
 800180e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	if(time > 240000)
 8001812:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001816:	4a57      	ldr	r2, [pc, #348]	; (8001974 <rmcToApi+0x250>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d907      	bls.n	800182c <rmcToApi+0x108>
	{
		time -= 240000;
 800181c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001820:	f5a3 336a 	sub.w	r3, r3, #239616	; 0x3a800
 8001824:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001828:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	}

		//decode latitude -> fieldIndex 2/3
		char ddLat[3];
		char mmLat[8];
		strncpy(ddLat, fields[2], 2);
 800182c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001830:	f103 011e 	add.w	r1, r3, #30
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	2202      	movs	r2, #2
 800183a:	4618      	mov	r0, r3
 800183c:	f006 fd74 	bl	8008328 <strncpy>
		ddLat[2] = '\0';
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		strncpy(mmLat, &fields[2][2], 7);
 8001846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184a:	f103 0120 	add.w	r1, r3, #32
 800184e:	f107 0318 	add.w	r3, r7, #24
 8001852:	2207      	movs	r2, #7
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fd67 	bl	8008328 <strncpy>
		mmLat[7] = '\0';
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	2200      	movs	r2, #0
 8001860:	71da      	strb	r2, [r3, #7]

		lat=atof(ddLat) + atof(mmLat)/60;
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	4618      	mov	r0, r3
 8001868:	f006 fcee 	bl	8008248 <atof>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fce7 	bl	8008248 <atof>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <rmcToApi+0x254>)
 8001880:	f7fe ff54 	bl	800072c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fc6e 	bl	800016c <__adddf3>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	4618      	mov	r0, r3
 8001896:	4621      	mov	r1, r4
 8001898:	f7ff f900 	bl	8000a9c <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		if(fields[3][0]=='S')
 80018a2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80018a6:	2b53      	cmp	r3, #83	; 0x53
 80018a8:	d105      	bne.n	80018b6 <rmcToApi+0x192>
		  lat=-lat;
 80018aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c


//			//decode longitude -> fieldIndex 4/5
		char ddLon[4];
		char mmLon[8];
		strncpy(ddLon, fields[4], 3);
 80018b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	2203      	movs	r2, #3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 fd2f 	bl	8008328 <strncpy>
		ddLon[3] = '\0';
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2200      	movs	r2, #0
 80018d0:	70da      	strb	r2, [r3, #3]
		strncpy(mmLon, &fields[4][3], 7);
 80018d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018d6:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2207      	movs	r2, #7
 80018e0:	4618      	mov	r0, r3
 80018e2:	f006 fd21 	bl	8008328 <strncpy>
		mmLon[7] = '\0';
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2200      	movs	r2, #0
 80018ec:	71da      	strb	r2, [r3, #7]

		lon=atof(ddLon) + atof(mmLon)/60;
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4618      	mov	r0, r3
 80018f4:	f006 fca8 	bl	8008248 <atof>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4618      	mov	r0, r3
 8001902:	f006 fca1 	bl	8008248 <atof>
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <rmcToApi+0x254>)
 800190c:	f7fe ff0e 	bl	800072c <__aeabi_ddiv>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fc28 	bl	800016c <__adddf3>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	f7ff f8ba 	bl	8000a9c <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(fields[6][0]=='W')
 800192e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001932:	2b57      	cmp	r3, #87	; 0x57
 8001934:	d105      	bne.n	8001942 <rmcToApi+0x21e>
		  lon=-lon;
 8001936:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800193a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800193e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		apiWrite32(API_BENCH_GPS_START, time);
 8001942:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001946:	4619      	mov	r1, r3
 8001948:	f240 1079 	movw	r0, #377	; 0x179
 800194c:	f7ff fa3a 	bl	8000dc4 <apiWrite32>
		apiWriteFloat(API_BENCH_GPS_START + 2, lat);
 8001950:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001954:	f240 107b 	movw	r0, #379	; 0x17b
 8001958:	f7ff fa4e 	bl	8000df8 <apiWriteFloat>
		apiWriteFloat(API_BENCH_GPS_START + 4,  lon);
 800195c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001960:	f240 107d 	movw	r0, #381	; 0x17d
 8001964:	f7ff fa48 	bl	8000df8 <apiWriteFloat>
}
 8001968:	bf00      	nop
 800196a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	0003a980 	.word	0x0003a980
 8001978:	404e0000 	.word	0x404e0000

0800197c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_MspInit+0x5c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_MspInit+0x60>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_MspInit+0x60>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000

080019e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_I2C_MspInit+0x70>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d123      	bne.n	8001a48 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	23c0      	movs	r3, #192	; 0xc0
 8001a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <HAL_I2C_MspInit+0x78>)
 8001a2c:	f000 fc6e 	bl	800230c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3a:	61d3      	str	r3, [r2, #28]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_I2C_MspInit+0x74>)
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40005400 	.word	0x40005400
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010c00 	.word	0x40010c00

08001a5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x58>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10c      	bne.n	8001a88 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a86:	e010      	b.n	8001aaa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_TIM_PWM_MspInit+0x60>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10b      	bne.n	8001aaa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40000800 	.word	0x40000800

08001ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a2b      	ldr	r2, [pc, #172]	; (8001b88 <HAL_TIM_MspPostInit+0xc8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d130      	bne.n	8001b42 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = PWM4_Pin|PWM3_Pin;
 8001b10:	23c0      	movs	r3, #192	; 0xc0
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	4619      	mov	r1, r3
 8001b22:	481b      	ldr	r0, [pc, #108]	; (8001b90 <HAL_TIM_MspPostInit+0xd0>)
 8001b24:	f000 fbf2 	bl	800230c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM2_Pin|PWM1_Pin;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2302      	movs	r3, #2
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4816      	ldr	r0, [pc, #88]	; (8001b94 <HAL_TIM_MspPostInit+0xd4>)
 8001b3c:	f000 fbe6 	bl	800230c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b40:	e01d      	b.n	8001b7e <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_TIM_MspPostInit+0xd8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d118      	bne.n	8001b7e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a0e      	ldr	r2, [pc, #56]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_TIM_MspPostInit+0xcc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8001b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 0318 	add.w	r3, r7, #24
 8001b76:	4619      	mov	r1, r3
 8001b78:	4806      	ldr	r0, [pc, #24]	; (8001b94 <HAL_TIM_MspPostInit+0xd4>)
 8001b7a:	f000 fbc7 	bl	800230c <HAL_GPIO_Init>
}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40010c00 	.word	0x40010c00
 8001b98:	40000800 	.word	0x40000800

08001b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0320 	add.w	r3, r7, #32
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5f      	ldr	r2, [pc, #380]	; (8001d34 <HAL_UART_MspInit+0x198>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d13a      	bne.n	8001c32 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bbc:	4b5e      	ldr	r3, [pc, #376]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a5d      	ldr	r2, [pc, #372]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b5b      	ldr	r3, [pc, #364]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a57      	ldr	r2, [pc, #348]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b55      	ldr	r3, [pc, #340]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = KVH_TX_Pin;
 8001bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(KVH_TX_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	4619      	mov	r1, r3
 8001c00:	484e      	ldr	r0, [pc, #312]	; (8001d3c <HAL_UART_MspInit+0x1a0>)
 8001c02:	f000 fb83 	bl	800230c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KVH_RX_Pin;
 8001c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(KVH_RX_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4848      	ldr	r0, [pc, #288]	; (8001d3c <HAL_UART_MspInit+0x1a0>)
 8001c1c:	f000 fb76 	bl	800230c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2101      	movs	r1, #1
 8001c24:	2025      	movs	r0, #37	; 0x25
 8001c26:	f000 fac4 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c2a:	2025      	movs	r0, #37	; 0x25
 8001c2c:	f000 fadd 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c30:	e07c      	b.n	8001d2c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a42      	ldr	r2, [pc, #264]	; (8001d40 <HAL_UART_MspInit+0x1a4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d138      	bne.n	8001cae <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	4a3d      	ldr	r2, [pc, #244]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c46:	61d3      	str	r3, [r2, #28]
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a37      	ldr	r2, [pc, #220]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LIDAR_TX_Pin;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LIDAR_TX_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	482f      	ldr	r0, [pc, #188]	; (8001d3c <HAL_UART_MspInit+0x1a0>)
 8001c80:	f000 fb44 	bl	800230c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIDAR_RX_Pin;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(LIDAR_RX_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 0320 	add.w	r3, r7, #32
 8001c94:	4619      	mov	r1, r3
 8001c96:	4829      	ldr	r0, [pc, #164]	; (8001d3c <HAL_UART_MspInit+0x1a0>)
 8001c98:	f000 fb38 	bl	800230c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	2026      	movs	r0, #38	; 0x26
 8001ca2:	f000 fa86 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ca6:	2026      	movs	r0, #38	; 0x26
 8001ca8:	f000 fa9f 	bl	80021ea <HAL_NVIC_EnableIRQ>
}
 8001cac:	e03e      	b.n	8001d2c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a24      	ldr	r2, [pc, #144]	; (8001d44 <HAL_UART_MspInit+0x1a8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d139      	bne.n	8001d2c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	61d3      	str	r3, [r2, #28]
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0x19c>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4812      	ldr	r0, [pc, #72]	; (8001d48 <HAL_UART_MspInit+0x1ac>)
 8001cfe:	f000 fb05 	bl	800230c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	4619      	mov	r1, r3
 8001d16:	480c      	ldr	r0, [pc, #48]	; (8001d48 <HAL_UART_MspInit+0x1ac>)
 8001d18:	f000 faf8 	bl	800230c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2027      	movs	r0, #39	; 0x27
 8001d22:	f000 fa46 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d26:	2027      	movs	r0, #39	; 0x27
 8001d28:	f000 fa5f 	bl	80021ea <HAL_NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3730      	adds	r7, #48	; 0x30
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40013800 	.word	0x40013800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40004400 	.word	0x40004400
 8001d44:	40004800 	.word	0x40004800
 8001d48:	40010c00 	.word	0x40010c00

08001d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <HardFault_Handler+0x4>

08001d5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <MemManage_Handler+0x4>

08001d64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <BusFault_Handler+0x4>

08001d6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <UsageFault_Handler+0x4>

08001d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d98:	f000 f8f6 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001da6:	f000 fe52 	bl	8002a4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20001964 	.word	0x20001964

08001db4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <USART1_IRQHandler+0x10>)
 8001dba:	f002 fda5 	bl	8004908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000bec 	.word	0x20000bec

08001dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
//	static int counter = 0;
//	dataFromLidar.len = 500;
//	uint8_t byte;
//	HAL_UART_Receive(&huart2, &byte, 1, 1000);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <USART2_IRQHandler+0x10>)
 8001dce:	f002 fd9b 	bl	8004908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000c8c 	.word	0x20000c8c

08001ddc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <USART3_IRQHandler+0x10>)
 8001de2:	f002 fd91 	bl	8004908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000ac4 	.word	0x20000ac4

08001df0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <_sbrk+0x50>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <_sbrk+0x16>
		heap_end = &end;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <_sbrk+0x50>)
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <_sbrk+0x54>)
 8001e04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <_sbrk+0x50>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <_sbrk+0x50>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	466a      	mov	r2, sp
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d907      	bls.n	8001e2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e1a:	f006 fa19 	bl	8008250 <__errno>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	230c      	movs	r3, #12
 8001e22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e28:	e006      	b.n	8001e38 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <_sbrk+0x50>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <_sbrk+0x50>)
 8001e34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e36:	68fb      	ldr	r3, [r7, #12]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	2000036c 	.word	0x2000036c
 8001e44:	20001bd8 	.word	0x20001bd8

08001e48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <SystemInit+0x5c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <SystemInit+0x5c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <SystemInit+0x5c>)
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4911      	ldr	r1, [pc, #68]	; (8001ea4 <SystemInit+0x5c>)
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <SystemInit+0x60>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <SystemInit+0x5c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <SystemInit+0x5c>)
 8001e6a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <SystemInit+0x5c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <SystemInit+0x5c>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <SystemInit+0x5c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <SystemInit+0x5c>)
 8001e86:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e8a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SystemInit+0x5c>)
 8001e8e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e92:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SystemInit+0x64>)
 8001e96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e9a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	f8ff0000 	.word	0xf8ff0000
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001eb0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001eb2:	e003      	b.n	8001ebc <LoopCopyDataInit>

08001eb4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001eb6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001eb8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001eba:	3104      	adds	r1, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ec0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ec2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ec4:	d3f6      	bcc.n	8001eb4 <CopyDataInit>
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001ec8:	e002      	b.n	8001ed0 <LoopFillZerobss>

08001eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ecc:	f842 3b04 	str.w	r3, [r2], #4

08001ed0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ed2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ed4:	d3f9      	bcc.n	8001eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ed6:	f7ff ffb7 	bl	8001e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eda:	f006 f9bf 	bl	800825c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ede:	f7fe ffcb 	bl	8000e78 <main>
  bx lr
 8001ee2:	4770      	bx	lr
  ldr r3, =_sidata
 8001ee4:	0800aaf8 	.word	0x0800aaf8
  ldr r0, =_sdata
 8001ee8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001eec:	2000034c 	.word	0x2000034c
  ldr r2, =_sbss
 8001ef0:	2000034c 	.word	0x2000034c
  ldr r3, = _ebss
 8001ef4:	20001bd4 	.word	0x20001bd4

08001ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_2_IRQHandler>
	...

08001efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_Init+0x28>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_Init+0x28>)
 8001f06:	f043 0310 	orr.w	r3, r3, #16
 8001f0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f945 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fd30 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f95d 	bl	8002206 <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f64:	f000 f925 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_IncTick+0x1c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000ccc 	.word	0x20000ccc

08001fac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_GetTick+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000ccc 	.word	0x20000ccc

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_Delay+0x40>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffe0 	bl	8001fac <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000008 	.word	0x20000008

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__NVIC_EnableIRQ+0x34>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800217c:	f7ff ff90 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff2d 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff42 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff90 	bl	80020f4 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff5f 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff35 	bl	8002068 <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa2 	bl	8002158 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002232:	2b02      	cmp	r3, #2
 8002234:	d005      	beq.n	8002242 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2204      	movs	r2, #4
 800223a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e051      	b.n	80022e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 020e 	bic.w	r2, r2, #14
 8002250:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_DMA_Abort_IT+0xd0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d029      	beq.n	80022c0 <HAL_DMA_Abort_IT+0xa0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_DMA_Abort_IT+0xd4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d022      	beq.n	80022bc <HAL_DMA_Abort_IT+0x9c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_DMA_Abort_IT+0xd8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d01a      	beq.n	80022b6 <HAL_DMA_Abort_IT+0x96>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_DMA_Abort_IT+0xdc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d012      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x90>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <HAL_DMA_Abort_IT+0xe0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d00a      	beq.n	80022aa <HAL_DMA_Abort_IT+0x8a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_DMA_Abort_IT+0xe4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d102      	bne.n	80022a4 <HAL_DMA_Abort_IT+0x84>
 800229e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a2:	e00e      	b.n	80022c2 <HAL_DMA_Abort_IT+0xa2>
 80022a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a8:	e00b      	b.n	80022c2 <HAL_DMA_Abort_IT+0xa2>
 80022aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ae:	e008      	b.n	80022c2 <HAL_DMA_Abort_IT+0xa2>
 80022b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b4:	e005      	b.n	80022c2 <HAL_DMA_Abort_IT+0xa2>
 80022b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ba:	e002      	b.n	80022c2 <HAL_DMA_Abort_IT+0xa2>
 80022bc:	2310      	movs	r3, #16
 80022be:	e000      	b.n	80022c2 <HAL_DMA_Abort_IT+0xa2>
 80022c0:	2301      	movs	r3, #1
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_DMA_Abort_IT+0xe8>)
 80022c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
    } 
  }
  return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40020008 	.word	0x40020008
 80022f4:	4002001c 	.word	0x4002001c
 80022f8:	40020030 	.word	0x40020030
 80022fc:	40020044 	.word	0x40020044
 8002300:	40020058 	.word	0x40020058
 8002304:	4002006c 	.word	0x4002006c
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b08b      	sub	sp, #44	; 0x2c
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	e127      	b.n	8002570 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002320:	2201      	movs	r2, #1
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8116 	bne.w	800256a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b12      	cmp	r3, #18
 8002344:	d034      	beq.n	80023b0 <HAL_GPIO_Init+0xa4>
 8002346:	2b12      	cmp	r3, #18
 8002348:	d80d      	bhi.n	8002366 <HAL_GPIO_Init+0x5a>
 800234a:	2b02      	cmp	r3, #2
 800234c:	d02b      	beq.n	80023a6 <HAL_GPIO_Init+0x9a>
 800234e:	2b02      	cmp	r3, #2
 8002350:	d804      	bhi.n	800235c <HAL_GPIO_Init+0x50>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d031      	beq.n	80023ba <HAL_GPIO_Init+0xae>
 8002356:	2b01      	cmp	r3, #1
 8002358:	d01c      	beq.n	8002394 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800235a:	e048      	b.n	80023ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800235c:	2b03      	cmp	r3, #3
 800235e:	d043      	beq.n	80023e8 <HAL_GPIO_Init+0xdc>
 8002360:	2b11      	cmp	r3, #17
 8002362:	d01b      	beq.n	800239c <HAL_GPIO_Init+0x90>
          break;
 8002364:	e043      	b.n	80023ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002366:	4a89      	ldr	r2, [pc, #548]	; (800258c <HAL_GPIO_Init+0x280>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d026      	beq.n	80023ba <HAL_GPIO_Init+0xae>
 800236c:	4a87      	ldr	r2, [pc, #540]	; (800258c <HAL_GPIO_Init+0x280>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d806      	bhi.n	8002380 <HAL_GPIO_Init+0x74>
 8002372:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_GPIO_Init+0x284>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d020      	beq.n	80023ba <HAL_GPIO_Init+0xae>
 8002378:	4a86      	ldr	r2, [pc, #536]	; (8002594 <HAL_GPIO_Init+0x288>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01d      	beq.n	80023ba <HAL_GPIO_Init+0xae>
          break;
 800237e:	e036      	b.n	80023ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002380:	4a85      	ldr	r2, [pc, #532]	; (8002598 <HAL_GPIO_Init+0x28c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0xae>
 8002386:	4a85      	ldr	r2, [pc, #532]	; (800259c <HAL_GPIO_Init+0x290>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d016      	beq.n	80023ba <HAL_GPIO_Init+0xae>
 800238c:	4a84      	ldr	r2, [pc, #528]	; (80025a0 <HAL_GPIO_Init+0x294>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0xae>
          break;
 8002392:	e02c      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	623b      	str	r3, [r7, #32]
          break;
 800239a:	e028      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3304      	adds	r3, #4
 80023a2:	623b      	str	r3, [r7, #32]
          break;
 80023a4:	e023      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
          break;
 80023ae:	e01e      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	330c      	adds	r3, #12
 80023b6:	623b      	str	r3, [r7, #32]
          break;
 80023b8:	e019      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c2:	2304      	movs	r3, #4
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e012      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d0:	2308      	movs	r3, #8
 80023d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	611a      	str	r2, [r3, #16]
          break;
 80023da:	e008      	b.n	80023ee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023dc:	2308      	movs	r3, #8
 80023de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	615a      	str	r2, [r3, #20]
          break;
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2bff      	cmp	r3, #255	; 0xff
 80023f2:	d801      	bhi.n	80023f8 <HAL_GPIO_Init+0xec>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	e001      	b.n	80023fc <HAL_GPIO_Init+0xf0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2bff      	cmp	r3, #255	; 0xff
 8002402:	d802      	bhi.n	800240a <HAL_GPIO_Init+0xfe>
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x104>
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3b08      	subs	r3, #8
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	210f      	movs	r1, #15
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	401a      	ands	r2, r3
 8002422:	6a39      	ldr	r1, [r7, #32]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	431a      	orrs	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 8096 	beq.w	800256a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800243e:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_GPIO_Init+0x298>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <HAL_GPIO_Init+0x298>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6193      	str	r3, [r2, #24]
 800244a:	4b56      	ldr	r3, [pc, #344]	; (80025a4 <HAL_GPIO_Init+0x298>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002456:	4a54      	ldr	r2, [pc, #336]	; (80025a8 <HAL_GPIO_Init+0x29c>)
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4b      	ldr	r2, [pc, #300]	; (80025ac <HAL_GPIO_Init+0x2a0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x19e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_GPIO_Init+0x2a4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x19a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a49      	ldr	r2, [pc, #292]	; (80025b4 <HAL_GPIO_Init+0x2a8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x196>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_GPIO_Init+0x2ac>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x192>
 800249a:	2303      	movs	r3, #3
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x1a0>
 800249e:	2304      	movs	r3, #4
 80024a0:	e004      	b.n	80024ac <HAL_GPIO_Init+0x1a0>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e002      	b.n	80024ac <HAL_GPIO_Init+0x1a0>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_GPIO_Init+0x1a0>
 80024aa:	2300      	movs	r3, #0
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	f002 0203 	and.w	r2, r2, #3
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	4093      	lsls	r3, r2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024bc:	493a      	ldr	r1, [pc, #232]	; (80025a8 <HAL_GPIO_Init+0x29c>)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4938      	ldr	r1, [pc, #224]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
 80024e2:	e006      	b.n	80024f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	4933      	ldr	r1, [pc, #204]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	492e      	ldr	r1, [pc, #184]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250c:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	43db      	mvns	r3, r3
 8002514:	4929      	ldr	r1, [pc, #164]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002516:	4013      	ands	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	4924      	ldr	r1, [pc, #144]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
 8002532:	e006      	b.n	8002542 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	43db      	mvns	r3, r3
 800253c:	491f      	ldr	r1, [pc, #124]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 800253e:	4013      	ands	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	491a      	ldr	r1, [pc, #104]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	60cb      	str	r3, [r1, #12]
 800255a:	e006      	b.n	800256a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	43db      	mvns	r3, r3
 8002564:	4915      	ldr	r1, [pc, #84]	; (80025bc <HAL_GPIO_Init+0x2b0>)
 8002566:	4013      	ands	r3, r2
 8002568:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	3301      	adds	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	f47f aed0 	bne.w	8002320 <HAL_GPIO_Init+0x14>
  }
}
 8002580:	bf00      	nop
 8002582:	372c      	adds	r7, #44	; 0x2c
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	10210000 	.word	0x10210000
 8002590:	10110000 	.word	0x10110000
 8002594:	10120000 	.word	0x10120000
 8002598:	10310000 	.word	0x10310000
 800259c:	10320000 	.word	0x10320000
 80025a0:	10220000 	.word	0x10220000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	40010800 	.word	0x40010800
 80025b0:	40010c00 	.word	0x40010c00
 80025b4:	40011000 	.word	0x40011000
 80025b8:	40011400 	.word	0x40011400
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	611a      	str	r2, [r3, #16]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e10f      	b.n	8002822 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff f9e2 	bl	80019e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002634:	f001 fbbc 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8002638:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a7b      	ldr	r2, [pc, #492]	; (800282c <HAL_I2C_Init+0x23c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d807      	bhi.n	8002654 <HAL_I2C_Init+0x64>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4a7a      	ldr	r2, [pc, #488]	; (8002830 <HAL_I2C_Init+0x240>)
 8002648:	4293      	cmp	r3, r2
 800264a:	bf94      	ite	ls
 800264c:	2301      	movls	r3, #1
 800264e:	2300      	movhi	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e006      	b.n	8002662 <HAL_I2C_Init+0x72>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a77      	ldr	r2, [pc, #476]	; (8002834 <HAL_I2C_Init+0x244>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0db      	b.n	8002822 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a72      	ldr	r2, [pc, #456]	; (8002838 <HAL_I2C_Init+0x248>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0c9b      	lsrs	r3, r3, #18
 8002674:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	4a64      	ldr	r2, [pc, #400]	; (800282c <HAL_I2C_Init+0x23c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d802      	bhi.n	80026a4 <HAL_I2C_Init+0xb4>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	3301      	adds	r3, #1
 80026a2:	e009      	b.n	80026b8 <HAL_I2C_Init+0xc8>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	4a63      	ldr	r2, [pc, #396]	; (800283c <HAL_I2C_Init+0x24c>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	3301      	adds	r3, #1
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4956      	ldr	r1, [pc, #344]	; (800282c <HAL_I2C_Init+0x23c>)
 80026d4:	428b      	cmp	r3, r1
 80026d6:	d80d      	bhi.n	80026f4 <HAL_I2C_Init+0x104>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e59      	subs	r1, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	bf38      	it	cc
 80026f0:	2304      	movcc	r3, #4
 80026f2:	e04f      	b.n	8002794 <HAL_I2C_Init+0x1a4>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <HAL_I2C_Init+0x130>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1e58      	subs	r0, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	2b00      	cmp	r3, #0
 8002716:	bf0c      	ite	eq
 8002718:	2301      	moveq	r3, #1
 800271a:	2300      	movne	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e012      	b.n	8002746 <HAL_I2C_Init+0x156>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	0099      	lsls	r1, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x15e>
 800274a:	2301      	movs	r3, #1
 800274c:	e022      	b.n	8002794 <HAL_I2C_Init+0x1a4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10e      	bne.n	8002774 <HAL_I2C_Init+0x184>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1e58      	subs	r0, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	440b      	add	r3, r1
 8002764:	fbb0 f3f3 	udiv	r3, r0, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002772:	e00f      	b.n	8002794 <HAL_I2C_Init+0x1a4>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e58      	subs	r0, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	0099      	lsls	r1, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	fbb0 f3f3 	udiv	r3, r0, r3
 800278a:	3301      	adds	r3, #1
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	6809      	ldr	r1, [r1, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6911      	ldr	r1, [r2, #16]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68d2      	ldr	r2, [r2, #12]
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	000186a0 	.word	0x000186a0
 8002830:	001e847f 	.word	0x001e847f
 8002834:	003d08ff 	.word	0x003d08ff
 8002838:	431bde83 	.word	0x431bde83
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af06      	add	r7, sp, #24
 8002846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0d3      	b.n	80029fa <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f005 fa50 	bl	8007d0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2203      	movs	r2, #3
 8002870:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fbbe 	bl	8004ffa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	687e      	ldr	r6, [r7, #4]
 8002886:	466d      	mov	r5, sp
 8002888:	f106 0410 	add.w	r4, r6, #16
 800288c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800288e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	602b      	str	r3, [r5, #0]
 8002894:	1d33      	adds	r3, r6, #4
 8002896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002898:	6838      	ldr	r0, [r7, #0]
 800289a:	f002 fb87 	bl	8004fac <USB_CoreInit>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0a4      	b.n	80029fa <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fbbb 	bl	8005032 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e035      	b.n	800292e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	4413      	add	r3, r2
 80028ca:	3329      	adds	r3, #41	; 0x29
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	015b      	lsls	r3, r3, #5
 80028d6:	4413      	add	r3, r2
 80028d8:	3328      	adds	r3, #40	; 0x28
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	b291      	uxth	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	015b      	lsls	r3, r3, #5
 80028e8:	4413      	add	r3, r2
 80028ea:	3336      	adds	r3, #54	; 0x36
 80028ec:	460a      	mov	r2, r1
 80028ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	015b      	lsls	r3, r3, #5
 80028f6:	4413      	add	r3, r2
 80028f8:	332b      	adds	r3, #43	; 0x2b
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	015b      	lsls	r3, r3, #5
 8002904:	4413      	add	r3, r2
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	015b      	lsls	r3, r3, #5
 8002912:	4413      	add	r3, r2
 8002914:	333c      	adds	r3, #60	; 0x3c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	3302      	adds	r3, #2
 8002920:	015b      	lsls	r3, r3, #5
 8002922:	4413      	add	r3, r2
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	3301      	adds	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d3c4      	bcc.n	80028c2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	e031      	b.n	80029a2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	4413      	add	r3, r2
 8002946:	f203 1329 	addw	r3, r3, #297	; 0x129
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	4413      	add	r3, r2
 8002956:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	015b      	lsls	r3, r3, #5
 8002964:	4413      	add	r3, r2
 8002966:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	015b      	lsls	r3, r3, #5
 8002974:	4413      	add	r3, r2
 8002976:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	015b      	lsls	r3, r3, #5
 8002984:	4413      	add	r3, r2
 8002986:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	330a      	adds	r3, #10
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	4413      	add	r3, r2
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	3301      	adds	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3c8      	bcc.n	800293e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	687e      	ldr	r6, [r7, #4]
 80029b4:	466d      	mov	r5, sp
 80029b6:	f106 0410 	add.w	r4, r6, #16
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	1d33      	adds	r3, r6, #4
 80029c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f002 fb3f 	bl	800504a <USB_DevInit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00d      	b.n	80029fa <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fb7d 	bl	80060f2 <USB_DevDisconnect>

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_PCD_Start+0x16>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e016      	b.n	8002a46 <HAL_PCD_Start+0x44>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a20:	2101      	movs	r1, #1
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f005 fbd9 	bl	80081da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fb56 	bl	80060de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 fac8 	bl	8004fcc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fb53 	bl	8006106 <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a6a:	d102      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 faf3 	bl	8003058 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fb45 	bl	8006106 <USB_ReadInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d112      	bne.n	8002aae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a9a:	b292      	uxth	r2, r2
 8002a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f005 f9a8 	bl	8007df6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f8de 	bl	8002c6a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 fb27 	bl	8006106 <USB_ReadInterrupts>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac2:	d10b      	bne.n	8002adc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 fb10 	bl	8006106 <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af0:	d10b      	bne.n	8002b0a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b04:	b292      	uxth	r2, r2
 8002b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 faf9 	bl	8006106 <USB_ReadInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1e:	d126      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	b292      	uxth	r2, r2
 8002b34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0208 	bic.w	r2, r2, #8
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f005 f989 	bl	8007e68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 fac7 	bl	8006106 <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b82:	d13d      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0208 	orr.w	r2, r2, #8
 8002b96:	b292      	uxth	r2, r2
 8002b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0204 	orr.w	r2, r2, #4
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fa98 	bl	8006106 <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be0:	d10b      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 f91a 	bl	8007e34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 fa7e 	bl	8006106 <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c14:	d10e      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f005 f8d3 	bl	8007dda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 fa64 	bl	8006106 <USB_ReadInterrupts>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d10b      	bne.n	8002c62 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_SetAddress+0x1a>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e013      	b.n	8002cac <HAL_PCD_SetAddress+0x42>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fa0b 	bl	80060b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	70fb      	strb	r3, [r7, #3]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	803b      	strh	r3, [r7, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0b      	bge.n	8002cf2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	3328      	adds	r3, #40	; 0x28
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	705a      	strb	r2, [r3, #1]
 8002cf0:	e00b      	b.n	8002d0a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	015b      	lsls	r3, r3, #5
 8002cfa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d16:	883a      	ldrh	r2, [r7, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	78ba      	ldrb	r2, [r7, #2]
 8002d20:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d004      	beq.n	8002d34 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d34:	78bb      	ldrb	r3, [r7, #2]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d102      	bne.n	8002d40 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_PCD_EP_Open+0x9a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e00e      	b.n	8002d6c <HAL_PCD_EP_Open+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f002 f999 	bl	8005094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da0b      	bge.n	8002da0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	015b      	lsls	r3, r3, #5
 8002d90:	3328      	adds	r3, #40	; 0x28
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	705a      	strb	r2, [r3, #1]
 8002d9e:	e00b      	b.n	8002db8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	015b      	lsls	r3, r3, #5
 8002da8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_PCD_EP_Close+0x5e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e00e      	b.n	8002df0 <HAL_PCD_EP_Close+0x7c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fc45 	bl	8005670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607a      	str	r2, [r7, #4]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	460b      	mov	r3, r1
 8002e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e08:	7afb      	ldrb	r3, [r7, #11]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	015b      	lsls	r3, r3, #5
 8002e10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6979      	ldr	r1, [r7, #20]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fda4 	bl	800599c <USB_EPStartXfer>
 8002e54:	e005      	b.n	8002e62 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6979      	ldr	r1, [r7, #20]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fd9d 	bl	800599c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	330a      	adds	r3, #10
 8002e82:	015b      	lsls	r3, r3, #5
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	3328      	adds	r3, #40	; 0x28
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed8:	7afb      	ldrb	r3, [r7, #11]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 fd57 	bl	800599c <USB_EPStartXfer>
 8002eee:	e005      	b.n	8002efc <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6979      	ldr	r1, [r7, #20]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 fd50 	bl	800599c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 0207 	and.w	r2, r3, #7
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d901      	bls.n	8002f24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e046      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da0b      	bge.n	8002f44 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	015b      	lsls	r3, r3, #5
 8002f34:	3328      	adds	r3, #40	; 0x28
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	705a      	strb	r2, [r3, #1]
 8002f42:	e009      	b.n	8002f58 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	015b      	lsls	r3, r3, #5
 8002f48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_PCD_EP_SetStall+0x72>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e01c      	b.n	8002fb2 <HAL_PCD_EP_SetStall+0xac>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f002 ffc0 	bl	8005f0c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f003 f8be 	bl	8006124 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 020f 	and.w	r2, r3, #15
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d901      	bls.n	8002fd8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e03a      	b.n	800304e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da0b      	bge.n	8002ff8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	3328      	adds	r3, #40	; 0x28
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	705a      	strb	r2, [r3, #1]
 8002ff6:	e00b      	b.n	8003010 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	015b      	lsls	r3, r3, #5
 8003000:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_EP_ClrStall+0x76>
 800302c:	2302      	movs	r3, #2
 800302e:	e00e      	b.n	800304e <HAL_PCD_EP_ClrStall+0x94>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	4618      	mov	r0, r3
 8003040:	f002 ffa6 	bl	8005f90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b089      	sub	sp, #36	; 0x24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003060:	e282      	b.n	8003568 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800306a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800306c:	8afb      	ldrh	r3, [r7, #22]
 800306e:	b2db      	uxtb	r3, r3
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003076:	7d7b      	ldrb	r3, [r7, #21]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 8142 	bne.w	8003302 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800307e:	8afb      	ldrh	r3, [r7, #22]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d151      	bne.n	800312c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	b29c      	uxth	r4, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80030a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3328      	adds	r3, #40	; 0x28
 80030ae:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	3302      	adds	r3, #2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	441a      	add	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ea:	2100      	movs	r1, #0
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f004 fe5d 	bl	8007dac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8234 	beq.w	8003568 <PCD_EP_ISR_Handler+0x510>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 822f 	bne.w	8003568 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003116:	b2da      	uxtb	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b292      	uxth	r2, r2
 800311e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800312a:	e21d      	b.n	8003568 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003132:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800313c:	8a7b      	ldrh	r3, [r7, #18]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	2b00      	cmp	r3, #0
 8003144:	d033      	beq.n	80031ae <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	3306      	adds	r3, #6
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	4413      	add	r3, r2
 8003164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003184:	b29b      	uxth	r3, r3
 8003186:	f003 f81c 	bl	80061c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29a      	uxth	r2, r3
 8003192:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003196:	4013      	ands	r3, r2
 8003198:	b29c      	uxth	r4, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80031a2:	b292      	uxth	r2, r2
 80031a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f004 fdd6 	bl	8007d58 <HAL_PCD_SetupStageCallback>
 80031ac:	e1dc      	b.n	8003568 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f280 81d8 	bge.w	8003568 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29c      	uxth	r4, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80031d0:	b292      	uxth	r2, r2
 80031d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031dc:	b29b      	uxth	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	3306      	adds	r3, #6
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d019      	beq.n	800323c <PCD_EP_ISR_Handler+0x1e4>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6959      	ldr	r1, [r3, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003220:	b29b      	uxth	r3, r3
 8003222:	f002 ffce 	bl	80061c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	441a      	add	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003234:	2100      	movs	r1, #0
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f004 fda0 	bl	8007d7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461c      	mov	r4, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800324a:	b29b      	uxth	r3, r3
 800324c:	441c      	add	r4, r3
 800324e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003252:	461c      	mov	r4, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <PCD_EP_ISR_Handler+0x222>
 800325c:	8823      	ldrh	r3, [r4, #0]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003264:	b29b      	uxth	r3, r3
 8003266:	8023      	strh	r3, [r4, #0]
 8003268:	8823      	ldrh	r3, [r4, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003274:	b29b      	uxth	r3, r3
 8003276:	8023      	strh	r3, [r4, #0]
 8003278:	e02d      	b.n	80032d6 <PCD_EP_ISR_Handler+0x27e>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b3e      	cmp	r3, #62	; 0x3e
 8003280:	d812      	bhi.n	80032a8 <PCD_EP_ISR_Handler+0x250>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <PCD_EP_ISR_Handler+0x244>
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	3301      	adds	r3, #1
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	029b      	lsls	r3, r3, #10
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	8023      	strh	r3, [r4, #0]
 80032a6:	e016      	b.n	80032d6 <PCD_EP_ISR_Handler+0x27e>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <PCD_EP_ISR_Handler+0x26a>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3b01      	subs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	b29c      	uxth	r4, r3
 80032e8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032ec:	b29c      	uxth	r4, r3
 80032ee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032f2:	b29c      	uxth	r4, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4ba2      	ldr	r3, [pc, #648]	; (8003584 <PCD_EP_ISR_Handler+0x52c>)
 80032fa:	4323      	orrs	r3, r4
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
 8003300:	e132      	b.n	8003568 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	7d7b      	ldrb	r3, [r7, #21]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003312:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f280 80d1 	bge.w	80034be <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	7d7b      	ldrb	r3, [r7, #21]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29a      	uxth	r2, r3
 800332c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003330:	4013      	ands	r3, r2
 8003332:	b29c      	uxth	r4, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	7d7b      	ldrb	r3, [r7, #21]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003344:	b292      	uxth	r2, r2
 8003346:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003348:	7d7b      	ldrb	r3, [r7, #21]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	7b1b      	ldrb	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d121      	bne.n	80033a2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	3306      	adds	r3, #6
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003388:	8bfb      	ldrh	r3, [r7, #30]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d072      	beq.n	8003474 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6959      	ldr	r1, [r3, #20]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	88da      	ldrh	r2, [r3, #6]
 800339a:	8bfb      	ldrh	r3, [r7, #30]
 800339c:	f002 ff11 	bl	80061c2 <USB_ReadPMA>
 80033a0:	e068      	b.n	8003474 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d021      	beq.n	8003400 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	3302      	adds	r3, #2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80033e6:	8bfb      	ldrh	r3, [r7, #30]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02a      	beq.n	8003442 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6959      	ldr	r1, [r3, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	891a      	ldrh	r2, [r3, #8]
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	f002 fee2 	bl	80061c2 <USB_ReadPMA>
 80033fe:	e020      	b.n	8003442 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	3306      	adds	r3, #6
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003428:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800342a:	8bfb      	ldrh	r3, [r7, #30]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6959      	ldr	r1, [r3, #20]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	895a      	ldrh	r2, [r3, #10]
 800343c:	8bfb      	ldrh	r3, [r7, #30]
 800343e:	f002 fec0 	bl	80061c2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345c:	b29c      	uxth	r4, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	4b46      	ldr	r3, [pc, #280]	; (8003588 <PCD_EP_ISR_Handler+0x530>)
 800346e:	4323      	orrs	r3, r4
 8003470:	b29b      	uxth	r3, r3
 8003472:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	8bfb      	ldrh	r3, [r7, #30]
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	8bfb      	ldrh	r3, [r7, #30]
 8003486:	441a      	add	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <PCD_EP_ISR_Handler+0x446>
 8003494:	8bfa      	ldrh	r2, [r7, #30]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	429a      	cmp	r2, r3
 800349c:	d206      	bcs.n	80034ac <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f004 fc69 	bl	8007d7c <HAL_PCD_DataOutStageCallback>
 80034aa:	e008      	b.n	80034be <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	7819      	ldrb	r1, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fc9d 	bl	8002df8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034be:	8a7b      	ldrh	r3, [r7, #18]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04f      	beq.n	8003568 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80034c8:	7d7b      	ldrb	r3, [r7, #21]
 80034ca:	015b      	lsls	r3, r3, #5
 80034cc:	3328      	adds	r3, #40	; 0x28
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	7d7b      	ldrb	r3, [r7, #21]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	b29c      	uxth	r4, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	7d7b      	ldrb	r3, [r7, #21]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	441a      	add	r2, r3
 80034fa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80034fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003502:	b29b      	uxth	r3, r3
 8003504:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	3302      	adds	r3, #2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f004 fc2c 	bl	8007dac <HAL_PCD_DataInStageCallback>
 8003554:	e008      	b.n	8003568 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	7819      	ldrb	r1, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fc96 	bl	8002e94 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003570:	b29b      	uxth	r3, r3
 8003572:	b21b      	sxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	f6ff ad74 	blt.w	8003062 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3724      	adds	r7, #36	; 0x24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}
 8003584:	ffff8080 	.word	0xffff8080
 8003588:	ffff80c0 	.word	0xffff80c0

0800358c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	817b      	strh	r3, [r7, #10]
 800359a:	4613      	mov	r3, r2
 800359c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d008      	beq.n	80035bc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035aa:	897b      	ldrh	r3, [r7, #10]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	015b      	lsls	r3, r3, #5
 80035b2:	3328      	adds	r3, #40	; 0x28
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e006      	b.n	80035ca <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035bc:	897b      	ldrh	r3, [r7, #10]
 80035be:	015b      	lsls	r3, r3, #5
 80035c0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ca:	893b      	ldrh	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	80da      	strh	r2, [r3, #6]
 80035de:	e00b      	b.n	80035f8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2201      	movs	r2, #1
 80035e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e26c      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8087 	beq.w	8003732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003624:	4b92      	ldr	r3, [pc, #584]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b04      	cmp	r3, #4
 800362e:	d00c      	beq.n	800364a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003630:	4b8f      	ldr	r3, [pc, #572]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d112      	bne.n	8003662 <HAL_RCC_OscConfig+0x5e>
 800363c:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d10b      	bne.n	8003662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364a:	4b89      	ldr	r3, [pc, #548]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06c      	beq.n	8003730 <HAL_RCC_OscConfig+0x12c>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d168      	bne.n	8003730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e246      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x76>
 800366c:	4b80      	ldr	r3, [pc, #512]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a7f      	ldr	r2, [pc, #508]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e02e      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x98>
 8003682:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b78      	ldr	r3, [pc, #480]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a77      	ldr	r2, [pc, #476]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0xbc>
 80036a6:	4b72      	ldr	r3, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a71      	ldr	r2, [pc, #452]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b6f      	ldr	r3, [pc, #444]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0xd4>
 80036c0:	4b6b      	ldr	r3, [pc, #428]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	4b68      	ldr	r3, [pc, #416]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a67      	ldr	r2, [pc, #412]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d013      	beq.n	8003708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe fc64 	bl	8001fac <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fe fc60 	bl	8001fac <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1fa      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0xe4>
 8003706:	e014      	b.n	8003732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fe fc50 	bl	8001fac <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003710:	f7fe fc4c 	bl	8001fac <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e1e6      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x10c>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d063      	beq.n	8003806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373e:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800374a:	4b49      	ldr	r3, [pc, #292]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d11c      	bne.n	8003790 <HAL_RCC_OscConfig+0x18c>
 8003756:	4b46      	ldr	r3, [pc, #280]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d116      	bne.n	8003790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x176>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e1ba      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4939      	ldr	r1, [pc, #228]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	e03a      	b.n	8003806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d020      	beq.n	80037da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003798:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCC_OscConfig+0x270>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fe fc05 	bl	8001fac <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe fc01 	bl	8001fac <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e19b      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4927      	ldr	r1, [pc, #156]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	e015      	b.n	8003806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_RCC_OscConfig+0x270>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fbe4 	bl	8001fac <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fe fbe0 	bl	8001fac <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e17a      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03a      	beq.n	8003888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d019      	beq.n	800384e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7fe fbc4 	bl	8001fac <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003828:	f7fe fbc0 	bl	8001fac <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e15a      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCC_OscConfig+0x26c>)
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003846:	2001      	movs	r0, #1
 8003848:	f000 fada 	bl	8003e00 <RCC_Delay>
 800384c:	e01c      	b.n	8003888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_OscConfig+0x274>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003854:	f7fe fbaa 	bl	8001fac <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385a:	e00f      	b.n	800387c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385c:	f7fe fba6 	bl	8001fac <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d908      	bls.n	800387c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e140      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	42420000 	.word	0x42420000
 8003878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	4b9e      	ldr	r3, [pc, #632]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e9      	bne.n	800385c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80a6 	beq.w	80039e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389a:	4b97      	ldr	r3, [pc, #604]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a93      	ldr	r2, [pc, #588]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80038ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b0:	61d3      	str	r3, [r2, #28]
 80038b2:	4b91      	ldr	r3, [pc, #580]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b8e      	ldr	r3, [pc, #568]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d118      	bne.n	8003900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ce:	4b8b      	ldr	r3, [pc, #556]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a8a      	ldr	r2, [pc, #552]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038da:	f7fe fb67 	bl	8001fac <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fe fb63 	bl	8001fac <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0fd      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	4b81      	ldr	r3, [pc, #516]	; (8003afc <HAL_RCC_OscConfig+0x4f8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d106      	bne.n	8003916 <HAL_RCC_OscConfig+0x312>
 8003908:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6213      	str	r3, [r2, #32]
 8003914:	e02d      	b.n	8003972 <HAL_RCC_OscConfig+0x36e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_RCC_OscConfig+0x334>
 800391e:	4b76      	ldr	r3, [pc, #472]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a75      	ldr	r2, [pc, #468]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6213      	str	r3, [r2, #32]
 800392a:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6213      	str	r3, [r2, #32]
 8003936:	e01c      	b.n	8003972 <HAL_RCC_OscConfig+0x36e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b05      	cmp	r3, #5
 800393e:	d10c      	bne.n	800395a <HAL_RCC_OscConfig+0x356>
 8003940:	4b6d      	ldr	r3, [pc, #436]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4a6c      	ldr	r2, [pc, #432]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	f043 0304 	orr.w	r3, r3, #4
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4a69      	ldr	r2, [pc, #420]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6213      	str	r3, [r2, #32]
 8003958:	e00b      	b.n	8003972 <HAL_RCC_OscConfig+0x36e>
 800395a:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4a66      	ldr	r2, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6213      	str	r3, [r2, #32]
 8003966:	4b64      	ldr	r3, [pc, #400]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4a63      	ldr	r2, [pc, #396]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d015      	beq.n	80039a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7fe fb17 	bl	8001fac <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fe fb13 	bl	8001fac <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0ab      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003998:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ee      	beq.n	8003982 <HAL_RCC_OscConfig+0x37e>
 80039a4:	e014      	b.n	80039d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fb01 	bl	8001fac <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fe fafd 	bl	8001fac <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e095      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c4:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ee      	bne.n	80039ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d105      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d6:	4b48      	ldr	r3, [pc, #288]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a47      	ldr	r2, [pc, #284]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8081 	beq.w	8003aee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ec:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d061      	beq.n	8003abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d146      	bne.n	8003a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <HAL_RCC_OscConfig+0x4fc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a06:	f7fe fad1 	bl	8001fac <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0e:	f7fe facd 	bl	8001fac <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e067      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d108      	bne.n	8003a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a36:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	492d      	ldr	r1, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a19      	ldr	r1, [r3, #32]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	4927      	ldr	r1, [pc, #156]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_RCC_OscConfig+0x4fc>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fe faa1 	bl	8001fac <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe fa9d 	bl	8001fac <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e037      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x46a>
 8003a8c:	e02f      	b.n	8003aee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <HAL_RCC_OscConfig+0x4fc>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fa8a 	bl	8001fac <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe fa86 	bl	8001fac <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e020      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aae:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x498>
 8003aba:	e018      	b.n	8003aee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e013      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x4f4>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d106      	bne.n	8003aea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40007000 	.word	0x40007000
 8003b00:	42420060 	.word	0x42420060

08003b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0d0      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b18:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d910      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4965      	ldr	r1, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d040      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d107      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e073      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4936      	ldr	r1, [pc, #216]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bf4:	f7fe f9da 	bl	8001fac <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bfc:	f7fe f9d6 	bl	8001fac <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e053      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 020c 	and.w	r2, r3, #12
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d1eb      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d210      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4601      	mov	r1, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca4:	5cd3      	ldrb	r3, [r2, r3]
 8003ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe f938 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	0800a83c 	.word	0x0800a83c
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	b490      	push	{r4, r7}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cde:	4b2a      	ldr	r3, [pc, #168]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ce0:	1d3c      	adds	r4, r7, #4
 8003ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ce8:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d002      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_GetSysClockFreq+0x46>
 8003d16:	e02d      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d1a:	623b      	str	r3, [r7, #32]
      break;
 8003d1c:	e02d      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	0c9b      	lsrs	r3, r3, #18
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d3c:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0c5b      	lsrs	r3, r3, #17
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d56:	fb02 f203 	mul.w	r2, r2, r3
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	e004      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4a0c      	ldr	r2, [pc, #48]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	623b      	str	r3, [r7, #32]
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d76:	623b      	str	r3, [r7, #32]
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	; 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc90      	pop	{r4, r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	0800a7dc 	.word	0x0800a7dc
 8003d8c:	0800a7ec 	.word	0x0800a7ec
 8003d90:	40021000 	.word	0x40021000
 8003d94:	007a1200 	.word	0x007a1200
 8003d98:	003d0900 	.word	0x003d0900

08003d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da0:	4b02      	ldr	r3, [pc, #8]	; (8003dac <HAL_RCC_GetHCLKFreq+0x10>)
 8003da2:	681b      	ldr	r3, [r3, #0]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	20000000 	.word	0x20000000

08003db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003db4:	f7ff fff2 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003db8:	4601      	mov	r1, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc6:	5cd3      	ldrb	r3, [r2, r3]
 8003dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800a84c 	.word	0x0800a84c

08003dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ddc:	f7ff ffde 	bl	8003d9c <HAL_RCC_GetHCLKFreq>
 8003de0:	4601      	mov	r1, r0
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	0adb      	lsrs	r3, r3, #11
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dee:	5cd3      	ldrb	r3, [r2, r3]
 8003df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	0800a84c 	.word	0x0800a84c

08003e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <RCC_Delay+0x34>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <RCC_Delay+0x38>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0a5b      	lsrs	r3, r3, #9
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e1c:	bf00      	nop
  }
  while (Delay --);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1e5a      	subs	r2, r3, #1
 8003e22:	60fa      	str	r2, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f9      	bne.n	8003e1c <RCC_Delay+0x1c>
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000000 	.word	0x20000000
 8003e38:	10624dd3 	.word	0x10624dd3

08003e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d07d      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4a4b      	ldr	r2, [pc, #300]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	61d3      	str	r3, [r2, #28]
 8003e74:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d118      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a42      	ldr	r2, [pc, #264]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9c:	f7fe f886 	bl	8001fac <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea4:	f7fe f882 	bl	8001fac <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e06d      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec2:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02e      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d027      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef0:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe f851 	bl	8001fac <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fe f84d 	bl	8001fac <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e036      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4917      	ldr	r1, [pc, #92]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	490b      	ldr	r1, [pc, #44]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4904      	ldr	r1, [pc, #16]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42420440 	.word	0x42420440

08003fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01d      	b.n	8003ff6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fd44 	bl	8001a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 f902 	bl	80041f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2201      	movs	r2, #1
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fad6 	bl	80045c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a10      	ldr	r2, [pc, #64]	; (8004060 <HAL_TIM_PWM_Start+0x60>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d107      	bne.n	8004032 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d007      	beq.n	8004054 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00

08004064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800407a:	2302      	movs	r3, #2
 800407c:	e0b4      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2202      	movs	r2, #2
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	f200 809f 	bhi.w	80041d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040d1 	.word	0x080040d1
 80040a0:	080041d5 	.word	0x080041d5
 80040a4:	080041d5 	.word	0x080041d5
 80040a8:	080041d5 	.word	0x080041d5
 80040ac:	08004111 	.word	0x08004111
 80040b0:	080041d5 	.word	0x080041d5
 80040b4:	080041d5 	.word	0x080041d5
 80040b8:	080041d5 	.word	0x080041d5
 80040bc:	08004153 	.word	0x08004153
 80040c0:	080041d5 	.word	0x080041d5
 80040c4:	080041d5 	.word	0x080041d5
 80040c8:	080041d5 	.word	0x080041d5
 80040cc:	08004193 	.word	0x08004193
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f8ec 	bl	80042b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0208 	orr.w	r2, r2, #8
 80040ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0204 	bic.w	r2, r2, #4
 80040fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6999      	ldr	r1, [r3, #24]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	619a      	str	r2, [r3, #24]
      break;
 800410e:	e062      	b.n	80041d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f932 	bl	8004380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6999      	ldr	r1, [r3, #24]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	021a      	lsls	r2, r3, #8
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	619a      	str	r2, [r3, #24]
      break;
 8004150:	e041      	b.n	80041d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f97b 	bl	8004454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0208 	orr.w	r2, r2, #8
 800416c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0204 	bic.w	r2, r2, #4
 800417c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69d9      	ldr	r1, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	61da      	str	r2, [r3, #28]
      break;
 8004190:	e021      	b.n	80041d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f9c5 	bl	8004528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69d9      	ldr	r1, [r3, #28]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	021a      	lsls	r2, r3, #8
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	61da      	str	r2, [r3, #28]
      break;
 80041d2:	e000      	b.n	80041d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a29      	ldr	r2, [pc, #164]	; (80042a8 <TIM_Base_SetConfig+0xb8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00b      	beq.n	8004220 <TIM_Base_SetConfig+0x30>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d007      	beq.n	8004220 <TIM_Base_SetConfig+0x30>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a26      	ldr	r2, [pc, #152]	; (80042ac <TIM_Base_SetConfig+0xbc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_Base_SetConfig+0x30>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <TIM_Base_SetConfig+0xc0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d108      	bne.n	8004232 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <TIM_Base_SetConfig+0xb8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_Base_SetConfig+0x62>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d007      	beq.n	8004252 <TIM_Base_SetConfig+0x62>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a19      	ldr	r2, [pc, #100]	; (80042ac <TIM_Base_SetConfig+0xbc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x62>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <TIM_Base_SetConfig+0xc0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <TIM_Base_SetConfig+0xb8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d103      	bne.n	8004298 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	615a      	str	r2, [r3, #20]
}
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800

080042b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0302 	bic.w	r3, r3, #2
 80042fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <TIM_OC1_SetConfig+0xc8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10c      	bne.n	800432a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0308 	bic.w	r3, r3, #8
 8004316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <TIM_OC1_SetConfig+0xc8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d111      	bne.n	8004356 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40012c00 	.word	0x40012c00

08004380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0320 	bic.w	r3, r3, #32
 80043ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <TIM_OC2_SetConfig+0xd0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10d      	bne.n	80043fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a14      	ldr	r2, [pc, #80]	; (8004450 <TIM_OC2_SetConfig+0xd0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d113      	bne.n	800442c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	40012c00 	.word	0x40012c00

08004454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0303 	bic.w	r3, r3, #3
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800449c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <TIM_OC3_SetConfig+0xd0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10d      	bne.n	80044ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC3_SetConfig+0xd0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d113      	bne.n	80044fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00

08004528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <TIM_OC4_SetConfig+0x98>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d109      	bne.n	800459c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00

080045c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2201      	movs	r2, #1
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	401a      	ands	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 031f 	and.w	r3, r3, #31
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	fa01 f303 	lsl.w	r3, r1, r3
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e032      	b.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	4313      	orrs	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e03f      	b.n	8004726 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fd fa6e 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	; 0x24
 80046c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb8d 	bl	8004df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800470c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b088      	sub	sp, #32
 8004732:	af02      	add	r7, sp, #8
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	f040 8083 	bne.w	8004856 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_UART_Transmit+0x2e>
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e07b      	b.n	8004858 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_UART_Transmit+0x40>
 800476a:	2302      	movs	r3, #2
 800476c:	e074      	b.n	8004858 <HAL_UART_Transmit+0x12a>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2221      	movs	r2, #33	; 0x21
 8004780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004784:	f7fd fc12 	bl	8001fac <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004796:	e042      	b.n	800481e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d122      	bne.n	80047f6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2180      	movs	r1, #128	; 0x80
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f9b2 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e046      	b.n	8004858 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3302      	adds	r3, #2
 80047ea:	60bb      	str	r3, [r7, #8]
 80047ec:	e017      	b.n	800481e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	e013      	b.n	800481e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2180      	movs	r1, #128	; 0x80
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f98f 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e023      	b.n	8004858 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60ba      	str	r2, [r7, #8]
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1b7      	bne.n	8004798 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2200      	movs	r2, #0
 8004830:	2140      	movs	r1, #64	; 0x40
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f976 	bl	8004b24 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e00a      	b.n	8004858 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b20      	cmp	r3, #32
 8004878:	d140      	bne.n	80048fc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <HAL_UART_Receive_IT+0x26>
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e039      	b.n	80048fe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Receive_IT+0x38>
 8004894:	2302      	movs	r3, #2
 8004896:	e032      	b.n	80048fe <HAL_UART_Receive_IT+0x9e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2222      	movs	r2, #34	; 0x22
 80048bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0220 	orr.w	r2, r2, #32
 80048f6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10d      	bne.n	800495a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_UART_IRQHandler+0x52>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f9ce 	bl	8004cf4 <UART_Receive_IT>
      return;
 8004958:	e0cc      	b.n	8004af4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80ab 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x1b0>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <HAL_UART_IRQHandler+0x70>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 80a0 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_UART_IRQHandler+0x90>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	f043 0201 	orr.w	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_UART_IRQHandler+0xb0>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	f043 0202 	orr.w	r2, r3, #2
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_UART_IRQHandler+0xd0>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	f043 0204 	orr.w	r2, r3, #4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_UART_IRQHandler+0xf0>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f0:	f043 0208 	orr.w	r2, r3, #8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d078      	beq.n	8004af2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <HAL_UART_IRQHandler+0x112>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f96d 	bl	8004cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_UART_IRQHandler+0x13a>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d031      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8b8 	bl	8004bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d023      	beq.n	8004a9e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <HAL_UART_IRQHandler+0x1f4>)
 8004a74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd fbd0 	bl	8002220 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e00e      	b.n	8004ab4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f83b 	bl	8004b12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00a      	b.n	8004ab4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f837 	bl	8004b12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e006      	b.n	8004ab4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f833 	bl	8004b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004ab2:	e01e      	b.n	8004af2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	bf00      	nop
    return;
 8004ab6:	e01c      	b.n	8004af2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x1cc>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8a4 	bl	8004c1a <UART_Transmit_IT>
    return;
 8004ad2:	e00f      	b.n	8004af4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_UART_IRQHandler+0x1ec>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8eb 	bl	8004cc4 <UART_EndTransmit_IT>
    return;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004af2:	bf00      	nop
  }
}
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08004bf3 	.word	0x08004bf3

08004b00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b34:	e02c      	b.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3c:	d028      	beq.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b44:	f7fd fa32 	bl	8001fac <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d21d      	bcs.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e00f      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d0c3      	beq.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695a      	ldr	r2, [r3, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7ff ff80 	bl	8004b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c12:	bf00      	nop
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b21      	cmp	r3, #33	; 0x21
 8004c2c:	d144      	bne.n	8004cb8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d11a      	bne.n	8004c6e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]
 8004c60:	e00e      	b.n	8004c80 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	621a      	str	r2, [r3, #32]
 8004c6c:	e008      	b.n	8004c80 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	1c59      	adds	r1, r3, #1
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6211      	str	r1, [r2, #32]
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10f      	bne.n	8004cb4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff ff0b 	bl	8004b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b22      	cmp	r3, #34	; 0x22
 8004d06:	d171      	bne.n	8004dec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d10:	d123      	bne.n	8004d5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10e      	bne.n	8004d3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d3c:	e029      	b.n	8004d92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28
 8004d58:	e01b      	b.n	8004d92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6858      	ldr	r0, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	1c59      	adds	r1, r3, #1
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6291      	str	r1, [r2, #40]	; 0x28
 8004d72:	b2c2      	uxtb	r2, r0
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e00c      	b.n	8004d92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	1c58      	adds	r0, r3, #1
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	6288      	str	r0, [r1, #40]	; 0x28
 8004d8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d120      	bne.n	8004de8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0220 	bic.w	r2, r2, #32
 8004db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f824 	bl	8000e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e002      	b.n	8004dee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e32:	f023 030c 	bic.w	r3, r3, #12
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a52      	ldr	r2, [pc, #328]	; (8004fa4 <UART_SetConfig+0x1ac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d14e      	bne.n	8004efe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe ffba 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8004e64:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009a      	lsls	r2, r3, #2
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	0119      	lsls	r1, r3, #4
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009a      	lsls	r2, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2064      	movs	r0, #100	; 0x64
 8004ea6:	fb00 f303 	mul.w	r3, r0, r3
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	3332      	adds	r3, #50	; 0x32
 8004eb0:	4a3d      	ldr	r2, [pc, #244]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebc:	4419      	add	r1, r3
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009a      	lsls	r2, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2064      	movs	r0, #100	; 0x64
 8004ede:	fb00 f303 	mul.w	r3, r0, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	; 0x32
 8004ee8:	4a2f      	ldr	r2, [pc, #188]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	440a      	add	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004efc:	e04d      	b.n	8004f9a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004efe:	f7fe ff57 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8004f02:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009a      	lsls	r2, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	0119      	lsls	r1, r3, #4
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004f3c:	fba3 0302 	umull	r0, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2064      	movs	r0, #100	; 0x64
 8004f44:	fb00 f303 	mul.w	r3, r0, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f5a:	4419      	add	r1, r3
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f72:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004f74:	fba3 0302 	umull	r0, r3, r3, r2
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	2064      	movs	r0, #100	; 0x64
 8004f7c:	fb00 f303 	mul.w	r3, r0, r3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	3332      	adds	r3, #50	; 0x32
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <UART_SetConfig+0x1b0>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	f003 020f 	and.w	r2, r3, #15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	440a      	add	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40013800 	.word	0x40013800
 8004fa8:	51eb851f 	.word	0x51eb851f

08004fac <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004fac:	b084      	sub	sp, #16
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	f107 0014 	add.w	r0, r7, #20
 8004fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	b004      	add	sp, #16
 8004fca:	4770      	bx	lr

08004fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004fd4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004fd8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	89fb      	ldrh	r3, [r7, #14]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005002:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005006:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800500e:	b29b      	uxth	r3, r3
 8005010:	b21a      	sxth	r2, r3
 8005012:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005016:	43db      	mvns	r3, r3
 8005018:	b21b      	sxth	r3, r3
 800501a:	4013      	ands	r3, r2
 800501c:	b21b      	sxth	r3, r3
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	460b      	mov	r3, r1
 800503c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800504a:	b084      	sub	sp, #16
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	f107 0014 	add.w	r0, r7, #20
 8005058:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ffa5 	bl	8004fcc <USB_EnableGlobalInt>

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800508e:	b004      	add	sp, #16
 8005090:	4770      	bx	lr
	...

08005094 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005094:	b490      	push	{r4, r7}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d819      	bhi.n	80050f6 <USB_ActivateEndpoint+0x62>
 80050c2:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USB_ActivateEndpoint+0x34>)
 80050c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c8:	080050d9 	.word	0x080050d9
 80050cc:	080050ed 	.word	0x080050ed
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	080050e3 	.word	0x080050e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80050d8:	89bb      	ldrh	r3, [r7, #12]
 80050da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050de:	81bb      	strh	r3, [r7, #12]
      break;
 80050e0:	e00d      	b.n	80050fe <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80050e2:	89bb      	ldrh	r3, [r7, #12]
 80050e4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80050e8:	81bb      	strh	r3, [r7, #12]
      break;
 80050ea:	e008      	b.n	80050fe <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80050ec:	89bb      	ldrh	r3, [r7, #12]
 80050ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f2:	81bb      	strh	r3, [r7, #12]
      break;
 80050f4:	e003      	b.n	80050fe <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	73fb      	strb	r3, [r7, #15]
      break;
 80050fa:	e000      	b.n	80050fe <USB_ActivateEndpoint+0x6a>
      break;
 80050fc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	89bb      	ldrh	r3, [r7, #12]
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	b29a      	uxth	r2, r3
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	4313      	orrs	r3, r2
 800513e:	b29c      	uxth	r4, r3
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	4b8a      	ldr	r3, [pc, #552]	; (8005374 <USB_ActivateEndpoint+0x2e0>)
 800514c:	4323      	orrs	r3, r4
 800514e:	b29b      	uxth	r3, r3
 8005150:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	7b1b      	ldrb	r3, [r3, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 8112 	bne.w	8005380 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d067      	beq.n	8005234 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005164:	687c      	ldr	r4, [r7, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516c:	b29b      	uxth	r3, r3
 800516e:	441c      	add	r4, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4423      	add	r3, r4
 8005178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517c:	461c      	mov	r4, r3
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	88db      	ldrh	r3, [r3, #6]
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	b29b      	uxth	r3, r3
 800518a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29c      	uxth	r4, r3
 800519a:	4623      	mov	r3, r4
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d014      	beq.n	80051ce <USB_ActivateEndpoint+0x13a>
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ba:	b29c      	uxth	r4, r3
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	4b6c      	ldr	r3, [pc, #432]	; (8005378 <USB_ActivateEndpoint+0x2e4>)
 80051c8:	4323      	orrs	r3, r4
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	78db      	ldrb	r3, [r3, #3]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d018      	beq.n	8005208 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ec:	b29c      	uxth	r4, r3
 80051ee:	f084 0320 	eor.w	r3, r4, #32
 80051f2:	b29c      	uxth	r4, r3
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	4b5d      	ldr	r3, [pc, #372]	; (8005374 <USB_ActivateEndpoint+0x2e0>)
 8005200:	4323      	orrs	r3, r4
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]
 8005206:	e22b      	b.n	8005660 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521e:	b29c      	uxth	r4, r3
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	4b52      	ldr	r3, [pc, #328]	; (8005374 <USB_ActivateEndpoint+0x2e0>)
 800522c:	4323      	orrs	r3, r4
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
 8005232:	e215      	b.n	8005660 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005234:	687c      	ldr	r4, [r7, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	441c      	add	r4, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	4423      	add	r3, r4
 8005248:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800524c:	461c      	mov	r4, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	88db      	ldrh	r3, [r3, #6]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	b29b      	uxth	r3, r3
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	b29b      	uxth	r3, r3
 800525a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800525c:	687c      	ldr	r4, [r7, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005264:	b29b      	uxth	r3, r3
 8005266:	441c      	add	r4, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	4423      	add	r3, r4
 8005270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005274:	461c      	mov	r4, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10e      	bne.n	800529c <USB_ActivateEndpoint+0x208>
 800527e:	8823      	ldrh	r3, [r4, #0]
 8005280:	b29b      	uxth	r3, r3
 8005282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005286:	b29b      	uxth	r3, r3
 8005288:	8023      	strh	r3, [r4, #0]
 800528a:	8823      	ldrh	r3, [r4, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005296:	b29b      	uxth	r3, r3
 8005298:	8023      	strh	r3, [r4, #0]
 800529a:	e02d      	b.n	80052f8 <USB_ActivateEndpoint+0x264>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b3e      	cmp	r3, #62	; 0x3e
 80052a2:	d812      	bhi.n	80052ca <USB_ActivateEndpoint+0x236>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <USB_ActivateEndpoint+0x22a>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	029b      	lsls	r3, r3, #10
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	8023      	strh	r3, [r4, #0]
 80052c8:	e016      	b.n	80052f8 <USB_ActivateEndpoint+0x264>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <USB_ActivateEndpoint+0x250>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	b29c      	uxth	r4, r3
 8005306:	4623      	mov	r3, r4
 8005308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d014      	beq.n	800533a <USB_ActivateEndpoint+0x2a6>
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	b29c      	uxth	r4, r3
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <USB_ActivateEndpoint+0x2e8>)
 8005334:	4323      	orrs	r3, r4
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	b29c      	uxth	r4, r3
 8005352:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005356:	b29c      	uxth	r4, r3
 8005358:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800535c:	b29c      	uxth	r4, r3
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	441a      	add	r2, r3
 8005368:	4b02      	ldr	r3, [pc, #8]	; (8005374 <USB_ActivateEndpoint+0x2e0>)
 800536a:	4323      	orrs	r3, r4
 800536c:	b29b      	uxth	r3, r3
 800536e:	8013      	strh	r3, [r2, #0]
 8005370:	e176      	b.n	8005660 <USB_ActivateEndpoint+0x5cc>
 8005372:	bf00      	nop
 8005374:	ffff8080 	.word	0xffff8080
 8005378:	ffff80c0 	.word	0xffff80c0
 800537c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	b29c      	uxth	r4, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	4b96      	ldr	r3, [pc, #600]	; (80055fc <USB_ActivateEndpoint+0x568>)
 80053a4:	4323      	orrs	r3, r4
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80053aa:	687c      	ldr	r4, [r7, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	441c      	add	r4, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4423      	add	r3, r4
 80053be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c2:	461c      	mov	r4, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	891b      	ldrh	r3, [r3, #8]
 80053c8:	085b      	lsrs	r3, r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8023      	strh	r3, [r4, #0]
 80053d2:	687c      	ldr	r4, [r7, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053da:	b29b      	uxth	r3, r3
 80053dc:	441c      	add	r4, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	4423      	add	r3, r4
 80053e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80053ea:	461c      	mov	r4, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 8088 	bne.w	8005514 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29c      	uxth	r4, r3
 8005412:	4623      	mov	r3, r4
 8005414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d014      	beq.n	8005446 <USB_ActivateEndpoint+0x3b2>
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	b29c      	uxth	r4, r3
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	441a      	add	r2, r3
 800543e:	4b70      	ldr	r3, [pc, #448]	; (8005600 <USB_ActivateEndpoint+0x56c>)
 8005440:	4323      	orrs	r3, r4
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29c      	uxth	r4, r3
 8005454:	4623      	mov	r3, r4
 8005456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d014      	beq.n	8005488 <USB_ActivateEndpoint+0x3f4>
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	b29c      	uxth	r4, r3
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	4b60      	ldr	r3, [pc, #384]	; (8005604 <USB_ActivateEndpoint+0x570>)
 8005482:	4323      	orrs	r3, r4
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	b29c      	uxth	r4, r3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	4b56      	ldr	r3, [pc, #344]	; (8005604 <USB_ActivateEndpoint+0x570>)
 80054ac:	4323      	orrs	r3, r4
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	b29c      	uxth	r4, r3
 80054ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80054ce:	b29c      	uxth	r4, r3
 80054d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80054d4:	b29c      	uxth	r4, r3
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <USB_ActivateEndpoint+0x574>)
 80054e2:	4323      	orrs	r3, r4
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	b29c      	uxth	r4, r3
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <USB_ActivateEndpoint+0x574>)
 800550c:	4323      	orrs	r3, r4
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
 8005512:	e0a5      	b.n	8005660 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29c      	uxth	r4, r3
 8005522:	4623      	mov	r3, r4
 8005524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d014      	beq.n	8005556 <USB_ActivateEndpoint+0x4c2>
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	b29c      	uxth	r4, r3
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <USB_ActivateEndpoint+0x56c>)
 8005550:	4323      	orrs	r3, r4
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	b29c      	uxth	r4, r3
 8005564:	4623      	mov	r3, r4
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d014      	beq.n	8005598 <USB_ActivateEndpoint+0x504>
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005584:	b29c      	uxth	r4, r3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	441a      	add	r2, r3
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <USB_ActivateEndpoint+0x570>)
 8005592:	4323      	orrs	r3, r4
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ae:	b29c      	uxth	r4, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <USB_ActivateEndpoint+0x56c>)
 80055bc:	4323      	orrs	r3, r4
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	78db      	ldrb	r3, [r3, #3]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d020      	beq.n	800560c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e0:	b29c      	uxth	r4, r3
 80055e2:	f084 0320 	eor.w	r3, r4, #32
 80055e6:	b29c      	uxth	r4, r3
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	441a      	add	r2, r3
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <USB_ActivateEndpoint+0x574>)
 80055f4:	4323      	orrs	r3, r4
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
 80055fa:	e01c      	b.n	8005636 <USB_ActivateEndpoint+0x5a2>
 80055fc:	ffff8180 	.word	0xffff8180
 8005600:	ffffc080 	.word	0xffffc080
 8005604:	ffff80c0 	.word	0xffff80c0
 8005608:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005622:	b29c      	uxth	r4, r3
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	441a      	add	r2, r3
 800562e:	4b0f      	ldr	r3, [pc, #60]	; (800566c <USB_ActivateEndpoint+0x5d8>)
 8005630:	4323      	orrs	r3, r4
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	b29c      	uxth	r4, r3
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	441a      	add	r2, r3
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <USB_ActivateEndpoint+0x5d8>)
 800565a:	4323      	orrs	r3, r4
 800565c:	b29b      	uxth	r3, r3
 800565e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bc90      	pop	{r4, r7}
 800566a:	4770      	bx	lr
 800566c:	ffff8080 	.word	0xffff8080

08005670 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005670:	b490      	push	{r4, r7}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	7b1b      	ldrb	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d171      	bne.n	8005766 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	785b      	ldrb	r3, [r3, #1]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d036      	beq.n	80056f8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29c      	uxth	r4, r3
 8005698:	4623      	mov	r3, r4
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <USB_DeactivateEndpoint+0x5c>
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b8:	b29c      	uxth	r4, r3
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	4b6b      	ldr	r3, [pc, #428]	; (8005874 <USB_DeactivateEndpoint+0x204>)
 80056c6:	4323      	orrs	r3, r4
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e2:	b29c      	uxth	r4, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	4b62      	ldr	r3, [pc, #392]	; (8005878 <USB_DeactivateEndpoint+0x208>)
 80056f0:	4323      	orrs	r3, r4
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8013      	strh	r3, [r2, #0]
 80056f6:	e144      	b.n	8005982 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29c      	uxth	r4, r3
 8005706:	4623      	mov	r3, r4
 8005708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d014      	beq.n	800573a <USB_DeactivateEndpoint+0xca>
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	b29c      	uxth	r4, r3
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	4b52      	ldr	r3, [pc, #328]	; (800587c <USB_DeactivateEndpoint+0x20c>)
 8005734:	4323      	orrs	r3, r4
 8005736:	b29b      	uxth	r3, r3
 8005738:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	b29c      	uxth	r4, r3
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	4b46      	ldr	r3, [pc, #280]	; (8005878 <USB_DeactivateEndpoint+0x208>)
 800575e:	4323      	orrs	r3, r4
 8005760:	b29b      	uxth	r3, r3
 8005762:	8013      	strh	r3, [r2, #0]
 8005764:	e10d      	b.n	8005982 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 8088 	bne.w	8005880 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29c      	uxth	r4, r3
 800577e:	4623      	mov	r3, r4
 8005780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d014      	beq.n	80057b2 <USB_DeactivateEndpoint+0x142>
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	b29c      	uxth	r4, r3
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <USB_DeactivateEndpoint+0x20c>)
 80057ac:	4323      	orrs	r3, r4
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29c      	uxth	r4, r3
 80057c0:	4623      	mov	r3, r4
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d014      	beq.n	80057f4 <USB_DeactivateEndpoint+0x184>
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e0:	b29c      	uxth	r4, r3
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	4b21      	ldr	r3, [pc, #132]	; (8005874 <USB_DeactivateEndpoint+0x204>)
 80057ee:	4323      	orrs	r3, r4
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	b29c      	uxth	r4, r3
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	441a      	add	r2, r3
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <USB_DeactivateEndpoint+0x204>)
 8005818:	4323      	orrs	r3, r4
 800581a:	b29b      	uxth	r3, r3
 800581c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	b29c      	uxth	r4, r3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	441a      	add	r2, r3
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <USB_DeactivateEndpoint+0x208>)
 8005842:	4323      	orrs	r3, r4
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585e:	b29c      	uxth	r4, r3
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	4b03      	ldr	r3, [pc, #12]	; (8005878 <USB_DeactivateEndpoint+0x208>)
 800586c:	4323      	orrs	r3, r4
 800586e:	b29b      	uxth	r3, r3
 8005870:	8013      	strh	r3, [r2, #0]
 8005872:	e086      	b.n	8005982 <USB_DeactivateEndpoint+0x312>
 8005874:	ffff80c0 	.word	0xffff80c0
 8005878:	ffff8080 	.word	0xffff8080
 800587c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29c      	uxth	r4, r3
 800588e:	4623      	mov	r3, r4
 8005890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d014      	beq.n	80058c2 <USB_DeactivateEndpoint+0x252>
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	b29c      	uxth	r4, r3
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	441a      	add	r2, r3
 80058ba:	4b35      	ldr	r3, [pc, #212]	; (8005990 <USB_DeactivateEndpoint+0x320>)
 80058bc:	4323      	orrs	r3, r4
 80058be:	b29b      	uxth	r3, r3
 80058c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	b29c      	uxth	r4, r3
 80058d0:	4623      	mov	r3, r4
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d014      	beq.n	8005904 <USB_DeactivateEndpoint+0x294>
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	b29c      	uxth	r4, r3
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <USB_DeactivateEndpoint+0x324>)
 80058fe:	4323      	orrs	r3, r4
 8005900:	b29b      	uxth	r3, r3
 8005902:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	b29c      	uxth	r4, r3
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <USB_DeactivateEndpoint+0x320>)
 8005928:	4323      	orrs	r3, r4
 800592a:	b29b      	uxth	r3, r3
 800592c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005944:	b29c      	uxth	r4, r3
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	441a      	add	r2, r3
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <USB_DeactivateEndpoint+0x328>)
 8005952:	4323      	orrs	r3, r4
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	b29c      	uxth	r4, r3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	441a      	add	r2, r3
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <USB_DeactivateEndpoint+0x328>)
 800597c:	4323      	orrs	r3, r4
 800597e:	b29b      	uxth	r3, r3
 8005980:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bc90      	pop	{r4, r7}
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	ffffc080 	.word	0xffffc080
 8005994:	ffff80c0 	.word	0xffff80c0
 8005998:	ffff8080 	.word	0xffff8080

0800599c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b08d      	sub	sp, #52	; 0x34
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	f040 8160 	bne.w	8005c70 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d909      	bls.n	80059d0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	699a      	ldr	r2, [r3, #24]
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	619a      	str	r2, [r3, #24]
 80059ce:	e005      	b.n	80059dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2200      	movs	r2, #0
 80059da:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	7b1b      	ldrb	r3, [r3, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d119      	bne.n	8005a18 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6959      	ldr	r1, [r3, #20]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	88da      	ldrh	r2, [r3, #6]
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fba2 	bl	800613a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059f6:	687c      	ldr	r4, [r7, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	441c      	add	r4, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	4423      	add	r3, r4
 8005a0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0e:	461c      	mov	r4, r3
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8023      	strh	r3, [r4, #0]
 8005a16:	e10f      	b.n	8005c38 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d065      	beq.n	8005afa <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a2e:	687c      	ldr	r4, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d148      	bne.n	8005aca <USB_EPStartXfer+0x12e>
 8005a38:	687c      	ldr	r4, [r7, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	441c      	add	r4, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	4423      	add	r3, r4
 8005a4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a50:	461c      	mov	r4, r3
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10e      	bne.n	8005a76 <USB_EPStartXfer+0xda>
 8005a58:	8823      	ldrh	r3, [r4, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8023      	strh	r3, [r4, #0]
 8005a64:	8823      	ldrh	r3, [r4, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8023      	strh	r3, [r4, #0]
 8005a74:	e03d      	b.n	8005af2 <USB_EPStartXfer+0x156>
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7a:	d810      	bhi.n	8005a9e <USB_EPStartXfer+0x102>
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <USB_EPStartXfer+0xf6>
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	3301      	adds	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	8023      	strh	r3, [r4, #0]
 8005a9c:	e029      	b.n	8005af2 <USB_EPStartXfer+0x156>
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <USB_EPStartXfer+0x118>
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	029b      	lsls	r3, r3, #10
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8023      	strh	r3, [r4, #0]
 8005ac8:	e013      	b.n	8005af2 <USB_EPStartXfer+0x156>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d10f      	bne.n	8005af2 <USB_EPStartXfer+0x156>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	441c      	add	r4, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	4423      	add	r3, r4
 8005ae4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	895b      	ldrh	r3, [r3, #10]
 8005af6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005af8:	e063      	b.n	8005bc2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d148      	bne.n	8005b94 <USB_EPStartXfer+0x1f8>
 8005b02:	687c      	ldr	r4, [r7, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	441c      	add	r4, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	4423      	add	r3, r4
 8005b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1a:	461c      	mov	r4, r3
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10e      	bne.n	8005b40 <USB_EPStartXfer+0x1a4>
 8005b22:	8823      	ldrh	r3, [r4, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8023      	strh	r3, [r4, #0]
 8005b2e:	8823      	ldrh	r3, [r4, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	8023      	strh	r3, [r4, #0]
 8005b3e:	e03d      	b.n	8005bbc <USB_EPStartXfer+0x220>
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	2b3e      	cmp	r3, #62	; 0x3e
 8005b44:	d810      	bhi.n	8005b68 <USB_EPStartXfer+0x1cc>
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <USB_EPStartXfer+0x1c0>
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8023      	strh	r3, [r4, #0]
 8005b66:	e029      	b.n	8005bbc <USB_EPStartXfer+0x220>
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	f003 031f 	and.w	r3, r3, #31
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <USB_EPStartXfer+0x1e2>
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8023      	strh	r3, [r4, #0]
 8005b92:	e013      	b.n	8005bbc <USB_EPStartXfer+0x220>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10f      	bne.n	8005bbc <USB_EPStartXfer+0x220>
 8005b9c:	687c      	ldr	r4, [r7, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	441c      	add	r4, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	4423      	add	r3, r4
 8005bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb4:	461c      	mov	r4, r3
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	891b      	ldrh	r3, [r3, #8]
 8005bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6959      	ldr	r1, [r3, #20]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fab4 	bl	800613a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d115      	bne.n	8005c06 <USB_EPStartXfer+0x26a>
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4413      	add	r3, r2
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf0:	b29c      	uxth	r4, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	441a      	add	r2, r3
 8005bfc:	4b9a      	ldr	r3, [pc, #616]	; (8005e68 <USB_EPStartXfer+0x4cc>)
 8005bfe:	4323      	orrs	r3, r4
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]
 8005c04:	e018      	b.n	8005c38 <USB_EPStartXfer+0x29c>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d114      	bne.n	8005c38 <USB_EPStartXfer+0x29c>
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	b29c      	uxth	r4, r3
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	4b8e      	ldr	r3, [pc, #568]	; (8005e6c <USB_EPStartXfer+0x4d0>)
 8005c32:	4323      	orrs	r3, r4
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4e:	b29c      	uxth	r4, r3
 8005c50:	f084 0310 	eor.w	r3, r4, #16
 8005c54:	b29c      	uxth	r4, r3
 8005c56:	f084 0320 	eor.w	r3, r4, #32
 8005c5a:	b29c      	uxth	r4, r3
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	4b82      	ldr	r3, [pc, #520]	; (8005e70 <USB_EPStartXfer+0x4d4>)
 8005c68:	4323      	orrs	r3, r4
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]
 8005c6e:	e146      	b.n	8005efe <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d909      	bls.n	8005c90 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c88:	1ad2      	subs	r2, r2, r3
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	619a      	str	r2, [r3, #24]
 8005c8e:	e005      	b.n	8005c9c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d148      	bne.n	8005d36 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ca4:	687c      	ldr	r4, [r7, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	441c      	add	r4, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4423      	add	r3, r4
 8005cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cbc:	461c      	mov	r4, r3
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10e      	bne.n	8005ce2 <USB_EPStartXfer+0x346>
 8005cc4:	8823      	ldrh	r3, [r4, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	8023      	strh	r3, [r4, #0]
 8005cd0:	8823      	ldrh	r3, [r4, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	8023      	strh	r3, [r4, #0]
 8005ce0:	e0f2      	b.n	8005ec8 <USB_EPStartXfer+0x52c>
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ce6:	d810      	bhi.n	8005d0a <USB_EPStartXfer+0x36e>
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <USB_EPStartXfer+0x362>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	8023      	strh	r3, [r4, #0]
 8005d08:	e0de      	b.n	8005ec8 <USB_EPStartXfer+0x52c>
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	095b      	lsrs	r3, r3, #5
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <USB_EPStartXfer+0x384>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8023      	strh	r3, [r4, #0]
 8005d34:	e0c8      	b.n	8005ec8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d148      	bne.n	8005dd0 <USB_EPStartXfer+0x434>
 8005d3e:	687c      	ldr	r4, [r7, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	441c      	add	r4, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4423      	add	r3, r4
 8005d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d56:	461c      	mov	r4, r3
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <USB_EPStartXfer+0x3e0>
 8005d5e:	8823      	ldrh	r3, [r4, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	8023      	strh	r3, [r4, #0]
 8005d6a:	8823      	ldrh	r3, [r4, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8023      	strh	r3, [r4, #0]
 8005d7a:	e03d      	b.n	8005df8 <USB_EPStartXfer+0x45c>
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d80:	d810      	bhi.n	8005da4 <USB_EPStartXfer+0x408>
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <USB_EPStartXfer+0x3fc>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61bb      	str	r3, [r7, #24]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8023      	strh	r3, [r4, #0]
 8005da2:	e029      	b.n	8005df8 <USB_EPStartXfer+0x45c>
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <USB_EPStartXfer+0x41e>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	029b      	lsls	r3, r3, #10
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8023      	strh	r3, [r4, #0]
 8005dce:	e013      	b.n	8005df8 <USB_EPStartXfer+0x45c>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	785b      	ldrb	r3, [r3, #1]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d10f      	bne.n	8005df8 <USB_EPStartXfer+0x45c>
 8005dd8:	687c      	ldr	r4, [r7, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	441c      	add	r4, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4423      	add	r3, r4
 8005dec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005df0:	461c      	mov	r4, r3
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8023      	strh	r3, [r4, #0]
 8005df8:	687c      	ldr	r4, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d14e      	bne.n	8005ea0 <USB_EPStartXfer+0x504>
 8005e02:	687c      	ldr	r4, [r7, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	441c      	add	r4, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4423      	add	r3, r4
 8005e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1a:	461c      	mov	r4, r3
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10e      	bne.n	8005e40 <USB_EPStartXfer+0x4a4>
 8005e22:	8823      	ldrh	r3, [r4, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8023      	strh	r3, [r4, #0]
 8005e2e:	8823      	ldrh	r3, [r4, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8023      	strh	r3, [r4, #0]
 8005e3e:	e043      	b.n	8005ec8 <USB_EPStartXfer+0x52c>
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	2b3e      	cmp	r3, #62	; 0x3e
 8005e44:	d816      	bhi.n	8005e74 <USB_EPStartXfer+0x4d8>
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <USB_EPStartXfer+0x4c0>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	029b      	lsls	r3, r3, #10
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8023      	strh	r3, [r4, #0]
 8005e66:	e02f      	b.n	8005ec8 <USB_EPStartXfer+0x52c>
 8005e68:	ffff80c0 	.word	0xffff80c0
 8005e6c:	ffffc080 	.word	0xffffc080
 8005e70:	ffff8080 	.word	0xffff8080
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <USB_EPStartXfer+0x4ee>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8023      	strh	r3, [r4, #0]
 8005e9e:	e013      	b.n	8005ec8 <USB_EPStartXfer+0x52c>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d10f      	bne.n	8005ec8 <USB_EPStartXfer+0x52c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	441c      	add	r4, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	4423      	add	r3, r4
 8005eba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ebe:	613b      	str	r3, [r7, #16]
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	b29c      	uxth	r4, r3
 8005ee0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ee4:	b29c      	uxth	r4, r3
 8005ee6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005eea:	b29c      	uxth	r4, r3
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <USB_EPStartXfer+0x56c>)
 8005ef8:	4323      	orrs	r3, r4
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3734      	adds	r7, #52	; 0x34
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd90      	pop	{r4, r7, pc}
 8005f08:	ffff8080 	.word	0xffff8080

08005f0c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f0c:	b490      	push	{r4, r7}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	b29c      	uxth	r4, r3
 8005f36:	f084 0310 	eor.w	r3, r4, #16
 8005f3a:	b29c      	uxth	r4, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <USB_EPSetStall+0x80>)
 8005f48:	4323      	orrs	r3, r4
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
 8005f4e:	e017      	b.n	8005f80 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	b29c      	uxth	r4, r3
 8005f68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005f6c:	b29c      	uxth	r4, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <USB_EPSetStall+0x80>)
 8005f7a:	4323      	orrs	r3, r4
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc90      	pop	{r4, r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	ffff8080 	.word	0xffff8080

08005f90 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f90:	b490      	push	{r4, r7}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	7b1b      	ldrb	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d17d      	bne.n	800609e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03d      	beq.n	8006026 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29c      	uxth	r4, r3
 8005fb8:	4623      	mov	r3, r4
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d014      	beq.n	8005fec <USB_EPClearStall+0x5c>
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	b29c      	uxth	r4, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	4b31      	ldr	r3, [pc, #196]	; (80060ac <USB_EPClearStall+0x11c>)
 8005fe6:	4323      	orrs	r3, r4
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d054      	beq.n	800609e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800600a:	b29c      	uxth	r4, r3
 800600c:	f084 0320 	eor.w	r3, r4, #32
 8006010:	b29c      	uxth	r4, r3
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <USB_EPClearStall+0x120>)
 800601e:	4323      	orrs	r3, r4
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]
 8006024:	e03b      	b.n	800609e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29c      	uxth	r4, r3
 8006034:	4623      	mov	r3, r4
 8006036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d014      	beq.n	8006068 <USB_EPClearStall+0xd8>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	b29c      	uxth	r4, r3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <USB_EPClearStall+0x124>)
 8006062:	4323      	orrs	r3, r4
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	b29c      	uxth	r4, r3
 8006080:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006084:	b29c      	uxth	r4, r3
 8006086:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800608a:	b29c      	uxth	r4, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	441a      	add	r2, r3
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <USB_EPClearStall+0x120>)
 8006098:	4323      	orrs	r3, r4
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc90      	pop	{r4, r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	ffff80c0 	.word	0xffff80c0
 80060b0:	ffff8080 	.word	0xffff8080
 80060b4:	ffffc080 	.word	0xffffc080

080060b8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr

080060f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr

08006106 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006114:	b29b      	uxth	r3, r3
 8006116:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006118:	68fb      	ldr	r3, [r7, #12]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr

0800613a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800613a:	b480      	push	{r7}
 800613c:	b08d      	sub	sp, #52	; 0x34
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	4611      	mov	r1, r2
 8006146:	461a      	mov	r2, r3
 8006148:	460b      	mov	r3, r1
 800614a:	80fb      	strh	r3, [r7, #6]
 800614c:	4613      	mov	r3, r2
 800614e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006150:	88bb      	ldrh	r3, [r7, #4]
 8006152:	3301      	adds	r3, #1
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	005a      	lsls	r2, r3, #1
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006172:	e01e      	b.n	80061b2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	3301      	adds	r3, #1
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	461a      	mov	r2, r3
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	b29a      	uxth	r2, r3
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	3302      	adds	r3, #2
 800619e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	3302      	adds	r3, #2
 80061a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	3301      	adds	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	3b01      	subs	r3, #1
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1dd      	bne.n	8006174 <USB_WritePMA+0x3a>
  }
}
 80061b8:	bf00      	nop
 80061ba:	3734      	adds	r7, #52	; 0x34
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b08b      	sub	sp, #44	; 0x2c
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	4611      	mov	r1, r2
 80061ce:	461a      	mov	r2, r3
 80061d0:	460b      	mov	r3, r1
 80061d2:	80fb      	strh	r3, [r7, #6]
 80061d4:	4613      	mov	r3, r2
 80061d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061d8:	88bb      	ldrh	r3, [r7, #4]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	005a      	lsls	r2, r3, #1
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061f4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e01b      	b.n	8006234 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	3302      	adds	r3, #2
 8006208:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3301      	adds	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b2da      	uxtb	r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	3302      	adds	r3, #2
 800622c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	3b01      	subs	r3, #1
 8006232:	627b      	str	r3, [r7, #36]	; 0x24
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e0      	bne.n	80061fc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800623a:	88bb      	ldrh	r3, [r7, #4]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	701a      	strb	r2, [r3, #0]
  }
}
 8006256:	bf00      	nop
 8006258:	372c      	adds	r7, #44	; 0x2c
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7c1b      	ldrb	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d115      	bne.n	80062a4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800627c:	2202      	movs	r2, #2
 800627e:	2181      	movs	r1, #129	; 0x81
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 fe74 	bl	8007f6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800628c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006290:	2202      	movs	r2, #2
 8006292:	2101      	movs	r1, #1
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fe6a 	bl	8007f6e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062a2:	e012      	b.n	80062ca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062a4:	2340      	movs	r3, #64	; 0x40
 80062a6:	2202      	movs	r2, #2
 80062a8:	2181      	movs	r1, #129	; 0x81
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fe5f 	bl	8007f6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	2202      	movs	r2, #2
 80062ba:	2101      	movs	r1, #1
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fe56 	bl	8007f6e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062ca:	2308      	movs	r3, #8
 80062cc:	2203      	movs	r2, #3
 80062ce:	2182      	movs	r1, #130	; 0x82
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fe4c 	bl	8007f6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80062e0:	f001 ff66 	bl	80081b0 <USBD_static_malloc>
 80062e4:	4602      	mov	r2, r0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	e026      	b.n	800634a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7c1b      	ldrb	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800632c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006330:	2101      	movs	r1, #1
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 ff05 	bl	8008142 <USBD_LL_PrepareReceive>
 8006338:	e007      	b.n	800634a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	2101      	movs	r1, #1
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fefc 	bl	8008142 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006364:	2181      	movs	r1, #129	; 0x81
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 fe27 	bl	8007fba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006372:	2101      	movs	r1, #1
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fe20 	bl	8007fba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006382:	2182      	movs	r1, #130	; 0x82
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 fe18 	bl	8007fba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 ff0c 	bl	80081c8 <USBD_static_free>
    pdev->pClassData = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d039      	beq.n	8006460 <USBD_CDC_Setup+0x9e>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d17c      	bne.n	80064ea <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	88db      	ldrh	r3, [r3, #6]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d029      	beq.n	800644c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b25b      	sxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da11      	bge.n	8006426 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800640e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	88d2      	ldrh	r2, [r2, #6]
 8006414:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006416:	6939      	ldr	r1, [r7, #16]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	88db      	ldrh	r3, [r3, #6]
 800641c:	461a      	mov	r2, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f9f6 	bl	8007810 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006424:	e068      	b.n	80064f8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	785a      	ldrb	r2, [r3, #1]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	88db      	ldrh	r3, [r3, #6]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800643c:	6939      	ldr	r1, [r7, #16]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	88db      	ldrh	r3, [r3, #6]
 8006442:	461a      	mov	r2, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fa11 	bl	800786c <USBD_CtlPrepareRx>
      break;
 800644a:	e055      	b.n	80064f8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	7850      	ldrb	r0, [r2, #1]
 8006458:	2200      	movs	r2, #0
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	4798      	blx	r3
      break;
 800645e:	e04b      	b.n	80064f8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b0a      	cmp	r3, #10
 8006466:	d017      	beq.n	8006498 <USBD_CDC_Setup+0xd6>
 8006468:	2b0b      	cmp	r3, #11
 800646a:	d029      	beq.n	80064c0 <USBD_CDC_Setup+0xfe>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d133      	bne.n	80064d8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006476:	2b03      	cmp	r3, #3
 8006478:	d107      	bne.n	800648a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	2202      	movs	r2, #2
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f001 f9c4 	bl	8007810 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006488:	e02e      	b.n	80064e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f001 f955 	bl	800773c <USBD_CtlError>
            ret = USBD_FAIL;
 8006492:	2302      	movs	r3, #2
 8006494:	75fb      	strb	r3, [r7, #23]
          break;
 8006496:	e027      	b.n	80064e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d107      	bne.n	80064b2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064a2:	f107 030f 	add.w	r3, r7, #15
 80064a6:	2201      	movs	r2, #1
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 f9b0 	bl	8007810 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064b0:	e01a      	b.n	80064e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f941 	bl	800773c <USBD_CtlError>
            ret = USBD_FAIL;
 80064ba:	2302      	movs	r3, #2
 80064bc:	75fb      	strb	r3, [r7, #23]
          break;
 80064be:	e013      	b.n	80064e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d00d      	beq.n	80064e6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f935 	bl	800773c <USBD_CtlError>
            ret = USBD_FAIL;
 80064d2:	2302      	movs	r3, #2
 80064d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064d6:	e006      	b.n	80064e6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 f92e 	bl	800773c <USBD_CtlError>
          ret = USBD_FAIL;
 80064e0:	2302      	movs	r3, #2
 80064e2:	75fb      	strb	r3, [r7, #23]
          break;
 80064e4:	e000      	b.n	80064e8 <USBD_CDC_Setup+0x126>
          break;
 80064e6:	bf00      	nop
      }
      break;
 80064e8:	e006      	b.n	80064f8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f925 	bl	800773c <USBD_CtlError>
      ret = USBD_FAIL;
 80064f2:	2302      	movs	r3, #2
 80064f4:	75fb      	strb	r3, [r7, #23]
      break;
 80064f6:	bf00      	nop
  }

  return ret;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006524:	2b00      	cmp	r3, #0
 8006526:	d037      	beq.n	8006598 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	331c      	adds	r3, #28
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d026      	beq.n	800658c <USBD_CDC_DataIn+0x8a>
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	4613      	mov	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	331c      	adds	r3, #28
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	0152      	lsls	r2, r2, #5
 8006556:	440a      	add	r2, r1
 8006558:	3238      	adds	r2, #56	; 0x38
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006560:	fb02 f201 	mul.w	r2, r2, r1
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d110      	bne.n	800658c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	331c      	adds	r3, #28
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800657e:	78f9      	ldrb	r1, [r7, #3]
 8006580:	2300      	movs	r3, #0
 8006582:	2200      	movs	r2, #0
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fdb9 	bl	80080fc <USBD_LL_Transmit>
 800658a:	e003      	b.n	8006594 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006598:	2302      	movs	r3, #2
  }
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fde4 	bl	8008188 <USBD_LL_GetRxDataSize>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065e6:	4611      	mov	r1, r2
 80065e8:	4798      	blx	r3

    return USBD_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	e000      	b.n	80065f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660e:	2b00      	cmp	r3, #0
 8006610:	d015      	beq.n	800663e <USBD_CDC_EP0_RxReady+0x46>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	d010      	beq.n	800663e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800662a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006632:	b292      	uxth	r2, r2
 8006634:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2243      	movs	r2, #67	; 0x43
 8006654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006656:	4b03      	ldr	r3, [pc, #12]	; (8006664 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000094 	.word	0x20000094

08006668 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2243      	movs	r2, #67	; 0x43
 8006674:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006676:	4b03      	ldr	r3, [pc, #12]	; (8006684 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20000050 	.word	0x20000050

08006688 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2243      	movs	r2, #67	; 0x43
 8006694:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006696:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	200000d8 	.word	0x200000d8

080066a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	220a      	movs	r2, #10
 80066b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80066b6:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000000c 	.word	0x2000000c

080066c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80066d2:	2302      	movs	r3, #2
 80066d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006708:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01c      	beq.n	80067a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800676c:	2b00      	cmp	r3, #0
 800676e:	d115      	bne.n	800679c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800678e:	b29b      	uxth	r3, r3
 8006790:	2181      	movs	r1, #129	; 0x81
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fcb2 	bl	80080fc <USBD_LL_Transmit>

      return USBD_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e002      	b.n	80067a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80067a0:	2302      	movs	r3, #2
  }
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d017      	beq.n	80067f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	7c1b      	ldrb	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067d6:	2101      	movs	r1, #1
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fcb2 	bl	8008142 <USBD_LL_PrepareReceive>
 80067de:	e007      	b.n	80067f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	2101      	movs	r1, #1
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fca9 	bl	8008142 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006812:	2302      	movs	r3, #2
 8006814:	e01a      	b.n	800684c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	79fa      	ldrb	r2, [r7, #7]
 8006842:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f001 fb1d 	bl	8007e84 <USBD_LL_Init>

  return USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	e001      	b.n	800687a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006876:	2302      	movs	r3, #2
 8006878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fb52 	bl	8007f38 <USBD_LL_Start>

  return USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr

080068b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068be:	2302      	movs	r3, #2
 80068c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00c      	beq.n	80068e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	4611      	mov	r1, r2
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	4611      	mov	r1, r2
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3

  return USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fecb 	bl	80076c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b01      	cmp	r3, #1
 8006950:	d00c      	beq.n	800696c <USBD_LL_SetupStage+0x56>
 8006952:	2b01      	cmp	r3, #1
 8006954:	d302      	bcc.n	800695c <USBD_LL_SetupStage+0x46>
 8006956:	2b02      	cmp	r3, #2
 8006958:	d010      	beq.n	800697c <USBD_LL_SetupStage+0x66>
 800695a:	e017      	b.n	800698c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9cb 	bl	8006d00 <USBD_StdDevReq>
      break;
 800696a:	e01a      	b.n	80069a2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa2d 	bl	8006dd4 <USBD_StdItfReq>
      break;
 800697a:	e012      	b.n	80069a2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fa6b 	bl	8006e60 <USBD_StdEPReq>
      break;
 800698a:	e00a      	b.n	80069a2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006996:	b2db      	uxtb	r3, r3
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fb2c 	bl	8007ff8 <USBD_LL_StallEP>
      break;
 80069a0:	bf00      	nop
  }

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	460b      	mov	r3, r1
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069ba:	7afb      	ldrb	r3, [r7, #11]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d14b      	bne.n	8006a58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d134      	bne.n	8006a3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d919      	bls.n	8006a12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	1ad2      	subs	r2, r2, r3
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d203      	bcs.n	8006a00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	e002      	b.n	8006a06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 ff4c 	bl	80078a8 <USBD_CtlContinueRx>
 8006a10:	e038      	b.n	8006a84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d105      	bne.n	8006a34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 ff49 	bl	80078cc <USBD_CtlSendStatus>
 8006a3a:	e023      	b.n	8006a84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a42:	2b05      	cmp	r3, #5
 8006a44:	d11e      	bne.n	8006a84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a4e:	2100      	movs	r1, #0
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f001 fad1 	bl	8007ff8 <USBD_LL_StallEP>
 8006a56:	e015      	b.n	8006a84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00d      	beq.n	8006a80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d108      	bne.n	8006a80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	7afa      	ldrb	r2, [r7, #11]
 8006a78:	4611      	mov	r1, r2
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	4798      	blx	r3
 8006a7e:	e001      	b.n	8006a84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	e000      	b.n	8006a86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	460b      	mov	r3, r1
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d17f      	bne.n	8006ba2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d15c      	bne.n	8006b6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d915      	bls.n	8006aea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 feb6 	bl	8007848 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006adc:	2300      	movs	r3, #0
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f001 fb2d 	bl	8008142 <USBD_LL_PrepareReceive>
 8006ae8:	e04e      	b.n	8006b88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	6912      	ldr	r2, [r2, #16]
 8006af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006af6:	fb02 f201 	mul.w	r2, r2, r1
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11c      	bne.n	8006b3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d316      	bcc.n	8006b3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d20f      	bcs.n	8006b3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fe92 	bl	8007848 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2100      	movs	r1, #0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 fb05 	bl	8008142 <USBD_LL_PrepareReceive>
 8006b38:	e026      	b.n	8006b88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d105      	bne.n	8006b5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b5c:	2180      	movs	r1, #128	; 0x80
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f001 fa4a 	bl	8007ff8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fec4 	bl	80078f2 <USBD_CtlReceiveStatus>
 8006b6a:	e00d      	b.n	8006b88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d004      	beq.n	8006b80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f001 fa38 	bl	8007ff8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d11d      	bne.n	8006bce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff fe83 	bl	800689e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ba0:	e015      	b.n	8006bce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00d      	beq.n	8006bca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d108      	bne.n	8006bca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	7afa      	ldrb	r2, [r7, #11]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	4798      	blx	r3
 8006bc8:	e001      	b.n	8006bce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e000      	b.n	8006bd0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	2200      	movs	r2, #0
 8006be4:	2100      	movs	r1, #0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f9c1 	bl	8007f6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 f9b3 	bl	8007f6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2240      	movs	r2, #64	; 0x40
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6852      	ldr	r2, [r2, #4]
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	4798      	blx	r3
  }

  return USBD_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr

08006ca0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d105      	bne.n	8006cbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr

08006cca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d10b      	bne.n	8006cf4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d004      	beq.n	8006d24 <USBD_StdDevReq+0x24>
 8006d1a:	2b40      	cmp	r3, #64	; 0x40
 8006d1c:	d002      	beq.n	8006d24 <USBD_StdDevReq+0x24>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <USBD_StdDevReq+0x34>
 8006d22:	e04c      	b.n	8006dbe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
      break;
 8006d32:	e049      	b.n	8006dc8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b09      	cmp	r3, #9
 8006d3a:	d83a      	bhi.n	8006db2 <USBD_StdDevReq+0xb2>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <USBD_StdDevReq+0x44>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d95 	.word	0x08006d95
 8006d48:	08006da9 	.word	0x08006da9
 8006d4c:	08006db3 	.word	0x08006db3
 8006d50:	08006d9f 	.word	0x08006d9f
 8006d54:	08006db3 	.word	0x08006db3
 8006d58:	08006d77 	.word	0x08006d77
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006db3 	.word	0x08006db3
 8006d64:	08006d8b 	.word	0x08006d8b
 8006d68:	08006d81 	.word	0x08006d81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9d4 	bl	800711c <USBD_GetDescriptor>
          break;
 8006d74:	e022      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fb37 	bl	80073ec <USBD_SetAddress>
          break;
 8006d7e:	e01d      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fb74 	bl	8007470 <USBD_SetConfig>
          break;
 8006d88:	e018      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fbfd 	bl	800758c <USBD_GetConfig>
          break;
 8006d92:	e013      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fc2c 	bl	80075f4 <USBD_GetStatus>
          break;
 8006d9c:	e00e      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fc5a 	bl	800765a <USBD_SetFeature>
          break;
 8006da6:	e009      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc69 	bl	8007682 <USBD_ClrFeature>
          break;
 8006db0:	e004      	b.n	8006dbc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fcc1 	bl	800773c <USBD_CtlError>
          break;
 8006dba:	bf00      	nop
      }
      break;
 8006dbc:	e004      	b.n	8006dc8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fcbb 	bl	800773c <USBD_CtlError>
      break;
 8006dc6:	bf00      	nop
  }

  return ret;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop

08006dd4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d003      	beq.n	8006df6 <USBD_StdItfReq+0x22>
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d001      	beq.n	8006df6 <USBD_StdItfReq+0x22>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d12a      	bne.n	8006e4c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d81d      	bhi.n	8006e3e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	889b      	ldrh	r3, [r3, #4]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d813      	bhi.n	8006e34 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	88db      	ldrh	r3, [r3, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d110      	bne.n	8006e48 <USBD_StdItfReq+0x74>
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10d      	bne.n	8006e48 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fd4d 	bl	80078cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e32:	e009      	b.n	8006e48 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fc80 	bl	800773c <USBD_CtlError>
          break;
 8006e3c:	e004      	b.n	8006e48 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fc7b 	bl	800773c <USBD_CtlError>
          break;
 8006e46:	e000      	b.n	8006e4a <USBD_StdItfReq+0x76>
          break;
 8006e48:	bf00      	nop
      }
      break;
 8006e4a:	e004      	b.n	8006e56 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fc74 	bl	800773c <USBD_CtlError>
      break;
 8006e54:	bf00      	nop
  }

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	889b      	ldrh	r3, [r3, #4]
 8006e72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	d004      	beq.n	8006e8a <USBD_StdEPReq+0x2a>
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d002      	beq.n	8006e8a <USBD_StdEPReq+0x2a>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <USBD_StdEPReq+0x3a>
 8006e88:	e13d      	b.n	8007106 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
      break;
 8006e98:	e13a      	b.n	8007110 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d10a      	bne.n	8006ebc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	e12a      	b.n	8007112 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d03e      	beq.n	8006f42 <USBD_StdEPReq+0xe2>
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d002      	beq.n	8006ece <USBD_StdEPReq+0x6e>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d070      	beq.n	8006fae <USBD_StdEPReq+0x14e>
 8006ecc:	e115      	b.n	80070fa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d002      	beq.n	8006ede <USBD_StdEPReq+0x7e>
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d015      	beq.n	8006f08 <USBD_StdEPReq+0xa8>
 8006edc:	e02b      	b.n	8006f36 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00c      	beq.n	8006efe <USBD_StdEPReq+0x9e>
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b80      	cmp	r3, #128	; 0x80
 8006ee8:	d009      	beq.n	8006efe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 f882 	bl	8007ff8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f87e 	bl	8007ff8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006efc:	e020      	b.n	8006f40 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fc1b 	bl	800773c <USBD_CtlError>
              break;
 8006f06:	e01b      	b.n	8006f40 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	885b      	ldrh	r3, [r3, #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10e      	bne.n	8006f2e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <USBD_StdEPReq+0xce>
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b80      	cmp	r3, #128	; 0x80
 8006f1a:	d008      	beq.n	8006f2e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	88db      	ldrh	r3, [r3, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f865 	bl	8007ff8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fccc 	bl	80078cc <USBD_CtlSendStatus>

              break;
 8006f34:	e004      	b.n	8006f40 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fbff 	bl	800773c <USBD_CtlError>
              break;
 8006f3e:	bf00      	nop
          }
          break;
 8006f40:	e0e0      	b.n	8007104 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d002      	beq.n	8006f52 <USBD_StdEPReq+0xf2>
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d015      	beq.n	8006f7c <USBD_StdEPReq+0x11c>
 8006f50:	e026      	b.n	8006fa0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00c      	beq.n	8006f72 <USBD_StdEPReq+0x112>
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d009      	beq.n	8006f72 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 f848 	bl	8007ff8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f68:	2180      	movs	r1, #128	; 0x80
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f844 	bl	8007ff8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f70:	e01c      	b.n	8006fac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fbe1 	bl	800773c <USBD_CtlError>
              break;
 8006f7a:	e017      	b.n	8006fac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	885b      	ldrh	r3, [r3, #2]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d112      	bne.n	8006faa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 f84f 	bl	8008036 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fc97 	bl	80078cc <USBD_CtlSendStatus>
              }
              break;
 8006f9e:	e004      	b.n	8006faa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fbca 	bl	800773c <USBD_CtlError>
              break;
 8006fa8:	e000      	b.n	8006fac <USBD_StdEPReq+0x14c>
              break;
 8006faa:	bf00      	nop
          }
          break;
 8006fac:	e0aa      	b.n	8007104 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d002      	beq.n	8006fbe <USBD_StdEPReq+0x15e>
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d032      	beq.n	8007022 <USBD_StdEPReq+0x1c2>
 8006fbc:	e097      	b.n	80070ee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <USBD_StdEPReq+0x174>
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d004      	beq.n	8006fd4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fbb5 	bl	800773c <USBD_CtlError>
                break;
 8006fd2:	e091      	b.n	80070f8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	da0b      	bge.n	8006ff4 <USBD_StdEPReq+0x194>
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	3310      	adds	r3, #16
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	4413      	add	r3, r2
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	e00b      	b.n	800700c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4413      	add	r3, r2
 800700a:	3304      	adds	r3, #4
 800700c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2202      	movs	r2, #2
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fbf8 	bl	8007810 <USBD_CtlSendData>
              break;
 8007020:	e06a      	b.n	80070f8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da11      	bge.n	800704e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	f003 020f 	and.w	r2, r3, #15
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	3318      	adds	r3, #24
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d117      	bne.n	8007074 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb78 	bl	800773c <USBD_CtlError>
                  break;
 800704c:	e054      	b.n	80070f8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fb65 	bl	800773c <USBD_CtlError>
                  break;
 8007072:	e041      	b.n	80070f8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	da0b      	bge.n	8007094 <USBD_StdEPReq+0x234>
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	3310      	adds	r3, #16
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	3304      	adds	r3, #4
 8007092:	e00b      	b.n	80070ac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800709a:	4613      	mov	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	4413      	add	r3, r2
 80070aa:	3304      	adds	r3, #4
 80070ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <USBD_StdEPReq+0x25a>
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d103      	bne.n	80070c2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	e00e      	b.n	80070e0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 ffd4 	bl	8008074 <USBD_LL_IsStallEP>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2201      	movs	r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	e002      	b.n	80070e0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2202      	movs	r2, #2
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fb92 	bl	8007810 <USBD_CtlSendData>
              break;
 80070ec:	e004      	b.n	80070f8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fb23 	bl	800773c <USBD_CtlError>
              break;
 80070f6:	bf00      	nop
          }
          break;
 80070f8:	e004      	b.n	8007104 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fb1d 	bl	800773c <USBD_CtlError>
          break;
 8007102:	bf00      	nop
      }
      break;
 8007104:	e004      	b.n	8007110 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fb17 	bl	800773c <USBD_CtlError>
      break;
 800710e:	bf00      	nop
  }

  return ret;
 8007110:	7bfb      	ldrb	r3, [r7, #15]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	2b06      	cmp	r3, #6
 800713e:	f200 8128 	bhi.w	8007392 <USBD_GetDescriptor+0x276>
 8007142:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <USBD_GetDescriptor+0x2c>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	08007165 	.word	0x08007165
 800714c:	0800717d 	.word	0x0800717d
 8007150:	080071bd 	.word	0x080071bd
 8007154:	08007393 	.word	0x08007393
 8007158:	08007393 	.word	0x08007393
 800715c:	08007333 	.word	0x08007333
 8007160:	0800735f 	.word	0x0800735f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
      break;
 800717a:	e112      	b.n	80073a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7c1b      	ldrb	r3, [r3, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10d      	bne.n	80071a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	2202      	movs	r2, #2
 800719c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800719e:	e100      	b.n	80073a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f107 0208 	add.w	r2, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	2202      	movs	r2, #2
 80071b8:	701a      	strb	r2, [r3, #0]
      break;
 80071ba:	e0f2      	b.n	80073a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	885b      	ldrh	r3, [r3, #2]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b05      	cmp	r3, #5
 80071c4:	f200 80ac 	bhi.w	8007320 <USBD_GetDescriptor+0x204>
 80071c8:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <USBD_GetDescriptor+0xb4>)
 80071ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ce:	bf00      	nop
 80071d0:	080071e9 	.word	0x080071e9
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	08007251 	.word	0x08007251
 80071dc:	08007285 	.word	0x08007285
 80071e0:	080072b9 	.word	0x080072b9
 80071e4:	080072ed 	.word	0x080072ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e091      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa94 	bl	800773c <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e089      	b.n	8007330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e077      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa7a 	bl	800773c <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e06f      	b.n	8007330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e05d      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa60 	bl	800773c <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e055      	b.n	8007330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e043      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa46 	bl	800773c <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e03b      	b.n	8007330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e029      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa2c 	bl	800773c <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e021      	b.n	8007330 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e00f      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa12 	bl	800773c <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e007      	b.n	8007330 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa0a 	bl	800773c <USBD_CtlError>
          err++;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	3301      	adds	r3, #1
 800732c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800732e:	e038      	b.n	80073a2 <USBD_GetDescriptor+0x286>
 8007330:	e037      	b.n	80073a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	7c1b      	ldrb	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	f107 0208 	add.w	r2, r7, #8
 8007346:	4610      	mov	r0, r2
 8007348:	4798      	blx	r3
 800734a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800734c:	e029      	b.n	80073a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9f3 	bl	800773c <USBD_CtlError>
        err++;
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	3301      	adds	r3, #1
 800735a:	72fb      	strb	r3, [r7, #11]
      break;
 800735c:	e021      	b.n	80073a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	7c1b      	ldrb	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10d      	bne.n	8007382 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	f107 0208 	add.w	r2, r7, #8
 8007372:	4610      	mov	r0, r2
 8007374:	4798      	blx	r3
 8007376:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	2207      	movs	r2, #7
 800737e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007380:	e00f      	b.n	80073a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9d9 	bl	800773c <USBD_CtlError>
        err++;
 800738a:	7afb      	ldrb	r3, [r7, #11]
 800738c:	3301      	adds	r3, #1
 800738e:	72fb      	strb	r3, [r7, #11]
      break;
 8007390:	e007      	b.n	80073a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f9d1 	bl	800773c <USBD_CtlError>
      err++;
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	3301      	adds	r3, #1
 800739e:	72fb      	strb	r3, [r7, #11]
      break;
 80073a0:	bf00      	nop
  }

  if (err != 0U)
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d11c      	bne.n	80073e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80073a8:	893b      	ldrh	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d011      	beq.n	80073d2 <USBD_GetDescriptor+0x2b6>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	88db      	ldrh	r3, [r3, #6]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	88da      	ldrh	r2, [r3, #6]
 80073ba:	893b      	ldrh	r3, [r7, #8]
 80073bc:	4293      	cmp	r3, r2
 80073be:	bf28      	it	cs
 80073c0:	4613      	movcs	r3, r2
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073c6:	893b      	ldrh	r3, [r7, #8]
 80073c8:	461a      	mov	r2, r3
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa1f 	bl	8007810 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88db      	ldrh	r3, [r3, #6]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa76 	bl	80078cc <USBD_CtlSendStatus>
 80073e0:	e000      	b.n	80073e4 <USBD_GetDescriptor+0x2c8>
    return;
 80073e2:	bf00      	nop
    }
  }
}
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop

080073ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	889b      	ldrh	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d130      	bne.n	8007460 <USBD_SetAddress+0x74>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	88db      	ldrh	r3, [r3, #6]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d12c      	bne.n	8007460 <USBD_SetAddress+0x74>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	885b      	ldrh	r3, [r3, #2]
 800740a:	2b7f      	cmp	r3, #127	; 0x7f
 800740c:	d828      	bhi.n	8007460 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	885b      	ldrh	r3, [r3, #2]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007420:	2b03      	cmp	r3, #3
 8007422:	d104      	bne.n	800742e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f988 	bl	800773c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800742c:	e01c      	b.n	8007468 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fe3f 	bl	80080be <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa43 	bl	80078cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007454:	e008      	b.n	8007468 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800745e:	e003      	b.n	8007468 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f96a 	bl	800773c <USBD_CtlError>
  }
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	b2da      	uxtb	r2, r3
 8007480:	4b41      	ldr	r3, [pc, #260]	; (8007588 <USBD_SetConfig+0x118>)
 8007482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007484:	4b40      	ldr	r3, [pc, #256]	; (8007588 <USBD_SetConfig+0x118>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d904      	bls.n	8007496 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f954 	bl	800773c <USBD_CtlError>
 8007494:	e075      	b.n	8007582 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	2b02      	cmp	r3, #2
 800749e:	d002      	beq.n	80074a6 <USBD_SetConfig+0x36>
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d023      	beq.n	80074ec <USBD_SetConfig+0x7c>
 80074a4:	e062      	b.n	800756c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80074a6:	4b38      	ldr	r3, [pc, #224]	; (8007588 <USBD_SetConfig+0x118>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01a      	beq.n	80074e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80074ae:	4b36      	ldr	r3, [pc, #216]	; (8007588 <USBD_SetConfig+0x118>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2203      	movs	r2, #3
 80074bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074c0:	4b31      	ldr	r3, [pc, #196]	; (8007588 <USBD_SetConfig+0x118>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff f9f3 	bl	80068b2 <USBD_SetClassConfig>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d104      	bne.n	80074dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f931 	bl	800773c <USBD_CtlError>
            return;
 80074da:	e052      	b.n	8007582 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f9f5 	bl	80078cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074e2:	e04e      	b.n	8007582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f9f1 	bl	80078cc <USBD_CtlSendStatus>
        break;
 80074ea:	e04a      	b.n	8007582 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074ec:	4b26      	ldr	r3, [pc, #152]	; (8007588 <USBD_SetConfig+0x118>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d112      	bne.n	800751a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80074fc:	4b22      	ldr	r3, [pc, #136]	; (8007588 <USBD_SetConfig+0x118>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007506:	4b20      	ldr	r3, [pc, #128]	; (8007588 <USBD_SetConfig+0x118>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff f9ef 	bl	80068f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9da 	bl	80078cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007518:	e033      	b.n	8007582 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <USBD_SetConfig+0x118>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d01d      	beq.n	8007564 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff f9dd 	bl	80068f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <USBD_SetConfig+0x118>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007540:	4b11      	ldr	r3, [pc, #68]	; (8007588 <USBD_SetConfig+0x118>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff f9b3 	bl	80068b2 <USBD_SetClassConfig>
 800754c:	4603      	mov	r3, r0
 800754e:	2b02      	cmp	r3, #2
 8007550:	d104      	bne.n	800755c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8f1 	bl	800773c <USBD_CtlError>
            return;
 800755a:	e012      	b.n	8007582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f9b5 	bl	80078cc <USBD_CtlSendStatus>
        break;
 8007562:	e00e      	b.n	8007582 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9b1 	bl	80078cc <USBD_CtlSendStatus>
        break;
 800756a:	e00a      	b.n	8007582 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f8e4 	bl	800773c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007574:	4b04      	ldr	r3, [pc, #16]	; (8007588 <USBD_SetConfig+0x118>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff f9b8 	bl	80068f0 <USBD_ClrClassConfig>
        break;
 8007580:	bf00      	nop
    }
  }
}
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20000370 	.word	0x20000370

0800758c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	88db      	ldrh	r3, [r3, #6]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d004      	beq.n	80075a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f8cb 	bl	800773c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075a6:	e021      	b.n	80075ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	db17      	blt.n	80075e2 <USBD_GetConfig+0x56>
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	dd02      	ble.n	80075bc <USBD_GetConfig+0x30>
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d00b      	beq.n	80075d2 <USBD_GetConfig+0x46>
 80075ba:	e012      	b.n	80075e2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3308      	adds	r3, #8
 80075c6:	2201      	movs	r2, #1
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f920 	bl	8007810 <USBD_CtlSendData>
        break;
 80075d0:	e00c      	b.n	80075ec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3304      	adds	r3, #4
 80075d6:	2201      	movs	r2, #1
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f918 	bl	8007810 <USBD_CtlSendData>
        break;
 80075e0:	e004      	b.n	80075ec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8a9 	bl	800773c <USBD_CtlError>
        break;
 80075ea:	bf00      	nop
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007604:	3b01      	subs	r3, #1
 8007606:	2b02      	cmp	r3, #2
 8007608:	d81e      	bhi.n	8007648 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	88db      	ldrh	r3, [r3, #6]
 800760e:	2b02      	cmp	r3, #2
 8007610:	d004      	beq.n	800761c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f891 	bl	800773c <USBD_CtlError>
        break;
 800761a:	e01a      	b.n	8007652 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f043 0202 	orr.w	r2, r3, #2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	330c      	adds	r3, #12
 800763c:	2202      	movs	r2, #2
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f8e5 	bl	8007810 <USBD_CtlSendData>
      break;
 8007646:	e004      	b.n	8007652 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f876 	bl	800773c <USBD_CtlError>
      break;
 8007650:	bf00      	nop
  }
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d106      	bne.n	800767a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f929 	bl	80078cc <USBD_CtlSendStatus>
  }
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007692:	3b01      	subs	r3, #1
 8007694:	2b02      	cmp	r3, #2
 8007696:	d80b      	bhi.n	80076b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10c      	bne.n	80076ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f90f 	bl	80078cc <USBD_CtlSendStatus>
      }
      break;
 80076ae:	e004      	b.n	80076ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f842 	bl	800773c <USBD_CtlError>
      break;
 80076b8:	e000      	b.n	80076bc <USBD_ClrFeature+0x3a>
      break;
 80076ba:	bf00      	nop
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	785a      	ldrb	r2, [r3, #1]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	3302      	adds	r3, #2
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	3303      	adds	r3, #3
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b29a      	uxth	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	3305      	adds	r3, #5
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	b29b      	uxth	r3, r3
 800770e:	4413      	add	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	3306      	adds	r3, #6
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b29a      	uxth	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	3307      	adds	r3, #7
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	b29b      	uxth	r3, r3
 800772a:	4413      	add	r3, r2
 800772c:	b29a      	uxth	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	80da      	strh	r2, [r3, #6]

}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc55 	bl	8007ff8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800774e:	2100      	movs	r1, #0
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fc51 	bl	8007ff8 <USBD_LL_StallEP>
}
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b086      	sub	sp, #24
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d032      	beq.n	80077da <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f834 	bl	80077e2 <USBD_GetLen>
 800777a:	4603      	mov	r3, r0
 800777c:	3301      	adds	r3, #1
 800777e:	b29b      	uxth	r3, r3
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	75fa      	strb	r2, [r7, #23]
 800778e:	461a      	mov	r2, r3
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	4413      	add	r3, r2
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	75fa      	strb	r2, [r7, #23]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	4413      	add	r3, r2
 80077a6:	2203      	movs	r2, #3
 80077a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80077aa:	e012      	b.n	80077d2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	60fa      	str	r2, [r7, #12]
 80077b2:	7dfa      	ldrb	r2, [r7, #23]
 80077b4:	1c51      	adds	r1, r2, #1
 80077b6:	75f9      	strb	r1, [r7, #23]
 80077b8:	4611      	mov	r1, r2
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	440a      	add	r2, r1
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	75fa      	strb	r2, [r7, #23]
 80077c8:	461a      	mov	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e8      	bne.n	80077ac <USBD_GetString+0x4e>
    }
  }
}
 80077da:	bf00      	nop
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077ee:	e005      	b.n	80077fc <USBD_GetLen+0x1a>
  {
    len++;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	3301      	adds	r3, #1
 80077f4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3301      	adds	r3, #1
 80077fa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1f5      	bne.n	80077f0 <USBD_GetLen+0xe>
  }

  return len;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	4613      	mov	r3, r2
 800781c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fc5f 	bl	80080fc <USBD_LL_Transmit>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	2100      	movs	r1, #0
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 fc4d 	bl	80080fc <USBD_LL_Transmit>

  return USBD_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2203      	movs	r2, #3
 800787e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007882:	88fa      	ldrh	r2, [r7, #6]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	2100      	movs	r1, #0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fc52 	bl	8008142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078b6:	88fb      	ldrh	r3, [r7, #6]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	2100      	movs	r1, #0
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fc40 	bl	8008142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2204      	movs	r2, #4
 80078d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078dc:	2300      	movs	r3, #0
 80078de:	2200      	movs	r2, #0
 80078e0:	2100      	movs	r1, #0
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fc0a 	bl	80080fc <USBD_LL_Transmit>

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2205      	movs	r2, #5
 80078fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007902:	2300      	movs	r3, #0
 8007904:	2200      	movs	r2, #0
 8007906:	2100      	movs	r1, #0
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fc1a 	bl	8008142 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800791c:	2200      	movs	r2, #0
 800791e:	4912      	ldr	r1, [pc, #72]	; (8007968 <MX_USB_DEVICE_Init+0x50>)
 8007920:	4812      	ldr	r0, [pc, #72]	; (800796c <MX_USB_DEVICE_Init+0x54>)
 8007922:	f7fe ff6c 	bl	80067fe <USBD_Init>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800792c:	f7f9 fe9c 	bl	8001668 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007930:	490f      	ldr	r1, [pc, #60]	; (8007970 <MX_USB_DEVICE_Init+0x58>)
 8007932:	480e      	ldr	r0, [pc, #56]	; (800796c <MX_USB_DEVICE_Init+0x54>)
 8007934:	f7fe ff8e 	bl	8006854 <USBD_RegisterClass>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800793e:	f7f9 fe93 	bl	8001668 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007942:	490c      	ldr	r1, [pc, #48]	; (8007974 <MX_USB_DEVICE_Init+0x5c>)
 8007944:	4809      	ldr	r0, [pc, #36]	; (800796c <MX_USB_DEVICE_Init+0x54>)
 8007946:	f7fe febf 	bl	80066c8 <USBD_CDC_RegisterInterface>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007950:	f7f9 fe8a 	bl	8001668 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007954:	4805      	ldr	r0, [pc, #20]	; (800796c <MX_USB_DEVICE_Init+0x54>)
 8007956:	f7fe ff96 	bl	8006886 <USBD_Start>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007960:	f7f9 fe82 	bl	8001668 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007964:	bf00      	nop
 8007966:	bd80      	pop	{r7, pc}
 8007968:	2000012c 	.word	0x2000012c
 800796c:	20000cd0 	.word	0x20000cd0
 8007970:	20000018 	.word	0x20000018
 8007974:	2000011c 	.word	0x2000011c

08007978 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800797c:	2200      	movs	r2, #0
 800797e:	4905      	ldr	r1, [pc, #20]	; (8007994 <CDC_Init_FS+0x1c>)
 8007980:	4805      	ldr	r0, [pc, #20]	; (8007998 <CDC_Init_FS+0x20>)
 8007982:	f7fe feb7 	bl	80066f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007986:	4905      	ldr	r1, [pc, #20]	; (800799c <CDC_Init_FS+0x24>)
 8007988:	4803      	ldr	r0, [pc, #12]	; (8007998 <CDC_Init_FS+0x20>)
 800798a:	f7fe fecc 	bl	8006726 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800798e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007990:	4618      	mov	r0, r3
 8007992:	bd80      	pop	{r7, pc}
 8007994:	2000137c 	.word	0x2000137c
 8007998:	20000cd0 	.word	0x20000cd0
 800799c:	20000f94 	.word	0x20000f94

080079a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr
	...

080079b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	6039      	str	r1, [r7, #0]
 80079ba:	71fb      	strb	r3, [r7, #7]
 80079bc:	4613      	mov	r3, r2
 80079be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b23      	cmp	r3, #35	; 0x23
 80079c4:	d84a      	bhi.n	8007a5c <CDC_Control_FS+0xac>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <CDC_Control_FS+0x1c>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	08007a5d 	.word	0x08007a5d
 80079d0:	08007a5d 	.word	0x08007a5d
 80079d4:	08007a5d 	.word	0x08007a5d
 80079d8:	08007a5d 	.word	0x08007a5d
 80079dc:	08007a5d 	.word	0x08007a5d
 80079e0:	08007a5d 	.word	0x08007a5d
 80079e4:	08007a5d 	.word	0x08007a5d
 80079e8:	08007a5d 	.word	0x08007a5d
 80079ec:	08007a5d 	.word	0x08007a5d
 80079f0:	08007a5d 	.word	0x08007a5d
 80079f4:	08007a5d 	.word	0x08007a5d
 80079f8:	08007a5d 	.word	0x08007a5d
 80079fc:	08007a5d 	.word	0x08007a5d
 8007a00:	08007a5d 	.word	0x08007a5d
 8007a04:	08007a5d 	.word	0x08007a5d
 8007a08:	08007a5d 	.word	0x08007a5d
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	08007a5d 	.word	0x08007a5d
 8007a14:	08007a5d 	.word	0x08007a5d
 8007a18:	08007a5d 	.word	0x08007a5d
 8007a1c:	08007a5d 	.word	0x08007a5d
 8007a20:	08007a5d 	.word	0x08007a5d
 8007a24:	08007a5d 	.word	0x08007a5d
 8007a28:	08007a5d 	.word	0x08007a5d
 8007a2c:	08007a5d 	.word	0x08007a5d
 8007a30:	08007a5d 	.word	0x08007a5d
 8007a34:	08007a5d 	.word	0x08007a5d
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a5d 	.word	0x08007a5d
 8007a40:	08007a5d 	.word	0x08007a5d
 8007a44:	08007a5d 	.word	0x08007a5d
 8007a48:	08007a5d 	.word	0x08007a5d
 8007a4c:	08007a5d 	.word	0x08007a5d
 8007a50:	08007a5d 	.word	0x08007a5d
 8007a54:	08007a5d 	.word	0x08007a5d
 8007a58:	08007a5d 	.word	0x08007a5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a5c:	bf00      	nop
  }

  return (USBD_OK);
 8007a5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop

08007a6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  apiSetInstruction((char *)Buf);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7f9 f88a 	bl	8000b90 <apiSetInstruction>
  CDC_Transmit_FS(":", 1);
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4807      	ldr	r0, [pc, #28]	; (8007a9c <CDC_Receive_FS+0x30>)
 8007a80:	f000 f810 	bl	8007aa4 <CDC_Transmit_FS>

//	char response[20];
//	apiDoInstruction((char *)Buf, response);
//	CDC_Transmit_FS((uint8_t *)response, strlen(response));

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4806      	ldr	r0, [pc, #24]	; (8007aa0 <CDC_Receive_FS+0x34>)
 8007a88:	f7fe fe4d 	bl	8006726 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a8c:	4804      	ldr	r0, [pc, #16]	; (8007aa0 <CDC_Receive_FS+0x34>)
 8007a8e:	f7fe fe8c 	bl	80067aa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	0800a7f0 	.word	0x0800a7f0
 8007aa0:	20000cd0 	.word	0x20000cd0

08007aa4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */


  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <CDC_Transmit_FS+0x48>)
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e00b      	b.n	8007ae2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007aca:	887b      	ldrh	r3, [r7, #2]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	4806      	ldr	r0, [pc, #24]	; (8007aec <CDC_Transmit_FS+0x48>)
 8007ad2:	f7fe fe0f 	bl	80066f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ad6:	4805      	ldr	r0, [pc, #20]	; (8007aec <CDC_Transmit_FS+0x48>)
 8007ad8:	f7fe fe38 	bl	800674c <USBD_CDC_TransmitPacket>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000cd0 	.word	0x20000cd0

08007af0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2212      	movs	r2, #18
 8007b00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000148 	.word	0x20000148

08007b14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2204      	movs	r2, #4
 8007b24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b26:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	2000015c 	.word	0x2000015c

08007b38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d105      	bne.n	8007b56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	4907      	ldr	r1, [pc, #28]	; (8007b6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b4e:	4808      	ldr	r0, [pc, #32]	; (8007b70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b50:	f7ff fe05 	bl	800775e <USBD_GetString>
 8007b54:	e004      	b.n	8007b60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	4904      	ldr	r1, [pc, #16]	; (8007b6c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b5a:	4805      	ldr	r0, [pc, #20]	; (8007b70 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b5c:	f7ff fdff 	bl	800775e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b60:	4b02      	ldr	r3, [pc, #8]	; (8007b6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20001764 	.word	0x20001764
 8007b70:	0800a7f4 	.word	0x0800a7f4

08007b74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	4904      	ldr	r1, [pc, #16]	; (8007b94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b84:	4804      	ldr	r0, [pc, #16]	; (8007b98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b86:	f7ff fdea 	bl	800775e <USBD_GetString>
  return USBD_StrDesc;
 8007b8a:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20001764 	.word	0x20001764
 8007b98:	0800a80c 	.word	0x0800a80c

08007b9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	221a      	movs	r2, #26
 8007bac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007bae:	f000 f843 	bl	8007c38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007bb2:	4b02      	ldr	r3, [pc, #8]	; (8007bbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000160 	.word	0x20000160

08007bc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d105      	bne.n	8007bde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4907      	ldr	r1, [pc, #28]	; (8007bf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bd6:	4808      	ldr	r0, [pc, #32]	; (8007bf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bd8:	f7ff fdc1 	bl	800775e <USBD_GetString>
 8007bdc:	e004      	b.n	8007be8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	4904      	ldr	r1, [pc, #16]	; (8007bf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007be2:	4805      	ldr	r0, [pc, #20]	; (8007bf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007be4:	f7ff fdbb 	bl	800775e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20001764 	.word	0x20001764
 8007bf8:	0800a820 	.word	0x0800a820

08007bfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4603      	mov	r3, r0
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d105      	bne.n	8007c1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4907      	ldr	r1, [pc, #28]	; (8007c30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c12:	4808      	ldr	r0, [pc, #32]	; (8007c34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c14:	f7ff fda3 	bl	800775e <USBD_GetString>
 8007c18:	e004      	b.n	8007c24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	4904      	ldr	r1, [pc, #16]	; (8007c30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c1e:	4805      	ldr	r0, [pc, #20]	; (8007c34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c20:	f7ff fd9d 	bl	800775e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c24:	4b02      	ldr	r3, [pc, #8]	; (8007c30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20001764 	.word	0x20001764
 8007c34:	0800a82c 	.word	0x0800a82c

08007c38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <Get_SerialNum+0x44>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c44:	4b0e      	ldr	r3, [pc, #56]	; (8007c80 <Get_SerialNum+0x48>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c4a:	4b0e      	ldr	r3, [pc, #56]	; (8007c84 <Get_SerialNum+0x4c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c5e:	2208      	movs	r2, #8
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <Get_SerialNum+0x50>)
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 f814 	bl	8007c90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c68:	2204      	movs	r2, #4
 8007c6a:	4908      	ldr	r1, [pc, #32]	; (8007c8c <Get_SerialNum+0x54>)
 8007c6c:	68b8      	ldr	r0, [r7, #8]
 8007c6e:	f000 f80f 	bl	8007c90 <IntToUnicode>
  }
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	1ffff7e8 	.word	0x1ffff7e8
 8007c80:	1ffff7ec 	.word	0x1ffff7ec
 8007c84:	1ffff7f0 	.word	0x1ffff7f0
 8007c88:	20000162 	.word	0x20000162
 8007c8c:	20000172 	.word	0x20000172

08007c90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
 8007ca6:	e027      	b.n	8007cf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	0f1b      	lsrs	r3, r3, #28
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d80b      	bhi.n	8007cc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	0f1b      	lsrs	r3, r3, #28
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3230      	adds	r2, #48	; 0x30
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e00a      	b.n	8007cde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	0f1b      	lsrs	r3, r3, #28
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	440b      	add	r3, r1
 8007cd8:	3237      	adds	r2, #55	; 0x37
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	3301      	adds	r3, #1
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
 8007cf8:	7dfa      	ldrb	r2, [r7, #23]
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d3d3      	bcc.n	8007ca8 <IntToUnicode+0x18>
  }
}
 8007d00:	bf00      	nop
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr
	...

08007d0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a0d      	ldr	r2, [pc, #52]	; (8007d50 <HAL_PCD_MspInit+0x44>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d113      	bne.n	8007d46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <HAL_PCD_MspInit+0x48>)
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	4a0c      	ldr	r2, [pc, #48]	; (8007d54 <HAL_PCD_MspInit+0x48>)
 8007d24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d28:	61d3      	str	r3, [r2, #28]
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <HAL_PCD_MspInit+0x48>)
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d36:	2200      	movs	r2, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	2014      	movs	r0, #20
 8007d3c:	f7fa fa39 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d40:	2014      	movs	r0, #20
 8007d42:	f7fa fa52 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	40005c00 	.word	0x40005c00
 8007d54:	40021000 	.word	0x40021000

08007d58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fe fdd1 	bl	8006916 <USBD_LL_SetupStage>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	015b      	lsls	r3, r3, #5
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f7fe fe04 	bl	80069ac <USBD_LL_DataOutStage>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	015b      	lsls	r3, r3, #5
 8007dc4:	4413      	add	r3, r2
 8007dc6:	333c      	adds	r3, #60	; 0x3c
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fe5e 	bl	8006a8e <USBD_LL_DataInStage>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe ff6e 	bl	8006cca <USBD_LL_SOF>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d001      	beq.n	8007e0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e0a:	f7f9 fc2d 	bl	8001668 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e14:	7bfa      	ldrb	r2, [r7, #15]
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe ff1e 	bl	8006c5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fed7 	bl	8006bd8 <USBD_LL_Reset>
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe ff18 	bl	8006c78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e50:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <HAL_PCD_SuspendCallback+0x30>)
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	4a03      	ldr	r2, [pc, #12]	; (8007e64 <HAL_PCD_SuspendCallback+0x30>)
 8007e56:	f043 0306 	orr.w	r3, r3, #6
 8007e5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	e000ed00 	.word	0xe000ed00

08007e68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe ff12 	bl	8006ca0 <USBD_LL_Resume>
}
 8007e7c:	bf00      	nop
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e8c:	4a28      	ldr	r2, [pc, #160]	; (8007f30 <USBD_LL_Init+0xac>)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <USBD_LL_Init+0xac>)
 8007e98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e9c:	4b24      	ldr	r3, [pc, #144]	; (8007f30 <USBD_LL_Init+0xac>)
 8007e9e:	4a25      	ldr	r2, [pc, #148]	; (8007f34 <USBD_LL_Init+0xb0>)
 8007ea0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007ea2:	4b23      	ldr	r3, [pc, #140]	; (8007f30 <USBD_LL_Init+0xac>)
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007ea8:	4b21      	ldr	r3, [pc, #132]	; (8007f30 <USBD_LL_Init+0xac>)
 8007eaa:	2202      	movs	r2, #2
 8007eac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007eae:	4b20      	ldr	r3, [pc, #128]	; (8007f30 <USBD_LL_Init+0xac>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007eb4:	4b1e      	ldr	r3, [pc, #120]	; (8007f30 <USBD_LL_Init+0xac>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007eba:	4b1d      	ldr	r3, [pc, #116]	; (8007f30 <USBD_LL_Init+0xac>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007ec0:	481b      	ldr	r0, [pc, #108]	; (8007f30 <USBD_LL_Init+0xac>)
 8007ec2:	f7fa fcbd 	bl	8002840 <HAL_PCD_Init>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ecc:	f7f9 fbcc 	bl	8001668 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ed6:	2318      	movs	r3, #24
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2100      	movs	r1, #0
 8007edc:	f7fb fb56 	bl	800358c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ee6:	2358      	movs	r3, #88	; 0x58
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2180      	movs	r1, #128	; 0x80
 8007eec:	f7fb fb4e 	bl	800358c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ef6:	23c0      	movs	r3, #192	; 0xc0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2181      	movs	r1, #129	; 0x81
 8007efc:	f7fb fb46 	bl	800358c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	f7fb fb3d 	bl	800358c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2182      	movs	r1, #130	; 0x82
 8007f20:	f7fb fb34 	bl	800358c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20001964 	.word	0x20001964
 8007f34:	40005c00 	.word	0x40005c00

08007f38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fa fd57 	bl	8002a02 <HAL_PCD_Start>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f948 	bl	80081f0 <USBD_Get_USB_Status>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70bb      	strb	r3, [r7, #2]
 8007f84:	4613      	mov	r3, r2
 8007f86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f96:	78bb      	ldrb	r3, [r7, #2]
 8007f98:	883a      	ldrh	r2, [r7, #0]
 8007f9a:	78f9      	ldrb	r1, [r7, #3]
 8007f9c:	f7fa fe8a 	bl	8002cb4 <HAL_PCD_EP_Open>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f922 	bl	80081f0 <USBD_Get_USB_Status>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fa fecb 	bl	8002d74 <HAL_PCD_EP_Close>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f903 	bl	80081f0 <USBD_Get_USB_Status>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7fa ff75 	bl	8002f06 <HAL_PCD_EP_SetStall>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	4618      	mov	r0, r3
 8008024:	f000 f8e4 	bl	80081f0 <USBD_Get_USB_Status>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800802c:	7bbb      	ldrb	r3, [r7, #14]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008050:	78fa      	ldrb	r2, [r7, #3]
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f7fa ffb0 	bl	8002fba <HAL_PCD_EP_ClrStall>
 800805a:	4603      	mov	r3, r0
 800805c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 f8c5 	bl	80081f0 <USBD_Get_USB_Status>
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800806a:	7bbb      	ldrb	r3, [r7, #14]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008086:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800808c:	2b00      	cmp	r3, #0
 800808e:	da08      	bge.n	80080a2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	015b      	lsls	r3, r3, #5
 800809a:	4413      	add	r3, r2
 800809c:	332a      	adds	r3, #42	; 0x2a
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	e008      	b.n	80080b4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	015b      	lsls	r3, r3, #5
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80080b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr

080080be <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d8:	78fa      	ldrb	r2, [r7, #3]
 80080da:	4611      	mov	r1, r2
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fa fdc4 	bl	8002c6a <HAL_PCD_SetAddress>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f881 	bl	80081f0 <USBD_Get_USB_Status>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	461a      	mov	r2, r3
 8008108:	460b      	mov	r3, r1
 800810a:	72fb      	strb	r3, [r7, #11]
 800810c:	4613      	mov	r3, r2
 800810e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800811e:	893b      	ldrh	r3, [r7, #8]
 8008120:	7af9      	ldrb	r1, [r7, #11]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	f7fa feb6 	bl	8002e94 <HAL_PCD_EP_Transmit>
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f85e 	bl	80081f0 <USBD_Get_USB_Status>
 8008134:	4603      	mov	r3, r0
 8008136:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008138:	7dbb      	ldrb	r3, [r7, #22]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b086      	sub	sp, #24
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	461a      	mov	r2, r3
 800814e:	460b      	mov	r3, r1
 8008150:	72fb      	strb	r3, [r7, #11]
 8008152:	4613      	mov	r3, r2
 8008154:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008164:	893b      	ldrh	r3, [r7, #8]
 8008166:	7af9      	ldrb	r1, [r7, #11]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	f7fa fe45 	bl	8002df8 <HAL_PCD_EP_Receive>
 800816e:	4603      	mov	r3, r0
 8008170:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 f83b 	bl	80081f0 <USBD_Get_USB_Status>
 800817a:	4603      	mov	r3, r0
 800817c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800817e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3718      	adds	r7, #24
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fa fe64 	bl	8002e6c <HAL_PCD_EP_GetRxCount>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <USBD_static_malloc+0x14>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr
 80081c4:	20000374 	.word	0x20000374

080081c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr

080081da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d817      	bhi.n	8008234 <USBD_Get_USB_Status+0x44>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <USBD_Get_USB_Status+0x1c>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008223 	.word	0x08008223
 8008214:	08008229 	.word	0x08008229
 8008218:	0800822f 	.word	0x0800822f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
    break;
 8008220:	e00b      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008222:	2302      	movs	r3, #2
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e008      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	e005      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822e:	2302      	movs	r3, #2
 8008230:	73fb      	strb	r3, [r7, #15]
    break;
 8008232:	e002      	b.n	800823a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	73fb      	strb	r3, [r7, #15]
    break;
 8008238:	bf00      	nop
  }
  return usb_status;
 800823a:	7bfb      	ldrb	r3, [r7, #15]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <atof>:
 8008248:	2100      	movs	r1, #0
 800824a:	f000 bea5 	b.w	8008f98 <strtod>
	...

08008250 <__errno>:
 8008250:	4b01      	ldr	r3, [pc, #4]	; (8008258 <__errno+0x8>)
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	2000017c 	.word	0x2000017c

0800825c <__libc_init_array>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	2500      	movs	r5, #0
 8008260:	4e0c      	ldr	r6, [pc, #48]	; (8008294 <__libc_init_array+0x38>)
 8008262:	4c0d      	ldr	r4, [pc, #52]	; (8008298 <__libc_init_array+0x3c>)
 8008264:	1ba4      	subs	r4, r4, r6
 8008266:	10a4      	asrs	r4, r4, #2
 8008268:	42a5      	cmp	r5, r4
 800826a:	d109      	bne.n	8008280 <__libc_init_array+0x24>
 800826c:	f002 fa86 	bl	800a77c <_init>
 8008270:	2500      	movs	r5, #0
 8008272:	4e0a      	ldr	r6, [pc, #40]	; (800829c <__libc_init_array+0x40>)
 8008274:	4c0a      	ldr	r4, [pc, #40]	; (80082a0 <__libc_init_array+0x44>)
 8008276:	1ba4      	subs	r4, r4, r6
 8008278:	10a4      	asrs	r4, r4, #2
 800827a:	42a5      	cmp	r5, r4
 800827c:	d105      	bne.n	800828a <__libc_init_array+0x2e>
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008284:	4798      	blx	r3
 8008286:	3501      	adds	r5, #1
 8008288:	e7ee      	b.n	8008268 <__libc_init_array+0xc>
 800828a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800828e:	4798      	blx	r3
 8008290:	3501      	adds	r5, #1
 8008292:	e7f2      	b.n	800827a <__libc_init_array+0x1e>
 8008294:	0800aaf0 	.word	0x0800aaf0
 8008298:	0800aaf0 	.word	0x0800aaf0
 800829c:	0800aaf0 	.word	0x0800aaf0
 80082a0:	0800aaf4 	.word	0x0800aaf4

080082a4 <memset>:
 80082a4:	4603      	mov	r3, r0
 80082a6:	4402      	add	r2, r0
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d100      	bne.n	80082ae <memset+0xa>
 80082ac:	4770      	bx	lr
 80082ae:	f803 1b01 	strb.w	r1, [r3], #1
 80082b2:	e7f9      	b.n	80082a8 <memset+0x4>

080082b4 <siprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082ba:	b500      	push	{lr}
 80082bc:	b09c      	sub	sp, #112	; 0x70
 80082be:	ab1d      	add	r3, sp, #116	; 0x74
 80082c0:	9002      	str	r0, [sp, #8]
 80082c2:	9006      	str	r0, [sp, #24]
 80082c4:	9107      	str	r1, [sp, #28]
 80082c6:	9104      	str	r1, [sp, #16]
 80082c8:	4808      	ldr	r0, [pc, #32]	; (80082ec <siprintf+0x38>)
 80082ca:	4909      	ldr	r1, [pc, #36]	; (80082f0 <siprintf+0x3c>)
 80082cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80082d0:	9105      	str	r1, [sp, #20]
 80082d2:	6800      	ldr	r0, [r0, #0]
 80082d4:	a902      	add	r1, sp, #8
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	f001 ff06 	bl	800a0e8 <_svfiprintf_r>
 80082dc:	2200      	movs	r2, #0
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	b01c      	add	sp, #112	; 0x70
 80082e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082e8:	b003      	add	sp, #12
 80082ea:	4770      	bx	lr
 80082ec:	2000017c 	.word	0x2000017c
 80082f0:	ffff0208 	.word	0xffff0208

080082f4 <strcpy>:
 80082f4:	4603      	mov	r3, r0
 80082f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082fa:	f803 2b01 	strb.w	r2, [r3], #1
 80082fe:	2a00      	cmp	r2, #0
 8008300:	d1f9      	bne.n	80082f6 <strcpy+0x2>
 8008302:	4770      	bx	lr

08008304 <strncmp>:
 8008304:	b510      	push	{r4, lr}
 8008306:	b16a      	cbz	r2, 8008324 <strncmp+0x20>
 8008308:	3901      	subs	r1, #1
 800830a:	1884      	adds	r4, r0, r2
 800830c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008310:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008314:	4293      	cmp	r3, r2
 8008316:	d103      	bne.n	8008320 <strncmp+0x1c>
 8008318:	42a0      	cmp	r0, r4
 800831a:	d001      	beq.n	8008320 <strncmp+0x1c>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f5      	bne.n	800830c <strncmp+0x8>
 8008320:	1a98      	subs	r0, r3, r2
 8008322:	bd10      	pop	{r4, pc}
 8008324:	4610      	mov	r0, r2
 8008326:	e7fc      	b.n	8008322 <strncmp+0x1e>

08008328 <strncpy>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4604      	mov	r4, r0
 800832c:	3901      	subs	r1, #1
 800832e:	b902      	cbnz	r2, 8008332 <strncpy+0xa>
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	4623      	mov	r3, r4
 8008334:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008338:	1e56      	subs	r6, r2, #1
 800833a:	f803 5b01 	strb.w	r5, [r3], #1
 800833e:	b92d      	cbnz	r5, 800834c <strncpy+0x24>
 8008340:	4414      	add	r4, r2
 8008342:	42a3      	cmp	r3, r4
 8008344:	d0f4      	beq.n	8008330 <strncpy+0x8>
 8008346:	f803 5b01 	strb.w	r5, [r3], #1
 800834a:	e7fa      	b.n	8008342 <strncpy+0x1a>
 800834c:	461c      	mov	r4, r3
 800834e:	4632      	mov	r2, r6
 8008350:	e7ed      	b.n	800832e <strncpy+0x6>

08008352 <sulp>:
 8008352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008356:	460f      	mov	r7, r1
 8008358:	4690      	mov	r8, r2
 800835a:	f001 fcd5 	bl	8009d08 <__ulp>
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	f1b8 0f00 	cmp.w	r8, #0
 8008366:	d011      	beq.n	800838c <sulp+0x3a>
 8008368:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800836c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008370:	2b00      	cmp	r3, #0
 8008372:	dd0b      	ble.n	800838c <sulp+0x3a>
 8008374:	2400      	movs	r4, #0
 8008376:	051b      	lsls	r3, r3, #20
 8008378:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800837c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008380:	4622      	mov	r2, r4
 8008382:	462b      	mov	r3, r5
 8008384:	f7f8 f8a8 	bl	80004d8 <__aeabi_dmul>
 8008388:	4604      	mov	r4, r0
 800838a:	460d      	mov	r5, r1
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	0000      	movs	r0, r0
	...

08008398 <_strtod_l>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	461f      	mov	r7, r3
 800839e:	2300      	movs	r3, #0
 80083a0:	b0a1      	sub	sp, #132	; 0x84
 80083a2:	4683      	mov	fp, r0
 80083a4:	4638      	mov	r0, r7
 80083a6:	460e      	mov	r6, r1
 80083a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80083aa:	931c      	str	r3, [sp, #112]	; 0x70
 80083ac:	f001 f9c3 	bl	8009736 <__localeconv_l>
 80083b0:	4680      	mov	r8, r0
 80083b2:	6800      	ldr	r0, [r0, #0]
 80083b4:	f7f7 fecc 	bl	8000150 <strlen>
 80083b8:	f04f 0900 	mov.w	r9, #0
 80083bc:	4604      	mov	r4, r0
 80083be:	f04f 0a00 	mov.w	sl, #0
 80083c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80083c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	2a0d      	cmp	r2, #13
 80083ca:	d832      	bhi.n	8008432 <_strtod_l+0x9a>
 80083cc:	2a09      	cmp	r2, #9
 80083ce:	d236      	bcs.n	800843e <_strtod_l+0xa6>
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d03e      	beq.n	8008452 <_strtod_l+0xba>
 80083d4:	2300      	movs	r3, #0
 80083d6:	930d      	str	r3, [sp, #52]	; 0x34
 80083d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80083da:	782b      	ldrb	r3, [r5, #0]
 80083dc:	2b30      	cmp	r3, #48	; 0x30
 80083de:	f040 80ac 	bne.w	800853a <_strtod_l+0x1a2>
 80083e2:	786b      	ldrb	r3, [r5, #1]
 80083e4:	2b58      	cmp	r3, #88	; 0x58
 80083e6:	d001      	beq.n	80083ec <_strtod_l+0x54>
 80083e8:	2b78      	cmp	r3, #120	; 0x78
 80083ea:	d167      	bne.n	80084bc <_strtod_l+0x124>
 80083ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ee:	9702      	str	r7, [sp, #8]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	ab1c      	add	r3, sp, #112	; 0x70
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	4a89      	ldr	r2, [pc, #548]	; (800861c <_strtod_l+0x284>)
 80083f8:	ab1d      	add	r3, sp, #116	; 0x74
 80083fa:	a91b      	add	r1, sp, #108	; 0x6c
 80083fc:	4658      	mov	r0, fp
 80083fe:	f000 febf 	bl	8009180 <__gethex>
 8008402:	f010 0407 	ands.w	r4, r0, #7
 8008406:	4606      	mov	r6, r0
 8008408:	d005      	beq.n	8008416 <_strtod_l+0x7e>
 800840a:	2c06      	cmp	r4, #6
 800840c:	d12b      	bne.n	8008466 <_strtod_l+0xce>
 800840e:	2300      	movs	r3, #0
 8008410:	3501      	adds	r5, #1
 8008412:	951b      	str	r5, [sp, #108]	; 0x6c
 8008414:	930d      	str	r3, [sp, #52]	; 0x34
 8008416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 85a6 	bne.w	8008f6a <_strtod_l+0xbd2>
 800841e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008420:	b1e3      	cbz	r3, 800845c <_strtod_l+0xc4>
 8008422:	464a      	mov	r2, r9
 8008424:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008428:	4610      	mov	r0, r2
 800842a:	4619      	mov	r1, r3
 800842c:	b021      	add	sp, #132	; 0x84
 800842e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008432:	2a2b      	cmp	r2, #43	; 0x2b
 8008434:	d015      	beq.n	8008462 <_strtod_l+0xca>
 8008436:	2a2d      	cmp	r2, #45	; 0x2d
 8008438:	d004      	beq.n	8008444 <_strtod_l+0xac>
 800843a:	2a20      	cmp	r2, #32
 800843c:	d1ca      	bne.n	80083d4 <_strtod_l+0x3c>
 800843e:	3301      	adds	r3, #1
 8008440:	931b      	str	r3, [sp, #108]	; 0x6c
 8008442:	e7bf      	b.n	80083c4 <_strtod_l+0x2c>
 8008444:	2201      	movs	r2, #1
 8008446:	920d      	str	r2, [sp, #52]	; 0x34
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	921b      	str	r2, [sp, #108]	; 0x6c
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1c2      	bne.n	80083d8 <_strtod_l+0x40>
 8008452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008454:	961b      	str	r6, [sp, #108]	; 0x6c
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 8585 	bne.w	8008f66 <_strtod_l+0xbce>
 800845c:	464a      	mov	r2, r9
 800845e:	4653      	mov	r3, sl
 8008460:	e7e2      	b.n	8008428 <_strtod_l+0x90>
 8008462:	2200      	movs	r2, #0
 8008464:	e7ef      	b.n	8008446 <_strtod_l+0xae>
 8008466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008468:	b13a      	cbz	r2, 800847a <_strtod_l+0xe2>
 800846a:	2135      	movs	r1, #53	; 0x35
 800846c:	a81e      	add	r0, sp, #120	; 0x78
 800846e:	f001 fd3e 	bl	8009eee <__copybits>
 8008472:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008474:	4658      	mov	r0, fp
 8008476:	f001 f9b1 	bl	80097dc <_Bfree>
 800847a:	3c01      	subs	r4, #1
 800847c:	2c04      	cmp	r4, #4
 800847e:	d806      	bhi.n	800848e <_strtod_l+0xf6>
 8008480:	e8df f004 	tbb	[pc, r4]
 8008484:	1714030a 	.word	0x1714030a
 8008488:	0a          	.byte	0x0a
 8008489:	00          	.byte	0x00
 800848a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800848e:	0731      	lsls	r1, r6, #28
 8008490:	d5c1      	bpl.n	8008416 <_strtod_l+0x7e>
 8008492:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8008496:	e7be      	b.n	8008416 <_strtod_l+0x7e>
 8008498:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800849a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800849e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084a6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80084aa:	e7f0      	b.n	800848e <_strtod_l+0xf6>
 80084ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008620 <_strtod_l+0x288>
 80084b0:	e7ed      	b.n	800848e <_strtod_l+0xf6>
 80084b2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80084b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80084ba:	e7e8      	b.n	800848e <_strtod_l+0xf6>
 80084bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084be:	1c5a      	adds	r2, r3, #1
 80084c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80084c2:	785b      	ldrb	r3, [r3, #1]
 80084c4:	2b30      	cmp	r3, #48	; 0x30
 80084c6:	d0f9      	beq.n	80084bc <_strtod_l+0x124>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0a4      	beq.n	8008416 <_strtod_l+0x7e>
 80084cc:	2301      	movs	r3, #1
 80084ce:	2500      	movs	r5, #0
 80084d0:	220a      	movs	r2, #10
 80084d2:	9307      	str	r3, [sp, #28]
 80084d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084d6:	9506      	str	r5, [sp, #24]
 80084d8:	9308      	str	r3, [sp, #32]
 80084da:	9504      	str	r5, [sp, #16]
 80084dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80084de:	7807      	ldrb	r7, [r0, #0]
 80084e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80084e4:	b2d9      	uxtb	r1, r3
 80084e6:	2909      	cmp	r1, #9
 80084e8:	d929      	bls.n	800853e <_strtod_l+0x1a6>
 80084ea:	4622      	mov	r2, r4
 80084ec:	f8d8 1000 	ldr.w	r1, [r8]
 80084f0:	f7ff ff08 	bl	8008304 <strncmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d031      	beq.n	800855c <_strtod_l+0x1c4>
 80084f8:	2000      	movs	r0, #0
 80084fa:	463b      	mov	r3, r7
 80084fc:	4602      	mov	r2, r0
 80084fe:	9c04      	ldr	r4, [sp, #16]
 8008500:	9005      	str	r0, [sp, #20]
 8008502:	2b65      	cmp	r3, #101	; 0x65
 8008504:	d001      	beq.n	800850a <_strtod_l+0x172>
 8008506:	2b45      	cmp	r3, #69	; 0x45
 8008508:	d114      	bne.n	8008534 <_strtod_l+0x19c>
 800850a:	b924      	cbnz	r4, 8008516 <_strtod_l+0x17e>
 800850c:	b910      	cbnz	r0, 8008514 <_strtod_l+0x17c>
 800850e:	9b07      	ldr	r3, [sp, #28]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d09e      	beq.n	8008452 <_strtod_l+0xba>
 8008514:	2400      	movs	r4, #0
 8008516:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008518:	1c73      	adds	r3, r6, #1
 800851a:	931b      	str	r3, [sp, #108]	; 0x6c
 800851c:	7873      	ldrb	r3, [r6, #1]
 800851e:	2b2b      	cmp	r3, #43	; 0x2b
 8008520:	d078      	beq.n	8008614 <_strtod_l+0x27c>
 8008522:	2b2d      	cmp	r3, #45	; 0x2d
 8008524:	d070      	beq.n	8008608 <_strtod_l+0x270>
 8008526:	f04f 0c00 	mov.w	ip, #0
 800852a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800852e:	2f09      	cmp	r7, #9
 8008530:	d97c      	bls.n	800862c <_strtod_l+0x294>
 8008532:	961b      	str	r6, [sp, #108]	; 0x6c
 8008534:	f04f 0e00 	mov.w	lr, #0
 8008538:	e09a      	b.n	8008670 <_strtod_l+0x2d8>
 800853a:	2300      	movs	r3, #0
 800853c:	e7c7      	b.n	80084ce <_strtod_l+0x136>
 800853e:	9904      	ldr	r1, [sp, #16]
 8008540:	3001      	adds	r0, #1
 8008542:	2908      	cmp	r1, #8
 8008544:	bfd7      	itett	le
 8008546:	9906      	ldrle	r1, [sp, #24]
 8008548:	fb02 3505 	mlagt	r5, r2, r5, r3
 800854c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008550:	9306      	strle	r3, [sp, #24]
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	901b      	str	r0, [sp, #108]	; 0x6c
 8008556:	3301      	adds	r3, #1
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	e7bf      	b.n	80084dc <_strtod_l+0x144>
 800855c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800855e:	191a      	adds	r2, r3, r4
 8008560:	921b      	str	r2, [sp, #108]	; 0x6c
 8008562:	9a04      	ldr	r2, [sp, #16]
 8008564:	5d1b      	ldrb	r3, [r3, r4]
 8008566:	2a00      	cmp	r2, #0
 8008568:	d037      	beq.n	80085da <_strtod_l+0x242>
 800856a:	4602      	mov	r2, r0
 800856c:	9c04      	ldr	r4, [sp, #16]
 800856e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008572:	2909      	cmp	r1, #9
 8008574:	d913      	bls.n	800859e <_strtod_l+0x206>
 8008576:	2101      	movs	r1, #1
 8008578:	9105      	str	r1, [sp, #20]
 800857a:	e7c2      	b.n	8008502 <_strtod_l+0x16a>
 800857c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800857e:	3001      	adds	r0, #1
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	921b      	str	r2, [sp, #108]	; 0x6c
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	2b30      	cmp	r3, #48	; 0x30
 8008588:	d0f8      	beq.n	800857c <_strtod_l+0x1e4>
 800858a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800858e:	2a08      	cmp	r2, #8
 8008590:	f200 84f0 	bhi.w	8008f74 <_strtod_l+0xbdc>
 8008594:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008596:	9208      	str	r2, [sp, #32]
 8008598:	4602      	mov	r2, r0
 800859a:	2000      	movs	r0, #0
 800859c:	4604      	mov	r4, r0
 800859e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80085a2:	f100 0101 	add.w	r1, r0, #1
 80085a6:	d012      	beq.n	80085ce <_strtod_l+0x236>
 80085a8:	440a      	add	r2, r1
 80085aa:	270a      	movs	r7, #10
 80085ac:	4621      	mov	r1, r4
 80085ae:	eb00 0c04 	add.w	ip, r0, r4
 80085b2:	458c      	cmp	ip, r1
 80085b4:	d113      	bne.n	80085de <_strtod_l+0x246>
 80085b6:	1821      	adds	r1, r4, r0
 80085b8:	2908      	cmp	r1, #8
 80085ba:	f104 0401 	add.w	r4, r4, #1
 80085be:	4404      	add	r4, r0
 80085c0:	dc19      	bgt.n	80085f6 <_strtod_l+0x25e>
 80085c2:	210a      	movs	r1, #10
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	fb01 e303 	mla	r3, r1, r3, lr
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	2100      	movs	r1, #0
 80085ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085d0:	1c58      	adds	r0, r3, #1
 80085d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	4608      	mov	r0, r1
 80085d8:	e7c9      	b.n	800856e <_strtod_l+0x1d6>
 80085da:	9804      	ldr	r0, [sp, #16]
 80085dc:	e7d3      	b.n	8008586 <_strtod_l+0x1ee>
 80085de:	2908      	cmp	r1, #8
 80085e0:	f101 0101 	add.w	r1, r1, #1
 80085e4:	dc03      	bgt.n	80085ee <_strtod_l+0x256>
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	437b      	muls	r3, r7
 80085ea:	9306      	str	r3, [sp, #24]
 80085ec:	e7e1      	b.n	80085b2 <_strtod_l+0x21a>
 80085ee:	2910      	cmp	r1, #16
 80085f0:	bfd8      	it	le
 80085f2:	437d      	mulle	r5, r7
 80085f4:	e7dd      	b.n	80085b2 <_strtod_l+0x21a>
 80085f6:	2c10      	cmp	r4, #16
 80085f8:	bfdc      	itt	le
 80085fa:	210a      	movle	r1, #10
 80085fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8008600:	e7e4      	b.n	80085cc <_strtod_l+0x234>
 8008602:	2301      	movs	r3, #1
 8008604:	9305      	str	r3, [sp, #20]
 8008606:	e781      	b.n	800850c <_strtod_l+0x174>
 8008608:	f04f 0c01 	mov.w	ip, #1
 800860c:	1cb3      	adds	r3, r6, #2
 800860e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008610:	78b3      	ldrb	r3, [r6, #2]
 8008612:	e78a      	b.n	800852a <_strtod_l+0x192>
 8008614:	f04f 0c00 	mov.w	ip, #0
 8008618:	e7f8      	b.n	800860c <_strtod_l+0x274>
 800861a:	bf00      	nop
 800861c:	0800a860 	.word	0x0800a860
 8008620:	7ff00000 	.word	0x7ff00000
 8008624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008626:	1c5f      	adds	r7, r3, #1
 8008628:	971b      	str	r7, [sp, #108]	; 0x6c
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b30      	cmp	r3, #48	; 0x30
 800862e:	d0f9      	beq.n	8008624 <_strtod_l+0x28c>
 8008630:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008634:	2f08      	cmp	r7, #8
 8008636:	f63f af7d 	bhi.w	8008534 <_strtod_l+0x19c>
 800863a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800863e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008640:	9309      	str	r3, [sp, #36]	; 0x24
 8008642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008644:	1c5f      	adds	r7, r3, #1
 8008646:	971b      	str	r7, [sp, #108]	; 0x6c
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800864e:	f1b8 0f09 	cmp.w	r8, #9
 8008652:	d937      	bls.n	80086c4 <_strtod_l+0x32c>
 8008654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008656:	1a7f      	subs	r7, r7, r1
 8008658:	2f08      	cmp	r7, #8
 800865a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800865e:	dc37      	bgt.n	80086d0 <_strtod_l+0x338>
 8008660:	45be      	cmp	lr, r7
 8008662:	bfa8      	it	ge
 8008664:	46be      	movge	lr, r7
 8008666:	f1bc 0f00 	cmp.w	ip, #0
 800866a:	d001      	beq.n	8008670 <_strtod_l+0x2d8>
 800866c:	f1ce 0e00 	rsb	lr, lr, #0
 8008670:	2c00      	cmp	r4, #0
 8008672:	d151      	bne.n	8008718 <_strtod_l+0x380>
 8008674:	2800      	cmp	r0, #0
 8008676:	f47f aece 	bne.w	8008416 <_strtod_l+0x7e>
 800867a:	9a07      	ldr	r2, [sp, #28]
 800867c:	2a00      	cmp	r2, #0
 800867e:	f47f aeca 	bne.w	8008416 <_strtod_l+0x7e>
 8008682:	9a05      	ldr	r2, [sp, #20]
 8008684:	2a00      	cmp	r2, #0
 8008686:	f47f aee4 	bne.w	8008452 <_strtod_l+0xba>
 800868a:	2b4e      	cmp	r3, #78	; 0x4e
 800868c:	d027      	beq.n	80086de <_strtod_l+0x346>
 800868e:	dc21      	bgt.n	80086d4 <_strtod_l+0x33c>
 8008690:	2b49      	cmp	r3, #73	; 0x49
 8008692:	f47f aede 	bne.w	8008452 <_strtod_l+0xba>
 8008696:	49a4      	ldr	r1, [pc, #656]	; (8008928 <_strtod_l+0x590>)
 8008698:	a81b      	add	r0, sp, #108	; 0x6c
 800869a:	f000 ffa5 	bl	80095e8 <__match>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f43f aed7 	beq.w	8008452 <_strtod_l+0xba>
 80086a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086a6:	49a1      	ldr	r1, [pc, #644]	; (800892c <_strtod_l+0x594>)
 80086a8:	3b01      	subs	r3, #1
 80086aa:	a81b      	add	r0, sp, #108	; 0x6c
 80086ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80086ae:	f000 ff9b 	bl	80095e8 <__match>
 80086b2:	b910      	cbnz	r0, 80086ba <_strtod_l+0x322>
 80086b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086b6:	3301      	adds	r3, #1
 80086b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80086ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008940 <_strtod_l+0x5a8>
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	e6a8      	b.n	8008416 <_strtod_l+0x7e>
 80086c4:	210a      	movs	r1, #10
 80086c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80086ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80086ce:	e7b8      	b.n	8008642 <_strtod_l+0x2aa>
 80086d0:	46be      	mov	lr, r7
 80086d2:	e7c8      	b.n	8008666 <_strtod_l+0x2ce>
 80086d4:	2b69      	cmp	r3, #105	; 0x69
 80086d6:	d0de      	beq.n	8008696 <_strtod_l+0x2fe>
 80086d8:	2b6e      	cmp	r3, #110	; 0x6e
 80086da:	f47f aeba 	bne.w	8008452 <_strtod_l+0xba>
 80086de:	4994      	ldr	r1, [pc, #592]	; (8008930 <_strtod_l+0x598>)
 80086e0:	a81b      	add	r0, sp, #108	; 0x6c
 80086e2:	f000 ff81 	bl	80095e8 <__match>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f43f aeb3 	beq.w	8008452 <_strtod_l+0xba>
 80086ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b28      	cmp	r3, #40	; 0x28
 80086f2:	d10e      	bne.n	8008712 <_strtod_l+0x37a>
 80086f4:	aa1e      	add	r2, sp, #120	; 0x78
 80086f6:	498f      	ldr	r1, [pc, #572]	; (8008934 <_strtod_l+0x59c>)
 80086f8:	a81b      	add	r0, sp, #108	; 0x6c
 80086fa:	f000 ff89 	bl	8009610 <__hexnan>
 80086fe:	2805      	cmp	r0, #5
 8008700:	d107      	bne.n	8008712 <_strtod_l+0x37a>
 8008702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008704:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008708:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800870c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008710:	e681      	b.n	8008416 <_strtod_l+0x7e>
 8008712:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008948 <_strtod_l+0x5b0>
 8008716:	e7d2      	b.n	80086be <_strtod_l+0x326>
 8008718:	ebae 0302 	sub.w	r3, lr, r2
 800871c:	9307      	str	r3, [sp, #28]
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	9806      	ldr	r0, [sp, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	bf08      	it	eq
 8008726:	4623      	moveq	r3, r4
 8008728:	2c10      	cmp	r4, #16
 800872a:	9304      	str	r3, [sp, #16]
 800872c:	46a0      	mov	r8, r4
 800872e:	bfa8      	it	ge
 8008730:	f04f 0810 	movge.w	r8, #16
 8008734:	f7f7 fe56 	bl	80003e4 <__aeabi_ui2d>
 8008738:	2c09      	cmp	r4, #9
 800873a:	4681      	mov	r9, r0
 800873c:	468a      	mov	sl, r1
 800873e:	dc13      	bgt.n	8008768 <_strtod_l+0x3d0>
 8008740:	9b07      	ldr	r3, [sp, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f ae67 	beq.w	8008416 <_strtod_l+0x7e>
 8008748:	9b07      	ldr	r3, [sp, #28]
 800874a:	dd7e      	ble.n	800884a <_strtod_l+0x4b2>
 800874c:	2b16      	cmp	r3, #22
 800874e:	dc65      	bgt.n	800881c <_strtod_l+0x484>
 8008750:	4a79      	ldr	r2, [pc, #484]	; (8008938 <_strtod_l+0x5a0>)
 8008752:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008756:	464a      	mov	r2, r9
 8008758:	e9de 0100 	ldrd	r0, r1, [lr]
 800875c:	4653      	mov	r3, sl
 800875e:	f7f7 febb 	bl	80004d8 <__aeabi_dmul>
 8008762:	4681      	mov	r9, r0
 8008764:	468a      	mov	sl, r1
 8008766:	e656      	b.n	8008416 <_strtod_l+0x7e>
 8008768:	4b73      	ldr	r3, [pc, #460]	; (8008938 <_strtod_l+0x5a0>)
 800876a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800876e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008772:	f7f7 feb1 	bl	80004d8 <__aeabi_dmul>
 8008776:	4606      	mov	r6, r0
 8008778:	4628      	mov	r0, r5
 800877a:	460f      	mov	r7, r1
 800877c:	f7f7 fe32 	bl	80003e4 <__aeabi_ui2d>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f7 fcf0 	bl	800016c <__adddf3>
 800878c:	2c0f      	cmp	r4, #15
 800878e:	4681      	mov	r9, r0
 8008790:	468a      	mov	sl, r1
 8008792:	ddd5      	ble.n	8008740 <_strtod_l+0x3a8>
 8008794:	9b07      	ldr	r3, [sp, #28]
 8008796:	eba4 0808 	sub.w	r8, r4, r8
 800879a:	4498      	add	r8, r3
 800879c:	f1b8 0f00 	cmp.w	r8, #0
 80087a0:	f340 809a 	ble.w	80088d8 <_strtod_l+0x540>
 80087a4:	f018 030f 	ands.w	r3, r8, #15
 80087a8:	d00a      	beq.n	80087c0 <_strtod_l+0x428>
 80087aa:	4963      	ldr	r1, [pc, #396]	; (8008938 <_strtod_l+0x5a0>)
 80087ac:	464a      	mov	r2, r9
 80087ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087b6:	4653      	mov	r3, sl
 80087b8:	f7f7 fe8e 	bl	80004d8 <__aeabi_dmul>
 80087bc:	4681      	mov	r9, r0
 80087be:	468a      	mov	sl, r1
 80087c0:	f038 080f 	bics.w	r8, r8, #15
 80087c4:	d077      	beq.n	80088b6 <_strtod_l+0x51e>
 80087c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80087ca:	dd4b      	ble.n	8008864 <_strtod_l+0x4cc>
 80087cc:	f04f 0800 	mov.w	r8, #0
 80087d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80087d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80087d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80087dc:	2322      	movs	r3, #34	; 0x22
 80087de:	f04f 0900 	mov.w	r9, #0
 80087e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008940 <_strtod_l+0x5a8>
 80087e6:	f8cb 3000 	str.w	r3, [fp]
 80087ea:	9b08      	ldr	r3, [sp, #32]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f43f ae12 	beq.w	8008416 <_strtod_l+0x7e>
 80087f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087f4:	4658      	mov	r0, fp
 80087f6:	f000 fff1 	bl	80097dc <_Bfree>
 80087fa:	9906      	ldr	r1, [sp, #24]
 80087fc:	4658      	mov	r0, fp
 80087fe:	f000 ffed 	bl	80097dc <_Bfree>
 8008802:	9904      	ldr	r1, [sp, #16]
 8008804:	4658      	mov	r0, fp
 8008806:	f000 ffe9 	bl	80097dc <_Bfree>
 800880a:	9908      	ldr	r1, [sp, #32]
 800880c:	4658      	mov	r0, fp
 800880e:	f000 ffe5 	bl	80097dc <_Bfree>
 8008812:	4641      	mov	r1, r8
 8008814:	4658      	mov	r0, fp
 8008816:	f000 ffe1 	bl	80097dc <_Bfree>
 800881a:	e5fc      	b.n	8008416 <_strtod_l+0x7e>
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008822:	4293      	cmp	r3, r2
 8008824:	dbb6      	blt.n	8008794 <_strtod_l+0x3fc>
 8008826:	4d44      	ldr	r5, [pc, #272]	; (8008938 <_strtod_l+0x5a0>)
 8008828:	f1c4 040f 	rsb	r4, r4, #15
 800882c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008830:	464a      	mov	r2, r9
 8008832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008836:	4653      	mov	r3, sl
 8008838:	f7f7 fe4e 	bl	80004d8 <__aeabi_dmul>
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	1b1c      	subs	r4, r3, r4
 8008840:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008848:	e789      	b.n	800875e <_strtod_l+0x3c6>
 800884a:	f113 0f16 	cmn.w	r3, #22
 800884e:	dba1      	blt.n	8008794 <_strtod_l+0x3fc>
 8008850:	4a39      	ldr	r2, [pc, #228]	; (8008938 <_strtod_l+0x5a0>)
 8008852:	4648      	mov	r0, r9
 8008854:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008858:	e9d2 2300 	ldrd	r2, r3, [r2]
 800885c:	4651      	mov	r1, sl
 800885e:	f7f7 ff65 	bl	800072c <__aeabi_ddiv>
 8008862:	e77e      	b.n	8008762 <_strtod_l+0x3ca>
 8008864:	2300      	movs	r3, #0
 8008866:	4648      	mov	r0, r9
 8008868:	4651      	mov	r1, sl
 800886a:	461d      	mov	r5, r3
 800886c:	4e33      	ldr	r6, [pc, #204]	; (800893c <_strtod_l+0x5a4>)
 800886e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008872:	f1b8 0f01 	cmp.w	r8, #1
 8008876:	dc21      	bgt.n	80088bc <_strtod_l+0x524>
 8008878:	b10b      	cbz	r3, 800887e <_strtod_l+0x4e6>
 800887a:	4681      	mov	r9, r0
 800887c:	468a      	mov	sl, r1
 800887e:	4b2f      	ldr	r3, [pc, #188]	; (800893c <_strtod_l+0x5a4>)
 8008880:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8008884:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008888:	464a      	mov	r2, r9
 800888a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800888e:	4653      	mov	r3, sl
 8008890:	f7f7 fe22 	bl	80004d8 <__aeabi_dmul>
 8008894:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <_strtod_l+0x5a8>)
 8008896:	460a      	mov	r2, r1
 8008898:	400b      	ands	r3, r1
 800889a:	492a      	ldr	r1, [pc, #168]	; (8008944 <_strtod_l+0x5ac>)
 800889c:	4681      	mov	r9, r0
 800889e:	428b      	cmp	r3, r1
 80088a0:	d894      	bhi.n	80087cc <_strtod_l+0x434>
 80088a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088a6:	428b      	cmp	r3, r1
 80088a8:	bf86      	itte	hi
 80088aa:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80088ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800894c <_strtod_l+0x5b4>
 80088b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80088b6:	2300      	movs	r3, #0
 80088b8:	9305      	str	r3, [sp, #20]
 80088ba:	e07b      	b.n	80089b4 <_strtod_l+0x61c>
 80088bc:	f018 0f01 	tst.w	r8, #1
 80088c0:	d006      	beq.n	80088d0 <_strtod_l+0x538>
 80088c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fe05 	bl	80004d8 <__aeabi_dmul>
 80088ce:	2301      	movs	r3, #1
 80088d0:	3501      	adds	r5, #1
 80088d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088d6:	e7cc      	b.n	8008872 <_strtod_l+0x4da>
 80088d8:	d0ed      	beq.n	80088b6 <_strtod_l+0x51e>
 80088da:	f1c8 0800 	rsb	r8, r8, #0
 80088de:	f018 020f 	ands.w	r2, r8, #15
 80088e2:	d00a      	beq.n	80088fa <_strtod_l+0x562>
 80088e4:	4b14      	ldr	r3, [pc, #80]	; (8008938 <_strtod_l+0x5a0>)
 80088e6:	4648      	mov	r0, r9
 80088e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ec:	4651      	mov	r1, sl
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	f7f7 ff1b 	bl	800072c <__aeabi_ddiv>
 80088f6:	4681      	mov	r9, r0
 80088f8:	468a      	mov	sl, r1
 80088fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088fe:	d0da      	beq.n	80088b6 <_strtod_l+0x51e>
 8008900:	f1b8 0f1f 	cmp.w	r8, #31
 8008904:	dd24      	ble.n	8008950 <_strtod_l+0x5b8>
 8008906:	f04f 0800 	mov.w	r8, #0
 800890a:	f8cd 8010 	str.w	r8, [sp, #16]
 800890e:	f8cd 8020 	str.w	r8, [sp, #32]
 8008912:	f8cd 8018 	str.w	r8, [sp, #24]
 8008916:	2322      	movs	r3, #34	; 0x22
 8008918:	f04f 0900 	mov.w	r9, #0
 800891c:	f04f 0a00 	mov.w	sl, #0
 8008920:	f8cb 3000 	str.w	r3, [fp]
 8008924:	e761      	b.n	80087ea <_strtod_l+0x452>
 8008926:	bf00      	nop
 8008928:	0800a854 	.word	0x0800a854
 800892c:	0800a857 	.word	0x0800a857
 8008930:	0800a85d 	.word	0x0800a85d
 8008934:	0800a874 	.word	0x0800a874
 8008938:	0800a8e8 	.word	0x0800a8e8
 800893c:	0800a8c0 	.word	0x0800a8c0
 8008940:	7ff00000 	.word	0x7ff00000
 8008944:	7ca00000 	.word	0x7ca00000
 8008948:	fff80000 	.word	0xfff80000
 800894c:	7fefffff 	.word	0x7fefffff
 8008950:	f018 0310 	ands.w	r3, r8, #16
 8008954:	bf18      	it	ne
 8008956:	236a      	movne	r3, #106	; 0x6a
 8008958:	4648      	mov	r0, r9
 800895a:	9305      	str	r3, [sp, #20]
 800895c:	4651      	mov	r1, sl
 800895e:	2300      	movs	r3, #0
 8008960:	4da1      	ldr	r5, [pc, #644]	; (8008be8 <_strtod_l+0x850>)
 8008962:	f1b8 0f00 	cmp.w	r8, #0
 8008966:	f300 8113 	bgt.w	8008b90 <_strtod_l+0x7f8>
 800896a:	b10b      	cbz	r3, 8008970 <_strtod_l+0x5d8>
 800896c:	4681      	mov	r9, r0
 800896e:	468a      	mov	sl, r1
 8008970:	9b05      	ldr	r3, [sp, #20]
 8008972:	b1bb      	cbz	r3, 80089a4 <_strtod_l+0x60c>
 8008974:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800897c:	2b00      	cmp	r3, #0
 800897e:	4651      	mov	r1, sl
 8008980:	dd10      	ble.n	80089a4 <_strtod_l+0x60c>
 8008982:	2b1f      	cmp	r3, #31
 8008984:	f340 8110 	ble.w	8008ba8 <_strtod_l+0x810>
 8008988:	2b34      	cmp	r3, #52	; 0x34
 800898a:	bfd8      	it	le
 800898c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008990:	f04f 0900 	mov.w	r9, #0
 8008994:	bfcf      	iteee	gt
 8008996:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800899a:	3b20      	suble	r3, #32
 800899c:	fa02 f303 	lslle.w	r3, r2, r3
 80089a0:	ea03 0a01 	andle.w	sl, r3, r1
 80089a4:	2200      	movs	r2, #0
 80089a6:	2300      	movs	r3, #0
 80089a8:	4648      	mov	r0, r9
 80089aa:	4651      	mov	r1, sl
 80089ac:	f7f7 fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d1a8      	bne.n	8008906 <_strtod_l+0x56e>
 80089b4:	9b06      	ldr	r3, [sp, #24]
 80089b6:	9a04      	ldr	r2, [sp, #16]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	9908      	ldr	r1, [sp, #32]
 80089bc:	4623      	mov	r3, r4
 80089be:	4658      	mov	r0, fp
 80089c0:	f000 ff5e 	bl	8009880 <__s2b>
 80089c4:	9008      	str	r0, [sp, #32]
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f af00 	beq.w	80087cc <_strtod_l+0x434>
 80089cc:	9a07      	ldr	r2, [sp, #28]
 80089ce:	9b07      	ldr	r3, [sp, #28]
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	f1c3 0300 	rsb	r3, r3, #0
 80089d6:	bfa8      	it	ge
 80089d8:	2300      	movge	r3, #0
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	930e      	str	r3, [sp, #56]	; 0x38
 80089e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089e4:	9316      	str	r3, [sp, #88]	; 0x58
 80089e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80089ea:	9b08      	ldr	r3, [sp, #32]
 80089ec:	4658      	mov	r0, fp
 80089ee:	6859      	ldr	r1, [r3, #4]
 80089f0:	f000 fec0 	bl	8009774 <_Balloc>
 80089f4:	9006      	str	r0, [sp, #24]
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f43f aef0 	beq.w	80087dc <_strtod_l+0x444>
 80089fc:	9b08      	ldr	r3, [sp, #32]
 80089fe:	300c      	adds	r0, #12
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	f103 010c 	add.w	r1, r3, #12
 8008a06:	3202      	adds	r2, #2
 8008a08:	0092      	lsls	r2, r2, #2
 8008a0a:	f000 fea8 	bl	800975e <memcpy>
 8008a0e:	ab1e      	add	r3, sp, #120	; 0x78
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	ab1d      	add	r3, sp, #116	; 0x74
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	464a      	mov	r2, r9
 8008a18:	4653      	mov	r3, sl
 8008a1a:	4658      	mov	r0, fp
 8008a1c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008a20:	f001 f9e8 	bl	8009df4 <__d2b>
 8008a24:	901c      	str	r0, [sp, #112]	; 0x70
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f43f aed8 	beq.w	80087dc <_strtod_l+0x444>
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	4658      	mov	r0, fp
 8008a30:	f000 ffb2 	bl	8009998 <__i2b>
 8008a34:	9004      	str	r0, [sp, #16]
 8008a36:	4603      	mov	r3, r0
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	f43f aecf 	beq.w	80087dc <_strtod_l+0x444>
 8008a3e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008a40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a42:	2d00      	cmp	r5, #0
 8008a44:	bfab      	itete	ge
 8008a46:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008a48:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008a4a:	18ee      	addge	r6, r5, r3
 8008a4c:	1b5c      	sublt	r4, r3, r5
 8008a4e:	9b05      	ldr	r3, [sp, #20]
 8008a50:	bfa8      	it	ge
 8008a52:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008a54:	eba5 0503 	sub.w	r5, r5, r3
 8008a58:	4415      	add	r5, r2
 8008a5a:	4b64      	ldr	r3, [pc, #400]	; (8008bec <_strtod_l+0x854>)
 8008a5c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008a60:	bfb8      	it	lt
 8008a62:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008a64:	429d      	cmp	r5, r3
 8008a66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a6a:	f280 80af 	bge.w	8008bcc <_strtod_l+0x834>
 8008a6e:	1b5b      	subs	r3, r3, r5
 8008a70:	2b1f      	cmp	r3, #31
 8008a72:	eba2 0203 	sub.w	r2, r2, r3
 8008a76:	f04f 0701 	mov.w	r7, #1
 8008a7a:	f300 809c 	bgt.w	8008bb6 <_strtod_l+0x81e>
 8008a7e:	2500      	movs	r5, #0
 8008a80:	fa07 f303 	lsl.w	r3, r7, r3
 8008a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a86:	18b7      	adds	r7, r6, r2
 8008a88:	9b05      	ldr	r3, [sp, #20]
 8008a8a:	42be      	cmp	r6, r7
 8008a8c:	4414      	add	r4, r2
 8008a8e:	441c      	add	r4, r3
 8008a90:	4633      	mov	r3, r6
 8008a92:	bfa8      	it	ge
 8008a94:	463b      	movge	r3, r7
 8008a96:	42a3      	cmp	r3, r4
 8008a98:	bfa8      	it	ge
 8008a9a:	4623      	movge	r3, r4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfc2      	ittt	gt
 8008aa0:	1aff      	subgt	r7, r7, r3
 8008aa2:	1ae4      	subgt	r4, r4, r3
 8008aa4:	1af6      	subgt	r6, r6, r3
 8008aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aa8:	b1bb      	cbz	r3, 8008ada <_strtod_l+0x742>
 8008aaa:	461a      	mov	r2, r3
 8008aac:	9904      	ldr	r1, [sp, #16]
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f001 f810 	bl	8009ad4 <__pow5mult>
 8008ab4:	9004      	str	r0, [sp, #16]
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f43f ae90 	beq.w	80087dc <_strtod_l+0x444>
 8008abc:	4601      	mov	r1, r0
 8008abe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	f000 ff72 	bl	80099aa <__multiply>
 8008ac6:	9009      	str	r0, [sp, #36]	; 0x24
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f43f ae87 	beq.w	80087dc <_strtod_l+0x444>
 8008ace:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ad0:	4658      	mov	r0, fp
 8008ad2:	f000 fe83 	bl	80097dc <_Bfree>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad8:	931c      	str	r3, [sp, #112]	; 0x70
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	dc7a      	bgt.n	8008bd4 <_strtod_l+0x83c>
 8008ade:	9b07      	ldr	r3, [sp, #28]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	dd08      	ble.n	8008af6 <_strtod_l+0x75e>
 8008ae4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ae6:	9906      	ldr	r1, [sp, #24]
 8008ae8:	4658      	mov	r0, fp
 8008aea:	f000 fff3 	bl	8009ad4 <__pow5mult>
 8008aee:	9006      	str	r0, [sp, #24]
 8008af0:	2800      	cmp	r0, #0
 8008af2:	f43f ae73 	beq.w	80087dc <_strtod_l+0x444>
 8008af6:	2c00      	cmp	r4, #0
 8008af8:	dd08      	ble.n	8008b0c <_strtod_l+0x774>
 8008afa:	4622      	mov	r2, r4
 8008afc:	9906      	ldr	r1, [sp, #24]
 8008afe:	4658      	mov	r0, fp
 8008b00:	f001 f836 	bl	8009b70 <__lshift>
 8008b04:	9006      	str	r0, [sp, #24]
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f43f ae68 	beq.w	80087dc <_strtod_l+0x444>
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	dd08      	ble.n	8008b22 <_strtod_l+0x78a>
 8008b10:	4632      	mov	r2, r6
 8008b12:	9904      	ldr	r1, [sp, #16]
 8008b14:	4658      	mov	r0, fp
 8008b16:	f001 f82b 	bl	8009b70 <__lshift>
 8008b1a:	9004      	str	r0, [sp, #16]
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f43f ae5d 	beq.w	80087dc <_strtod_l+0x444>
 8008b22:	9a06      	ldr	r2, [sp, #24]
 8008b24:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b26:	4658      	mov	r0, fp
 8008b28:	f001 f890 	bl	8009c4c <__mdiff>
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f43f ae54 	beq.w	80087dc <_strtod_l+0x444>
 8008b34:	2400      	movs	r4, #0
 8008b36:	68c3      	ldr	r3, [r0, #12]
 8008b38:	9904      	ldr	r1, [sp, #16]
 8008b3a:	60c4      	str	r4, [r0, #12]
 8008b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8008b3e:	f001 f86b 	bl	8009c18 <__mcmp>
 8008b42:	42a0      	cmp	r0, r4
 8008b44:	da54      	bge.n	8008bf0 <_strtod_l+0x858>
 8008b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b48:	b9f3      	cbnz	r3, 8008b88 <_strtod_l+0x7f0>
 8008b4a:	f1b9 0f00 	cmp.w	r9, #0
 8008b4e:	d11b      	bne.n	8008b88 <_strtod_l+0x7f0>
 8008b50:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008b54:	b9c3      	cbnz	r3, 8008b88 <_strtod_l+0x7f0>
 8008b56:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008b5a:	0d1b      	lsrs	r3, r3, #20
 8008b5c:	051b      	lsls	r3, r3, #20
 8008b5e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b62:	d911      	bls.n	8008b88 <_strtod_l+0x7f0>
 8008b64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008b68:	b91b      	cbnz	r3, 8008b72 <_strtod_l+0x7da>
 8008b6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	dd0a      	ble.n	8008b88 <_strtod_l+0x7f0>
 8008b72:	4641      	mov	r1, r8
 8008b74:	2201      	movs	r2, #1
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 fffa 	bl	8009b70 <__lshift>
 8008b7c:	9904      	ldr	r1, [sp, #16]
 8008b7e:	4680      	mov	r8, r0
 8008b80:	f001 f84a 	bl	8009c18 <__mcmp>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	dc68      	bgt.n	8008c5a <_strtod_l+0x8c2>
 8008b88:	9b05      	ldr	r3, [sp, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d172      	bne.n	8008c74 <_strtod_l+0x8dc>
 8008b8e:	e630      	b.n	80087f2 <_strtod_l+0x45a>
 8008b90:	f018 0f01 	tst.w	r8, #1
 8008b94:	d004      	beq.n	8008ba0 <_strtod_l+0x808>
 8008b96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b9a:	f7f7 fc9d 	bl	80004d8 <__aeabi_dmul>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ba4:	3508      	adds	r5, #8
 8008ba6:	e6dc      	b.n	8008962 <_strtod_l+0x5ca>
 8008ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	ea03 0909 	and.w	r9, r3, r9
 8008bb4:	e6f6      	b.n	80089a4 <_strtod_l+0x60c>
 8008bb6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008bba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008bbe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008bc2:	35e2      	adds	r5, #226	; 0xe2
 8008bc4:	fa07 f505 	lsl.w	r5, r7, r5
 8008bc8:	970f      	str	r7, [sp, #60]	; 0x3c
 8008bca:	e75c      	b.n	8008a86 <_strtod_l+0x6ee>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	2500      	movs	r5, #0
 8008bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bd2:	e758      	b.n	8008a86 <_strtod_l+0x6ee>
 8008bd4:	463a      	mov	r2, r7
 8008bd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bd8:	4658      	mov	r0, fp
 8008bda:	f000 ffc9 	bl	8009b70 <__lshift>
 8008bde:	901c      	str	r0, [sp, #112]	; 0x70
 8008be0:	2800      	cmp	r0, #0
 8008be2:	f47f af7c 	bne.w	8008ade <_strtod_l+0x746>
 8008be6:	e5f9      	b.n	80087dc <_strtod_l+0x444>
 8008be8:	0800a888 	.word	0x0800a888
 8008bec:	fffffc02 	.word	0xfffffc02
 8008bf0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008bf4:	f040 8089 	bne.w	8008d0a <_strtod_l+0x972>
 8008bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008bfe:	b342      	cbz	r2, 8008c52 <_strtod_l+0x8ba>
 8008c00:	4aaf      	ldr	r2, [pc, #700]	; (8008ec0 <_strtod_l+0xb28>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d156      	bne.n	8008cb4 <_strtod_l+0x91c>
 8008c06:	9b05      	ldr	r3, [sp, #20]
 8008c08:	4648      	mov	r0, r9
 8008c0a:	b1eb      	cbz	r3, 8008c48 <_strtod_l+0x8b0>
 8008c0c:	4653      	mov	r3, sl
 8008c0e:	4aad      	ldr	r2, [pc, #692]	; (8008ec4 <_strtod_l+0xb2c>)
 8008c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c14:	401a      	ands	r2, r3
 8008c16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c1a:	d818      	bhi.n	8008c4e <_strtod_l+0x8b6>
 8008c1c:	0d12      	lsrs	r2, r2, #20
 8008c1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c22:	fa01 f303 	lsl.w	r3, r1, r3
 8008c26:	4298      	cmp	r0, r3
 8008c28:	d144      	bne.n	8008cb4 <_strtod_l+0x91c>
 8008c2a:	4ba7      	ldr	r3, [pc, #668]	; (8008ec8 <_strtod_l+0xb30>)
 8008c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d102      	bne.n	8008c38 <_strtod_l+0x8a0>
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f add2 	beq.w	80087dc <_strtod_l+0x444>
 8008c38:	4ba2      	ldr	r3, [pc, #648]	; (8008ec4 <_strtod_l+0xb2c>)
 8008c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c3c:	f04f 0900 	mov.w	r9, #0
 8008c40:	401a      	ands	r2, r3
 8008c42:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008c46:	e79f      	b.n	8008b88 <_strtod_l+0x7f0>
 8008c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c4c:	e7eb      	b.n	8008c26 <_strtod_l+0x88e>
 8008c4e:	460b      	mov	r3, r1
 8008c50:	e7e9      	b.n	8008c26 <_strtod_l+0x88e>
 8008c52:	bb7b      	cbnz	r3, 8008cb4 <_strtod_l+0x91c>
 8008c54:	f1b9 0f00 	cmp.w	r9, #0
 8008c58:	d12c      	bne.n	8008cb4 <_strtod_l+0x91c>
 8008c5a:	9905      	ldr	r1, [sp, #20]
 8008c5c:	4653      	mov	r3, sl
 8008c5e:	4a99      	ldr	r2, [pc, #612]	; (8008ec4 <_strtod_l+0xb2c>)
 8008c60:	b1f1      	cbz	r1, 8008ca0 <_strtod_l+0x908>
 8008c62:	ea02 010a 	and.w	r1, r2, sl
 8008c66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c6a:	dc19      	bgt.n	8008ca0 <_strtod_l+0x908>
 8008c6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c70:	f77f ae51 	ble.w	8008916 <_strtod_l+0x57e>
 8008c74:	2300      	movs	r3, #0
 8008c76:	4a95      	ldr	r2, [pc, #596]	; (8008ecc <_strtod_l+0xb34>)
 8008c78:	4648      	mov	r0, r9
 8008c7a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008c7e:	4651      	mov	r1, sl
 8008c80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c84:	f7f7 fc28 	bl	80004d8 <__aeabi_dmul>
 8008c88:	4681      	mov	r9, r0
 8008c8a:	468a      	mov	sl, r1
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	f47f adb0 	bne.w	80087f2 <_strtod_l+0x45a>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f47f adad 	bne.w	80087f2 <_strtod_l+0x45a>
 8008c98:	2322      	movs	r3, #34	; 0x22
 8008c9a:	f8cb 3000 	str.w	r3, [fp]
 8008c9e:	e5a8      	b.n	80087f2 <_strtod_l+0x45a>
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ca6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008caa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008cae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008cb2:	e769      	b.n	8008b88 <_strtod_l+0x7f0>
 8008cb4:	b19d      	cbz	r5, 8008cde <_strtod_l+0x946>
 8008cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb8:	421d      	tst	r5, r3
 8008cba:	f43f af65 	beq.w	8008b88 <_strtod_l+0x7f0>
 8008cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc0:	9a05      	ldr	r2, [sp, #20]
 8008cc2:	4648      	mov	r0, r9
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	b173      	cbz	r3, 8008ce6 <_strtod_l+0x94e>
 8008cc8:	f7ff fb43 	bl	8008352 <sulp>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cd4:	f7f7 fa4a 	bl	800016c <__adddf3>
 8008cd8:	4681      	mov	r9, r0
 8008cda:	468a      	mov	sl, r1
 8008cdc:	e754      	b.n	8008b88 <_strtod_l+0x7f0>
 8008cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce0:	ea13 0f09 	tst.w	r3, r9
 8008ce4:	e7e9      	b.n	8008cba <_strtod_l+0x922>
 8008ce6:	f7ff fb34 	bl	8008352 <sulp>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cf2:	f7f7 fa39 	bl	8000168 <__aeabi_dsub>
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	4681      	mov	r9, r0
 8008cfc:	468a      	mov	sl, r1
 8008cfe:	f7f7 fe53 	bl	80009a8 <__aeabi_dcmpeq>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f47f ae07 	bne.w	8008916 <_strtod_l+0x57e>
 8008d08:	e73e      	b.n	8008b88 <_strtod_l+0x7f0>
 8008d0a:	9904      	ldr	r1, [sp, #16]
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	f001 f8c0 	bl	8009e92 <__ratio>
 8008d12:	2200      	movs	r2, #0
 8008d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	f7f7 fe58 	bl	80009d0 <__aeabi_dcmple>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d075      	beq.n	8008e10 <_strtod_l+0xa78>
 8008d24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d047      	beq.n	8008dba <_strtod_l+0xa22>
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	4f68      	ldr	r7, [pc, #416]	; (8008ed0 <_strtod_l+0xb38>)
 8008d2e:	4d68      	ldr	r5, [pc, #416]	; (8008ed0 <_strtod_l+0xb38>)
 8008d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d36:	0d1b      	lsrs	r3, r3, #20
 8008d38:	051b      	lsls	r3, r3, #20
 8008d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d3e:	4b65      	ldr	r3, [pc, #404]	; (8008ed4 <_strtod_l+0xb3c>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	f040 80cf 	bne.w	8008ee4 <_strtod_l+0xb4c>
 8008d46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d50:	4648      	mov	r0, r9
 8008d52:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008d56:	4651      	mov	r1, sl
 8008d58:	f000 ffd6 	bl	8009d08 <__ulp>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 fbb8 	bl	80004d8 <__aeabi_dmul>
 8008d68:	464a      	mov	r2, r9
 8008d6a:	4653      	mov	r3, sl
 8008d6c:	f7f7 f9fe 	bl	800016c <__adddf3>
 8008d70:	460b      	mov	r3, r1
 8008d72:	4954      	ldr	r1, [pc, #336]	; (8008ec4 <_strtod_l+0xb2c>)
 8008d74:	4a58      	ldr	r2, [pc, #352]	; (8008ed8 <_strtod_l+0xb40>)
 8008d76:	4019      	ands	r1, r3
 8008d78:	4291      	cmp	r1, r2
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	d95e      	bls.n	8008e3c <_strtod_l+0xaa4>
 8008d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d103      	bne.n	8008d90 <_strtod_l+0x9f8>
 8008d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f43f ad26 	beq.w	80087dc <_strtod_l+0x444>
 8008d90:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008d94:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008ec8 <_strtod_l+0xb30>
 8008d98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f000 fd1e 	bl	80097dc <_Bfree>
 8008da0:	9906      	ldr	r1, [sp, #24]
 8008da2:	4658      	mov	r0, fp
 8008da4:	f000 fd1a 	bl	80097dc <_Bfree>
 8008da8:	9904      	ldr	r1, [sp, #16]
 8008daa:	4658      	mov	r0, fp
 8008dac:	f000 fd16 	bl	80097dc <_Bfree>
 8008db0:	4641      	mov	r1, r8
 8008db2:	4658      	mov	r0, fp
 8008db4:	f000 fd12 	bl	80097dc <_Bfree>
 8008db8:	e617      	b.n	80089ea <_strtod_l+0x652>
 8008dba:	f1b9 0f00 	cmp.w	r9, #0
 8008dbe:	d119      	bne.n	8008df4 <_strtod_l+0xa5c>
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc6:	b9e3      	cbnz	r3, 8008e02 <_strtod_l+0xa6a>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4b41      	ldr	r3, [pc, #260]	; (8008ed0 <_strtod_l+0xb38>)
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fdf4 	bl	80009bc <__aeabi_dcmplt>
 8008dd4:	b9c8      	cbnz	r0, 8008e0a <_strtod_l+0xa72>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4b40      	ldr	r3, [pc, #256]	; (8008edc <_strtod_l+0xb44>)
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fb7b 	bl	80004d8 <__aeabi_dmul>
 8008de2:	4604      	mov	r4, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008dea:	9418      	str	r4, [sp, #96]	; 0x60
 8008dec:	9319      	str	r3, [sp, #100]	; 0x64
 8008dee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008df2:	e79d      	b.n	8008d30 <_strtod_l+0x998>
 8008df4:	f1b9 0f01 	cmp.w	r9, #1
 8008df8:	d103      	bne.n	8008e02 <_strtod_l+0xa6a>
 8008dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f43f ad8a 	beq.w	8008916 <_strtod_l+0x57e>
 8008e02:	2600      	movs	r6, #0
 8008e04:	4f36      	ldr	r7, [pc, #216]	; (8008ee0 <_strtod_l+0xb48>)
 8008e06:	2400      	movs	r4, #0
 8008e08:	e791      	b.n	8008d2e <_strtod_l+0x996>
 8008e0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008e0c:	4d33      	ldr	r5, [pc, #204]	; (8008edc <_strtod_l+0xb44>)
 8008e0e:	e7ea      	b.n	8008de6 <_strtod_l+0xa4e>
 8008e10:	4b32      	ldr	r3, [pc, #200]	; (8008edc <_strtod_l+0xb44>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fb5e 	bl	80004d8 <__aeabi_dmul>
 8008e1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e1e:	4604      	mov	r4, r0
 8008e20:	460d      	mov	r5, r1
 8008e22:	b933      	cbnz	r3, 8008e32 <_strtod_l+0xa9a>
 8008e24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e28:	9010      	str	r0, [sp, #64]	; 0x40
 8008e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8008e2c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e30:	e77e      	b.n	8008d30 <_strtod_l+0x998>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008e3a:	e7f7      	b.n	8008e2c <_strtod_l+0xa94>
 8008e3c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008e40:	9b05      	ldr	r3, [sp, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1a8      	bne.n	8008d98 <_strtod_l+0xa00>
 8008e46:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008e4a:	0d1b      	lsrs	r3, r3, #20
 8008e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e4e:	051b      	lsls	r3, r3, #20
 8008e50:	429a      	cmp	r2, r3
 8008e52:	4656      	mov	r6, sl
 8008e54:	d1a0      	bne.n	8008d98 <_strtod_l+0xa00>
 8008e56:	4629      	mov	r1, r5
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f7f7 fdd7 	bl	8000a0c <__aeabi_d2iz>
 8008e5e:	f7f7 fad1 	bl	8000404 <__aeabi_i2d>
 8008e62:	460b      	mov	r3, r1
 8008e64:	4602      	mov	r2, r0
 8008e66:	4629      	mov	r1, r5
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7f7 f97d 	bl	8000168 <__aeabi_dsub>
 8008e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	b933      	cbnz	r3, 8008e84 <_strtod_l+0xaec>
 8008e76:	f1b9 0f00 	cmp.w	r9, #0
 8008e7a:	d103      	bne.n	8008e84 <_strtod_l+0xaec>
 8008e7c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	d06a      	beq.n	8008f5a <_strtod_l+0xbc2>
 8008e84:	a30a      	add	r3, pc, #40	; (adr r3, 8008eb0 <_strtod_l+0xb18>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7f7 fd95 	bl	80009bc <__aeabi_dcmplt>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f47f acad 	bne.w	80087f2 <_strtod_l+0x45a>
 8008e98:	a307      	add	r3, pc, #28	; (adr r3, 8008eb8 <_strtod_l+0xb20>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fda9 	bl	80009f8 <__aeabi_dcmpgt>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f43f af76 	beq.w	8008d98 <_strtod_l+0xa00>
 8008eac:	e4a1      	b.n	80087f2 <_strtod_l+0x45a>
 8008eae:	bf00      	nop
 8008eb0:	94a03595 	.word	0x94a03595
 8008eb4:	3fdfffff 	.word	0x3fdfffff
 8008eb8:	35afe535 	.word	0x35afe535
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	000fffff 	.word	0x000fffff
 8008ec4:	7ff00000 	.word	0x7ff00000
 8008ec8:	7fefffff 	.word	0x7fefffff
 8008ecc:	39500000 	.word	0x39500000
 8008ed0:	3ff00000 	.word	0x3ff00000
 8008ed4:	7fe00000 	.word	0x7fe00000
 8008ed8:	7c9fffff 	.word	0x7c9fffff
 8008edc:	3fe00000 	.word	0x3fe00000
 8008ee0:	bff00000 	.word	0xbff00000
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	b313      	cbz	r3, 8008f2e <_strtod_l+0xb96>
 8008ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008eee:	d81e      	bhi.n	8008f2e <_strtod_l+0xb96>
 8008ef0:	a325      	add	r3, pc, #148	; (adr r3, 8008f88 <_strtod_l+0xbf0>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	f7f7 fd69 	bl	80009d0 <__aeabi_dcmple>
 8008efe:	b190      	cbz	r0, 8008f26 <_strtod_l+0xb8e>
 8008f00:	4629      	mov	r1, r5
 8008f02:	4620      	mov	r0, r4
 8008f04:	f7f7 fdaa 	bl	8000a5c <__aeabi_d2uiz>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	bf08      	it	eq
 8008f0c:	2001      	moveq	r0, #1
 8008f0e:	f7f7 fa69 	bl	80003e4 <__aeabi_ui2d>
 8008f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f14:	4604      	mov	r4, r0
 8008f16:	460d      	mov	r5, r1
 8008f18:	b9d3      	cbnz	r3, 8008f50 <_strtod_l+0xbb8>
 8008f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f1e:	9012      	str	r0, [sp, #72]	; 0x48
 8008f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008f26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f28:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008f2c:	1a9f      	subs	r7, r3, r2
 8008f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f32:	f000 fee9 	bl	8009d08 <__ulp>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	f7f7 facb 	bl	80004d8 <__aeabi_dmul>
 8008f42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f46:	f7f7 f911 	bl	800016c <__adddf3>
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	468a      	mov	sl, r1
 8008f4e:	e777      	b.n	8008e40 <_strtod_l+0xaa8>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008f58:	e7e3      	b.n	8008f22 <_strtod_l+0xb8a>
 8008f5a:	a30d      	add	r3, pc, #52	; (adr r3, 8008f90 <_strtod_l+0xbf8>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f7f7 fd2c 	bl	80009bc <__aeabi_dcmplt>
 8008f64:	e79f      	b.n	8008ea6 <_strtod_l+0xb0e>
 8008f66:	2300      	movs	r3, #0
 8008f68:	930d      	str	r3, [sp, #52]	; 0x34
 8008f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	f7ff ba55 	b.w	800841e <_strtod_l+0x86>
 8008f74:	2b65      	cmp	r3, #101	; 0x65
 8008f76:	f04f 0200 	mov.w	r2, #0
 8008f7a:	f43f ab42 	beq.w	8008602 <_strtod_l+0x26a>
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4614      	mov	r4, r2
 8008f82:	9105      	str	r1, [sp, #20]
 8008f84:	f7ff babf 	b.w	8008506 <_strtod_l+0x16e>
 8008f88:	ffc00000 	.word	0xffc00000
 8008f8c:	41dfffff 	.word	0x41dfffff
 8008f90:	94a03595 	.word	0x94a03595
 8008f94:	3fcfffff 	.word	0x3fcfffff

08008f98 <strtod>:
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <strtod+0x1c>)
 8008f9a:	b410      	push	{r4}
 8008f9c:	681c      	ldr	r4, [r3, #0]
 8008f9e:	4a06      	ldr	r2, [pc, #24]	; (8008fb8 <strtod+0x20>)
 8008fa0:	6a23      	ldr	r3, [r4, #32]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	bf08      	it	eq
 8008fa6:	4613      	moveq	r3, r2
 8008fa8:	460a      	mov	r2, r1
 8008faa:	4601      	mov	r1, r0
 8008fac:	4620      	mov	r0, r4
 8008fae:	bc10      	pop	{r4}
 8008fb0:	f7ff b9f2 	b.w	8008398 <_strtod_l>
 8008fb4:	2000017c 	.word	0x2000017c
 8008fb8:	200001e0 	.word	0x200001e0

08008fbc <_strtol_l.isra.0>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	4692      	mov	sl, r2
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	460f      	mov	r7, r1
 8008fca:	463d      	mov	r5, r7
 8008fcc:	9808      	ldr	r0, [sp, #32]
 8008fce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd2:	f000 fbad 	bl	8009730 <__locale_ctype_ptr_l>
 8008fd6:	4420      	add	r0, r4
 8008fd8:	7843      	ldrb	r3, [r0, #1]
 8008fda:	f013 0308 	ands.w	r3, r3, #8
 8008fde:	d132      	bne.n	8009046 <_strtol_l.isra.0+0x8a>
 8008fe0:	2c2d      	cmp	r4, #45	; 0x2d
 8008fe2:	d132      	bne.n	800904a <_strtol_l.isra.0+0x8e>
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	787c      	ldrb	r4, [r7, #1]
 8008fe8:	1cbd      	adds	r5, r7, #2
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d05d      	beq.n	80090aa <_strtol_l.isra.0+0xee>
 8008fee:	2e10      	cmp	r6, #16
 8008ff0:	d109      	bne.n	8009006 <_strtol_l.isra.0+0x4a>
 8008ff2:	2c30      	cmp	r4, #48	; 0x30
 8008ff4:	d107      	bne.n	8009006 <_strtol_l.isra.0+0x4a>
 8008ff6:	782b      	ldrb	r3, [r5, #0]
 8008ff8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ffc:	2b58      	cmp	r3, #88	; 0x58
 8008ffe:	d14f      	bne.n	80090a0 <_strtol_l.isra.0+0xe4>
 8009000:	2610      	movs	r6, #16
 8009002:	786c      	ldrb	r4, [r5, #1]
 8009004:	3502      	adds	r5, #2
 8009006:	2a00      	cmp	r2, #0
 8009008:	bf14      	ite	ne
 800900a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800900e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009012:	2700      	movs	r7, #0
 8009014:	fbb1 fcf6 	udiv	ip, r1, r6
 8009018:	4638      	mov	r0, r7
 800901a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800901e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009022:	2b09      	cmp	r3, #9
 8009024:	d817      	bhi.n	8009056 <_strtol_l.isra.0+0x9a>
 8009026:	461c      	mov	r4, r3
 8009028:	42a6      	cmp	r6, r4
 800902a:	dd23      	ble.n	8009074 <_strtol_l.isra.0+0xb8>
 800902c:	1c7b      	adds	r3, r7, #1
 800902e:	d007      	beq.n	8009040 <_strtol_l.isra.0+0x84>
 8009030:	4584      	cmp	ip, r0
 8009032:	d31c      	bcc.n	800906e <_strtol_l.isra.0+0xb2>
 8009034:	d101      	bne.n	800903a <_strtol_l.isra.0+0x7e>
 8009036:	45a6      	cmp	lr, r4
 8009038:	db19      	blt.n	800906e <_strtol_l.isra.0+0xb2>
 800903a:	2701      	movs	r7, #1
 800903c:	fb00 4006 	mla	r0, r0, r6, r4
 8009040:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009044:	e7eb      	b.n	800901e <_strtol_l.isra.0+0x62>
 8009046:	462f      	mov	r7, r5
 8009048:	e7bf      	b.n	8008fca <_strtol_l.isra.0+0xe>
 800904a:	2c2b      	cmp	r4, #43	; 0x2b
 800904c:	bf04      	itt	eq
 800904e:	1cbd      	addeq	r5, r7, #2
 8009050:	787c      	ldrbeq	r4, [r7, #1]
 8009052:	461a      	mov	r2, r3
 8009054:	e7c9      	b.n	8008fea <_strtol_l.isra.0+0x2e>
 8009056:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800905a:	2b19      	cmp	r3, #25
 800905c:	d801      	bhi.n	8009062 <_strtol_l.isra.0+0xa6>
 800905e:	3c37      	subs	r4, #55	; 0x37
 8009060:	e7e2      	b.n	8009028 <_strtol_l.isra.0+0x6c>
 8009062:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009066:	2b19      	cmp	r3, #25
 8009068:	d804      	bhi.n	8009074 <_strtol_l.isra.0+0xb8>
 800906a:	3c57      	subs	r4, #87	; 0x57
 800906c:	e7dc      	b.n	8009028 <_strtol_l.isra.0+0x6c>
 800906e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009072:	e7e5      	b.n	8009040 <_strtol_l.isra.0+0x84>
 8009074:	1c7b      	adds	r3, r7, #1
 8009076:	d108      	bne.n	800908a <_strtol_l.isra.0+0xce>
 8009078:	2322      	movs	r3, #34	; 0x22
 800907a:	4608      	mov	r0, r1
 800907c:	f8c8 3000 	str.w	r3, [r8]
 8009080:	f1ba 0f00 	cmp.w	sl, #0
 8009084:	d107      	bne.n	8009096 <_strtol_l.isra.0+0xda>
 8009086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908a:	b102      	cbz	r2, 800908e <_strtol_l.isra.0+0xd2>
 800908c:	4240      	negs	r0, r0
 800908e:	f1ba 0f00 	cmp.w	sl, #0
 8009092:	d0f8      	beq.n	8009086 <_strtol_l.isra.0+0xca>
 8009094:	b10f      	cbz	r7, 800909a <_strtol_l.isra.0+0xde>
 8009096:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800909a:	f8ca 9000 	str.w	r9, [sl]
 800909e:	e7f2      	b.n	8009086 <_strtol_l.isra.0+0xca>
 80090a0:	2430      	movs	r4, #48	; 0x30
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d1af      	bne.n	8009006 <_strtol_l.isra.0+0x4a>
 80090a6:	2608      	movs	r6, #8
 80090a8:	e7ad      	b.n	8009006 <_strtol_l.isra.0+0x4a>
 80090aa:	2c30      	cmp	r4, #48	; 0x30
 80090ac:	d0a3      	beq.n	8008ff6 <_strtol_l.isra.0+0x3a>
 80090ae:	260a      	movs	r6, #10
 80090b0:	e7a9      	b.n	8009006 <_strtol_l.isra.0+0x4a>
	...

080090b4 <strtol>:
 80090b4:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <strtol+0x24>)
 80090b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090b8:	681c      	ldr	r4, [r3, #0]
 80090ba:	4d08      	ldr	r5, [pc, #32]	; (80090dc <strtol+0x28>)
 80090bc:	6a23      	ldr	r3, [r4, #32]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf08      	it	eq
 80090c2:	462b      	moveq	r3, r5
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4613      	mov	r3, r2
 80090c8:	460a      	mov	r2, r1
 80090ca:	4601      	mov	r1, r0
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff ff75 	bl	8008fbc <_strtol_l.isra.0>
 80090d2:	b003      	add	sp, #12
 80090d4:	bd30      	pop	{r4, r5, pc}
 80090d6:	bf00      	nop
 80090d8:	2000017c 	.word	0x2000017c
 80090dc:	200001e0 	.word	0x200001e0

080090e0 <rshift>:
 80090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e2:	6906      	ldr	r6, [r0, #16]
 80090e4:	114b      	asrs	r3, r1, #5
 80090e6:	429e      	cmp	r6, r3
 80090e8:	f100 0414 	add.w	r4, r0, #20
 80090ec:	dd31      	ble.n	8009152 <rshift+0x72>
 80090ee:	f011 011f 	ands.w	r1, r1, #31
 80090f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80090f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80090fa:	d108      	bne.n	800910e <rshift+0x2e>
 80090fc:	4621      	mov	r1, r4
 80090fe:	42b2      	cmp	r2, r6
 8009100:	460b      	mov	r3, r1
 8009102:	d211      	bcs.n	8009128 <rshift+0x48>
 8009104:	f852 3b04 	ldr.w	r3, [r2], #4
 8009108:	f841 3b04 	str.w	r3, [r1], #4
 800910c:	e7f7      	b.n	80090fe <rshift+0x1e>
 800910e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009112:	4623      	mov	r3, r4
 8009114:	f1c1 0c20 	rsb	ip, r1, #32
 8009118:	40cd      	lsrs	r5, r1
 800911a:	3204      	adds	r2, #4
 800911c:	42b2      	cmp	r2, r6
 800911e:	4617      	mov	r7, r2
 8009120:	d30d      	bcc.n	800913e <rshift+0x5e>
 8009122:	601d      	str	r5, [r3, #0]
 8009124:	b105      	cbz	r5, 8009128 <rshift+0x48>
 8009126:	3304      	adds	r3, #4
 8009128:	42a3      	cmp	r3, r4
 800912a:	eba3 0204 	sub.w	r2, r3, r4
 800912e:	bf08      	it	eq
 8009130:	2300      	moveq	r3, #0
 8009132:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009136:	6102      	str	r2, [r0, #16]
 8009138:	bf08      	it	eq
 800913a:	6143      	streq	r3, [r0, #20]
 800913c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913e:	683f      	ldr	r7, [r7, #0]
 8009140:	fa07 f70c 	lsl.w	r7, r7, ip
 8009144:	433d      	orrs	r5, r7
 8009146:	f843 5b04 	str.w	r5, [r3], #4
 800914a:	f852 5b04 	ldr.w	r5, [r2], #4
 800914e:	40cd      	lsrs	r5, r1
 8009150:	e7e4      	b.n	800911c <rshift+0x3c>
 8009152:	4623      	mov	r3, r4
 8009154:	e7e8      	b.n	8009128 <rshift+0x48>

08009156 <__hexdig_fun>:
 8009156:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800915a:	2b09      	cmp	r3, #9
 800915c:	d802      	bhi.n	8009164 <__hexdig_fun+0xe>
 800915e:	3820      	subs	r0, #32
 8009160:	b2c0      	uxtb	r0, r0
 8009162:	4770      	bx	lr
 8009164:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009168:	2b05      	cmp	r3, #5
 800916a:	d801      	bhi.n	8009170 <__hexdig_fun+0x1a>
 800916c:	3847      	subs	r0, #71	; 0x47
 800916e:	e7f7      	b.n	8009160 <__hexdig_fun+0xa>
 8009170:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009174:	2b05      	cmp	r3, #5
 8009176:	d801      	bhi.n	800917c <__hexdig_fun+0x26>
 8009178:	3827      	subs	r0, #39	; 0x27
 800917a:	e7f1      	b.n	8009160 <__hexdig_fun+0xa>
 800917c:	2000      	movs	r0, #0
 800917e:	4770      	bx	lr

08009180 <__gethex>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	b08b      	sub	sp, #44	; 0x2c
 8009186:	9002      	str	r0, [sp, #8]
 8009188:	9816      	ldr	r0, [sp, #88]	; 0x58
 800918a:	468a      	mov	sl, r1
 800918c:	4690      	mov	r8, r2
 800918e:	9306      	str	r3, [sp, #24]
 8009190:	f000 fad1 	bl	8009736 <__localeconv_l>
 8009194:	6803      	ldr	r3, [r0, #0]
 8009196:	f04f 0b00 	mov.w	fp, #0
 800919a:	4618      	mov	r0, r3
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	f7f6 ffd7 	bl	8000150 <strlen>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	9001      	str	r0, [sp, #4]
 80091a6:	4403      	add	r3, r0
 80091a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80091ac:	9307      	str	r3, [sp, #28]
 80091ae:	f8da 3000 	ldr.w	r3, [sl]
 80091b2:	3302      	adds	r3, #2
 80091b4:	461f      	mov	r7, r3
 80091b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091ba:	2830      	cmp	r0, #48	; 0x30
 80091bc:	d06c      	beq.n	8009298 <__gethex+0x118>
 80091be:	f7ff ffca 	bl	8009156 <__hexdig_fun>
 80091c2:	4604      	mov	r4, r0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d16a      	bne.n	800929e <__gethex+0x11e>
 80091c8:	9a01      	ldr	r2, [sp, #4]
 80091ca:	9903      	ldr	r1, [sp, #12]
 80091cc:	4638      	mov	r0, r7
 80091ce:	f7ff f899 	bl	8008304 <strncmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d166      	bne.n	80092a4 <__gethex+0x124>
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	5cf8      	ldrb	r0, [r7, r3]
 80091da:	18fe      	adds	r6, r7, r3
 80091dc:	f7ff ffbb 	bl	8009156 <__hexdig_fun>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d062      	beq.n	80092aa <__gethex+0x12a>
 80091e4:	4633      	mov	r3, r6
 80091e6:	7818      	ldrb	r0, [r3, #0]
 80091e8:	461f      	mov	r7, r3
 80091ea:	2830      	cmp	r0, #48	; 0x30
 80091ec:	f103 0301 	add.w	r3, r3, #1
 80091f0:	d0f9      	beq.n	80091e6 <__gethex+0x66>
 80091f2:	f7ff ffb0 	bl	8009156 <__hexdig_fun>
 80091f6:	fab0 f580 	clz	r5, r0
 80091fa:	4634      	mov	r4, r6
 80091fc:	f04f 0b01 	mov.w	fp, #1
 8009200:	096d      	lsrs	r5, r5, #5
 8009202:	463a      	mov	r2, r7
 8009204:	4616      	mov	r6, r2
 8009206:	7830      	ldrb	r0, [r6, #0]
 8009208:	3201      	adds	r2, #1
 800920a:	f7ff ffa4 	bl	8009156 <__hexdig_fun>
 800920e:	2800      	cmp	r0, #0
 8009210:	d1f8      	bne.n	8009204 <__gethex+0x84>
 8009212:	9a01      	ldr	r2, [sp, #4]
 8009214:	9903      	ldr	r1, [sp, #12]
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff f874 	bl	8008304 <strncmp>
 800921c:	b950      	cbnz	r0, 8009234 <__gethex+0xb4>
 800921e:	b954      	cbnz	r4, 8009236 <__gethex+0xb6>
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	18f4      	adds	r4, r6, r3
 8009224:	4622      	mov	r2, r4
 8009226:	4616      	mov	r6, r2
 8009228:	7830      	ldrb	r0, [r6, #0]
 800922a:	3201      	adds	r2, #1
 800922c:	f7ff ff93 	bl	8009156 <__hexdig_fun>
 8009230:	2800      	cmp	r0, #0
 8009232:	d1f8      	bne.n	8009226 <__gethex+0xa6>
 8009234:	b10c      	cbz	r4, 800923a <__gethex+0xba>
 8009236:	1ba4      	subs	r4, r4, r6
 8009238:	00a4      	lsls	r4, r4, #2
 800923a:	7833      	ldrb	r3, [r6, #0]
 800923c:	2b50      	cmp	r3, #80	; 0x50
 800923e:	d001      	beq.n	8009244 <__gethex+0xc4>
 8009240:	2b70      	cmp	r3, #112	; 0x70
 8009242:	d140      	bne.n	80092c6 <__gethex+0x146>
 8009244:	7873      	ldrb	r3, [r6, #1]
 8009246:	2b2b      	cmp	r3, #43	; 0x2b
 8009248:	d031      	beq.n	80092ae <__gethex+0x12e>
 800924a:	2b2d      	cmp	r3, #45	; 0x2d
 800924c:	d033      	beq.n	80092b6 <__gethex+0x136>
 800924e:	f04f 0900 	mov.w	r9, #0
 8009252:	1c71      	adds	r1, r6, #1
 8009254:	7808      	ldrb	r0, [r1, #0]
 8009256:	f7ff ff7e 	bl	8009156 <__hexdig_fun>
 800925a:	1e43      	subs	r3, r0, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b18      	cmp	r3, #24
 8009260:	d831      	bhi.n	80092c6 <__gethex+0x146>
 8009262:	f1a0 0210 	sub.w	r2, r0, #16
 8009266:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800926a:	f7ff ff74 	bl	8009156 <__hexdig_fun>
 800926e:	1e43      	subs	r3, r0, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b18      	cmp	r3, #24
 8009274:	d922      	bls.n	80092bc <__gethex+0x13c>
 8009276:	f1b9 0f00 	cmp.w	r9, #0
 800927a:	d000      	beq.n	800927e <__gethex+0xfe>
 800927c:	4252      	negs	r2, r2
 800927e:	4414      	add	r4, r2
 8009280:	f8ca 1000 	str.w	r1, [sl]
 8009284:	b30d      	cbz	r5, 80092ca <__gethex+0x14a>
 8009286:	f1bb 0f00 	cmp.w	fp, #0
 800928a:	bf0c      	ite	eq
 800928c:	2706      	moveq	r7, #6
 800928e:	2700      	movne	r7, #0
 8009290:	4638      	mov	r0, r7
 8009292:	b00b      	add	sp, #44	; 0x2c
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	f10b 0b01 	add.w	fp, fp, #1
 800929c:	e78a      	b.n	80091b4 <__gethex+0x34>
 800929e:	2500      	movs	r5, #0
 80092a0:	462c      	mov	r4, r5
 80092a2:	e7ae      	b.n	8009202 <__gethex+0x82>
 80092a4:	463e      	mov	r6, r7
 80092a6:	2501      	movs	r5, #1
 80092a8:	e7c7      	b.n	800923a <__gethex+0xba>
 80092aa:	4604      	mov	r4, r0
 80092ac:	e7fb      	b.n	80092a6 <__gethex+0x126>
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	1cb1      	adds	r1, r6, #2
 80092b4:	e7ce      	b.n	8009254 <__gethex+0xd4>
 80092b6:	f04f 0901 	mov.w	r9, #1
 80092ba:	e7fa      	b.n	80092b2 <__gethex+0x132>
 80092bc:	230a      	movs	r3, #10
 80092be:	fb03 0202 	mla	r2, r3, r2, r0
 80092c2:	3a10      	subs	r2, #16
 80092c4:	e7cf      	b.n	8009266 <__gethex+0xe6>
 80092c6:	4631      	mov	r1, r6
 80092c8:	e7da      	b.n	8009280 <__gethex+0x100>
 80092ca:	4629      	mov	r1, r5
 80092cc:	1bf3      	subs	r3, r6, r7
 80092ce:	3b01      	subs	r3, #1
 80092d0:	2b07      	cmp	r3, #7
 80092d2:	dc49      	bgt.n	8009368 <__gethex+0x1e8>
 80092d4:	9802      	ldr	r0, [sp, #8]
 80092d6:	f000 fa4d 	bl	8009774 <_Balloc>
 80092da:	f04f 0b00 	mov.w	fp, #0
 80092de:	4605      	mov	r5, r0
 80092e0:	46da      	mov	sl, fp
 80092e2:	9b01      	ldr	r3, [sp, #4]
 80092e4:	f100 0914 	add.w	r9, r0, #20
 80092e8:	f1c3 0301 	rsb	r3, r3, #1
 80092ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80092f0:	9308      	str	r3, [sp, #32]
 80092f2:	42b7      	cmp	r7, r6
 80092f4:	d33b      	bcc.n	800936e <__gethex+0x1ee>
 80092f6:	9804      	ldr	r0, [sp, #16]
 80092f8:	f840 ab04 	str.w	sl, [r0], #4
 80092fc:	eba0 0009 	sub.w	r0, r0, r9
 8009300:	1080      	asrs	r0, r0, #2
 8009302:	6128      	str	r0, [r5, #16]
 8009304:	0147      	lsls	r7, r0, #5
 8009306:	4650      	mov	r0, sl
 8009308:	f000 faf8 	bl	80098fc <__hi0bits>
 800930c:	f8d8 6000 	ldr.w	r6, [r8]
 8009310:	1a3f      	subs	r7, r7, r0
 8009312:	42b7      	cmp	r7, r6
 8009314:	dd64      	ble.n	80093e0 <__gethex+0x260>
 8009316:	1bbf      	subs	r7, r7, r6
 8009318:	4639      	mov	r1, r7
 800931a:	4628      	mov	r0, r5
 800931c:	f000 fe01 	bl	8009f22 <__any_on>
 8009320:	4682      	mov	sl, r0
 8009322:	b178      	cbz	r0, 8009344 <__gethex+0x1c4>
 8009324:	f04f 0a01 	mov.w	sl, #1
 8009328:	1e7b      	subs	r3, r7, #1
 800932a:	1159      	asrs	r1, r3, #5
 800932c:	f003 021f 	and.w	r2, r3, #31
 8009330:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009334:	fa0a f202 	lsl.w	r2, sl, r2
 8009338:	420a      	tst	r2, r1
 800933a:	d003      	beq.n	8009344 <__gethex+0x1c4>
 800933c:	4553      	cmp	r3, sl
 800933e:	dc46      	bgt.n	80093ce <__gethex+0x24e>
 8009340:	f04f 0a02 	mov.w	sl, #2
 8009344:	4639      	mov	r1, r7
 8009346:	4628      	mov	r0, r5
 8009348:	f7ff feca 	bl	80090e0 <rshift>
 800934c:	443c      	add	r4, r7
 800934e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009352:	42a3      	cmp	r3, r4
 8009354:	da52      	bge.n	80093fc <__gethex+0x27c>
 8009356:	4629      	mov	r1, r5
 8009358:	9802      	ldr	r0, [sp, #8]
 800935a:	f000 fa3f 	bl	80097dc <_Bfree>
 800935e:	2300      	movs	r3, #0
 8009360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009362:	27a3      	movs	r7, #163	; 0xa3
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	e793      	b.n	8009290 <__gethex+0x110>
 8009368:	3101      	adds	r1, #1
 800936a:	105b      	asrs	r3, r3, #1
 800936c:	e7b0      	b.n	80092d0 <__gethex+0x150>
 800936e:	1e73      	subs	r3, r6, #1
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	9a07      	ldr	r2, [sp, #28]
 8009374:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009378:	4293      	cmp	r3, r2
 800937a:	d018      	beq.n	80093ae <__gethex+0x22e>
 800937c:	f1bb 0f20 	cmp.w	fp, #32
 8009380:	d107      	bne.n	8009392 <__gethex+0x212>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	f8c3 a000 	str.w	sl, [r3]
 8009388:	f04f 0a00 	mov.w	sl, #0
 800938c:	46d3      	mov	fp, sl
 800938e:	3304      	adds	r3, #4
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009396:	f7ff fede 	bl	8009156 <__hexdig_fun>
 800939a:	f000 000f 	and.w	r0, r0, #15
 800939e:	fa00 f00b 	lsl.w	r0, r0, fp
 80093a2:	ea4a 0a00 	orr.w	sl, sl, r0
 80093a6:	f10b 0b04 	add.w	fp, fp, #4
 80093aa:	9b05      	ldr	r3, [sp, #20]
 80093ac:	e00d      	b.n	80093ca <__gethex+0x24a>
 80093ae:	9b05      	ldr	r3, [sp, #20]
 80093b0:	9a08      	ldr	r2, [sp, #32]
 80093b2:	4413      	add	r3, r2
 80093b4:	42bb      	cmp	r3, r7
 80093b6:	d3e1      	bcc.n	800937c <__gethex+0x1fc>
 80093b8:	4618      	mov	r0, r3
 80093ba:	9a01      	ldr	r2, [sp, #4]
 80093bc:	9903      	ldr	r1, [sp, #12]
 80093be:	9309      	str	r3, [sp, #36]	; 0x24
 80093c0:	f7fe ffa0 	bl	8008304 <strncmp>
 80093c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d1d8      	bne.n	800937c <__gethex+0x1fc>
 80093ca:	461e      	mov	r6, r3
 80093cc:	e791      	b.n	80092f2 <__gethex+0x172>
 80093ce:	1eb9      	subs	r1, r7, #2
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 fda6 	bl	8009f22 <__any_on>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d0b2      	beq.n	8009340 <__gethex+0x1c0>
 80093da:	f04f 0a03 	mov.w	sl, #3
 80093de:	e7b1      	b.n	8009344 <__gethex+0x1c4>
 80093e0:	da09      	bge.n	80093f6 <__gethex+0x276>
 80093e2:	1bf7      	subs	r7, r6, r7
 80093e4:	4629      	mov	r1, r5
 80093e6:	463a      	mov	r2, r7
 80093e8:	9802      	ldr	r0, [sp, #8]
 80093ea:	f000 fbc1 	bl	8009b70 <__lshift>
 80093ee:	4605      	mov	r5, r0
 80093f0:	1be4      	subs	r4, r4, r7
 80093f2:	f100 0914 	add.w	r9, r0, #20
 80093f6:	f04f 0a00 	mov.w	sl, #0
 80093fa:	e7a8      	b.n	800934e <__gethex+0x1ce>
 80093fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009400:	42a0      	cmp	r0, r4
 8009402:	dd6b      	ble.n	80094dc <__gethex+0x35c>
 8009404:	1b04      	subs	r4, r0, r4
 8009406:	42a6      	cmp	r6, r4
 8009408:	dc2e      	bgt.n	8009468 <__gethex+0x2e8>
 800940a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800940e:	2b02      	cmp	r3, #2
 8009410:	d022      	beq.n	8009458 <__gethex+0x2d8>
 8009412:	2b03      	cmp	r3, #3
 8009414:	d024      	beq.n	8009460 <__gethex+0x2e0>
 8009416:	2b01      	cmp	r3, #1
 8009418:	d115      	bne.n	8009446 <__gethex+0x2c6>
 800941a:	42a6      	cmp	r6, r4
 800941c:	d113      	bne.n	8009446 <__gethex+0x2c6>
 800941e:	2e01      	cmp	r6, #1
 8009420:	dc0b      	bgt.n	800943a <__gethex+0x2ba>
 8009422:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009426:	9a06      	ldr	r2, [sp, #24]
 8009428:	2762      	movs	r7, #98	; 0x62
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	2301      	movs	r3, #1
 800942e:	612b      	str	r3, [r5, #16]
 8009430:	f8c9 3000 	str.w	r3, [r9]
 8009434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009436:	601d      	str	r5, [r3, #0]
 8009438:	e72a      	b.n	8009290 <__gethex+0x110>
 800943a:	1e71      	subs	r1, r6, #1
 800943c:	4628      	mov	r0, r5
 800943e:	f000 fd70 	bl	8009f22 <__any_on>
 8009442:	2800      	cmp	r0, #0
 8009444:	d1ed      	bne.n	8009422 <__gethex+0x2a2>
 8009446:	4629      	mov	r1, r5
 8009448:	9802      	ldr	r0, [sp, #8]
 800944a:	f000 f9c7 	bl	80097dc <_Bfree>
 800944e:	2300      	movs	r3, #0
 8009450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009452:	2750      	movs	r7, #80	; 0x50
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	e71b      	b.n	8009290 <__gethex+0x110>
 8009458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0e1      	beq.n	8009422 <__gethex+0x2a2>
 800945e:	e7f2      	b.n	8009446 <__gethex+0x2c6>
 8009460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1dd      	bne.n	8009422 <__gethex+0x2a2>
 8009466:	e7ee      	b.n	8009446 <__gethex+0x2c6>
 8009468:	1e67      	subs	r7, r4, #1
 800946a:	f1ba 0f00 	cmp.w	sl, #0
 800946e:	d132      	bne.n	80094d6 <__gethex+0x356>
 8009470:	b127      	cbz	r7, 800947c <__gethex+0x2fc>
 8009472:	4639      	mov	r1, r7
 8009474:	4628      	mov	r0, r5
 8009476:	f000 fd54 	bl	8009f22 <__any_on>
 800947a:	4682      	mov	sl, r0
 800947c:	2301      	movs	r3, #1
 800947e:	117a      	asrs	r2, r7, #5
 8009480:	f007 071f 	and.w	r7, r7, #31
 8009484:	fa03 f707 	lsl.w	r7, r3, r7
 8009488:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800948c:	4621      	mov	r1, r4
 800948e:	421f      	tst	r7, r3
 8009490:	f04f 0702 	mov.w	r7, #2
 8009494:	4628      	mov	r0, r5
 8009496:	bf18      	it	ne
 8009498:	f04a 0a02 	orrne.w	sl, sl, #2
 800949c:	1b36      	subs	r6, r6, r4
 800949e:	f7ff fe1f 	bl	80090e0 <rshift>
 80094a2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80094a6:	f1ba 0f00 	cmp.w	sl, #0
 80094aa:	d048      	beq.n	800953e <__gethex+0x3be>
 80094ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d015      	beq.n	80094e0 <__gethex+0x360>
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d017      	beq.n	80094e8 <__gethex+0x368>
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d109      	bne.n	80094d0 <__gethex+0x350>
 80094bc:	f01a 0f02 	tst.w	sl, #2
 80094c0:	d006      	beq.n	80094d0 <__gethex+0x350>
 80094c2:	f8d9 3000 	ldr.w	r3, [r9]
 80094c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80094ca:	f01a 0f01 	tst.w	sl, #1
 80094ce:	d10e      	bne.n	80094ee <__gethex+0x36e>
 80094d0:	f047 0710 	orr.w	r7, r7, #16
 80094d4:	e033      	b.n	800953e <__gethex+0x3be>
 80094d6:	f04f 0a01 	mov.w	sl, #1
 80094da:	e7cf      	b.n	800947c <__gethex+0x2fc>
 80094dc:	2701      	movs	r7, #1
 80094de:	e7e2      	b.n	80094a6 <__gethex+0x326>
 80094e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e2:	f1c3 0301 	rsb	r3, r3, #1
 80094e6:	9315      	str	r3, [sp, #84]	; 0x54
 80094e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <__gethex+0x350>
 80094ee:	f04f 0c00 	mov.w	ip, #0
 80094f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80094f6:	f105 0314 	add.w	r3, r5, #20
 80094fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80094fe:	eb03 010a 	add.w	r1, r3, sl
 8009502:	4618      	mov	r0, r3
 8009504:	f853 2b04 	ldr.w	r2, [r3], #4
 8009508:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800950c:	d01c      	beq.n	8009548 <__gethex+0x3c8>
 800950e:	3201      	adds	r2, #1
 8009510:	6002      	str	r2, [r0, #0]
 8009512:	2f02      	cmp	r7, #2
 8009514:	f105 0314 	add.w	r3, r5, #20
 8009518:	d138      	bne.n	800958c <__gethex+0x40c>
 800951a:	f8d8 2000 	ldr.w	r2, [r8]
 800951e:	3a01      	subs	r2, #1
 8009520:	42b2      	cmp	r2, r6
 8009522:	d10a      	bne.n	800953a <__gethex+0x3ba>
 8009524:	2201      	movs	r2, #1
 8009526:	1171      	asrs	r1, r6, #5
 8009528:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800952c:	f006 061f 	and.w	r6, r6, #31
 8009530:	fa02 f606 	lsl.w	r6, r2, r6
 8009534:	421e      	tst	r6, r3
 8009536:	bf18      	it	ne
 8009538:	4617      	movne	r7, r2
 800953a:	f047 0720 	orr.w	r7, r7, #32
 800953e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009540:	601d      	str	r5, [r3, #0]
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	601c      	str	r4, [r3, #0]
 8009546:	e6a3      	b.n	8009290 <__gethex+0x110>
 8009548:	4299      	cmp	r1, r3
 800954a:	f843 cc04 	str.w	ip, [r3, #-4]
 800954e:	d8d8      	bhi.n	8009502 <__gethex+0x382>
 8009550:	68ab      	ldr	r3, [r5, #8]
 8009552:	4599      	cmp	r9, r3
 8009554:	db12      	blt.n	800957c <__gethex+0x3fc>
 8009556:	6869      	ldr	r1, [r5, #4]
 8009558:	9802      	ldr	r0, [sp, #8]
 800955a:	3101      	adds	r1, #1
 800955c:	f000 f90a 	bl	8009774 <_Balloc>
 8009560:	4683      	mov	fp, r0
 8009562:	692a      	ldr	r2, [r5, #16]
 8009564:	f105 010c 	add.w	r1, r5, #12
 8009568:	3202      	adds	r2, #2
 800956a:	0092      	lsls	r2, r2, #2
 800956c:	300c      	adds	r0, #12
 800956e:	f000 f8f6 	bl	800975e <memcpy>
 8009572:	4629      	mov	r1, r5
 8009574:	9802      	ldr	r0, [sp, #8]
 8009576:	f000 f931 	bl	80097dc <_Bfree>
 800957a:	465d      	mov	r5, fp
 800957c:	692b      	ldr	r3, [r5, #16]
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	612a      	str	r2, [r5, #16]
 8009582:	2201      	movs	r2, #1
 8009584:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009588:	615a      	str	r2, [r3, #20]
 800958a:	e7c2      	b.n	8009512 <__gethex+0x392>
 800958c:	692a      	ldr	r2, [r5, #16]
 800958e:	454a      	cmp	r2, r9
 8009590:	dd0b      	ble.n	80095aa <__gethex+0x42a>
 8009592:	2101      	movs	r1, #1
 8009594:	4628      	mov	r0, r5
 8009596:	f7ff fda3 	bl	80090e0 <rshift>
 800959a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800959e:	3401      	adds	r4, #1
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	f6ff aed8 	blt.w	8009356 <__gethex+0x1d6>
 80095a6:	2701      	movs	r7, #1
 80095a8:	e7c7      	b.n	800953a <__gethex+0x3ba>
 80095aa:	f016 061f 	ands.w	r6, r6, #31
 80095ae:	d0fa      	beq.n	80095a6 <__gethex+0x426>
 80095b0:	449a      	add	sl, r3
 80095b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80095b6:	f000 f9a1 	bl	80098fc <__hi0bits>
 80095ba:	f1c6 0620 	rsb	r6, r6, #32
 80095be:	42b0      	cmp	r0, r6
 80095c0:	dbe7      	blt.n	8009592 <__gethex+0x412>
 80095c2:	e7f0      	b.n	80095a6 <__gethex+0x426>

080095c4 <L_shift>:
 80095c4:	f1c2 0208 	rsb	r2, r2, #8
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	b570      	push	{r4, r5, r6, lr}
 80095cc:	f1c2 0620 	rsb	r6, r2, #32
 80095d0:	6843      	ldr	r3, [r0, #4]
 80095d2:	6804      	ldr	r4, [r0, #0]
 80095d4:	fa03 f506 	lsl.w	r5, r3, r6
 80095d8:	432c      	orrs	r4, r5
 80095da:	40d3      	lsrs	r3, r2
 80095dc:	6004      	str	r4, [r0, #0]
 80095de:	f840 3f04 	str.w	r3, [r0, #4]!
 80095e2:	4288      	cmp	r0, r1
 80095e4:	d3f4      	bcc.n	80095d0 <L_shift+0xc>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}

080095e8 <__match>:
 80095e8:	b530      	push	{r4, r5, lr}
 80095ea:	6803      	ldr	r3, [r0, #0]
 80095ec:	3301      	adds	r3, #1
 80095ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f2:	b914      	cbnz	r4, 80095fa <__match+0x12>
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	2001      	movs	r0, #1
 80095f8:	bd30      	pop	{r4, r5, pc}
 80095fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009602:	2d19      	cmp	r5, #25
 8009604:	bf98      	it	ls
 8009606:	3220      	addls	r2, #32
 8009608:	42a2      	cmp	r2, r4
 800960a:	d0f0      	beq.n	80095ee <__match+0x6>
 800960c:	2000      	movs	r0, #0
 800960e:	e7f3      	b.n	80095f8 <__match+0x10>

08009610 <__hexnan>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	2500      	movs	r5, #0
 8009616:	680b      	ldr	r3, [r1, #0]
 8009618:	4682      	mov	sl, r0
 800961a:	115f      	asrs	r7, r3, #5
 800961c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009620:	f013 031f 	ands.w	r3, r3, #31
 8009624:	bf18      	it	ne
 8009626:	3704      	addne	r7, #4
 8009628:	1f3e      	subs	r6, r7, #4
 800962a:	4690      	mov	r8, r2
 800962c:	46b1      	mov	r9, r6
 800962e:	4634      	mov	r4, r6
 8009630:	46ab      	mov	fp, r5
 8009632:	b087      	sub	sp, #28
 8009634:	6801      	ldr	r1, [r0, #0]
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	f847 5c04 	str.w	r5, [r7, #-4]
 800963c:	9502      	str	r5, [sp, #8]
 800963e:	784a      	ldrb	r2, [r1, #1]
 8009640:	1c4b      	adds	r3, r1, #1
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	b342      	cbz	r2, 8009698 <__hexnan+0x88>
 8009646:	4610      	mov	r0, r2
 8009648:	9105      	str	r1, [sp, #20]
 800964a:	9204      	str	r2, [sp, #16]
 800964c:	f7ff fd83 	bl	8009156 <__hexdig_fun>
 8009650:	2800      	cmp	r0, #0
 8009652:	d143      	bne.n	80096dc <__hexnan+0xcc>
 8009654:	9a04      	ldr	r2, [sp, #16]
 8009656:	9905      	ldr	r1, [sp, #20]
 8009658:	2a20      	cmp	r2, #32
 800965a:	d818      	bhi.n	800968e <__hexnan+0x7e>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	459b      	cmp	fp, r3
 8009660:	dd13      	ble.n	800968a <__hexnan+0x7a>
 8009662:	454c      	cmp	r4, r9
 8009664:	d206      	bcs.n	8009674 <__hexnan+0x64>
 8009666:	2d07      	cmp	r5, #7
 8009668:	dc04      	bgt.n	8009674 <__hexnan+0x64>
 800966a:	462a      	mov	r2, r5
 800966c:	4649      	mov	r1, r9
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff ffa8 	bl	80095c4 <L_shift>
 8009674:	4544      	cmp	r4, r8
 8009676:	d944      	bls.n	8009702 <__hexnan+0xf2>
 8009678:	2300      	movs	r3, #0
 800967a:	f1a4 0904 	sub.w	r9, r4, #4
 800967e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009682:	461d      	mov	r5, r3
 8009684:	464c      	mov	r4, r9
 8009686:	f8cd b008 	str.w	fp, [sp, #8]
 800968a:	9903      	ldr	r1, [sp, #12]
 800968c:	e7d7      	b.n	800963e <__hexnan+0x2e>
 800968e:	2a29      	cmp	r2, #41	; 0x29
 8009690:	d14a      	bne.n	8009728 <__hexnan+0x118>
 8009692:	3102      	adds	r1, #2
 8009694:	f8ca 1000 	str.w	r1, [sl]
 8009698:	f1bb 0f00 	cmp.w	fp, #0
 800969c:	d044      	beq.n	8009728 <__hexnan+0x118>
 800969e:	454c      	cmp	r4, r9
 80096a0:	d206      	bcs.n	80096b0 <__hexnan+0xa0>
 80096a2:	2d07      	cmp	r5, #7
 80096a4:	dc04      	bgt.n	80096b0 <__hexnan+0xa0>
 80096a6:	462a      	mov	r2, r5
 80096a8:	4649      	mov	r1, r9
 80096aa:	4620      	mov	r0, r4
 80096ac:	f7ff ff8a 	bl	80095c4 <L_shift>
 80096b0:	4544      	cmp	r4, r8
 80096b2:	d928      	bls.n	8009706 <__hexnan+0xf6>
 80096b4:	4643      	mov	r3, r8
 80096b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80096ba:	42a6      	cmp	r6, r4
 80096bc:	f843 2b04 	str.w	r2, [r3], #4
 80096c0:	d2f9      	bcs.n	80096b6 <__hexnan+0xa6>
 80096c2:	2200      	movs	r2, #0
 80096c4:	f843 2b04 	str.w	r2, [r3], #4
 80096c8:	429e      	cmp	r6, r3
 80096ca:	d2fb      	bcs.n	80096c4 <__hexnan+0xb4>
 80096cc:	6833      	ldr	r3, [r6, #0]
 80096ce:	b91b      	cbnz	r3, 80096d8 <__hexnan+0xc8>
 80096d0:	4546      	cmp	r6, r8
 80096d2:	d127      	bne.n	8009724 <__hexnan+0x114>
 80096d4:	2301      	movs	r3, #1
 80096d6:	6033      	str	r3, [r6, #0]
 80096d8:	2005      	movs	r0, #5
 80096da:	e026      	b.n	800972a <__hexnan+0x11a>
 80096dc:	3501      	adds	r5, #1
 80096de:	2d08      	cmp	r5, #8
 80096e0:	f10b 0b01 	add.w	fp, fp, #1
 80096e4:	dd06      	ble.n	80096f4 <__hexnan+0xe4>
 80096e6:	4544      	cmp	r4, r8
 80096e8:	d9cf      	bls.n	800968a <__hexnan+0x7a>
 80096ea:	2300      	movs	r3, #0
 80096ec:	2501      	movs	r5, #1
 80096ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80096f2:	3c04      	subs	r4, #4
 80096f4:	6822      	ldr	r2, [r4, #0]
 80096f6:	f000 000f 	and.w	r0, r0, #15
 80096fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80096fe:	6020      	str	r0, [r4, #0]
 8009700:	e7c3      	b.n	800968a <__hexnan+0x7a>
 8009702:	2508      	movs	r5, #8
 8009704:	e7c1      	b.n	800968a <__hexnan+0x7a>
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0df      	beq.n	80096cc <__hexnan+0xbc>
 800970c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009710:	f1c3 0320 	rsb	r3, r3, #32
 8009714:	fa22 f303 	lsr.w	r3, r2, r3
 8009718:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800971c:	401a      	ands	r2, r3
 800971e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009722:	e7d3      	b.n	80096cc <__hexnan+0xbc>
 8009724:	3e04      	subs	r6, #4
 8009726:	e7d1      	b.n	80096cc <__hexnan+0xbc>
 8009728:	2004      	movs	r0, #4
 800972a:	b007      	add	sp, #28
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009730 <__locale_ctype_ptr_l>:
 8009730:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009734:	4770      	bx	lr

08009736 <__localeconv_l>:
 8009736:	30f0      	adds	r0, #240	; 0xf0
 8009738:	4770      	bx	lr

0800973a <__ascii_mbtowc>:
 800973a:	b082      	sub	sp, #8
 800973c:	b901      	cbnz	r1, 8009740 <__ascii_mbtowc+0x6>
 800973e:	a901      	add	r1, sp, #4
 8009740:	b142      	cbz	r2, 8009754 <__ascii_mbtowc+0x1a>
 8009742:	b14b      	cbz	r3, 8009758 <__ascii_mbtowc+0x1e>
 8009744:	7813      	ldrb	r3, [r2, #0]
 8009746:	600b      	str	r3, [r1, #0]
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	1c10      	adds	r0, r2, #0
 800974c:	bf18      	it	ne
 800974e:	2001      	movne	r0, #1
 8009750:	b002      	add	sp, #8
 8009752:	4770      	bx	lr
 8009754:	4610      	mov	r0, r2
 8009756:	e7fb      	b.n	8009750 <__ascii_mbtowc+0x16>
 8009758:	f06f 0001 	mvn.w	r0, #1
 800975c:	e7f8      	b.n	8009750 <__ascii_mbtowc+0x16>

0800975e <memcpy>:
 800975e:	b510      	push	{r4, lr}
 8009760:	1e43      	subs	r3, r0, #1
 8009762:	440a      	add	r2, r1
 8009764:	4291      	cmp	r1, r2
 8009766:	d100      	bne.n	800976a <memcpy+0xc>
 8009768:	bd10      	pop	{r4, pc}
 800976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009772:	e7f7      	b.n	8009764 <memcpy+0x6>

08009774 <_Balloc>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009778:	4604      	mov	r4, r0
 800977a:	460e      	mov	r6, r1
 800977c:	b93d      	cbnz	r5, 800978e <_Balloc+0x1a>
 800977e:	2010      	movs	r0, #16
 8009780:	f000 ff50 	bl	800a624 <malloc>
 8009784:	6260      	str	r0, [r4, #36]	; 0x24
 8009786:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800978a:	6005      	str	r5, [r0, #0]
 800978c:	60c5      	str	r5, [r0, #12]
 800978e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009790:	68eb      	ldr	r3, [r5, #12]
 8009792:	b183      	cbz	r3, 80097b6 <_Balloc+0x42>
 8009794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800979c:	b9b8      	cbnz	r0, 80097ce <_Balloc+0x5a>
 800979e:	2101      	movs	r1, #1
 80097a0:	fa01 f506 	lsl.w	r5, r1, r6
 80097a4:	1d6a      	adds	r2, r5, #5
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fbdb 	bl	8009f64 <_calloc_r>
 80097ae:	b160      	cbz	r0, 80097ca <_Balloc+0x56>
 80097b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80097b4:	e00e      	b.n	80097d4 <_Balloc+0x60>
 80097b6:	2221      	movs	r2, #33	; 0x21
 80097b8:	2104      	movs	r1, #4
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 fbd2 	bl	8009f64 <_calloc_r>
 80097c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c2:	60e8      	str	r0, [r5, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d1e4      	bne.n	8009794 <_Balloc+0x20>
 80097ca:	2000      	movs	r0, #0
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
 80097ce:	6802      	ldr	r2, [r0, #0]
 80097d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80097d4:	2300      	movs	r3, #0
 80097d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097da:	e7f7      	b.n	80097cc <_Balloc+0x58>

080097dc <_Bfree>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80097e0:	4606      	mov	r6, r0
 80097e2:	460d      	mov	r5, r1
 80097e4:	b93c      	cbnz	r4, 80097f6 <_Bfree+0x1a>
 80097e6:	2010      	movs	r0, #16
 80097e8:	f000 ff1c 	bl	800a624 <malloc>
 80097ec:	6270      	str	r0, [r6, #36]	; 0x24
 80097ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097f2:	6004      	str	r4, [r0, #0]
 80097f4:	60c4      	str	r4, [r0, #12]
 80097f6:	b13d      	cbz	r5, 8009808 <_Bfree+0x2c>
 80097f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097fa:	686a      	ldr	r2, [r5, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009802:	6029      	str	r1, [r5, #0]
 8009804:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009808:	bd70      	pop	{r4, r5, r6, pc}

0800980a <__multadd>:
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	461f      	mov	r7, r3
 8009810:	4606      	mov	r6, r0
 8009812:	460c      	mov	r4, r1
 8009814:	2300      	movs	r3, #0
 8009816:	690d      	ldr	r5, [r1, #16]
 8009818:	f101 0c14 	add.w	ip, r1, #20
 800981c:	f8dc 0000 	ldr.w	r0, [ip]
 8009820:	3301      	adds	r3, #1
 8009822:	b281      	uxth	r1, r0
 8009824:	fb02 7101 	mla	r1, r2, r1, r7
 8009828:	0c00      	lsrs	r0, r0, #16
 800982a:	0c0f      	lsrs	r7, r1, #16
 800982c:	fb02 7000 	mla	r0, r2, r0, r7
 8009830:	b289      	uxth	r1, r1
 8009832:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009836:	429d      	cmp	r5, r3
 8009838:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800983c:	f84c 1b04 	str.w	r1, [ip], #4
 8009840:	dcec      	bgt.n	800981c <__multadd+0x12>
 8009842:	b1d7      	cbz	r7, 800987a <__multadd+0x70>
 8009844:	68a3      	ldr	r3, [r4, #8]
 8009846:	42ab      	cmp	r3, r5
 8009848:	dc12      	bgt.n	8009870 <__multadd+0x66>
 800984a:	6861      	ldr	r1, [r4, #4]
 800984c:	4630      	mov	r0, r6
 800984e:	3101      	adds	r1, #1
 8009850:	f7ff ff90 	bl	8009774 <_Balloc>
 8009854:	4680      	mov	r8, r0
 8009856:	6922      	ldr	r2, [r4, #16]
 8009858:	f104 010c 	add.w	r1, r4, #12
 800985c:	3202      	adds	r2, #2
 800985e:	0092      	lsls	r2, r2, #2
 8009860:	300c      	adds	r0, #12
 8009862:	f7ff ff7c 	bl	800975e <memcpy>
 8009866:	4621      	mov	r1, r4
 8009868:	4630      	mov	r0, r6
 800986a:	f7ff ffb7 	bl	80097dc <_Bfree>
 800986e:	4644      	mov	r4, r8
 8009870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009874:	3501      	adds	r5, #1
 8009876:	615f      	str	r7, [r3, #20]
 8009878:	6125      	str	r5, [r4, #16]
 800987a:	4620      	mov	r0, r4
 800987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009880 <__s2b>:
 8009880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009884:	4615      	mov	r5, r2
 8009886:	2209      	movs	r2, #9
 8009888:	461f      	mov	r7, r3
 800988a:	3308      	adds	r3, #8
 800988c:	460c      	mov	r4, r1
 800988e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009892:	4606      	mov	r6, r0
 8009894:	2201      	movs	r2, #1
 8009896:	2100      	movs	r1, #0
 8009898:	429a      	cmp	r2, r3
 800989a:	db20      	blt.n	80098de <__s2b+0x5e>
 800989c:	4630      	mov	r0, r6
 800989e:	f7ff ff69 	bl	8009774 <_Balloc>
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	2d09      	cmp	r5, #9
 80098a6:	6143      	str	r3, [r0, #20]
 80098a8:	f04f 0301 	mov.w	r3, #1
 80098ac:	6103      	str	r3, [r0, #16]
 80098ae:	dd19      	ble.n	80098e4 <__s2b+0x64>
 80098b0:	f104 0809 	add.w	r8, r4, #9
 80098b4:	46c1      	mov	r9, r8
 80098b6:	442c      	add	r4, r5
 80098b8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80098bc:	4601      	mov	r1, r0
 80098be:	3b30      	subs	r3, #48	; 0x30
 80098c0:	220a      	movs	r2, #10
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ffa1 	bl	800980a <__multadd>
 80098c8:	45a1      	cmp	r9, r4
 80098ca:	d1f5      	bne.n	80098b8 <__s2b+0x38>
 80098cc:	eb08 0405 	add.w	r4, r8, r5
 80098d0:	3c08      	subs	r4, #8
 80098d2:	1b2d      	subs	r5, r5, r4
 80098d4:	1963      	adds	r3, r4, r5
 80098d6:	42bb      	cmp	r3, r7
 80098d8:	db07      	blt.n	80098ea <__s2b+0x6a>
 80098da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098de:	0052      	lsls	r2, r2, #1
 80098e0:	3101      	adds	r1, #1
 80098e2:	e7d9      	b.n	8009898 <__s2b+0x18>
 80098e4:	340a      	adds	r4, #10
 80098e6:	2509      	movs	r5, #9
 80098e8:	e7f3      	b.n	80098d2 <__s2b+0x52>
 80098ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098ee:	4601      	mov	r1, r0
 80098f0:	3b30      	subs	r3, #48	; 0x30
 80098f2:	220a      	movs	r2, #10
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff ff88 	bl	800980a <__multadd>
 80098fa:	e7eb      	b.n	80098d4 <__s2b+0x54>

080098fc <__hi0bits>:
 80098fc:	0c02      	lsrs	r2, r0, #16
 80098fe:	0412      	lsls	r2, r2, #16
 8009900:	4603      	mov	r3, r0
 8009902:	b9b2      	cbnz	r2, 8009932 <__hi0bits+0x36>
 8009904:	0403      	lsls	r3, r0, #16
 8009906:	2010      	movs	r0, #16
 8009908:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800990c:	bf04      	itt	eq
 800990e:	021b      	lsleq	r3, r3, #8
 8009910:	3008      	addeq	r0, #8
 8009912:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009916:	bf04      	itt	eq
 8009918:	011b      	lsleq	r3, r3, #4
 800991a:	3004      	addeq	r0, #4
 800991c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009920:	bf04      	itt	eq
 8009922:	009b      	lsleq	r3, r3, #2
 8009924:	3002      	addeq	r0, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	db06      	blt.n	8009938 <__hi0bits+0x3c>
 800992a:	005b      	lsls	r3, r3, #1
 800992c:	d503      	bpl.n	8009936 <__hi0bits+0x3a>
 800992e:	3001      	adds	r0, #1
 8009930:	4770      	bx	lr
 8009932:	2000      	movs	r0, #0
 8009934:	e7e8      	b.n	8009908 <__hi0bits+0xc>
 8009936:	2020      	movs	r0, #32
 8009938:	4770      	bx	lr

0800993a <__lo0bits>:
 800993a:	6803      	ldr	r3, [r0, #0]
 800993c:	4601      	mov	r1, r0
 800993e:	f013 0207 	ands.w	r2, r3, #7
 8009942:	d00b      	beq.n	800995c <__lo0bits+0x22>
 8009944:	07da      	lsls	r2, r3, #31
 8009946:	d423      	bmi.n	8009990 <__lo0bits+0x56>
 8009948:	0798      	lsls	r0, r3, #30
 800994a:	bf49      	itett	mi
 800994c:	085b      	lsrmi	r3, r3, #1
 800994e:	089b      	lsrpl	r3, r3, #2
 8009950:	2001      	movmi	r0, #1
 8009952:	600b      	strmi	r3, [r1, #0]
 8009954:	bf5c      	itt	pl
 8009956:	600b      	strpl	r3, [r1, #0]
 8009958:	2002      	movpl	r0, #2
 800995a:	4770      	bx	lr
 800995c:	b298      	uxth	r0, r3
 800995e:	b9a8      	cbnz	r0, 800998c <__lo0bits+0x52>
 8009960:	2010      	movs	r0, #16
 8009962:	0c1b      	lsrs	r3, r3, #16
 8009964:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009968:	bf04      	itt	eq
 800996a:	0a1b      	lsreq	r3, r3, #8
 800996c:	3008      	addeq	r0, #8
 800996e:	071a      	lsls	r2, r3, #28
 8009970:	bf04      	itt	eq
 8009972:	091b      	lsreq	r3, r3, #4
 8009974:	3004      	addeq	r0, #4
 8009976:	079a      	lsls	r2, r3, #30
 8009978:	bf04      	itt	eq
 800997a:	089b      	lsreq	r3, r3, #2
 800997c:	3002      	addeq	r0, #2
 800997e:	07da      	lsls	r2, r3, #31
 8009980:	d402      	bmi.n	8009988 <__lo0bits+0x4e>
 8009982:	085b      	lsrs	r3, r3, #1
 8009984:	d006      	beq.n	8009994 <__lo0bits+0x5a>
 8009986:	3001      	adds	r0, #1
 8009988:	600b      	str	r3, [r1, #0]
 800998a:	4770      	bx	lr
 800998c:	4610      	mov	r0, r2
 800998e:	e7e9      	b.n	8009964 <__lo0bits+0x2a>
 8009990:	2000      	movs	r0, #0
 8009992:	4770      	bx	lr
 8009994:	2020      	movs	r0, #32
 8009996:	4770      	bx	lr

08009998 <__i2b>:
 8009998:	b510      	push	{r4, lr}
 800999a:	460c      	mov	r4, r1
 800999c:	2101      	movs	r1, #1
 800999e:	f7ff fee9 	bl	8009774 <_Balloc>
 80099a2:	2201      	movs	r2, #1
 80099a4:	6144      	str	r4, [r0, #20]
 80099a6:	6102      	str	r2, [r0, #16]
 80099a8:	bd10      	pop	{r4, pc}

080099aa <__multiply>:
 80099aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ae:	4614      	mov	r4, r2
 80099b0:	690a      	ldr	r2, [r1, #16]
 80099b2:	6923      	ldr	r3, [r4, #16]
 80099b4:	4688      	mov	r8, r1
 80099b6:	429a      	cmp	r2, r3
 80099b8:	bfbe      	ittt	lt
 80099ba:	460b      	movlt	r3, r1
 80099bc:	46a0      	movlt	r8, r4
 80099be:	461c      	movlt	r4, r3
 80099c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099d0:	eb07 0609 	add.w	r6, r7, r9
 80099d4:	42b3      	cmp	r3, r6
 80099d6:	bfb8      	it	lt
 80099d8:	3101      	addlt	r1, #1
 80099da:	f7ff fecb 	bl	8009774 <_Balloc>
 80099de:	f100 0514 	add.w	r5, r0, #20
 80099e2:	462b      	mov	r3, r5
 80099e4:	2200      	movs	r2, #0
 80099e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80099ea:	4573      	cmp	r3, lr
 80099ec:	d316      	bcc.n	8009a1c <__multiply+0x72>
 80099ee:	f104 0214 	add.w	r2, r4, #20
 80099f2:	f108 0114 	add.w	r1, r8, #20
 80099f6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80099fa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	9201      	str	r2, [sp, #4]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d80c      	bhi.n	8009a22 <__multiply+0x78>
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	dd03      	ble.n	8009a14 <__multiply+0x6a>
 8009a0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d05d      	beq.n	8009ad0 <__multiply+0x126>
 8009a14:	6106      	str	r6, [r0, #16]
 8009a16:	b003      	add	sp, #12
 8009a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1c:	f843 2b04 	str.w	r2, [r3], #4
 8009a20:	e7e3      	b.n	80099ea <__multiply+0x40>
 8009a22:	f8b2 b000 	ldrh.w	fp, [r2]
 8009a26:	f1bb 0f00 	cmp.w	fp, #0
 8009a2a:	d023      	beq.n	8009a74 <__multiply+0xca>
 8009a2c:	4689      	mov	r9, r1
 8009a2e:	46ac      	mov	ip, r5
 8009a30:	f04f 0800 	mov.w	r8, #0
 8009a34:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a38:	f8dc a000 	ldr.w	sl, [ip]
 8009a3c:	b2a3      	uxth	r3, r4
 8009a3e:	fa1f fa8a 	uxth.w	sl, sl
 8009a42:	fb0b a303 	mla	r3, fp, r3, sl
 8009a46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a4a:	f8dc 4000 	ldr.w	r4, [ip]
 8009a4e:	4443      	add	r3, r8
 8009a50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a54:	fb0b 840a 	mla	r4, fp, sl, r8
 8009a58:	46e2      	mov	sl, ip
 8009a5a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a64:	454f      	cmp	r7, r9
 8009a66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8009a6e:	d82b      	bhi.n	8009ac8 <__multiply+0x11e>
 8009a70:	f8cc 8004 	str.w	r8, [ip, #4]
 8009a74:	9b01      	ldr	r3, [sp, #4]
 8009a76:	3204      	adds	r2, #4
 8009a78:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009a7c:	f1ba 0f00 	cmp.w	sl, #0
 8009a80:	d020      	beq.n	8009ac4 <__multiply+0x11a>
 8009a82:	4689      	mov	r9, r1
 8009a84:	46a8      	mov	r8, r5
 8009a86:	f04f 0b00 	mov.w	fp, #0
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a9a:	46c4      	mov	ip, r8
 8009a9c:	445c      	add	r4, fp
 8009a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8009aa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009aaa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009aae:	0c1b      	lsrs	r3, r3, #16
 8009ab0:	fb0a b303 	mla	r3, sl, r3, fp
 8009ab4:	454f      	cmp	r7, r9
 8009ab6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009aba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009abe:	d805      	bhi.n	8009acc <__multiply+0x122>
 8009ac0:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ac4:	3504      	adds	r5, #4
 8009ac6:	e79b      	b.n	8009a00 <__multiply+0x56>
 8009ac8:	46d4      	mov	ip, sl
 8009aca:	e7b3      	b.n	8009a34 <__multiply+0x8a>
 8009acc:	46e0      	mov	r8, ip
 8009ace:	e7dd      	b.n	8009a8c <__multiply+0xe2>
 8009ad0:	3e01      	subs	r6, #1
 8009ad2:	e799      	b.n	8009a08 <__multiply+0x5e>

08009ad4 <__pow5mult>:
 8009ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad8:	4615      	mov	r5, r2
 8009ada:	f012 0203 	ands.w	r2, r2, #3
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	d007      	beq.n	8009af4 <__pow5mult+0x20>
 8009ae4:	4c21      	ldr	r4, [pc, #132]	; (8009b6c <__pow5mult+0x98>)
 8009ae6:	3a01      	subs	r2, #1
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aee:	f7ff fe8c 	bl	800980a <__multadd>
 8009af2:	4607      	mov	r7, r0
 8009af4:	10ad      	asrs	r5, r5, #2
 8009af6:	d035      	beq.n	8009b64 <__pow5mult+0x90>
 8009af8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009afa:	b93c      	cbnz	r4, 8009b0c <__pow5mult+0x38>
 8009afc:	2010      	movs	r0, #16
 8009afe:	f000 fd91 	bl	800a624 <malloc>
 8009b02:	6270      	str	r0, [r6, #36]	; 0x24
 8009b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b08:	6004      	str	r4, [r0, #0]
 8009b0a:	60c4      	str	r4, [r0, #12]
 8009b0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b14:	b94c      	cbnz	r4, 8009b2a <__pow5mult+0x56>
 8009b16:	f240 2171 	movw	r1, #625	; 0x271
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7ff ff3c 	bl	8009998 <__i2b>
 8009b20:	2300      	movs	r3, #0
 8009b22:	4604      	mov	r4, r0
 8009b24:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b28:	6003      	str	r3, [r0, #0]
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	07eb      	lsls	r3, r5, #31
 8009b30:	d50a      	bpl.n	8009b48 <__pow5mult+0x74>
 8009b32:	4639      	mov	r1, r7
 8009b34:	4622      	mov	r2, r4
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7ff ff37 	bl	80099aa <__multiply>
 8009b3c:	4681      	mov	r9, r0
 8009b3e:	4639      	mov	r1, r7
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff fe4b 	bl	80097dc <_Bfree>
 8009b46:	464f      	mov	r7, r9
 8009b48:	106d      	asrs	r5, r5, #1
 8009b4a:	d00b      	beq.n	8009b64 <__pow5mult+0x90>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	b938      	cbnz	r0, 8009b60 <__pow5mult+0x8c>
 8009b50:	4622      	mov	r2, r4
 8009b52:	4621      	mov	r1, r4
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff ff28 	bl	80099aa <__multiply>
 8009b5a:	6020      	str	r0, [r4, #0]
 8009b5c:	f8c0 8000 	str.w	r8, [r0]
 8009b60:	4604      	mov	r4, r0
 8009b62:	e7e4      	b.n	8009b2e <__pow5mult+0x5a>
 8009b64:	4638      	mov	r0, r7
 8009b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800a9b0 	.word	0x0800a9b0

08009b70 <__lshift>:
 8009b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b74:	460c      	mov	r4, r1
 8009b76:	4607      	mov	r7, r0
 8009b78:	4616      	mov	r6, r2
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b80:	eb0a 0903 	add.w	r9, sl, r3
 8009b84:	6849      	ldr	r1, [r1, #4]
 8009b86:	68a3      	ldr	r3, [r4, #8]
 8009b88:	f109 0501 	add.w	r5, r9, #1
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	db32      	blt.n	8009bf6 <__lshift+0x86>
 8009b90:	4638      	mov	r0, r7
 8009b92:	f7ff fdef 	bl	8009774 <_Balloc>
 8009b96:	2300      	movs	r3, #0
 8009b98:	4680      	mov	r8, r0
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f100 0114 	add.w	r1, r0, #20
 8009ba0:	4553      	cmp	r3, sl
 8009ba2:	db2b      	blt.n	8009bfc <__lshift+0x8c>
 8009ba4:	6920      	ldr	r0, [r4, #16]
 8009ba6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009baa:	f104 0314 	add.w	r3, r4, #20
 8009bae:	f016 021f 	ands.w	r2, r6, #31
 8009bb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bb6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bba:	d025      	beq.n	8009c08 <__lshift+0x98>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	f1c2 0e20 	rsb	lr, r2, #32
 8009bc2:	468a      	mov	sl, r1
 8009bc4:	681e      	ldr	r6, [r3, #0]
 8009bc6:	4096      	lsls	r6, r2
 8009bc8:	4330      	orrs	r0, r6
 8009bca:	f84a 0b04 	str.w	r0, [sl], #4
 8009bce:	f853 0b04 	ldr.w	r0, [r3], #4
 8009bd2:	459c      	cmp	ip, r3
 8009bd4:	fa20 f00e 	lsr.w	r0, r0, lr
 8009bd8:	d814      	bhi.n	8009c04 <__lshift+0x94>
 8009bda:	6048      	str	r0, [r1, #4]
 8009bdc:	b108      	cbz	r0, 8009be2 <__lshift+0x72>
 8009bde:	f109 0502 	add.w	r5, r9, #2
 8009be2:	3d01      	subs	r5, #1
 8009be4:	4638      	mov	r0, r7
 8009be6:	f8c8 5010 	str.w	r5, [r8, #16]
 8009bea:	4621      	mov	r1, r4
 8009bec:	f7ff fdf6 	bl	80097dc <_Bfree>
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf6:	3101      	adds	r1, #1
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	e7c7      	b.n	8009b8c <__lshift+0x1c>
 8009bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009c00:	3301      	adds	r3, #1
 8009c02:	e7cd      	b.n	8009ba0 <__lshift+0x30>
 8009c04:	4651      	mov	r1, sl
 8009c06:	e7dc      	b.n	8009bc2 <__lshift+0x52>
 8009c08:	3904      	subs	r1, #4
 8009c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0e:	459c      	cmp	ip, r3
 8009c10:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c14:	d8f9      	bhi.n	8009c0a <__lshift+0x9a>
 8009c16:	e7e4      	b.n	8009be2 <__lshift+0x72>

08009c18 <__mcmp>:
 8009c18:	6903      	ldr	r3, [r0, #16]
 8009c1a:	690a      	ldr	r2, [r1, #16]
 8009c1c:	b530      	push	{r4, r5, lr}
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	d10c      	bne.n	8009c3c <__mcmp+0x24>
 8009c22:	0092      	lsls	r2, r2, #2
 8009c24:	3014      	adds	r0, #20
 8009c26:	3114      	adds	r1, #20
 8009c28:	1884      	adds	r4, r0, r2
 8009c2a:	4411      	add	r1, r2
 8009c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c34:	4295      	cmp	r5, r2
 8009c36:	d003      	beq.n	8009c40 <__mcmp+0x28>
 8009c38:	d305      	bcc.n	8009c46 <__mcmp+0x2e>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	bd30      	pop	{r4, r5, pc}
 8009c40:	42a0      	cmp	r0, r4
 8009c42:	d3f3      	bcc.n	8009c2c <__mcmp+0x14>
 8009c44:	e7fa      	b.n	8009c3c <__mcmp+0x24>
 8009c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c4a:	e7f7      	b.n	8009c3c <__mcmp+0x24>

08009c4c <__mdiff>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	460d      	mov	r5, r1
 8009c52:	4607      	mov	r7, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4628      	mov	r0, r5
 8009c58:	4614      	mov	r4, r2
 8009c5a:	f7ff ffdd 	bl	8009c18 <__mcmp>
 8009c5e:	1e06      	subs	r6, r0, #0
 8009c60:	d108      	bne.n	8009c74 <__mdiff+0x28>
 8009c62:	4631      	mov	r1, r6
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7ff fd85 	bl	8009774 <_Balloc>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	bfa4      	itt	ge
 8009c76:	4623      	movge	r3, r4
 8009c78:	462c      	movge	r4, r5
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	bfa6      	itte	ge
 8009c80:	461d      	movge	r5, r3
 8009c82:	2600      	movge	r6, #0
 8009c84:	2601      	movlt	r6, #1
 8009c86:	f7ff fd75 	bl	8009774 <_Balloc>
 8009c8a:	f04f 0e00 	mov.w	lr, #0
 8009c8e:	60c6      	str	r6, [r0, #12]
 8009c90:	692b      	ldr	r3, [r5, #16]
 8009c92:	6926      	ldr	r6, [r4, #16]
 8009c94:	f104 0214 	add.w	r2, r4, #20
 8009c98:	f105 0914 	add.w	r9, r5, #20
 8009c9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009ca0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ca4:	f100 0114 	add.w	r1, r0, #20
 8009ca8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009cac:	f859 5b04 	ldr.w	r5, [r9], #4
 8009cb0:	fa1f f38a 	uxth.w	r3, sl
 8009cb4:	4473      	add	r3, lr
 8009cb6:	b2ac      	uxth	r4, r5
 8009cb8:	1b1b      	subs	r3, r3, r4
 8009cba:	0c2c      	lsrs	r4, r5, #16
 8009cbc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009cc0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009cca:	45c8      	cmp	r8, r9
 8009ccc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009cd0:	4694      	mov	ip, r2
 8009cd2:	f841 4b04 	str.w	r4, [r1], #4
 8009cd6:	d8e7      	bhi.n	8009ca8 <__mdiff+0x5c>
 8009cd8:	45bc      	cmp	ip, r7
 8009cda:	d304      	bcc.n	8009ce6 <__mdiff+0x9a>
 8009cdc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ce0:	b183      	cbz	r3, 8009d04 <__mdiff+0xb8>
 8009ce2:	6106      	str	r6, [r0, #16]
 8009ce4:	e7c4      	b.n	8009c70 <__mdiff+0x24>
 8009ce6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009cea:	b2a2      	uxth	r2, r4
 8009cec:	4472      	add	r2, lr
 8009cee:	1413      	asrs	r3, r2, #16
 8009cf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cf4:	b292      	uxth	r2, r2
 8009cf6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cfa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009cfe:	f841 2b04 	str.w	r2, [r1], #4
 8009d02:	e7e9      	b.n	8009cd8 <__mdiff+0x8c>
 8009d04:	3e01      	subs	r6, #1
 8009d06:	e7e9      	b.n	8009cdc <__mdiff+0x90>

08009d08 <__ulp>:
 8009d08:	4b10      	ldr	r3, [pc, #64]	; (8009d4c <__ulp+0x44>)
 8009d0a:	400b      	ands	r3, r1
 8009d0c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dd02      	ble.n	8009d1a <__ulp+0x12>
 8009d14:	2000      	movs	r0, #0
 8009d16:	4619      	mov	r1, r3
 8009d18:	4770      	bx	lr
 8009d1a:	425b      	negs	r3, r3
 8009d1c:	151b      	asrs	r3, r3, #20
 8009d1e:	2b13      	cmp	r3, #19
 8009d20:	f04f 0000 	mov.w	r0, #0
 8009d24:	f04f 0100 	mov.w	r1, #0
 8009d28:	dc04      	bgt.n	8009d34 <__ulp+0x2c>
 8009d2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009d2e:	fa42 f103 	asr.w	r1, r2, r3
 8009d32:	4770      	bx	lr
 8009d34:	2201      	movs	r2, #1
 8009d36:	3b14      	subs	r3, #20
 8009d38:	2b1e      	cmp	r3, #30
 8009d3a:	bfce      	itee	gt
 8009d3c:	4613      	movgt	r3, r2
 8009d3e:	f1c3 031f 	rsble	r3, r3, #31
 8009d42:	fa02 f303 	lslle.w	r3, r2, r3
 8009d46:	4618      	mov	r0, r3
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	7ff00000 	.word	0x7ff00000

08009d50 <__b2d>:
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	6907      	ldr	r7, [r0, #16]
 8009d56:	f100 0914 	add.w	r9, r0, #20
 8009d5a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009d5e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009d62:	f1a7 0804 	sub.w	r8, r7, #4
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7ff fdc8 	bl	80098fc <__hi0bits>
 8009d6c:	f1c0 0320 	rsb	r3, r0, #32
 8009d70:	280a      	cmp	r0, #10
 8009d72:	600b      	str	r3, [r1, #0]
 8009d74:	491e      	ldr	r1, [pc, #120]	; (8009df0 <__b2d+0xa0>)
 8009d76:	dc17      	bgt.n	8009da8 <__b2d+0x58>
 8009d78:	45c1      	cmp	r9, r8
 8009d7a:	bf28      	it	cs
 8009d7c:	2200      	movcs	r2, #0
 8009d7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d82:	fa26 f30c 	lsr.w	r3, r6, ip
 8009d86:	bf38      	it	cc
 8009d88:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009d8c:	ea43 0501 	orr.w	r5, r3, r1
 8009d90:	f100 0315 	add.w	r3, r0, #21
 8009d94:	fa06 f303 	lsl.w	r3, r6, r3
 8009d98:	fa22 f20c 	lsr.w	r2, r2, ip
 8009d9c:	ea43 0402 	orr.w	r4, r3, r2
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da8:	45c1      	cmp	r9, r8
 8009daa:	bf3a      	itte	cc
 8009dac:	f1a7 0808 	subcc.w	r8, r7, #8
 8009db0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009db4:	2200      	movcs	r2, #0
 8009db6:	f1b0 030b 	subs.w	r3, r0, #11
 8009dba:	d015      	beq.n	8009de8 <__b2d+0x98>
 8009dbc:	409e      	lsls	r6, r3
 8009dbe:	f1c3 0720 	rsb	r7, r3, #32
 8009dc2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009dc6:	fa22 f107 	lsr.w	r1, r2, r7
 8009dca:	45c8      	cmp	r8, r9
 8009dcc:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009dd0:	ea46 0501 	orr.w	r5, r6, r1
 8009dd4:	bf94      	ite	ls
 8009dd6:	2100      	movls	r1, #0
 8009dd8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009ddc:	fa02 f003 	lsl.w	r0, r2, r3
 8009de0:	40f9      	lsrs	r1, r7
 8009de2:	ea40 0401 	orr.w	r4, r0, r1
 8009de6:	e7db      	b.n	8009da0 <__b2d+0x50>
 8009de8:	ea46 0501 	orr.w	r5, r6, r1
 8009dec:	4614      	mov	r4, r2
 8009dee:	e7d7      	b.n	8009da0 <__b2d+0x50>
 8009df0:	3ff00000 	.word	0x3ff00000

08009df4 <__d2b>:
 8009df4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009df8:	461c      	mov	r4, r3
 8009dfa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009dfe:	2101      	movs	r1, #1
 8009e00:	4690      	mov	r8, r2
 8009e02:	f7ff fcb7 	bl	8009774 <_Balloc>
 8009e06:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009e0a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009e0e:	4607      	mov	r7, r0
 8009e10:	bb34      	cbnz	r4, 8009e60 <__d2b+0x6c>
 8009e12:	9201      	str	r2, [sp, #4]
 8009e14:	f1b8 0200 	subs.w	r2, r8, #0
 8009e18:	d027      	beq.n	8009e6a <__d2b+0x76>
 8009e1a:	a802      	add	r0, sp, #8
 8009e1c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009e20:	f7ff fd8b 	bl	800993a <__lo0bits>
 8009e24:	9900      	ldr	r1, [sp, #0]
 8009e26:	b1f0      	cbz	r0, 8009e66 <__d2b+0x72>
 8009e28:	9a01      	ldr	r2, [sp, #4]
 8009e2a:	f1c0 0320 	rsb	r3, r0, #32
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	430b      	orrs	r3, r1
 8009e34:	40c2      	lsrs	r2, r0
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	9201      	str	r2, [sp, #4]
 8009e3a:	9b01      	ldr	r3, [sp, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	bf14      	ite	ne
 8009e40:	2102      	movne	r1, #2
 8009e42:	2101      	moveq	r1, #1
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	6139      	str	r1, [r7, #16]
 8009e48:	b1c4      	cbz	r4, 8009e7c <__d2b+0x88>
 8009e4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009e4e:	4404      	add	r4, r0
 8009e50:	6034      	str	r4, [r6, #0]
 8009e52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e56:	6028      	str	r0, [r5, #0]
 8009e58:	4638      	mov	r0, r7
 8009e5a:	b002      	add	sp, #8
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009e64:	e7d5      	b.n	8009e12 <__d2b+0x1e>
 8009e66:	6179      	str	r1, [r7, #20]
 8009e68:	e7e7      	b.n	8009e3a <__d2b+0x46>
 8009e6a:	a801      	add	r0, sp, #4
 8009e6c:	f7ff fd65 	bl	800993a <__lo0bits>
 8009e70:	2101      	movs	r1, #1
 8009e72:	9b01      	ldr	r3, [sp, #4]
 8009e74:	6139      	str	r1, [r7, #16]
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	3020      	adds	r0, #32
 8009e7a:	e7e5      	b.n	8009e48 <__d2b+0x54>
 8009e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e80:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009e84:	6030      	str	r0, [r6, #0]
 8009e86:	6918      	ldr	r0, [r3, #16]
 8009e88:	f7ff fd38 	bl	80098fc <__hi0bits>
 8009e8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009e90:	e7e1      	b.n	8009e56 <__d2b+0x62>

08009e92 <__ratio>:
 8009e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e96:	4688      	mov	r8, r1
 8009e98:	4669      	mov	r1, sp
 8009e9a:	4681      	mov	r9, r0
 8009e9c:	f7ff ff58 	bl	8009d50 <__b2d>
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	a901      	add	r1, sp, #4
 8009eaa:	f7ff ff51 	bl	8009d50 <__b2d>
 8009eae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009eb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	eba3 0c02 	sub.w	ip, r3, r2
 8009ebc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ec0:	1a9b      	subs	r3, r3, r2
 8009ec2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfd5      	itete	le
 8009eca:	460a      	movle	r2, r1
 8009ecc:	463a      	movgt	r2, r7
 8009ece:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ed2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009ed6:	bfd8      	it	le
 8009ed8:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009edc:	462b      	mov	r3, r5
 8009ede:	4602      	mov	r2, r0
 8009ee0:	4659      	mov	r1, fp
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7f6 fc22 	bl	800072c <__aeabi_ddiv>
 8009ee8:	b003      	add	sp, #12
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eee <__copybits>:
 8009eee:	3901      	subs	r1, #1
 8009ef0:	b510      	push	{r4, lr}
 8009ef2:	1149      	asrs	r1, r1, #5
 8009ef4:	6914      	ldr	r4, [r2, #16]
 8009ef6:	3101      	adds	r1, #1
 8009ef8:	f102 0314 	add.w	r3, r2, #20
 8009efc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	4602      	mov	r2, r0
 8009f08:	d303      	bcc.n	8009f12 <__copybits+0x24>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	428a      	cmp	r2, r1
 8009f0e:	d305      	bcc.n	8009f1c <__copybits+0x2e>
 8009f10:	bd10      	pop	{r4, pc}
 8009f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f16:	f840 2b04 	str.w	r2, [r0], #4
 8009f1a:	e7f3      	b.n	8009f04 <__copybits+0x16>
 8009f1c:	f842 3b04 	str.w	r3, [r2], #4
 8009f20:	e7f4      	b.n	8009f0c <__copybits+0x1e>

08009f22 <__any_on>:
 8009f22:	f100 0214 	add.w	r2, r0, #20
 8009f26:	6900      	ldr	r0, [r0, #16]
 8009f28:	114b      	asrs	r3, r1, #5
 8009f2a:	4298      	cmp	r0, r3
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	db11      	blt.n	8009f54 <__any_on+0x32>
 8009f30:	dd0a      	ble.n	8009f48 <__any_on+0x26>
 8009f32:	f011 011f 	ands.w	r1, r1, #31
 8009f36:	d007      	beq.n	8009f48 <__any_on+0x26>
 8009f38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f3c:	fa24 f001 	lsr.w	r0, r4, r1
 8009f40:	fa00 f101 	lsl.w	r1, r0, r1
 8009f44:	428c      	cmp	r4, r1
 8009f46:	d10b      	bne.n	8009f60 <__any_on+0x3e>
 8009f48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d803      	bhi.n	8009f58 <__any_on+0x36>
 8009f50:	2000      	movs	r0, #0
 8009f52:	bd10      	pop	{r4, pc}
 8009f54:	4603      	mov	r3, r0
 8009f56:	e7f7      	b.n	8009f48 <__any_on+0x26>
 8009f58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	d0f5      	beq.n	8009f4c <__any_on+0x2a>
 8009f60:	2001      	movs	r0, #1
 8009f62:	e7f6      	b.n	8009f52 <__any_on+0x30>

08009f64 <_calloc_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	fb02 f401 	mul.w	r4, r2, r1
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	f000 f808 	bl	8009f80 <_malloc_r>
 8009f70:	4605      	mov	r5, r0
 8009f72:	b118      	cbz	r0, 8009f7c <_calloc_r+0x18>
 8009f74:	4622      	mov	r2, r4
 8009f76:	2100      	movs	r1, #0
 8009f78:	f7fe f994 	bl	80082a4 <memset>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}

08009f80 <_malloc_r>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	1ccd      	adds	r5, r1, #3
 8009f84:	f025 0503 	bic.w	r5, r5, #3
 8009f88:	3508      	adds	r5, #8
 8009f8a:	2d0c      	cmp	r5, #12
 8009f8c:	bf38      	it	cc
 8009f8e:	250c      	movcc	r5, #12
 8009f90:	2d00      	cmp	r5, #0
 8009f92:	4606      	mov	r6, r0
 8009f94:	db01      	blt.n	8009f9a <_malloc_r+0x1a>
 8009f96:	42a9      	cmp	r1, r5
 8009f98:	d903      	bls.n	8009fa2 <_malloc_r+0x22>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
 8009fa2:	f000 fb6e 	bl	800a682 <__malloc_lock>
 8009fa6:	4a21      	ldr	r2, [pc, #132]	; (800a02c <_malloc_r+0xac>)
 8009fa8:	6814      	ldr	r4, [r2, #0]
 8009faa:	4621      	mov	r1, r4
 8009fac:	b991      	cbnz	r1, 8009fd4 <_malloc_r+0x54>
 8009fae:	4c20      	ldr	r4, [pc, #128]	; (800a030 <_malloc_r+0xb0>)
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	b91b      	cbnz	r3, 8009fbc <_malloc_r+0x3c>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f000 fb17 	bl	800a5e8 <_sbrk_r>
 8009fba:	6020      	str	r0, [r4, #0]
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f000 fb12 	bl	800a5e8 <_sbrk_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d124      	bne.n	800a012 <_malloc_r+0x92>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	4630      	mov	r0, r6
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	f000 fb59 	bl	800a684 <__malloc_unlock>
 8009fd2:	e7e4      	b.n	8009f9e <_malloc_r+0x1e>
 8009fd4:	680b      	ldr	r3, [r1, #0]
 8009fd6:	1b5b      	subs	r3, r3, r5
 8009fd8:	d418      	bmi.n	800a00c <_malloc_r+0x8c>
 8009fda:	2b0b      	cmp	r3, #11
 8009fdc:	d90f      	bls.n	8009ffe <_malloc_r+0x7e>
 8009fde:	600b      	str	r3, [r1, #0]
 8009fe0:	18cc      	adds	r4, r1, r3
 8009fe2:	50cd      	str	r5, [r1, r3]
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 fb4d 	bl	800a684 <__malloc_unlock>
 8009fea:	f104 000b 	add.w	r0, r4, #11
 8009fee:	1d23      	adds	r3, r4, #4
 8009ff0:	f020 0007 	bic.w	r0, r0, #7
 8009ff4:	1ac3      	subs	r3, r0, r3
 8009ff6:	d0d3      	beq.n	8009fa0 <_malloc_r+0x20>
 8009ff8:	425a      	negs	r2, r3
 8009ffa:	50e2      	str	r2, [r4, r3]
 8009ffc:	e7d0      	b.n	8009fa0 <_malloc_r+0x20>
 8009ffe:	684b      	ldr	r3, [r1, #4]
 800a000:	428c      	cmp	r4, r1
 800a002:	bf16      	itet	ne
 800a004:	6063      	strne	r3, [r4, #4]
 800a006:	6013      	streq	r3, [r2, #0]
 800a008:	460c      	movne	r4, r1
 800a00a:	e7eb      	b.n	8009fe4 <_malloc_r+0x64>
 800a00c:	460c      	mov	r4, r1
 800a00e:	6849      	ldr	r1, [r1, #4]
 800a010:	e7cc      	b.n	8009fac <_malloc_r+0x2c>
 800a012:	1cc4      	adds	r4, r0, #3
 800a014:	f024 0403 	bic.w	r4, r4, #3
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d005      	beq.n	800a028 <_malloc_r+0xa8>
 800a01c:	1a21      	subs	r1, r4, r0
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 fae2 	bl	800a5e8 <_sbrk_r>
 800a024:	3001      	adds	r0, #1
 800a026:	d0cf      	beq.n	8009fc8 <_malloc_r+0x48>
 800a028:	6025      	str	r5, [r4, #0]
 800a02a:	e7db      	b.n	8009fe4 <_malloc_r+0x64>
 800a02c:	20000594 	.word	0x20000594
 800a030:	20000598 	.word	0x20000598

0800a034 <__ssputs_r>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	688e      	ldr	r6, [r1, #8]
 800a03a:	4682      	mov	sl, r0
 800a03c:	429e      	cmp	r6, r3
 800a03e:	460c      	mov	r4, r1
 800a040:	4690      	mov	r8, r2
 800a042:	4699      	mov	r9, r3
 800a044:	d837      	bhi.n	800a0b6 <__ssputs_r+0x82>
 800a046:	898a      	ldrh	r2, [r1, #12]
 800a048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a04c:	d031      	beq.n	800a0b2 <__ssputs_r+0x7e>
 800a04e:	2302      	movs	r3, #2
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	6909      	ldr	r1, [r1, #16]
 800a054:	1a6f      	subs	r7, r5, r1
 800a056:	6965      	ldr	r5, [r4, #20]
 800a058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a05c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a060:	f109 0301 	add.w	r3, r9, #1
 800a064:	443b      	add	r3, r7
 800a066:	429d      	cmp	r5, r3
 800a068:	bf38      	it	cc
 800a06a:	461d      	movcc	r5, r3
 800a06c:	0553      	lsls	r3, r2, #21
 800a06e:	d530      	bpl.n	800a0d2 <__ssputs_r+0x9e>
 800a070:	4629      	mov	r1, r5
 800a072:	f7ff ff85 	bl	8009f80 <_malloc_r>
 800a076:	4606      	mov	r6, r0
 800a078:	b950      	cbnz	r0, 800a090 <__ssputs_r+0x5c>
 800a07a:	230c      	movs	r3, #12
 800a07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a080:	f8ca 3000 	str.w	r3, [sl]
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a090:	463a      	mov	r2, r7
 800a092:	6921      	ldr	r1, [r4, #16]
 800a094:	f7ff fb63 	bl	800975e <memcpy>
 800a098:	89a3      	ldrh	r3, [r4, #12]
 800a09a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	6126      	str	r6, [r4, #16]
 800a0a6:	443e      	add	r6, r7
 800a0a8:	6026      	str	r6, [r4, #0]
 800a0aa:	464e      	mov	r6, r9
 800a0ac:	6165      	str	r5, [r4, #20]
 800a0ae:	1bed      	subs	r5, r5, r7
 800a0b0:	60a5      	str	r5, [r4, #8]
 800a0b2:	454e      	cmp	r6, r9
 800a0b4:	d900      	bls.n	800a0b8 <__ssputs_r+0x84>
 800a0b6:	464e      	mov	r6, r9
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	4641      	mov	r1, r8
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	f000 fac7 	bl	800a650 <memmove>
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	1b9b      	subs	r3, r3, r6
 800a0c8:	60a3      	str	r3, [r4, #8]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	441e      	add	r6, r3
 800a0ce:	6026      	str	r6, [r4, #0]
 800a0d0:	e7dc      	b.n	800a08c <__ssputs_r+0x58>
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	f000 fb24 	bl	800a720 <_realloc_r>
 800a0d8:	4606      	mov	r6, r0
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d1e2      	bne.n	800a0a4 <__ssputs_r+0x70>
 800a0de:	6921      	ldr	r1, [r4, #16]
 800a0e0:	4650      	mov	r0, sl
 800a0e2:	f000 fad1 	bl	800a688 <_free_r>
 800a0e6:	e7c8      	b.n	800a07a <__ssputs_r+0x46>

0800a0e8 <_svfiprintf_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	461d      	mov	r5, r3
 800a0ee:	898b      	ldrh	r3, [r1, #12]
 800a0f0:	b09d      	sub	sp, #116	; 0x74
 800a0f2:	061f      	lsls	r7, r3, #24
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	4616      	mov	r6, r2
 800a0fa:	d50f      	bpl.n	800a11c <_svfiprintf_r+0x34>
 800a0fc:	690b      	ldr	r3, [r1, #16]
 800a0fe:	b96b      	cbnz	r3, 800a11c <_svfiprintf_r+0x34>
 800a100:	2140      	movs	r1, #64	; 0x40
 800a102:	f7ff ff3d 	bl	8009f80 <_malloc_r>
 800a106:	6020      	str	r0, [r4, #0]
 800a108:	6120      	str	r0, [r4, #16]
 800a10a:	b928      	cbnz	r0, 800a118 <_svfiprintf_r+0x30>
 800a10c:	230c      	movs	r3, #12
 800a10e:	f8c8 3000 	str.w	r3, [r8]
 800a112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a116:	e0c8      	b.n	800a2aa <_svfiprintf_r+0x1c2>
 800a118:	2340      	movs	r3, #64	; 0x40
 800a11a:	6163      	str	r3, [r4, #20]
 800a11c:	2300      	movs	r3, #0
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	2320      	movs	r3, #32
 800a122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a126:	2330      	movs	r3, #48	; 0x30
 800a128:	f04f 0b01 	mov.w	fp, #1
 800a12c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a130:	9503      	str	r5, [sp, #12]
 800a132:	4637      	mov	r7, r6
 800a134:	463d      	mov	r5, r7
 800a136:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a13a:	b10b      	cbz	r3, 800a140 <_svfiprintf_r+0x58>
 800a13c:	2b25      	cmp	r3, #37	; 0x25
 800a13e:	d13e      	bne.n	800a1be <_svfiprintf_r+0xd6>
 800a140:	ebb7 0a06 	subs.w	sl, r7, r6
 800a144:	d00b      	beq.n	800a15e <_svfiprintf_r+0x76>
 800a146:	4653      	mov	r3, sl
 800a148:	4632      	mov	r2, r6
 800a14a:	4621      	mov	r1, r4
 800a14c:	4640      	mov	r0, r8
 800a14e:	f7ff ff71 	bl	800a034 <__ssputs_r>
 800a152:	3001      	adds	r0, #1
 800a154:	f000 80a4 	beq.w	800a2a0 <_svfiprintf_r+0x1b8>
 800a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15a:	4453      	add	r3, sl
 800a15c:	9309      	str	r3, [sp, #36]	; 0x24
 800a15e:	783b      	ldrb	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 809d 	beq.w	800a2a0 <_svfiprintf_r+0x1b8>
 800a166:	2300      	movs	r3, #0
 800a168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	9307      	str	r3, [sp, #28]
 800a174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a178:	931a      	str	r3, [sp, #104]	; 0x68
 800a17a:	462f      	mov	r7, r5
 800a17c:	2205      	movs	r2, #5
 800a17e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a182:	4850      	ldr	r0, [pc, #320]	; (800a2c4 <_svfiprintf_r+0x1dc>)
 800a184:	f000 fa56 	bl	800a634 <memchr>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	b9d0      	cbnz	r0, 800a1c2 <_svfiprintf_r+0xda>
 800a18c:	06d9      	lsls	r1, r3, #27
 800a18e:	bf44      	itt	mi
 800a190:	2220      	movmi	r2, #32
 800a192:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a196:	071a      	lsls	r2, r3, #28
 800a198:	bf44      	itt	mi
 800a19a:	222b      	movmi	r2, #43	; 0x2b
 800a19c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1a0:	782a      	ldrb	r2, [r5, #0]
 800a1a2:	2a2a      	cmp	r2, #42	; 0x2a
 800a1a4:	d015      	beq.n	800a1d2 <_svfiprintf_r+0xea>
 800a1a6:	462f      	mov	r7, r5
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	250a      	movs	r5, #10
 800a1ac:	9a07      	ldr	r2, [sp, #28]
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1b4:	3b30      	subs	r3, #48	; 0x30
 800a1b6:	2b09      	cmp	r3, #9
 800a1b8:	d94d      	bls.n	800a256 <_svfiprintf_r+0x16e>
 800a1ba:	b1b8      	cbz	r0, 800a1ec <_svfiprintf_r+0x104>
 800a1bc:	e00f      	b.n	800a1de <_svfiprintf_r+0xf6>
 800a1be:	462f      	mov	r7, r5
 800a1c0:	e7b8      	b.n	800a134 <_svfiprintf_r+0x4c>
 800a1c2:	4a40      	ldr	r2, [pc, #256]	; (800a2c4 <_svfiprintf_r+0x1dc>)
 800a1c4:	463d      	mov	r5, r7
 800a1c6:	1a80      	subs	r0, r0, r2
 800a1c8:	fa0b f000 	lsl.w	r0, fp, r0
 800a1cc:	4318      	orrs	r0, r3
 800a1ce:	9004      	str	r0, [sp, #16]
 800a1d0:	e7d3      	b.n	800a17a <_svfiprintf_r+0x92>
 800a1d2:	9a03      	ldr	r2, [sp, #12]
 800a1d4:	1d11      	adds	r1, r2, #4
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	9103      	str	r1, [sp, #12]
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	db01      	blt.n	800a1e2 <_svfiprintf_r+0xfa>
 800a1de:	9207      	str	r2, [sp, #28]
 800a1e0:	e004      	b.n	800a1ec <_svfiprintf_r+0x104>
 800a1e2:	4252      	negs	r2, r2
 800a1e4:	f043 0302 	orr.w	r3, r3, #2
 800a1e8:	9207      	str	r2, [sp, #28]
 800a1ea:	9304      	str	r3, [sp, #16]
 800a1ec:	783b      	ldrb	r3, [r7, #0]
 800a1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f0:	d10c      	bne.n	800a20c <_svfiprintf_r+0x124>
 800a1f2:	787b      	ldrb	r3, [r7, #1]
 800a1f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1f6:	d133      	bne.n	800a260 <_svfiprintf_r+0x178>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	3702      	adds	r7, #2
 800a1fc:	1d1a      	adds	r2, r3, #4
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	9203      	str	r2, [sp, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	bfb8      	it	lt
 800a206:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	4d2e      	ldr	r5, [pc, #184]	; (800a2c8 <_svfiprintf_r+0x1e0>)
 800a20e:	2203      	movs	r2, #3
 800a210:	7839      	ldrb	r1, [r7, #0]
 800a212:	4628      	mov	r0, r5
 800a214:	f000 fa0e 	bl	800a634 <memchr>
 800a218:	b138      	cbz	r0, 800a22a <_svfiprintf_r+0x142>
 800a21a:	2340      	movs	r3, #64	; 0x40
 800a21c:	1b40      	subs	r0, r0, r5
 800a21e:	fa03 f000 	lsl.w	r0, r3, r0
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	3701      	adds	r7, #1
 800a226:	4303      	orrs	r3, r0
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	7839      	ldrb	r1, [r7, #0]
 800a22c:	2206      	movs	r2, #6
 800a22e:	4827      	ldr	r0, [pc, #156]	; (800a2cc <_svfiprintf_r+0x1e4>)
 800a230:	1c7e      	adds	r6, r7, #1
 800a232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a236:	f000 f9fd 	bl	800a634 <memchr>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d038      	beq.n	800a2b0 <_svfiprintf_r+0x1c8>
 800a23e:	4b24      	ldr	r3, [pc, #144]	; (800a2d0 <_svfiprintf_r+0x1e8>)
 800a240:	bb13      	cbnz	r3, 800a288 <_svfiprintf_r+0x1a0>
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	3307      	adds	r3, #7
 800a246:	f023 0307 	bic.w	r3, r3, #7
 800a24a:	3308      	adds	r3, #8
 800a24c:	9303      	str	r3, [sp, #12]
 800a24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a250:	444b      	add	r3, r9
 800a252:	9309      	str	r3, [sp, #36]	; 0x24
 800a254:	e76d      	b.n	800a132 <_svfiprintf_r+0x4a>
 800a256:	fb05 3202 	mla	r2, r5, r2, r3
 800a25a:	2001      	movs	r0, #1
 800a25c:	460f      	mov	r7, r1
 800a25e:	e7a6      	b.n	800a1ae <_svfiprintf_r+0xc6>
 800a260:	2300      	movs	r3, #0
 800a262:	250a      	movs	r5, #10
 800a264:	4619      	mov	r1, r3
 800a266:	3701      	adds	r7, #1
 800a268:	9305      	str	r3, [sp, #20]
 800a26a:	4638      	mov	r0, r7
 800a26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a270:	3a30      	subs	r2, #48	; 0x30
 800a272:	2a09      	cmp	r2, #9
 800a274:	d903      	bls.n	800a27e <_svfiprintf_r+0x196>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0c8      	beq.n	800a20c <_svfiprintf_r+0x124>
 800a27a:	9105      	str	r1, [sp, #20]
 800a27c:	e7c6      	b.n	800a20c <_svfiprintf_r+0x124>
 800a27e:	fb05 2101 	mla	r1, r5, r1, r2
 800a282:	2301      	movs	r3, #1
 800a284:	4607      	mov	r7, r0
 800a286:	e7f0      	b.n	800a26a <_svfiprintf_r+0x182>
 800a288:	ab03      	add	r3, sp, #12
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4622      	mov	r2, r4
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <_svfiprintf_r+0x1ec>)
 800a290:	a904      	add	r1, sp, #16
 800a292:	4640      	mov	r0, r8
 800a294:	f3af 8000 	nop.w
 800a298:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a29c:	4681      	mov	r9, r0
 800a29e:	d1d6      	bne.n	800a24e <_svfiprintf_r+0x166>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	065b      	lsls	r3, r3, #25
 800a2a4:	f53f af35 	bmi.w	800a112 <_svfiprintf_r+0x2a>
 800a2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2aa:	b01d      	add	sp, #116	; 0x74
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <_svfiprintf_r+0x1ec>)
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f000 f882 	bl	800a3c4 <_printf_i>
 800a2c0:	e7ea      	b.n	800a298 <_svfiprintf_r+0x1b0>
 800a2c2:	bf00      	nop
 800a2c4:	0800a9bc 	.word	0x0800a9bc
 800a2c8:	0800a9c2 	.word	0x0800a9c2
 800a2cc:	0800a9c6 	.word	0x0800a9c6
 800a2d0:	00000000 	.word	0x00000000
 800a2d4:	0800a035 	.word	0x0800a035

0800a2d8 <_printf_common>:
 800a2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2dc:	4691      	mov	r9, r2
 800a2de:	461f      	mov	r7, r3
 800a2e0:	688a      	ldr	r2, [r1, #8]
 800a2e2:	690b      	ldr	r3, [r1, #16]
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	bfb8      	it	lt
 800a2ea:	4613      	movlt	r3, r2
 800a2ec:	f8c9 3000 	str.w	r3, [r9]
 800a2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2fa:	b112      	cbz	r2, 800a302 <_printf_common+0x2a>
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	f8c9 3000 	str.w	r3, [r9]
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	0699      	lsls	r1, r3, #26
 800a306:	bf42      	ittt	mi
 800a308:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a30c:	3302      	addmi	r3, #2
 800a30e:	f8c9 3000 	strmi.w	r3, [r9]
 800a312:	6825      	ldr	r5, [r4, #0]
 800a314:	f015 0506 	ands.w	r5, r5, #6
 800a318:	d107      	bne.n	800a32a <_printf_common+0x52>
 800a31a:	f104 0a19 	add.w	sl, r4, #25
 800a31e:	68e3      	ldr	r3, [r4, #12]
 800a320:	f8d9 2000 	ldr.w	r2, [r9]
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	42ab      	cmp	r3, r5
 800a328:	dc29      	bgt.n	800a37e <_printf_common+0xa6>
 800a32a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	3300      	adds	r3, #0
 800a332:	bf18      	it	ne
 800a334:	2301      	movne	r3, #1
 800a336:	0692      	lsls	r2, r2, #26
 800a338:	d42e      	bmi.n	800a398 <_printf_common+0xc0>
 800a33a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a33e:	4639      	mov	r1, r7
 800a340:	4630      	mov	r0, r6
 800a342:	47c0      	blx	r8
 800a344:	3001      	adds	r0, #1
 800a346:	d021      	beq.n	800a38c <_printf_common+0xb4>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	68e5      	ldr	r5, [r4, #12]
 800a34c:	f003 0306 	and.w	r3, r3, #6
 800a350:	2b04      	cmp	r3, #4
 800a352:	bf18      	it	ne
 800a354:	2500      	movne	r5, #0
 800a356:	f8d9 2000 	ldr.w	r2, [r9]
 800a35a:	f04f 0900 	mov.w	r9, #0
 800a35e:	bf08      	it	eq
 800a360:	1aad      	subeq	r5, r5, r2
 800a362:	68a3      	ldr	r3, [r4, #8]
 800a364:	6922      	ldr	r2, [r4, #16]
 800a366:	bf08      	it	eq
 800a368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a36c:	4293      	cmp	r3, r2
 800a36e:	bfc4      	itt	gt
 800a370:	1a9b      	subgt	r3, r3, r2
 800a372:	18ed      	addgt	r5, r5, r3
 800a374:	341a      	adds	r4, #26
 800a376:	454d      	cmp	r5, r9
 800a378:	d11a      	bne.n	800a3b0 <_printf_common+0xd8>
 800a37a:	2000      	movs	r0, #0
 800a37c:	e008      	b.n	800a390 <_printf_common+0xb8>
 800a37e:	2301      	movs	r3, #1
 800a380:	4652      	mov	r2, sl
 800a382:	4639      	mov	r1, r7
 800a384:	4630      	mov	r0, r6
 800a386:	47c0      	blx	r8
 800a388:	3001      	adds	r0, #1
 800a38a:	d103      	bne.n	800a394 <_printf_common+0xbc>
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a394:	3501      	adds	r5, #1
 800a396:	e7c2      	b.n	800a31e <_printf_common+0x46>
 800a398:	2030      	movs	r0, #48	; 0x30
 800a39a:	18e1      	adds	r1, r4, r3
 800a39c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3a6:	4422      	add	r2, r4
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3ae:	e7c4      	b.n	800a33a <_printf_common+0x62>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	47c0      	blx	r8
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	d0e6      	beq.n	800a38c <_printf_common+0xb4>
 800a3be:	f109 0901 	add.w	r9, r9, #1
 800a3c2:	e7d8      	b.n	800a376 <_printf_common+0x9e>

0800a3c4 <_printf_i>:
 800a3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	7e09      	ldrb	r1, [r1, #24]
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	296e      	cmp	r1, #110	; 0x6e
 800a3d4:	4617      	mov	r7, r2
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	4698      	mov	r8, r3
 800a3da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3dc:	f000 80b3 	beq.w	800a546 <_printf_i+0x182>
 800a3e0:	d822      	bhi.n	800a428 <_printf_i+0x64>
 800a3e2:	2963      	cmp	r1, #99	; 0x63
 800a3e4:	d036      	beq.n	800a454 <_printf_i+0x90>
 800a3e6:	d80a      	bhi.n	800a3fe <_printf_i+0x3a>
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	f000 80b9 	beq.w	800a560 <_printf_i+0x19c>
 800a3ee:	2958      	cmp	r1, #88	; 0x58
 800a3f0:	f000 8083 	beq.w	800a4fa <_printf_i+0x136>
 800a3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3fc:	e032      	b.n	800a464 <_printf_i+0xa0>
 800a3fe:	2964      	cmp	r1, #100	; 0x64
 800a400:	d001      	beq.n	800a406 <_printf_i+0x42>
 800a402:	2969      	cmp	r1, #105	; 0x69
 800a404:	d1f6      	bne.n	800a3f4 <_printf_i+0x30>
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	6813      	ldr	r3, [r2, #0]
 800a40a:	0605      	lsls	r5, r0, #24
 800a40c:	f103 0104 	add.w	r1, r3, #4
 800a410:	d52a      	bpl.n	800a468 <_printf_i+0xa4>
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6011      	str	r1, [r2, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	da03      	bge.n	800a422 <_printf_i+0x5e>
 800a41a:	222d      	movs	r2, #45	; 0x2d
 800a41c:	425b      	negs	r3, r3
 800a41e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a422:	486f      	ldr	r0, [pc, #444]	; (800a5e0 <_printf_i+0x21c>)
 800a424:	220a      	movs	r2, #10
 800a426:	e039      	b.n	800a49c <_printf_i+0xd8>
 800a428:	2973      	cmp	r1, #115	; 0x73
 800a42a:	f000 809d 	beq.w	800a568 <_printf_i+0x1a4>
 800a42e:	d808      	bhi.n	800a442 <_printf_i+0x7e>
 800a430:	296f      	cmp	r1, #111	; 0x6f
 800a432:	d020      	beq.n	800a476 <_printf_i+0xb2>
 800a434:	2970      	cmp	r1, #112	; 0x70
 800a436:	d1dd      	bne.n	800a3f4 <_printf_i+0x30>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	f043 0320 	orr.w	r3, r3, #32
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	e003      	b.n	800a44a <_printf_i+0x86>
 800a442:	2975      	cmp	r1, #117	; 0x75
 800a444:	d017      	beq.n	800a476 <_printf_i+0xb2>
 800a446:	2978      	cmp	r1, #120	; 0x78
 800a448:	d1d4      	bne.n	800a3f4 <_printf_i+0x30>
 800a44a:	2378      	movs	r3, #120	; 0x78
 800a44c:	4865      	ldr	r0, [pc, #404]	; (800a5e4 <_printf_i+0x220>)
 800a44e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a452:	e055      	b.n	800a500 <_printf_i+0x13c>
 800a454:	6813      	ldr	r3, [r2, #0]
 800a456:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a45a:	1d19      	adds	r1, r3, #4
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	6011      	str	r1, [r2, #0]
 800a460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a464:	2301      	movs	r3, #1
 800a466:	e08c      	b.n	800a582 <_printf_i+0x1be>
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a46e:	6011      	str	r1, [r2, #0]
 800a470:	bf18      	it	ne
 800a472:	b21b      	sxthne	r3, r3
 800a474:	e7cf      	b.n	800a416 <_printf_i+0x52>
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	6825      	ldr	r5, [r4, #0]
 800a47a:	1d18      	adds	r0, r3, #4
 800a47c:	6010      	str	r0, [r2, #0]
 800a47e:	0628      	lsls	r0, r5, #24
 800a480:	d501      	bpl.n	800a486 <_printf_i+0xc2>
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	e002      	b.n	800a48c <_printf_i+0xc8>
 800a486:	0668      	lsls	r0, r5, #25
 800a488:	d5fb      	bpl.n	800a482 <_printf_i+0xbe>
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	296f      	cmp	r1, #111	; 0x6f
 800a48e:	bf14      	ite	ne
 800a490:	220a      	movne	r2, #10
 800a492:	2208      	moveq	r2, #8
 800a494:	4852      	ldr	r0, [pc, #328]	; (800a5e0 <_printf_i+0x21c>)
 800a496:	2100      	movs	r1, #0
 800a498:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a49c:	6865      	ldr	r5, [r4, #4]
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	60a5      	str	r5, [r4, #8]
 800a4a2:	f2c0 8095 	blt.w	800a5d0 <_printf_i+0x20c>
 800a4a6:	6821      	ldr	r1, [r4, #0]
 800a4a8:	f021 0104 	bic.w	r1, r1, #4
 800a4ac:	6021      	str	r1, [r4, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d13d      	bne.n	800a52e <_printf_i+0x16a>
 800a4b2:	2d00      	cmp	r5, #0
 800a4b4:	f040 808e 	bne.w	800a5d4 <_printf_i+0x210>
 800a4b8:	4665      	mov	r5, ip
 800a4ba:	2a08      	cmp	r2, #8
 800a4bc:	d10b      	bne.n	800a4d6 <_printf_i+0x112>
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	07db      	lsls	r3, r3, #31
 800a4c2:	d508      	bpl.n	800a4d6 <_printf_i+0x112>
 800a4c4:	6923      	ldr	r3, [r4, #16]
 800a4c6:	6862      	ldr	r2, [r4, #4]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	bfde      	ittt	le
 800a4cc:	2330      	movle	r3, #48	; 0x30
 800a4ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4d6:	ebac 0305 	sub.w	r3, ip, r5
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	f8cd 8000 	str.w	r8, [sp]
 800a4e0:	463b      	mov	r3, r7
 800a4e2:	aa03      	add	r2, sp, #12
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	f7ff fef6 	bl	800a2d8 <_printf_common>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d14d      	bne.n	800a58c <_printf_i+0x1c8>
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4f4:	b005      	add	sp, #20
 800a4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4fa:	4839      	ldr	r0, [pc, #228]	; (800a5e0 <_printf_i+0x21c>)
 800a4fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a500:	6813      	ldr	r3, [r2, #0]
 800a502:	6821      	ldr	r1, [r4, #0]
 800a504:	1d1d      	adds	r5, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6015      	str	r5, [r2, #0]
 800a50a:	060a      	lsls	r2, r1, #24
 800a50c:	d50b      	bpl.n	800a526 <_printf_i+0x162>
 800a50e:	07ca      	lsls	r2, r1, #31
 800a510:	bf44      	itt	mi
 800a512:	f041 0120 	orrmi.w	r1, r1, #32
 800a516:	6021      	strmi	r1, [r4, #0]
 800a518:	b91b      	cbnz	r3, 800a522 <_printf_i+0x15e>
 800a51a:	6822      	ldr	r2, [r4, #0]
 800a51c:	f022 0220 	bic.w	r2, r2, #32
 800a520:	6022      	str	r2, [r4, #0]
 800a522:	2210      	movs	r2, #16
 800a524:	e7b7      	b.n	800a496 <_printf_i+0xd2>
 800a526:	064d      	lsls	r5, r1, #25
 800a528:	bf48      	it	mi
 800a52a:	b29b      	uxthmi	r3, r3
 800a52c:	e7ef      	b.n	800a50e <_printf_i+0x14a>
 800a52e:	4665      	mov	r5, ip
 800a530:	fbb3 f1f2 	udiv	r1, r3, r2
 800a534:	fb02 3311 	mls	r3, r2, r1, r3
 800a538:	5cc3      	ldrb	r3, [r0, r3]
 800a53a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a53e:	460b      	mov	r3, r1
 800a540:	2900      	cmp	r1, #0
 800a542:	d1f5      	bne.n	800a530 <_printf_i+0x16c>
 800a544:	e7b9      	b.n	800a4ba <_printf_i+0xf6>
 800a546:	6813      	ldr	r3, [r2, #0]
 800a548:	6825      	ldr	r5, [r4, #0]
 800a54a:	1d18      	adds	r0, r3, #4
 800a54c:	6961      	ldr	r1, [r4, #20]
 800a54e:	6010      	str	r0, [r2, #0]
 800a550:	0628      	lsls	r0, r5, #24
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	d501      	bpl.n	800a55a <_printf_i+0x196>
 800a556:	6019      	str	r1, [r3, #0]
 800a558:	e002      	b.n	800a560 <_printf_i+0x19c>
 800a55a:	066a      	lsls	r2, r5, #25
 800a55c:	d5fb      	bpl.n	800a556 <_printf_i+0x192>
 800a55e:	8019      	strh	r1, [r3, #0]
 800a560:	2300      	movs	r3, #0
 800a562:	4665      	mov	r5, ip
 800a564:	6123      	str	r3, [r4, #16]
 800a566:	e7b9      	b.n	800a4dc <_printf_i+0x118>
 800a568:	6813      	ldr	r3, [r2, #0]
 800a56a:	1d19      	adds	r1, r3, #4
 800a56c:	6011      	str	r1, [r2, #0]
 800a56e:	681d      	ldr	r5, [r3, #0]
 800a570:	6862      	ldr	r2, [r4, #4]
 800a572:	2100      	movs	r1, #0
 800a574:	4628      	mov	r0, r5
 800a576:	f000 f85d 	bl	800a634 <memchr>
 800a57a:	b108      	cbz	r0, 800a580 <_printf_i+0x1bc>
 800a57c:	1b40      	subs	r0, r0, r5
 800a57e:	6060      	str	r0, [r4, #4]
 800a580:	6863      	ldr	r3, [r4, #4]
 800a582:	6123      	str	r3, [r4, #16]
 800a584:	2300      	movs	r3, #0
 800a586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a58a:	e7a7      	b.n	800a4dc <_printf_i+0x118>
 800a58c:	6923      	ldr	r3, [r4, #16]
 800a58e:	462a      	mov	r2, r5
 800a590:	4639      	mov	r1, r7
 800a592:	4630      	mov	r0, r6
 800a594:	47c0      	blx	r8
 800a596:	3001      	adds	r0, #1
 800a598:	d0aa      	beq.n	800a4f0 <_printf_i+0x12c>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	079b      	lsls	r3, r3, #30
 800a59e:	d413      	bmi.n	800a5c8 <_printf_i+0x204>
 800a5a0:	68e0      	ldr	r0, [r4, #12]
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	4298      	cmp	r0, r3
 800a5a6:	bfb8      	it	lt
 800a5a8:	4618      	movlt	r0, r3
 800a5aa:	e7a3      	b.n	800a4f4 <_printf_i+0x130>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	464a      	mov	r2, r9
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	47c0      	blx	r8
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d09a      	beq.n	800a4f0 <_printf_i+0x12c>
 800a5ba:	3501      	adds	r5, #1
 800a5bc:	68e3      	ldr	r3, [r4, #12]
 800a5be:	9a03      	ldr	r2, [sp, #12]
 800a5c0:	1a9b      	subs	r3, r3, r2
 800a5c2:	42ab      	cmp	r3, r5
 800a5c4:	dcf2      	bgt.n	800a5ac <_printf_i+0x1e8>
 800a5c6:	e7eb      	b.n	800a5a0 <_printf_i+0x1dc>
 800a5c8:	2500      	movs	r5, #0
 800a5ca:	f104 0919 	add.w	r9, r4, #25
 800a5ce:	e7f5      	b.n	800a5bc <_printf_i+0x1f8>
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1ac      	bne.n	800a52e <_printf_i+0x16a>
 800a5d4:	7803      	ldrb	r3, [r0, #0]
 800a5d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5de:	e76c      	b.n	800a4ba <_printf_i+0xf6>
 800a5e0:	0800a9cd 	.word	0x0800a9cd
 800a5e4:	0800a9de 	.word	0x0800a9de

0800a5e8 <_sbrk_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	4c05      	ldr	r4, [pc, #20]	; (800a604 <_sbrk_r+0x1c>)
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	f7f7 fbfc 	bl	8001df0 <_sbrk>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_sbrk_r+0x1a>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_sbrk_r+0x1a>
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20001bd0 	.word	0x20001bd0

0800a608 <__ascii_wctomb>:
 800a608:	b149      	cbz	r1, 800a61e <__ascii_wctomb+0x16>
 800a60a:	2aff      	cmp	r2, #255	; 0xff
 800a60c:	bf8b      	itete	hi
 800a60e:	238a      	movhi	r3, #138	; 0x8a
 800a610:	700a      	strbls	r2, [r1, #0]
 800a612:	6003      	strhi	r3, [r0, #0]
 800a614:	2001      	movls	r0, #1
 800a616:	bf88      	it	hi
 800a618:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a61c:	4770      	bx	lr
 800a61e:	4608      	mov	r0, r1
 800a620:	4770      	bx	lr
	...

0800a624 <malloc>:
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <malloc+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f7ff bca9 	b.w	8009f80 <_malloc_r>
 800a62e:	bf00      	nop
 800a630:	2000017c 	.word	0x2000017c

0800a634 <memchr>:
 800a634:	b510      	push	{r4, lr}
 800a636:	b2c9      	uxtb	r1, r1
 800a638:	4402      	add	r2, r0
 800a63a:	4290      	cmp	r0, r2
 800a63c:	4603      	mov	r3, r0
 800a63e:	d101      	bne.n	800a644 <memchr+0x10>
 800a640:	2300      	movs	r3, #0
 800a642:	e003      	b.n	800a64c <memchr+0x18>
 800a644:	781c      	ldrb	r4, [r3, #0]
 800a646:	3001      	adds	r0, #1
 800a648:	428c      	cmp	r4, r1
 800a64a:	d1f6      	bne.n	800a63a <memchr+0x6>
 800a64c:	4618      	mov	r0, r3
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <memmove>:
 800a650:	4288      	cmp	r0, r1
 800a652:	b510      	push	{r4, lr}
 800a654:	eb01 0302 	add.w	r3, r1, r2
 800a658:	d807      	bhi.n	800a66a <memmove+0x1a>
 800a65a:	1e42      	subs	r2, r0, #1
 800a65c:	4299      	cmp	r1, r3
 800a65e:	d00a      	beq.n	800a676 <memmove+0x26>
 800a660:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a664:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a668:	e7f8      	b.n	800a65c <memmove+0xc>
 800a66a:	4283      	cmp	r3, r0
 800a66c:	d9f5      	bls.n	800a65a <memmove+0xa>
 800a66e:	1881      	adds	r1, r0, r2
 800a670:	1ad2      	subs	r2, r2, r3
 800a672:	42d3      	cmn	r3, r2
 800a674:	d100      	bne.n	800a678 <memmove+0x28>
 800a676:	bd10      	pop	{r4, pc}
 800a678:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a67c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a680:	e7f7      	b.n	800a672 <memmove+0x22>

0800a682 <__malloc_lock>:
 800a682:	4770      	bx	lr

0800a684 <__malloc_unlock>:
 800a684:	4770      	bx	lr
	...

0800a688 <_free_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4605      	mov	r5, r0
 800a68c:	2900      	cmp	r1, #0
 800a68e:	d043      	beq.n	800a718 <_free_r+0x90>
 800a690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a694:	1f0c      	subs	r4, r1, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfb8      	it	lt
 800a69a:	18e4      	addlt	r4, r4, r3
 800a69c:	f7ff fff1 	bl	800a682 <__malloc_lock>
 800a6a0:	4a1e      	ldr	r2, [pc, #120]	; (800a71c <_free_r+0x94>)
 800a6a2:	6813      	ldr	r3, [r2, #0]
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	b933      	cbnz	r3, 800a6b6 <_free_r+0x2e>
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	6014      	str	r4, [r2, #0]
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b2:	f7ff bfe7 	b.w	800a684 <__malloc_unlock>
 800a6b6:	42a3      	cmp	r3, r4
 800a6b8:	d90b      	bls.n	800a6d2 <_free_r+0x4a>
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	1862      	adds	r2, r4, r1
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	bf01      	itttt	eq
 800a6c2:	681a      	ldreq	r2, [r3, #0]
 800a6c4:	685b      	ldreq	r3, [r3, #4]
 800a6c6:	1852      	addeq	r2, r2, r1
 800a6c8:	6022      	streq	r2, [r4, #0]
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	6004      	str	r4, [r0, #0]
 800a6ce:	e7ed      	b.n	800a6ac <_free_r+0x24>
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	b10a      	cbz	r2, 800a6da <_free_r+0x52>
 800a6d6:	42a2      	cmp	r2, r4
 800a6d8:	d9fa      	bls.n	800a6d0 <_free_r+0x48>
 800a6da:	6819      	ldr	r1, [r3, #0]
 800a6dc:	1858      	adds	r0, r3, r1
 800a6de:	42a0      	cmp	r0, r4
 800a6e0:	d10b      	bne.n	800a6fa <_free_r+0x72>
 800a6e2:	6820      	ldr	r0, [r4, #0]
 800a6e4:	4401      	add	r1, r0
 800a6e6:	1858      	adds	r0, r3, r1
 800a6e8:	4282      	cmp	r2, r0
 800a6ea:	6019      	str	r1, [r3, #0]
 800a6ec:	d1de      	bne.n	800a6ac <_free_r+0x24>
 800a6ee:	6810      	ldr	r0, [r2, #0]
 800a6f0:	6852      	ldr	r2, [r2, #4]
 800a6f2:	4401      	add	r1, r0
 800a6f4:	6019      	str	r1, [r3, #0]
 800a6f6:	605a      	str	r2, [r3, #4]
 800a6f8:	e7d8      	b.n	800a6ac <_free_r+0x24>
 800a6fa:	d902      	bls.n	800a702 <_free_r+0x7a>
 800a6fc:	230c      	movs	r3, #12
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	e7d4      	b.n	800a6ac <_free_r+0x24>
 800a702:	6820      	ldr	r0, [r4, #0]
 800a704:	1821      	adds	r1, r4, r0
 800a706:	428a      	cmp	r2, r1
 800a708:	bf01      	itttt	eq
 800a70a:	6811      	ldreq	r1, [r2, #0]
 800a70c:	6852      	ldreq	r2, [r2, #4]
 800a70e:	1809      	addeq	r1, r1, r0
 800a710:	6021      	streq	r1, [r4, #0]
 800a712:	6062      	str	r2, [r4, #4]
 800a714:	605c      	str	r4, [r3, #4]
 800a716:	e7c9      	b.n	800a6ac <_free_r+0x24>
 800a718:	bd38      	pop	{r3, r4, r5, pc}
 800a71a:	bf00      	nop
 800a71c:	20000594 	.word	0x20000594

0800a720 <_realloc_r>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	4607      	mov	r7, r0
 800a724:	4614      	mov	r4, r2
 800a726:	460e      	mov	r6, r1
 800a728:	b921      	cbnz	r1, 800a734 <_realloc_r+0x14>
 800a72a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a72e:	4611      	mov	r1, r2
 800a730:	f7ff bc26 	b.w	8009f80 <_malloc_r>
 800a734:	b922      	cbnz	r2, 800a740 <_realloc_r+0x20>
 800a736:	f7ff ffa7 	bl	800a688 <_free_r>
 800a73a:	4625      	mov	r5, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a740:	f000 f814 	bl	800a76c <_malloc_usable_size_r>
 800a744:	42a0      	cmp	r0, r4
 800a746:	d20f      	bcs.n	800a768 <_realloc_r+0x48>
 800a748:	4621      	mov	r1, r4
 800a74a:	4638      	mov	r0, r7
 800a74c:	f7ff fc18 	bl	8009f80 <_malloc_r>
 800a750:	4605      	mov	r5, r0
 800a752:	2800      	cmp	r0, #0
 800a754:	d0f2      	beq.n	800a73c <_realloc_r+0x1c>
 800a756:	4631      	mov	r1, r6
 800a758:	4622      	mov	r2, r4
 800a75a:	f7ff f800 	bl	800975e <memcpy>
 800a75e:	4631      	mov	r1, r6
 800a760:	4638      	mov	r0, r7
 800a762:	f7ff ff91 	bl	800a688 <_free_r>
 800a766:	e7e9      	b.n	800a73c <_realloc_r+0x1c>
 800a768:	4635      	mov	r5, r6
 800a76a:	e7e7      	b.n	800a73c <_realloc_r+0x1c>

0800a76c <_malloc_usable_size_r>:
 800a76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a770:	1f18      	subs	r0, r3, #4
 800a772:	2b00      	cmp	r3, #0
 800a774:	bfbc      	itt	lt
 800a776:	580b      	ldrlt	r3, [r1, r0]
 800a778:	18c0      	addlt	r0, r0, r3
 800a77a:	4770      	bx	lr

0800a77c <_init>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	bf00      	nop
 800a780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a782:	bc08      	pop	{r3}
 800a784:	469e      	mov	lr, r3
 800a786:	4770      	bx	lr

0800a788 <_fini>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr
